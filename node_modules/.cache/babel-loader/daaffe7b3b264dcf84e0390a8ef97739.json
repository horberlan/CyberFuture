{"ast":null,"code":"/**\n * @license React\n * scheduler-unstable_mock.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function () {\n    'use strict';\n\n    var enableSchedulerDebugging = false;\n    var enableProfiling = false;\n\n    function push(heap, node) {\n      var index = heap.length;\n      heap.push(node);\n      siftUp(heap, node, index);\n    }\n\n    function peek(heap) {\n      return heap.length === 0 ? null : heap[0];\n    }\n\n    function pop(heap) {\n      if (heap.length === 0) {\n        return null;\n      }\n\n      var first = heap[0];\n      var last = heap.pop();\n\n      if (last !== first) {\n        heap[0] = last;\n        siftDown(heap, last, 0);\n      }\n\n      return first;\n    }\n\n    function siftUp(heap, node, i) {\n      var index = i;\n\n      while (index > 0) {\n        var parentIndex = index - 1 >>> 1;\n        var parent = heap[parentIndex];\n\n        if (compare(parent, node) > 0) {\n          // The parent is larger. Swap positions.\n          heap[parentIndex] = node;\n          heap[index] = parent;\n          index = parentIndex;\n        } else {\n          // The parent is smaller. Exit.\n          return;\n        }\n      }\n    }\n\n    function siftDown(heap, node, i) {\n      var index = i;\n      var length = heap.length;\n      var halfLength = length >>> 1;\n\n      while (index < halfLength) {\n        var leftIndex = (index + 1) * 2 - 1;\n        var left = heap[leftIndex];\n        var rightIndex = leftIndex + 1;\n        var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.\n\n        if (compare(left, node) < 0) {\n          if (rightIndex < length && compare(right, left) < 0) {\n            heap[index] = right;\n            heap[rightIndex] = node;\n            index = rightIndex;\n          } else {\n            heap[index] = left;\n            heap[leftIndex] = node;\n            index = leftIndex;\n          }\n        } else if (rightIndex < length && compare(right, node) < 0) {\n          heap[index] = right;\n          heap[rightIndex] = node;\n          index = rightIndex;\n        } else {\n          // Neither child is smaller. Exit.\n          return;\n        }\n      }\n    }\n\n    function compare(a, b) {\n      // Compare sort index first, then task id.\n      var diff = a.sortIndex - b.sortIndex;\n      return diff !== 0 ? diff : a.id - b.id;\n    } // TODO: Use symbols?\n\n\n    var ImmediatePriority = 1;\n    var UserBlockingPriority = 2;\n    var NormalPriority = 3;\n    var LowPriority = 4;\n    var IdlePriority = 5;\n\n    function markTaskErrored(task, ms) {}\n    /* eslint-disable no-var */\n    // Math.pow(2, 30) - 1\n    // 0b111111111111111111111111111111\n\n\n    var maxSigned31BitInt = 1073741823; // Times out immediately\n\n    var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out\n\n    var USER_BLOCKING_PRIORITY_TIMEOUT = 250;\n    var NORMAL_PRIORITY_TIMEOUT = 5000;\n    var LOW_PRIORITY_TIMEOUT = 10000; // Never times out\n\n    var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap\n\n    var taskQueue = [];\n    var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.\n\n    var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.\n\n    var currentTask = null;\n    var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrance.\n\n    var isPerformingWork = false;\n    var isHostCallbackScheduled = false;\n    var isHostTimeoutScheduled = false;\n    var currentMockTime = 0;\n    var scheduledCallback = null;\n    var scheduledTimeout = null;\n    var timeoutTime = -1;\n    var yieldedValues = null;\n    var expectedNumberOfYields = -1;\n    var didStop = false;\n    var isFlushing = false;\n    var needsPaint = false;\n    var shouldYieldForPaint = false;\n    var disableYieldValue = false;\n\n    function setDisableYieldValue(newValue) {\n      disableYieldValue = newValue;\n    }\n\n    function advanceTimers(currentTime) {\n      // Check for tasks that are no longer delayed and add them to the queue.\n      var timer = peek(timerQueue);\n\n      while (timer !== null) {\n        if (timer.callback === null) {\n          // Timer was cancelled.\n          pop(timerQueue);\n        } else if (timer.startTime <= currentTime) {\n          // Timer fired. Transfer to the task queue.\n          pop(timerQueue);\n          timer.sortIndex = timer.expirationTime;\n          push(taskQueue, timer);\n        } else {\n          // Remaining timers are pending.\n          return;\n        }\n\n        timer = peek(timerQueue);\n      }\n    }\n\n    function handleTimeout(currentTime) {\n      isHostTimeoutScheduled = false;\n      advanceTimers(currentTime);\n\n      if (!isHostCallbackScheduled) {\n        if (peek(taskQueue) !== null) {\n          isHostCallbackScheduled = true;\n          requestHostCallback(flushWork);\n        } else {\n          var firstTimer = peek(timerQueue);\n\n          if (firstTimer !== null) {\n            requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n          }\n        }\n      }\n    }\n\n    function flushWork(hasTimeRemaining, initialTime) {\n      isHostCallbackScheduled = false;\n\n      if (isHostTimeoutScheduled) {\n        // We scheduled a timeout but it's no longer needed. Cancel it.\n        isHostTimeoutScheduled = false;\n        cancelHostTimeout();\n      }\n\n      isPerformingWork = true;\n      var previousPriorityLevel = currentPriorityLevel;\n\n      try {\n        if (enableProfiling) {\n          try {\n            return workLoop(hasTimeRemaining, initialTime);\n          } catch (error) {\n            if (currentTask !== null) {\n              var currentTime = getCurrentTime();\n              markTaskErrored(currentTask, currentTime);\n              currentTask.isQueued = false;\n            }\n\n            throw error;\n          }\n        } else {\n          // No catch in prod code path.\n          return workLoop(hasTimeRemaining, initialTime);\n        }\n      } finally {\n        currentTask = null;\n        currentPriorityLevel = previousPriorityLevel;\n        isPerformingWork = false;\n      }\n    }\n\n    function workLoop(hasTimeRemaining, initialTime) {\n      var currentTime = initialTime;\n      advanceTimers(currentTime);\n      currentTask = peek(taskQueue);\n\n      while (currentTask !== null && !enableSchedulerDebugging) {\n        if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {\n          // This currentTask hasn't expired, and we've reached the deadline.\n          break;\n        }\n\n        var callback = currentTask.callback;\n\n        if (typeof callback === 'function') {\n          currentTask.callback = null;\n          currentPriorityLevel = currentTask.priorityLevel;\n          var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\n          var continuationCallback = callback(didUserCallbackTimeout);\n          currentTime = getCurrentTime();\n\n          if (typeof continuationCallback === 'function') {\n            currentTask.callback = continuationCallback;\n          } else {\n            if (currentTask === peek(taskQueue)) {\n              pop(taskQueue);\n            }\n          }\n\n          advanceTimers(currentTime);\n        } else {\n          pop(taskQueue);\n        }\n\n        currentTask = peek(taskQueue);\n      } // Return whether there's additional work\n\n\n      if (currentTask !== null) {\n        return true;\n      } else {\n        var firstTimer = peek(timerQueue);\n\n        if (firstTimer !== null) {\n          requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n        }\n\n        return false;\n      }\n    }\n\n    function unstable_runWithPriority(priorityLevel, eventHandler) {\n      switch (priorityLevel) {\n        case ImmediatePriority:\n        case UserBlockingPriority:\n        case NormalPriority:\n        case LowPriority:\n        case IdlePriority:\n          break;\n\n        default:\n          priorityLevel = NormalPriority;\n      }\n\n      var previousPriorityLevel = currentPriorityLevel;\n      currentPriorityLevel = priorityLevel;\n\n      try {\n        return eventHandler();\n      } finally {\n        currentPriorityLevel = previousPriorityLevel;\n      }\n    }\n\n    function unstable_next(eventHandler) {\n      var priorityLevel;\n\n      switch (currentPriorityLevel) {\n        case ImmediatePriority:\n        case UserBlockingPriority:\n        case NormalPriority:\n          // Shift down to normal priority\n          priorityLevel = NormalPriority;\n          break;\n\n        default:\n          // Anything lower than normal priority should remain at the current level.\n          priorityLevel = currentPriorityLevel;\n          break;\n      }\n\n      var previousPriorityLevel = currentPriorityLevel;\n      currentPriorityLevel = priorityLevel;\n\n      try {\n        return eventHandler();\n      } finally {\n        currentPriorityLevel = previousPriorityLevel;\n      }\n    }\n\n    function unstable_wrapCallback(callback) {\n      var parentPriorityLevel = currentPriorityLevel;\n      return function () {\n        // This is a fork of runWithPriority, inlined for performance.\n        var previousPriorityLevel = currentPriorityLevel;\n        currentPriorityLevel = parentPriorityLevel;\n\n        try {\n          return callback.apply(this, arguments);\n        } finally {\n          currentPriorityLevel = previousPriorityLevel;\n        }\n      };\n    }\n\n    function unstable_scheduleCallback(priorityLevel, callback, options) {\n      var currentTime = getCurrentTime();\n      var startTime;\n\n      if (typeof options === 'object' && options !== null) {\n        var delay = options.delay;\n\n        if (typeof delay === 'number' && delay > 0) {\n          startTime = currentTime + delay;\n        } else {\n          startTime = currentTime;\n        }\n      } else {\n        startTime = currentTime;\n      }\n\n      var timeout;\n\n      switch (priorityLevel) {\n        case ImmediatePriority:\n          timeout = IMMEDIATE_PRIORITY_TIMEOUT;\n          break;\n\n        case UserBlockingPriority:\n          timeout = USER_BLOCKING_PRIORITY_TIMEOUT;\n          break;\n\n        case IdlePriority:\n          timeout = IDLE_PRIORITY_TIMEOUT;\n          break;\n\n        case LowPriority:\n          timeout = LOW_PRIORITY_TIMEOUT;\n          break;\n\n        case NormalPriority:\n        default:\n          timeout = NORMAL_PRIORITY_TIMEOUT;\n          break;\n      }\n\n      var expirationTime = startTime + timeout;\n      var newTask = {\n        id: taskIdCounter++,\n        callback: callback,\n        priorityLevel: priorityLevel,\n        startTime: startTime,\n        expirationTime: expirationTime,\n        sortIndex: -1\n      };\n\n      if (startTime > currentTime) {\n        // This is a delayed task.\n        newTask.sortIndex = startTime;\n        push(timerQueue, newTask);\n\n        if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\n          // All tasks are delayed, and this is the task with the earliest delay.\n          if (isHostTimeoutScheduled) {\n            // Cancel an existing timeout.\n            cancelHostTimeout();\n          } else {\n            isHostTimeoutScheduled = true;\n          } // Schedule a timeout.\n\n\n          requestHostTimeout(handleTimeout, startTime - currentTime);\n        }\n      } else {\n        newTask.sortIndex = expirationTime;\n        push(taskQueue, newTask); // wait until the next time we yield.\n\n        if (!isHostCallbackScheduled && !isPerformingWork) {\n          isHostCallbackScheduled = true;\n          requestHostCallback(flushWork);\n        }\n      }\n\n      return newTask;\n    }\n\n    function unstable_pauseExecution() {}\n\n    function unstable_continueExecution() {\n      if (!isHostCallbackScheduled && !isPerformingWork) {\n        isHostCallbackScheduled = true;\n        requestHostCallback(flushWork);\n      }\n    }\n\n    function unstable_getFirstCallbackNode() {\n      return peek(taskQueue);\n    }\n\n    function unstable_cancelCallback(task) {\n      // remove from the queue because you can't remove arbitrary nodes from an\n      // array based heap, only the first one.)\n      task.callback = null;\n    }\n\n    function unstable_getCurrentPriorityLevel() {\n      return currentPriorityLevel;\n    }\n\n    function requestHostCallback(callback) {\n      scheduledCallback = callback;\n    }\n\n    function requestHostTimeout(callback, ms) {\n      scheduledTimeout = callback;\n      timeoutTime = currentMockTime + ms;\n    }\n\n    function cancelHostTimeout() {\n      scheduledTimeout = null;\n      timeoutTime = -1;\n    }\n\n    function shouldYieldToHost() {\n      if (expectedNumberOfYields === 0 && yieldedValues === null || expectedNumberOfYields !== -1 && yieldedValues !== null && yieldedValues.length >= expectedNumberOfYields || shouldYieldForPaint && needsPaint) {\n        // We yielded at least as many values as expected. Stop flushing.\n        didStop = true;\n        return true;\n      }\n\n      return false;\n    }\n\n    function getCurrentTime() {\n      return currentMockTime;\n    }\n\n    function forceFrameRate() {// No-op\n    }\n\n    function reset() {\n      if (isFlushing) {\n        throw new Error('Cannot reset while already flushing work.');\n      }\n\n      currentMockTime = 0;\n      scheduledCallback = null;\n      scheduledTimeout = null;\n      timeoutTime = -1;\n      yieldedValues = null;\n      expectedNumberOfYields = -1;\n      didStop = false;\n      isFlushing = false;\n      needsPaint = false;\n    } // Should only be used via an assertion helper that inspects the yielded values.\n\n\n    function unstable_flushNumberOfYields(count) {\n      if (isFlushing) {\n        throw new Error('Already flushing work.');\n      }\n\n      if (scheduledCallback !== null) {\n        var cb = scheduledCallback;\n        expectedNumberOfYields = count;\n        isFlushing = true;\n\n        try {\n          var hasMoreWork = true;\n\n          do {\n            hasMoreWork = cb(true, currentMockTime);\n          } while (hasMoreWork && !didStop);\n\n          if (!hasMoreWork) {\n            scheduledCallback = null;\n          }\n        } finally {\n          expectedNumberOfYields = -1;\n          didStop = false;\n          isFlushing = false;\n        }\n      }\n    }\n\n    function unstable_flushUntilNextPaint() {\n      if (isFlushing) {\n        throw new Error('Already flushing work.');\n      }\n\n      if (scheduledCallback !== null) {\n        var cb = scheduledCallback;\n        shouldYieldForPaint = true;\n        needsPaint = false;\n        isFlushing = true;\n\n        try {\n          var hasMoreWork = true;\n\n          do {\n            hasMoreWork = cb(true, currentMockTime);\n          } while (hasMoreWork && !didStop);\n\n          if (!hasMoreWork) {\n            scheduledCallback = null;\n          }\n        } finally {\n          shouldYieldForPaint = false;\n          didStop = false;\n          isFlushing = false;\n        }\n      }\n    }\n\n    function unstable_flushExpired() {\n      if (isFlushing) {\n        throw new Error('Already flushing work.');\n      }\n\n      if (scheduledCallback !== null) {\n        isFlushing = true;\n\n        try {\n          var hasMoreWork = scheduledCallback(false, currentMockTime);\n\n          if (!hasMoreWork) {\n            scheduledCallback = null;\n          }\n        } finally {\n          isFlushing = false;\n        }\n      }\n    }\n\n    function unstable_flushAllWithoutAsserting() {\n      // Returns false if no work was flushed.\n      if (isFlushing) {\n        throw new Error('Already flushing work.');\n      }\n\n      if (scheduledCallback !== null) {\n        var cb = scheduledCallback;\n        isFlushing = true;\n\n        try {\n          var hasMoreWork = true;\n\n          do {\n            hasMoreWork = cb(true, currentMockTime);\n          } while (hasMoreWork);\n\n          if (!hasMoreWork) {\n            scheduledCallback = null;\n          }\n\n          return true;\n        } finally {\n          isFlushing = false;\n        }\n      } else {\n        return false;\n      }\n    }\n\n    function unstable_clearYields() {\n      if (yieldedValues === null) {\n        return [];\n      }\n\n      var values = yieldedValues;\n      yieldedValues = null;\n      return values;\n    }\n\n    function unstable_flushAll() {\n      if (yieldedValues !== null) {\n        throw new Error('Log is not empty. Assert on the log of yielded values before ' + 'flushing additional work.');\n      }\n\n      unstable_flushAllWithoutAsserting();\n\n      if (yieldedValues !== null) {\n        throw new Error('While flushing work, something yielded a value. Use an ' + 'assertion helper to assert on the log of yielded values, e.g. ' + 'expect(Scheduler).toFlushAndYield([...])');\n      }\n    }\n\n    function unstable_yieldValue(value) {\n      // eslint-disable-next-line react-internal/no-production-logging\n      if (console.log.name === 'disabledLog' || disableYieldValue) {\n        // If console.log has been patched, we assume we're in render\n        // replaying and we ignore any values yielding in the second pass.\n        return;\n      }\n\n      if (yieldedValues === null) {\n        yieldedValues = [value];\n      } else {\n        yieldedValues.push(value);\n      }\n    }\n\n    function unstable_advanceTime(ms) {\n      // eslint-disable-next-line react-internal/no-production-logging\n      if (console.log.name === 'disabledLog' || disableYieldValue) {\n        // If console.log has been patched, we assume we're in render\n        // replaying and we ignore any time advancing in the second pass.\n        return;\n      }\n\n      currentMockTime += ms;\n\n      if (scheduledTimeout !== null && timeoutTime <= currentMockTime) {\n        scheduledTimeout(currentMockTime);\n        timeoutTime = -1;\n        scheduledTimeout = null;\n      }\n    }\n\n    function requestPaint() {\n      needsPaint = true;\n    }\n\n    var unstable_Profiling = null;\n    exports.reset = reset;\n    exports.unstable_IdlePriority = IdlePriority;\n    exports.unstable_ImmediatePriority = ImmediatePriority;\n    exports.unstable_LowPriority = LowPriority;\n    exports.unstable_NormalPriority = NormalPriority;\n    exports.unstable_Profiling = unstable_Profiling;\n    exports.unstable_UserBlockingPriority = UserBlockingPriority;\n    exports.unstable_advanceTime = unstable_advanceTime;\n    exports.unstable_cancelCallback = unstable_cancelCallback;\n    exports.unstable_clearYields = unstable_clearYields;\n    exports.unstable_continueExecution = unstable_continueExecution;\n    exports.unstable_flushAll = unstable_flushAll;\n    exports.unstable_flushAllWithoutAsserting = unstable_flushAllWithoutAsserting;\n    exports.unstable_flushExpired = unstable_flushExpired;\n    exports.unstable_flushNumberOfYields = unstable_flushNumberOfYields;\n    exports.unstable_flushUntilNextPaint = unstable_flushUntilNextPaint;\n    exports.unstable_forceFrameRate = forceFrameRate;\n    exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;\n    exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;\n    exports.unstable_next = unstable_next;\n    exports.unstable_now = getCurrentTime;\n    exports.unstable_pauseExecution = unstable_pauseExecution;\n    exports.unstable_requestPaint = requestPaint;\n    exports.unstable_runWithPriority = unstable_runWithPriority;\n    exports.unstable_scheduleCallback = unstable_scheduleCallback;\n    exports.unstable_setDisableYieldValue = setDisableYieldValue;\n    exports.unstable_shouldYield = shouldYieldToHost;\n    exports.unstable_wrapCallback = unstable_wrapCallback;\n    exports.unstable_yieldValue = unstable_yieldValue;\n  })();\n}","map":{"version":3,"sources":["/home/horberlan/source/npm-package/cyberfuture/node_modules/scheduler/cjs/scheduler-unstable_mock.development.js"],"names":["process","env","NODE_ENV","enableSchedulerDebugging","enableProfiling","push","heap","node","index","length","siftUp","peek","pop","first","last","siftDown","i","parentIndex","parent","compare","halfLength","leftIndex","left","rightIndex","right","a","b","diff","sortIndex","id","ImmediatePriority","UserBlockingPriority","NormalPriority","LowPriority","IdlePriority","markTaskErrored","task","ms","maxSigned31BitInt","IMMEDIATE_PRIORITY_TIMEOUT","USER_BLOCKING_PRIORITY_TIMEOUT","NORMAL_PRIORITY_TIMEOUT","LOW_PRIORITY_TIMEOUT","IDLE_PRIORITY_TIMEOUT","taskQueue","timerQueue","taskIdCounter","currentTask","currentPriorityLevel","isPerformingWork","isHostCallbackScheduled","isHostTimeoutScheduled","currentMockTime","scheduledCallback","scheduledTimeout","timeoutTime","yieldedValues","expectedNumberOfYields","didStop","isFlushing","needsPaint","shouldYieldForPaint","disableYieldValue","setDisableYieldValue","newValue","advanceTimers","currentTime","timer","callback","startTime","expirationTime","handleTimeout","requestHostCallback","flushWork","firstTimer","requestHostTimeout","hasTimeRemaining","initialTime","cancelHostTimeout","previousPriorityLevel","workLoop","error","getCurrentTime","isQueued","shouldYieldToHost","priorityLevel","didUserCallbackTimeout","continuationCallback","unstable_runWithPriority","eventHandler","unstable_next","unstable_wrapCallback","parentPriorityLevel","apply","arguments","unstable_scheduleCallback","options","delay","timeout","newTask","unstable_pauseExecution","unstable_continueExecution","unstable_getFirstCallbackNode","unstable_cancelCallback","unstable_getCurrentPriorityLevel","forceFrameRate","reset","Error","unstable_flushNumberOfYields","count","cb","hasMoreWork","unstable_flushUntilNextPaint","unstable_flushExpired","unstable_flushAllWithoutAsserting","unstable_clearYields","values","unstable_flushAll","unstable_yieldValue","value","console","log","name","unstable_advanceTime","requestPaint","unstable_Profiling","exports","unstable_IdlePriority","unstable_ImmediatePriority","unstable_LowPriority","unstable_NormalPriority","unstable_UserBlockingPriority","unstable_forceFrameRate","unstable_now","unstable_requestPaint","unstable_setDisableYieldValue","unstable_shouldYield"],"mappings":"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","sourcesContent":["/**\n * @license React\n * scheduler-unstable_mock.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function() {\n'use strict';\n\nvar enableSchedulerDebugging = false;\nvar enableProfiling = false;\n\nfunction push(heap, node) {\n  var index = heap.length;\n  heap.push(node);\n  siftUp(heap, node, index);\n}\nfunction peek(heap) {\n  return heap.length === 0 ? null : heap[0];\n}\nfunction pop(heap) {\n  if (heap.length === 0) {\n    return null;\n  }\n\n  var first = heap[0];\n  var last = heap.pop();\n\n  if (last !== first) {\n    heap[0] = last;\n    siftDown(heap, last, 0);\n  }\n\n  return first;\n}\n\nfunction siftUp(heap, node, i) {\n  var index = i;\n\n  while (index > 0) {\n    var parentIndex = index - 1 >>> 1;\n    var parent = heap[parentIndex];\n\n    if (compare(parent, node) > 0) {\n      // The parent is larger. Swap positions.\n      heap[parentIndex] = node;\n      heap[index] = parent;\n      index = parentIndex;\n    } else {\n      // The parent is smaller. Exit.\n      return;\n    }\n  }\n}\n\nfunction siftDown(heap, node, i) {\n  var index = i;\n  var length = heap.length;\n  var halfLength = length >>> 1;\n\n  while (index < halfLength) {\n    var leftIndex = (index + 1) * 2 - 1;\n    var left = heap[leftIndex];\n    var rightIndex = leftIndex + 1;\n    var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.\n\n    if (compare(left, node) < 0) {\n      if (rightIndex < length && compare(right, left) < 0) {\n        heap[index] = right;\n        heap[rightIndex] = node;\n        index = rightIndex;\n      } else {\n        heap[index] = left;\n        heap[leftIndex] = node;\n        index = leftIndex;\n      }\n    } else if (rightIndex < length && compare(right, node) < 0) {\n      heap[index] = right;\n      heap[rightIndex] = node;\n      index = rightIndex;\n    } else {\n      // Neither child is smaller. Exit.\n      return;\n    }\n  }\n}\n\nfunction compare(a, b) {\n  // Compare sort index first, then task id.\n  var diff = a.sortIndex - b.sortIndex;\n  return diff !== 0 ? diff : a.id - b.id;\n}\n\n// TODO: Use symbols?\nvar ImmediatePriority = 1;\nvar UserBlockingPriority = 2;\nvar NormalPriority = 3;\nvar LowPriority = 4;\nvar IdlePriority = 5;\n\nfunction markTaskErrored(task, ms) {\n}\n\n/* eslint-disable no-var */\n// Math.pow(2, 30) - 1\n// 0b111111111111111111111111111111\n\nvar maxSigned31BitInt = 1073741823; // Times out immediately\n\nvar IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out\n\nvar USER_BLOCKING_PRIORITY_TIMEOUT = 250;\nvar NORMAL_PRIORITY_TIMEOUT = 5000;\nvar LOW_PRIORITY_TIMEOUT = 10000; // Never times out\n\nvar IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap\n\nvar taskQueue = [];\nvar timerQueue = []; // Incrementing id counter. Used to maintain insertion order.\n\nvar taskIdCounter = 1; // Pausing the scheduler is useful for debugging.\nvar currentTask = null;\nvar currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrance.\n\nvar isPerformingWork = false;\nvar isHostCallbackScheduled = false;\nvar isHostTimeoutScheduled = false;\nvar currentMockTime = 0;\nvar scheduledCallback = null;\nvar scheduledTimeout = null;\nvar timeoutTime = -1;\nvar yieldedValues = null;\nvar expectedNumberOfYields = -1;\nvar didStop = false;\nvar isFlushing = false;\nvar needsPaint = false;\nvar shouldYieldForPaint = false;\nvar disableYieldValue = false;\n\nfunction setDisableYieldValue(newValue) {\n  disableYieldValue = newValue;\n}\n\nfunction advanceTimers(currentTime) {\n  // Check for tasks that are no longer delayed and add them to the queue.\n  var timer = peek(timerQueue);\n\n  while (timer !== null) {\n    if (timer.callback === null) {\n      // Timer was cancelled.\n      pop(timerQueue);\n    } else if (timer.startTime <= currentTime) {\n      // Timer fired. Transfer to the task queue.\n      pop(timerQueue);\n      timer.sortIndex = timer.expirationTime;\n      push(taskQueue, timer);\n    } else {\n      // Remaining timers are pending.\n      return;\n    }\n\n    timer = peek(timerQueue);\n  }\n}\n\nfunction handleTimeout(currentTime) {\n  isHostTimeoutScheduled = false;\n  advanceTimers(currentTime);\n\n  if (!isHostCallbackScheduled) {\n    if (peek(taskQueue) !== null) {\n      isHostCallbackScheduled = true;\n      requestHostCallback(flushWork);\n    } else {\n      var firstTimer = peek(timerQueue);\n\n      if (firstTimer !== null) {\n        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n      }\n    }\n  }\n}\n\nfunction flushWork(hasTimeRemaining, initialTime) {\n\n\n  isHostCallbackScheduled = false;\n\n  if (isHostTimeoutScheduled) {\n    // We scheduled a timeout but it's no longer needed. Cancel it.\n    isHostTimeoutScheduled = false;\n    cancelHostTimeout();\n  }\n\n  isPerformingWork = true;\n  var previousPriorityLevel = currentPriorityLevel;\n\n  try {\n    if (enableProfiling) {\n      try {\n        return workLoop(hasTimeRemaining, initialTime);\n      } catch (error) {\n        if (currentTask !== null) {\n          var currentTime = getCurrentTime();\n          markTaskErrored(currentTask, currentTime);\n          currentTask.isQueued = false;\n        }\n\n        throw error;\n      }\n    } else {\n      // No catch in prod code path.\n      return workLoop(hasTimeRemaining, initialTime);\n    }\n  } finally {\n    currentTask = null;\n    currentPriorityLevel = previousPriorityLevel;\n    isPerformingWork = false;\n  }\n}\n\nfunction workLoop(hasTimeRemaining, initialTime) {\n  var currentTime = initialTime;\n  advanceTimers(currentTime);\n  currentTask = peek(taskQueue);\n\n  while (currentTask !== null && !(enableSchedulerDebugging )) {\n    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {\n      // This currentTask hasn't expired, and we've reached the deadline.\n      break;\n    }\n\n    var callback = currentTask.callback;\n\n    if (typeof callback === 'function') {\n      currentTask.callback = null;\n      currentPriorityLevel = currentTask.priorityLevel;\n      var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\n\n      var continuationCallback = callback(didUserCallbackTimeout);\n      currentTime = getCurrentTime();\n\n      if (typeof continuationCallback === 'function') {\n        currentTask.callback = continuationCallback;\n      } else {\n\n        if (currentTask === peek(taskQueue)) {\n          pop(taskQueue);\n        }\n      }\n\n      advanceTimers(currentTime);\n    } else {\n      pop(taskQueue);\n    }\n\n    currentTask = peek(taskQueue);\n  } // Return whether there's additional work\n\n\n  if (currentTask !== null) {\n    return true;\n  } else {\n    var firstTimer = peek(timerQueue);\n\n    if (firstTimer !== null) {\n      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n    }\n\n    return false;\n  }\n}\n\nfunction unstable_runWithPriority(priorityLevel, eventHandler) {\n  switch (priorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n    case LowPriority:\n    case IdlePriority:\n      break;\n\n    default:\n      priorityLevel = NormalPriority;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction unstable_next(eventHandler) {\n  var priorityLevel;\n\n  switch (currentPriorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n      // Shift down to normal priority\n      priorityLevel = NormalPriority;\n      break;\n\n    default:\n      // Anything lower than normal priority should remain at the current level.\n      priorityLevel = currentPriorityLevel;\n      break;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction unstable_wrapCallback(callback) {\n  var parentPriorityLevel = currentPriorityLevel;\n  return function () {\n    // This is a fork of runWithPriority, inlined for performance.\n    var previousPriorityLevel = currentPriorityLevel;\n    currentPriorityLevel = parentPriorityLevel;\n\n    try {\n      return callback.apply(this, arguments);\n    } finally {\n      currentPriorityLevel = previousPriorityLevel;\n    }\n  };\n}\n\nfunction unstable_scheduleCallback(priorityLevel, callback, options) {\n  var currentTime = getCurrentTime();\n  var startTime;\n\n  if (typeof options === 'object' && options !== null) {\n    var delay = options.delay;\n\n    if (typeof delay === 'number' && delay > 0) {\n      startTime = currentTime + delay;\n    } else {\n      startTime = currentTime;\n    }\n  } else {\n    startTime = currentTime;\n  }\n\n  var timeout;\n\n  switch (priorityLevel) {\n    case ImmediatePriority:\n      timeout = IMMEDIATE_PRIORITY_TIMEOUT;\n      break;\n\n    case UserBlockingPriority:\n      timeout = USER_BLOCKING_PRIORITY_TIMEOUT;\n      break;\n\n    case IdlePriority:\n      timeout = IDLE_PRIORITY_TIMEOUT;\n      break;\n\n    case LowPriority:\n      timeout = LOW_PRIORITY_TIMEOUT;\n      break;\n\n    case NormalPriority:\n    default:\n      timeout = NORMAL_PRIORITY_TIMEOUT;\n      break;\n  }\n\n  var expirationTime = startTime + timeout;\n  var newTask = {\n    id: taskIdCounter++,\n    callback: callback,\n    priorityLevel: priorityLevel,\n    startTime: startTime,\n    expirationTime: expirationTime,\n    sortIndex: -1\n  };\n\n  if (startTime > currentTime) {\n    // This is a delayed task.\n    newTask.sortIndex = startTime;\n    push(timerQueue, newTask);\n\n    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\n      // All tasks are delayed, and this is the task with the earliest delay.\n      if (isHostTimeoutScheduled) {\n        // Cancel an existing timeout.\n        cancelHostTimeout();\n      } else {\n        isHostTimeoutScheduled = true;\n      } // Schedule a timeout.\n\n\n      requestHostTimeout(handleTimeout, startTime - currentTime);\n    }\n  } else {\n    newTask.sortIndex = expirationTime;\n    push(taskQueue, newTask);\n    // wait until the next time we yield.\n\n\n    if (!isHostCallbackScheduled && !isPerformingWork) {\n      isHostCallbackScheduled = true;\n      requestHostCallback(flushWork);\n    }\n  }\n\n  return newTask;\n}\n\nfunction unstable_pauseExecution() {\n}\n\nfunction unstable_continueExecution() {\n\n  if (!isHostCallbackScheduled && !isPerformingWork) {\n    isHostCallbackScheduled = true;\n    requestHostCallback(flushWork);\n  }\n}\n\nfunction unstable_getFirstCallbackNode() {\n  return peek(taskQueue);\n}\n\nfunction unstable_cancelCallback(task) {\n  // remove from the queue because you can't remove arbitrary nodes from an\n  // array based heap, only the first one.)\n\n\n  task.callback = null;\n}\n\nfunction unstable_getCurrentPriorityLevel() {\n  return currentPriorityLevel;\n}\n\nfunction requestHostCallback(callback) {\n  scheduledCallback = callback;\n}\n\nfunction requestHostTimeout(callback, ms) {\n  scheduledTimeout = callback;\n  timeoutTime = currentMockTime + ms;\n}\n\nfunction cancelHostTimeout() {\n  scheduledTimeout = null;\n  timeoutTime = -1;\n}\n\nfunction shouldYieldToHost() {\n  if (expectedNumberOfYields === 0 && yieldedValues === null || expectedNumberOfYields !== -1 && yieldedValues !== null && yieldedValues.length >= expectedNumberOfYields || shouldYieldForPaint && needsPaint) {\n    // We yielded at least as many values as expected. Stop flushing.\n    didStop = true;\n    return true;\n  }\n\n  return false;\n}\n\nfunction getCurrentTime() {\n  return currentMockTime;\n}\n\nfunction forceFrameRate() {// No-op\n}\n\nfunction reset() {\n  if (isFlushing) {\n    throw new Error('Cannot reset while already flushing work.');\n  }\n\n  currentMockTime = 0;\n  scheduledCallback = null;\n  scheduledTimeout = null;\n  timeoutTime = -1;\n  yieldedValues = null;\n  expectedNumberOfYields = -1;\n  didStop = false;\n  isFlushing = false;\n  needsPaint = false;\n} // Should only be used via an assertion helper that inspects the yielded values.\n\n\nfunction unstable_flushNumberOfYields(count) {\n  if (isFlushing) {\n    throw new Error('Already flushing work.');\n  }\n\n  if (scheduledCallback !== null) {\n    var cb = scheduledCallback;\n    expectedNumberOfYields = count;\n    isFlushing = true;\n\n    try {\n      var hasMoreWork = true;\n\n      do {\n        hasMoreWork = cb(true, currentMockTime);\n      } while (hasMoreWork && !didStop);\n\n      if (!hasMoreWork) {\n        scheduledCallback = null;\n      }\n    } finally {\n      expectedNumberOfYields = -1;\n      didStop = false;\n      isFlushing = false;\n    }\n  }\n}\n\nfunction unstable_flushUntilNextPaint() {\n  if (isFlushing) {\n    throw new Error('Already flushing work.');\n  }\n\n  if (scheduledCallback !== null) {\n    var cb = scheduledCallback;\n    shouldYieldForPaint = true;\n    needsPaint = false;\n    isFlushing = true;\n\n    try {\n      var hasMoreWork = true;\n\n      do {\n        hasMoreWork = cb(true, currentMockTime);\n      } while (hasMoreWork && !didStop);\n\n      if (!hasMoreWork) {\n        scheduledCallback = null;\n      }\n    } finally {\n      shouldYieldForPaint = false;\n      didStop = false;\n      isFlushing = false;\n    }\n  }\n}\n\nfunction unstable_flushExpired() {\n  if (isFlushing) {\n    throw new Error('Already flushing work.');\n  }\n\n  if (scheduledCallback !== null) {\n    isFlushing = true;\n\n    try {\n      var hasMoreWork = scheduledCallback(false, currentMockTime);\n\n      if (!hasMoreWork) {\n        scheduledCallback = null;\n      }\n    } finally {\n      isFlushing = false;\n    }\n  }\n}\n\nfunction unstable_flushAllWithoutAsserting() {\n  // Returns false if no work was flushed.\n  if (isFlushing) {\n    throw new Error('Already flushing work.');\n  }\n\n  if (scheduledCallback !== null) {\n    var cb = scheduledCallback;\n    isFlushing = true;\n\n    try {\n      var hasMoreWork = true;\n\n      do {\n        hasMoreWork = cb(true, currentMockTime);\n      } while (hasMoreWork);\n\n      if (!hasMoreWork) {\n        scheduledCallback = null;\n      }\n\n      return true;\n    } finally {\n      isFlushing = false;\n    }\n  } else {\n    return false;\n  }\n}\n\nfunction unstable_clearYields() {\n  if (yieldedValues === null) {\n    return [];\n  }\n\n  var values = yieldedValues;\n  yieldedValues = null;\n  return values;\n}\n\nfunction unstable_flushAll() {\n  if (yieldedValues !== null) {\n    throw new Error('Log is not empty. Assert on the log of yielded values before ' + 'flushing additional work.');\n  }\n\n  unstable_flushAllWithoutAsserting();\n\n  if (yieldedValues !== null) {\n    throw new Error('While flushing work, something yielded a value. Use an ' + 'assertion helper to assert on the log of yielded values, e.g. ' + 'expect(Scheduler).toFlushAndYield([...])');\n  }\n}\n\nfunction unstable_yieldValue(value) {\n  // eslint-disable-next-line react-internal/no-production-logging\n  if (console.log.name === 'disabledLog' || disableYieldValue) {\n    // If console.log has been patched, we assume we're in render\n    // replaying and we ignore any values yielding in the second pass.\n    return;\n  }\n\n  if (yieldedValues === null) {\n    yieldedValues = [value];\n  } else {\n    yieldedValues.push(value);\n  }\n}\n\nfunction unstable_advanceTime(ms) {\n  // eslint-disable-next-line react-internal/no-production-logging\n  if (console.log.name === 'disabledLog' || disableYieldValue) {\n    // If console.log has been patched, we assume we're in render\n    // replaying and we ignore any time advancing in the second pass.\n    return;\n  }\n\n  currentMockTime += ms;\n\n  if (scheduledTimeout !== null && timeoutTime <= currentMockTime) {\n    scheduledTimeout(currentMockTime);\n    timeoutTime = -1;\n    scheduledTimeout = null;\n  }\n}\n\nfunction requestPaint() {\n  needsPaint = true;\n}\nvar unstable_Profiling =  null;\n\nexports.reset = reset;\nexports.unstable_IdlePriority = IdlePriority;\nexports.unstable_ImmediatePriority = ImmediatePriority;\nexports.unstable_LowPriority = LowPriority;\nexports.unstable_NormalPriority = NormalPriority;\nexports.unstable_Profiling = unstable_Profiling;\nexports.unstable_UserBlockingPriority = UserBlockingPriority;\nexports.unstable_advanceTime = unstable_advanceTime;\nexports.unstable_cancelCallback = unstable_cancelCallback;\nexports.unstable_clearYields = unstable_clearYields;\nexports.unstable_continueExecution = unstable_continueExecution;\nexports.unstable_flushAll = unstable_flushAll;\nexports.unstable_flushAllWithoutAsserting = unstable_flushAllWithoutAsserting;\nexports.unstable_flushExpired = unstable_flushExpired;\nexports.unstable_flushNumberOfYields = unstable_flushNumberOfYields;\nexports.unstable_flushUntilNextPaint = unstable_flushUntilNextPaint;\nexports.unstable_forceFrameRate = forceFrameRate;\nexports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;\nexports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;\nexports.unstable_next = unstable_next;\nexports.unstable_now = getCurrentTime;\nexports.unstable_pauseExecution = unstable_pauseExecution;\nexports.unstable_requestPaint = requestPaint;\nexports.unstable_runWithPriority = unstable_runWithPriority;\nexports.unstable_scheduleCallback = unstable_scheduleCallback;\nexports.unstable_setDisableYieldValue = setDisableYieldValue;\nexports.unstable_shouldYield = shouldYieldToHost;\nexports.unstable_wrapCallback = unstable_wrapCallback;\nexports.unstable_yieldValue = unstable_yieldValue;\n  })();\n}\n"]},"metadata":{},"sourceType":"script"}