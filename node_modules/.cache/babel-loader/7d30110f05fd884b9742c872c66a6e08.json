{"ast":null,"code":"/**\n * @license React\n * react-test-renderer.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function () {\n    'use strict';\n\n    var React = require('react');\n\n    var Scheduler = require('scheduler/unstable_mock');\n\n    var Scheduler$1 = require('scheduler');\n\n    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED; // by calls to these methods by a Babel plugin.\n    //\n    // In PROD (or in packages without access to React internals),\n    // they are left as they are instead.\n\n    function warn(format) {\n      {\n        {\n          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n            args[_key - 1] = arguments[_key];\n          }\n\n          printWarning('warn', format, args);\n        }\n      }\n    }\n\n    function error(format) {\n      {\n        {\n          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n            args[_key2 - 1] = arguments[_key2];\n          }\n\n          printWarning('error', format, args);\n        }\n      }\n    }\n\n    function printWarning(level, format, args) {\n      // When changing this logic, you might want to also\n      // update consoleWithStackDev.www.js as well.\n      {\n        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n        var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n        if (stack !== '') {\n          format += '%s';\n          args = args.concat([stack]);\n        } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n        var argsWithFormat = args.map(function (item) {\n          return String(item);\n        }); // Careful: RN currently depends on this prefix\n\n        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n        // breaks IE9: https://github.com/facebook/react/issues/13610\n        // eslint-disable-next-line react-internal/no-production-logging\n\n        Function.prototype.apply.call(console[level], console, argsWithFormat);\n      }\n    }\n\n    function _defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    function _createClass(Constructor, protoProps, staticProps) {\n      if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) _defineProperties(Constructor, staticProps);\n      return Constructor;\n    }\n\n    function _objectWithoutPropertiesLoose(source, excluded) {\n      if (source == null) return {};\n      var target = {};\n      var sourceKeys = Object.keys(source);\n      var key, i;\n\n      for (i = 0; i < sourceKeys.length; i++) {\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n      }\n\n      return target;\n    }\n\n    var assign = Object.assign;\n    /**\n     * `ReactInstanceMap` maintains a mapping from a public facing stateful\n     * instance (key) and the internal representation (value). This allows public\n     * methods to accept the user facing instance as an argument and map them back\n     * to internal methods.\n     *\n     * Note that this module is currently shared and assumed to be stateless.\n     * If this becomes an actual Map, that will break.\n     */\n\n    function get(key) {\n      return key._reactInternals;\n    }\n\n    function set(key, value) {\n      key._reactInternals = value;\n    }\n\n    var enableSchedulingProfiler = false;\n    var enableProfilerTimer = true;\n    var enableProfilerCommitHooks = true;\n    var enableLazyElements = false;\n    var warnAboutStringRefs = false;\n    var enableSuspenseAvoidThisFallback = false;\n    var enableNewReconciler = false;\n    var enableLazyContextPropagation = false;\n    var enableLegacyHidden = false;\n    var FunctionComponent = 0;\n    var ClassComponent = 1;\n    var IndeterminateComponent = 2; // Before we know whether it is function or class\n\n    var HostRoot = 3; // Root of a host tree. Could be nested inside another node.\n\n    var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.\n\n    var HostComponent = 5;\n    var HostText = 6;\n    var Fragment = 7;\n    var Mode = 8;\n    var ContextConsumer = 9;\n    var ContextProvider = 10;\n    var ForwardRef = 11;\n    var Profiler = 12;\n    var SuspenseComponent = 13;\n    var MemoComponent = 14;\n    var SimpleMemoComponent = 15;\n    var LazyComponent = 16;\n    var IncompleteClassComponent = 17;\n    var DehydratedFragment = 18;\n    var SuspenseListComponent = 19;\n    var ScopeComponent = 21;\n    var OffscreenComponent = 22;\n    var LegacyHiddenComponent = 23;\n    var CacheComponent = 24;\n    var TracingMarkerComponent = 25; // ATTENTION\n    // When adding new symbols to this file,\n    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n    // The Symbol used to tag the ReactElement-like types.\n\n    var REACT_ELEMENT_TYPE = Symbol.for('react.element');\n    var REACT_PORTAL_TYPE = Symbol.for('react.portal');\n    var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\n    var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\n    var REACT_PROFILER_TYPE = Symbol.for('react.profiler');\n    var REACT_PROVIDER_TYPE = Symbol.for('react.provider');\n    var REACT_CONTEXT_TYPE = Symbol.for('react.context');\n    var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\n    var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\n    var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\n    var REACT_MEMO_TYPE = Symbol.for('react.memo');\n    var REACT_LAZY_TYPE = Symbol.for('react.lazy');\n    var REACT_SCOPE_TYPE = Symbol.for('react.scope');\n    var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for('react.debug_trace_mode');\n    var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\n    var REACT_LEGACY_HIDDEN_TYPE = Symbol.for('react.legacy_hidden');\n    var REACT_CACHE_TYPE = Symbol.for('react.cache');\n    var REACT_TRACING_MARKER_TYPE = Symbol.for('react.tracing_marker');\n    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\n    var FAUX_ITERATOR_SYMBOL = '@@iterator';\n\n    function getIteratorFn(maybeIterable) {\n      if (maybeIterable === null || typeof maybeIterable !== 'object') {\n        return null;\n      }\n\n      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n      if (typeof maybeIterator === 'function') {\n        return maybeIterator;\n      }\n\n      return null;\n    }\n\n    function getWrappedName(outerType, innerType, wrapperName) {\n      var displayName = outerType.displayName;\n\n      if (displayName) {\n        return displayName;\n      }\n\n      var functionName = innerType.displayName || innerType.name || '';\n      return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n    } // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n\n    function getContextName(type) {\n      return type.displayName || 'Context';\n    } // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\n\n    function getComponentNameFromType(type) {\n      if (type == null) {\n        // Host root, text node or just invalid type.\n        return null;\n      }\n\n      {\n        if (typeof type.tag === 'number') {\n          error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n        }\n      }\n\n      if (typeof type === 'function') {\n        return type.displayName || type.name || null;\n      }\n\n      if (typeof type === 'string') {\n        return type;\n      }\n\n      switch (type) {\n        case REACT_FRAGMENT_TYPE:\n          return 'Fragment';\n\n        case REACT_PORTAL_TYPE:\n          return 'Portal';\n\n        case REACT_PROFILER_TYPE:\n          return 'Profiler';\n\n        case REACT_STRICT_MODE_TYPE:\n          return 'StrictMode';\n\n        case REACT_SUSPENSE_TYPE:\n          return 'Suspense';\n\n        case REACT_SUSPENSE_LIST_TYPE:\n          return 'SuspenseList';\n      }\n\n      if (typeof type === 'object') {\n        switch (type.$$typeof) {\n          case REACT_CONTEXT_TYPE:\n            var context = type;\n            return getContextName(context) + '.Consumer';\n\n          case REACT_PROVIDER_TYPE:\n            var provider = type;\n            return getContextName(provider._context) + '.Provider';\n\n          case REACT_FORWARD_REF_TYPE:\n            return getWrappedName(type, type.render, 'ForwardRef');\n\n          case REACT_MEMO_TYPE:\n            var outerName = type.displayName || null;\n\n            if (outerName !== null) {\n              return outerName;\n            }\n\n            return getComponentNameFromType(type.type) || 'Memo';\n\n          case REACT_LAZY_TYPE:\n            {\n              var lazyComponent = type;\n              var payload = lazyComponent._payload;\n              var init = lazyComponent._init;\n\n              try {\n                return getComponentNameFromType(init(payload));\n              } catch (x) {\n                return null;\n              }\n            }\n          // eslint-disable-next-line no-fallthrough\n        }\n      }\n\n      return null;\n    }\n\n    function getWrappedName$1(outerType, innerType, wrapperName) {\n      var functionName = innerType.displayName || innerType.name || '';\n      return outerType.displayName || (functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName);\n    } // Keep in sync with shared/getComponentNameFromType\n\n\n    function getContextName$1(type) {\n      return type.displayName || 'Context';\n    }\n\n    function getComponentNameFromFiber(fiber) {\n      var tag = fiber.tag,\n          type = fiber.type;\n\n      switch (tag) {\n        case CacheComponent:\n          return 'Cache';\n\n        case ContextConsumer:\n          var context = type;\n          return getContextName$1(context) + '.Consumer';\n\n        case ContextProvider:\n          var provider = type;\n          return getContextName$1(provider._context) + '.Provider';\n\n        case DehydratedFragment:\n          return 'DehydratedFragment';\n\n        case ForwardRef:\n          return getWrappedName$1(type, type.render, 'ForwardRef');\n\n        case Fragment:\n          return 'Fragment';\n\n        case HostComponent:\n          // Host component type is the display name (e.g. \"div\", \"View\")\n          return type;\n\n        case HostPortal:\n          return 'Portal';\n\n        case HostRoot:\n          return 'Root';\n\n        case HostText:\n          return 'Text';\n\n        case LazyComponent:\n          // Name comes from the type in this case; we don't have a tag.\n          return getComponentNameFromType(type);\n\n        case Mode:\n          if (type === REACT_STRICT_MODE_TYPE) {\n            // Don't be less specific than shared/getComponentNameFromType\n            return 'StrictMode';\n          }\n\n          return 'Mode';\n\n        case OffscreenComponent:\n          return 'Offscreen';\n\n        case Profiler:\n          return 'Profiler';\n\n        case ScopeComponent:\n          return 'Scope';\n\n        case SuspenseComponent:\n          return 'Suspense';\n\n        case SuspenseListComponent:\n          return 'SuspenseList';\n\n        case TracingMarkerComponent:\n          return 'TracingMarker';\n        // The display name for this tags come from the user-provided type:\n\n        case ClassComponent:\n        case FunctionComponent:\n        case IncompleteClassComponent:\n        case IndeterminateComponent:\n        case MemoComponent:\n        case SimpleMemoComponent:\n          if (typeof type === 'function') {\n            return type.displayName || type.name || null;\n          }\n\n          if (typeof type === 'string') {\n            return type;\n          }\n\n          break;\n      }\n\n      return null;\n    } // Don't change these two values. They're used by React Dev Tools.\n\n\n    var NoFlags =\n    /*                      */\n    0;\n    var PerformedWork =\n    /*                */\n    1; // You can change the rest (and add more).\n\n    var Placement =\n    /*                    */\n    2;\n    var Update =\n    /*                       */\n    4;\n    var PlacementAndUpdate =\n    /*           */\n    Placement | Update;\n    var ChildDeletion =\n    /*                */\n    16;\n    var ContentReset =\n    /*                 */\n    32;\n    var Callback =\n    /*                     */\n    64;\n    var DidCapture =\n    /*                   */\n    128;\n    var ForceClientRender =\n    /*            */\n    256;\n    var Ref =\n    /*                          */\n    512;\n    var Snapshot =\n    /*                     */\n    1024;\n    var Passive =\n    /*                      */\n    2048;\n    var Hydrating =\n    /*                    */\n    4096;\n    var HydratingAndUpdate =\n    /*           */\n    Hydrating | Update;\n    var Visibility =\n    /*                   */\n    8192;\n    var StoreConsistency =\n    /*             */\n    16384;\n    var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency; // Union of all commit flags (flags with the lifetime of a particular commit)\n\n    var HostEffectMask =\n    /*               */\n    32767; // These are not really side effects, but we still reuse this field.\n\n    var Incomplete =\n    /*                   */\n    32768;\n    var ShouldCapture =\n    /*                */\n    65536;\n    var ForceUpdateForLegacySuspense =\n    /* */\n    131072;\n    var Forked =\n    /*                       */\n    1048576; // Static tags describe aspects of a fiber that are not specific to a render,\n    // e.g. a fiber uses a passive effect (even if there are no updates on this particular render).\n    // This enables us to defer more work in the unmount case,\n    // since we can defer traversing the tree during layout to look for Passive effects,\n    // and instead rely on the static flag as a signal that there may be cleanup work.\n\n    var RefStatic =\n    /*                    */\n    2097152;\n    var LayoutStatic =\n    /*                 */\n    4194304;\n    var PassiveStatic =\n    /*                */\n    8388608; // These flags allow us to traverse to fibers that have effects on mount\n    // don't contain effects, by checking subtreeFlags.\n\n    var BeforeMutationMask = // TODO: Remove Update flag from before mutation phase by re-landing Visibility\n    // flag logic (see #20043)\n    Update | Snapshot | 0;\n    var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;\n    var LayoutMask = Update | Callback | Ref | Visibility; // TODO: Split into PassiveMountMask and PassiveUnmountMask\n\n    var PassiveMask = Passive | ChildDeletion; // Union of tags that don't get reset on clones.\n    // This allows certain concepts to persist without recalculating them,\n    // e.g. whether a subtree contains passive effects or portals.\n\n    var StaticMask = LayoutStatic | PassiveStatic | RefStatic;\n    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n\n    function getNearestMountedFiber(fiber) {\n      var node = fiber;\n      var nearestMounted = fiber;\n\n      if (!fiber.alternate) {\n        // If there is no alternate, this might be a new tree that isn't inserted\n        // yet. If it is, then it will have a pending insertion effect on it.\n        var nextNode = node;\n\n        do {\n          node = nextNode;\n\n          if ((node.flags & (Placement | Hydrating)) !== NoFlags) {\n            // This is an insertion or in-progress hydration. The nearest possible\n            // mounted fiber is the parent but we need to continue to figure out\n            // if that one is still mounted.\n            nearestMounted = node.return;\n          }\n\n          nextNode = node.return;\n        } while (nextNode);\n      } else {\n        while (node.return) {\n          node = node.return;\n        }\n      }\n\n      if (node.tag === HostRoot) {\n        // TODO: Check if this was a nested HostRoot when used with\n        // renderContainerIntoSubtree.\n        return nearestMounted;\n      } // If we didn't hit the root, that means that we're in an disconnected tree\n      // that has been unmounted.\n\n\n      return null;\n    }\n\n    function isFiberMounted(fiber) {\n      return getNearestMountedFiber(fiber) === fiber;\n    }\n\n    function isMounted(component) {\n      {\n        var owner = ReactCurrentOwner.current;\n\n        if (owner !== null && owner.tag === ClassComponent) {\n          var ownerFiber = owner;\n          var instance = ownerFiber.stateNode;\n\n          if (!instance._warnedAboutRefsInRender) {\n            error('%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentNameFromFiber(ownerFiber) || 'A component');\n          }\n\n          instance._warnedAboutRefsInRender = true;\n        }\n      }\n      var fiber = get(component);\n\n      if (!fiber) {\n        return false;\n      }\n\n      return getNearestMountedFiber(fiber) === fiber;\n    }\n\n    function assertIsMounted(fiber) {\n      if (getNearestMountedFiber(fiber) !== fiber) {\n        throw new Error('Unable to find node on an unmounted component.');\n      }\n    }\n\n    function findCurrentFiberUsingSlowPath(fiber) {\n      var alternate = fiber.alternate;\n\n      if (!alternate) {\n        // If there is no alternate, then we only need to check if it is mounted.\n        var nearestMounted = getNearestMountedFiber(fiber);\n\n        if (nearestMounted === null) {\n          throw new Error('Unable to find node on an unmounted component.');\n        }\n\n        if (nearestMounted !== fiber) {\n          return null;\n        }\n\n        return fiber;\n      } // If we have two possible branches, we'll walk backwards up to the root\n      // to see what path the root points to. On the way we may hit one of the\n      // special cases and we'll deal with them.\n\n\n      var a = fiber;\n      var b = alternate;\n\n      while (true) {\n        var parentA = a.return;\n\n        if (parentA === null) {\n          // We're at the root.\n          break;\n        }\n\n        var parentB = parentA.alternate;\n\n        if (parentB === null) {\n          // There is no alternate. This is an unusual case. Currently, it only\n          // happens when a Suspense component is hidden. An extra fragment fiber\n          // is inserted in between the Suspense fiber and its children. Skip\n          // over this extra fragment fiber and proceed to the next parent.\n          var nextParent = parentA.return;\n\n          if (nextParent !== null) {\n            a = b = nextParent;\n            continue;\n          } // If there's no parent, we're at the root.\n\n\n          break;\n        } // If both copies of the parent fiber point to the same child, we can\n        // assume that the child is current. This happens when we bailout on low\n        // priority: the bailed out fiber's child reuses the current child.\n\n\n        if (parentA.child === parentB.child) {\n          var child = parentA.child;\n\n          while (child) {\n            if (child === a) {\n              // We've determined that A is the current branch.\n              assertIsMounted(parentA);\n              return fiber;\n            }\n\n            if (child === b) {\n              // We've determined that B is the current branch.\n              assertIsMounted(parentA);\n              return alternate;\n            }\n\n            child = child.sibling;\n          } // We should never have an alternate for any mounting node. So the only\n          // way this could possibly happen is if this was unmounted, if at all.\n\n\n          throw new Error('Unable to find node on an unmounted component.');\n        }\n\n        if (a.return !== b.return) {\n          // The return pointer of A and the return pointer of B point to different\n          // fibers. We assume that return pointers never criss-cross, so A must\n          // belong to the child set of A.return, and B must belong to the child\n          // set of B.return.\n          a = parentA;\n          b = parentB;\n        } else {\n          // The return pointers point to the same fiber. We'll have to use the\n          // default, slow path: scan the child sets of each parent alternate to see\n          // which child belongs to which set.\n          //\n          // Search parent A's child set\n          var didFindChild = false;\n          var _child = parentA.child;\n\n          while (_child) {\n            if (_child === a) {\n              didFindChild = true;\n              a = parentA;\n              b = parentB;\n              break;\n            }\n\n            if (_child === b) {\n              didFindChild = true;\n              b = parentA;\n              a = parentB;\n              break;\n            }\n\n            _child = _child.sibling;\n          }\n\n          if (!didFindChild) {\n            // Search parent B's child set\n            _child = parentB.child;\n\n            while (_child) {\n              if (_child === a) {\n                didFindChild = true;\n                a = parentB;\n                b = parentA;\n                break;\n              }\n\n              if (_child === b) {\n                didFindChild = true;\n                b = parentB;\n                a = parentA;\n                break;\n              }\n\n              _child = _child.sibling;\n            }\n\n            if (!didFindChild) {\n              throw new Error('Child was not found in either parent set. This indicates a bug ' + 'in React related to the return pointer. Please file an issue.');\n            }\n          }\n        }\n\n        if (a.alternate !== b) {\n          throw new Error(\"Return fibers should always be each others' alternates. \" + 'This error is likely caused by a bug in React. Please file an issue.');\n        }\n      } // If the root is not a host container, we're in a disconnected tree. I.e.\n      // unmounted.\n\n\n      if (a.tag !== HostRoot) {\n        throw new Error('Unable to find node on an unmounted component.');\n      }\n\n      if (a.stateNode.current === a) {\n        // We've determined that A is the current branch.\n        return fiber;\n      } // Otherwise B has to be current branch.\n\n\n      return alternate;\n    }\n\n    function findCurrentHostFiber(parent) {\n      var currentParent = findCurrentFiberUsingSlowPath(parent);\n      return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;\n    }\n\n    function findCurrentHostFiberImpl(node) {\n      // Next we'll drill down this component to find the first HostComponent/Text.\n      if (node.tag === HostComponent || node.tag === HostText) {\n        return node;\n      }\n\n      var child = node.child;\n\n      while (child !== null) {\n        var match = findCurrentHostFiberImpl(child);\n\n        if (match !== null) {\n          return match;\n        }\n\n        child = child.sibling;\n      }\n\n      return null;\n    }\n\n    var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\n    function isArray(a) {\n      return isArrayImpl(a);\n    } // This module only exists as an ESM wrapper around the external CommonJS\n\n\n    var scheduleCallback = Scheduler$1.unstable_scheduleCallback;\n    var cancelCallback = Scheduler$1.unstable_cancelCallback;\n    var shouldYield = Scheduler$1.unstable_shouldYield;\n    var requestPaint = Scheduler$1.unstable_requestPaint;\n    var now = Scheduler$1.unstable_now;\n    var ImmediatePriority = Scheduler$1.unstable_ImmediatePriority;\n    var UserBlockingPriority = Scheduler$1.unstable_UserBlockingPriority;\n    var NormalPriority = Scheduler$1.unstable_NormalPriority;\n    var IdlePriority = Scheduler$1.unstable_IdlePriority; // Helpers to patch console.logs to avoid logging during side-effect free\n    // replaying on render function. This currently only patches the object\n    // lazily which won't cover if the log function was extracted eagerly.\n    // We could also eagerly patch the method.\n\n    var disabledDepth = 0;\n    var prevLog;\n    var prevInfo;\n    var prevWarn;\n    var prevError;\n    var prevGroup;\n    var prevGroupCollapsed;\n    var prevGroupEnd;\n\n    function disabledLog() {}\n\n    disabledLog.__reactDisabledLog = true;\n\n    function disableLogs() {\n      {\n        if (disabledDepth === 0) {\n          /* eslint-disable react-internal/no-production-logging */\n          prevLog = console.log;\n          prevInfo = console.info;\n          prevWarn = console.warn;\n          prevError = console.error;\n          prevGroup = console.group;\n          prevGroupCollapsed = console.groupCollapsed;\n          prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n          var props = {\n            configurable: true,\n            enumerable: true,\n            value: disabledLog,\n            writable: true\n          }; // $FlowFixMe Flow thinks console is immutable.\n\n          Object.defineProperties(console, {\n            info: props,\n            log: props,\n            warn: props,\n            error: props,\n            group: props,\n            groupCollapsed: props,\n            groupEnd: props\n          });\n          /* eslint-enable react-internal/no-production-logging */\n        }\n\n        disabledDepth++;\n      }\n    }\n\n    function reenableLogs() {\n      {\n        disabledDepth--;\n\n        if (disabledDepth === 0) {\n          /* eslint-disable react-internal/no-production-logging */\n          var props = {\n            configurable: true,\n            enumerable: true,\n            writable: true\n          }; // $FlowFixMe Flow thinks console is immutable.\n\n          Object.defineProperties(console, {\n            log: assign({}, props, {\n              value: prevLog\n            }),\n            info: assign({}, props, {\n              value: prevInfo\n            }),\n            warn: assign({}, props, {\n              value: prevWarn\n            }),\n            error: assign({}, props, {\n              value: prevError\n            }),\n            group: assign({}, props, {\n              value: prevGroup\n            }),\n            groupCollapsed: assign({}, props, {\n              value: prevGroupCollapsed\n            }),\n            groupEnd: assign({}, props, {\n              value: prevGroupEnd\n            })\n          });\n          /* eslint-enable react-internal/no-production-logging */\n        }\n\n        if (disabledDepth < 0) {\n          error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n        }\n      }\n    }\n\n    var rendererID = null;\n    var injectedHook = null;\n    var hasLoggedError = false;\n    var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';\n\n    function injectInternals(internals) {\n      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n        // No DevTools\n        return false;\n      }\n\n      var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;\n\n      if (hook.isDisabled) {\n        // This isn't a real property on the hook, but it can be set to opt out\n        // of DevTools integration and associated warnings and logs.\n        // https://github.com/facebook/react/issues/3877\n        return true;\n      }\n\n      if (!hook.supportsFiber) {\n        {\n          error('The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://reactjs.org/link/react-devtools');\n        } // DevTools exists, even though it doesn't support Fiber.\n\n        return true;\n      }\n\n      try {\n        if (enableSchedulingProfiler) {\n          // Conditionally inject these hooks only if Timeline profiler is supported by this build.\n          // This gives DevTools a way to feature detect that isn't tied to version number\n          // (since profiling and timeline are controlled by different feature flags).\n          internals = assign({}, internals, {\n            getLaneLabelMap: getLaneLabelMap,\n            injectProfilingHooks: injectProfilingHooks\n          });\n        }\n\n        rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.\n\n        injectedHook = hook;\n      } catch (err) {\n        // Catch all errors because it is unsafe to throw during initialization.\n        {\n          error('React instrumentation encountered an error: %s.', err);\n        }\n      }\n\n      if (hook.checkDCE) {\n        // This is the real DevTools.\n        return true;\n      } else {\n        // This is likely a hook installed by Fast Refresh runtime.\n        return false;\n      }\n    }\n\n    function onScheduleRoot(root, children) {\n      {\n        if (injectedHook && typeof injectedHook.onScheduleFiberRoot === 'function') {\n          try {\n            injectedHook.onScheduleFiberRoot(rendererID, root, children);\n          } catch (err) {\n            if (!hasLoggedError) {\n              hasLoggedError = true;\n              error('React instrumentation encountered an error: %s', err);\n            }\n          }\n        }\n      }\n    }\n\n    function onCommitRoot(root, eventPriority) {\n      if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') {\n        try {\n          var didError = (root.current.flags & DidCapture) === DidCapture;\n\n          if (enableProfilerTimer) {\n            var schedulerPriority;\n\n            switch (eventPriority) {\n              case DiscreteEventPriority:\n                schedulerPriority = ImmediatePriority;\n                break;\n\n              case ContinuousEventPriority:\n                schedulerPriority = UserBlockingPriority;\n                break;\n\n              case DefaultEventPriority:\n                schedulerPriority = NormalPriority;\n                break;\n\n              case IdleEventPriority:\n                schedulerPriority = IdlePriority;\n                break;\n\n              default:\n                schedulerPriority = NormalPriority;\n                break;\n            }\n\n            injectedHook.onCommitFiberRoot(rendererID, root, schedulerPriority, didError);\n          } else {\n            injectedHook.onCommitFiberRoot(rendererID, root, undefined, didError);\n          }\n        } catch (err) {\n          {\n            if (!hasLoggedError) {\n              hasLoggedError = true;\n              error('React instrumentation encountered an error: %s', err);\n            }\n          }\n        }\n      }\n    }\n\n    function onPostCommitRoot(root) {\n      if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === 'function') {\n        try {\n          injectedHook.onPostCommitFiberRoot(rendererID, root);\n        } catch (err) {\n          {\n            if (!hasLoggedError) {\n              hasLoggedError = true;\n              error('React instrumentation encountered an error: %s', err);\n            }\n          }\n        }\n      }\n    }\n\n    function onCommitUnmount(fiber) {\n      if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') {\n        try {\n          injectedHook.onCommitFiberUnmount(rendererID, fiber);\n        } catch (err) {\n          {\n            if (!hasLoggedError) {\n              hasLoggedError = true;\n              error('React instrumentation encountered an error: %s', err);\n            }\n          }\n        }\n      }\n    }\n\n    function injectProfilingHooks(profilingHooks) {}\n\n    function getLaneLabelMap() {\n      {\n        return null;\n      }\n    }\n\n    function markComponentRenderStopped() {}\n\n    function markComponentErrored(fiber, thrownValue, lanes) {}\n\n    function markComponentSuspended(fiber, wakeable, lanes) {}\n\n    var NoMode =\n    /*                         */\n    0; // TODO: Remove ConcurrentMode by reading from the root tag instead\n\n    var ConcurrentMode =\n    /*                 */\n    1;\n    var ProfileMode =\n    /*                    */\n    2;\n    var StrictLegacyMode =\n    /*               */\n    8; // TODO: This is pretty well supported by browsers. Maybe we can drop it.\n\n    var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros.\n    // Based on:\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32\n\n    var log = Math.log;\n    var LN2 = Math.LN2;\n\n    function clz32Fallback(x) {\n      var asUint = x >>> 0;\n\n      if (asUint === 0) {\n        return 32;\n      }\n\n      return 31 - (log(asUint) / LN2 | 0) | 0;\n    } // If those values are changed that package should be rebuilt and redeployed.\n\n\n    var TotalLanes = 31;\n    var NoLanes =\n    /*                        */\n    0;\n    var NoLane =\n    /*                          */\n    0;\n    var SyncLane =\n    /*                        */\n    1;\n    var InputContinuousHydrationLane =\n    /*    */\n    2;\n    var InputContinuousLane =\n    /*            */\n    4;\n    var DefaultHydrationLane =\n    /*            */\n    8;\n    var DefaultLane =\n    /*                    */\n    16;\n    var TransitionHydrationLane =\n    /*                */\n    32;\n    var TransitionLanes =\n    /*                       */\n    4194240;\n    var TransitionLane1 =\n    /*                        */\n    64;\n    var TransitionLane2 =\n    /*                        */\n    128;\n    var TransitionLane3 =\n    /*                        */\n    256;\n    var TransitionLane4 =\n    /*                        */\n    512;\n    var TransitionLane5 =\n    /*                        */\n    1024;\n    var TransitionLane6 =\n    /*                        */\n    2048;\n    var TransitionLane7 =\n    /*                        */\n    4096;\n    var TransitionLane8 =\n    /*                        */\n    8192;\n    var TransitionLane9 =\n    /*                        */\n    16384;\n    var TransitionLane10 =\n    /*                       */\n    32768;\n    var TransitionLane11 =\n    /*                       */\n    65536;\n    var TransitionLane12 =\n    /*                       */\n    131072;\n    var TransitionLane13 =\n    /*                       */\n    262144;\n    var TransitionLane14 =\n    /*                       */\n    524288;\n    var TransitionLane15 =\n    /*                       */\n    1048576;\n    var TransitionLane16 =\n    /*                       */\n    2097152;\n    var RetryLanes =\n    /*                            */\n    130023424;\n    var RetryLane1 =\n    /*                             */\n    4194304;\n    var RetryLane2 =\n    /*                             */\n    8388608;\n    var RetryLane3 =\n    /*                             */\n    16777216;\n    var RetryLane4 =\n    /*                             */\n    33554432;\n    var RetryLane5 =\n    /*                             */\n    67108864;\n    var SomeRetryLane = RetryLane1;\n    var SelectiveHydrationLane =\n    /*          */\n    134217728;\n    var NonIdleLanes =\n    /*                                 */\n    268435455;\n    var IdleHydrationLane =\n    /*               */\n    268435456;\n    var IdleLane =\n    /*                       */\n    536870912;\n    var OffscreenLane =\n    /*                   */\n    1073741824; // This function is used for the experimental timeline (react-devtools-timeline)\n\n    var NoTimestamp = -1;\n    var nextTransitionLane = TransitionLane1;\n    var nextRetryLane = RetryLane1;\n\n    function getHighestPriorityLanes(lanes) {\n      switch (getHighestPriorityLane(lanes)) {\n        case SyncLane:\n          return SyncLane;\n\n        case InputContinuousHydrationLane:\n          return InputContinuousHydrationLane;\n\n        case InputContinuousLane:\n          return InputContinuousLane;\n\n        case DefaultHydrationLane:\n          return DefaultHydrationLane;\n\n        case DefaultLane:\n          return DefaultLane;\n\n        case TransitionHydrationLane:\n          return TransitionHydrationLane;\n\n        case TransitionLane1:\n        case TransitionLane2:\n        case TransitionLane3:\n        case TransitionLane4:\n        case TransitionLane5:\n        case TransitionLane6:\n        case TransitionLane7:\n        case TransitionLane8:\n        case TransitionLane9:\n        case TransitionLane10:\n        case TransitionLane11:\n        case TransitionLane12:\n        case TransitionLane13:\n        case TransitionLane14:\n        case TransitionLane15:\n        case TransitionLane16:\n          return lanes & TransitionLanes;\n\n        case RetryLane1:\n        case RetryLane2:\n        case RetryLane3:\n        case RetryLane4:\n        case RetryLane5:\n          return lanes & RetryLanes;\n\n        case SelectiveHydrationLane:\n          return SelectiveHydrationLane;\n\n        case IdleHydrationLane:\n          return IdleHydrationLane;\n\n        case IdleLane:\n          return IdleLane;\n\n        case OffscreenLane:\n          return OffscreenLane;\n\n        default:\n          {\n            error('Should have found matching lanes. This is a bug in React.');\n          } // This shouldn't be reachable, but as a fallback, return the entire bitmask.\n\n          return lanes;\n      }\n    }\n\n    function getNextLanes(root, wipLanes) {\n      // Early bailout if there's no pending work left.\n      var pendingLanes = root.pendingLanes;\n\n      if (pendingLanes === NoLanes) {\n        return NoLanes;\n      }\n\n      var nextLanes = NoLanes;\n      var suspendedLanes = root.suspendedLanes;\n      var pingedLanes = root.pingedLanes; // Do not work on any idle work until all the non-idle work has finished,\n      // even if the work is suspended.\n\n      var nonIdlePendingLanes = pendingLanes & NonIdleLanes;\n\n      if (nonIdlePendingLanes !== NoLanes) {\n        var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;\n\n        if (nonIdleUnblockedLanes !== NoLanes) {\n          nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);\n        } else {\n          var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;\n\n          if (nonIdlePingedLanes !== NoLanes) {\n            nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);\n          }\n        }\n      } else {\n        // The only remaining work is Idle.\n        var unblockedLanes = pendingLanes & ~suspendedLanes;\n\n        if (unblockedLanes !== NoLanes) {\n          nextLanes = getHighestPriorityLanes(unblockedLanes);\n        } else {\n          if (pingedLanes !== NoLanes) {\n            nextLanes = getHighestPriorityLanes(pingedLanes);\n          }\n        }\n      }\n\n      if (nextLanes === NoLanes) {\n        // This should only be reachable if we're suspended\n        // TODO: Consider warning in this path if a fallback timer is not scheduled.\n        return NoLanes;\n      } // If we're already in the middle of a render, switching lanes will interrupt\n      // it and we'll lose our progress. We should only do this if the new lanes are\n      // higher priority.\n\n\n      if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't\n      // bother waiting until the root is complete.\n      (wipLanes & suspendedLanes) === NoLanes) {\n        var nextLane = getHighestPriorityLane(nextLanes);\n        var wipLane = getHighestPriorityLane(wipLanes);\n\n        if ( // Tests whether the next lane is equal or lower priority than the wip\n        // one. This works because the bits decrease in priority as you go left.\n        nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The\n        // only difference between default updates and transition updates is that\n        // default updates do not support refresh transitions.\n        nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) {\n          // Keep working on the existing in-progress tree. Do not interrupt.\n          return wipLanes;\n        }\n      }\n\n      if ((nextLanes & InputContinuousLane) !== NoLanes) {\n        // When updates are sync by default, we entangle continuous priority updates\n        // and default updates, so they render in the same batch. The only reason\n        // they use separate lanes is because continuous updates should interrupt\n        // transitions, but default updates should not.\n        nextLanes |= pendingLanes & DefaultLane;\n      } // Check for entangled lanes and add them to the batch.\n      //\n      // A lane is said to be entangled with another when it's not allowed to render\n      // in a batch that does not also include the other lane. Typically we do this\n      // when multiple updates have the same source, and we only want to respond to\n      // the most recent event from that source.\n      //\n      // Note that we apply entanglements *after* checking for partial work above.\n      // This means that if a lane is entangled during an interleaved event while\n      // it's already rendering, we won't interrupt it. This is intentional, since\n      // entanglement is usually \"best effort\": we'll try our best to render the\n      // lanes in the same batch, but it's not worth throwing out partially\n      // completed work in order to do it.\n      // TODO: Reconsider this. The counter-argument is that the partial work\n      // represents an intermediate state, which we don't want to show to the user.\n      // And by spending extra time finishing it, we're increasing the amount of\n      // time it takes to show the final state, which is what they are actually\n      // waiting for.\n      //\n      // For those exceptions where entanglement is semantically important, like\n      // useMutableSource, we should ensure that there is no partial work at the\n      // time we apply the entanglement.\n\n\n      var entangledLanes = root.entangledLanes;\n\n      if (entangledLanes !== NoLanes) {\n        var entanglements = root.entanglements;\n        var lanes = nextLanes & entangledLanes;\n\n        while (lanes > 0) {\n          var index = pickArbitraryLaneIndex(lanes);\n          var lane = 1 << index;\n          nextLanes |= entanglements[index];\n          lanes &= ~lane;\n        }\n      }\n\n      return nextLanes;\n    }\n\n    function getMostRecentEventTime(root, lanes) {\n      var eventTimes = root.eventTimes;\n      var mostRecentEventTime = NoTimestamp;\n\n      while (lanes > 0) {\n        var index = pickArbitraryLaneIndex(lanes);\n        var lane = 1 << index;\n        var eventTime = eventTimes[index];\n\n        if (eventTime > mostRecentEventTime) {\n          mostRecentEventTime = eventTime;\n        }\n\n        lanes &= ~lane;\n      }\n\n      return mostRecentEventTime;\n    }\n\n    function computeExpirationTime(lane, currentTime) {\n      switch (lane) {\n        case SyncLane:\n        case InputContinuousHydrationLane:\n        case InputContinuousLane:\n          // User interactions should expire slightly more quickly.\n          //\n          // NOTE: This is set to the corresponding constant as in Scheduler.js.\n          // When we made it larger, a product metric in www regressed, suggesting\n          // there's a user interaction that's being starved by a series of\n          // synchronous updates. If that theory is correct, the proper solution is\n          // to fix the starvation. However, this scenario supports the idea that\n          // expiration times are an important safeguard when starvation\n          // does happen.\n          return currentTime + 250;\n\n        case DefaultHydrationLane:\n        case DefaultLane:\n        case TransitionHydrationLane:\n        case TransitionLane1:\n        case TransitionLane2:\n        case TransitionLane3:\n        case TransitionLane4:\n        case TransitionLane5:\n        case TransitionLane6:\n        case TransitionLane7:\n        case TransitionLane8:\n        case TransitionLane9:\n        case TransitionLane10:\n        case TransitionLane11:\n        case TransitionLane12:\n        case TransitionLane13:\n        case TransitionLane14:\n        case TransitionLane15:\n        case TransitionLane16:\n          return currentTime + 5000;\n\n        case RetryLane1:\n        case RetryLane2:\n        case RetryLane3:\n        case RetryLane4:\n        case RetryLane5:\n          // TODO: Retries should be allowed to expire if they are CPU bound for\n          // too long, but when I made this change it caused a spike in browser\n          // crashes. There must be some other underlying bug; not super urgent but\n          // ideally should figure out why and fix it. Unfortunately we don't have\n          // a repro for the crashes, only detected via production metrics.\n          return NoTimestamp;\n\n        case SelectiveHydrationLane:\n        case IdleHydrationLane:\n        case IdleLane:\n        case OffscreenLane:\n          // Anything idle priority or lower should never expire.\n          return NoTimestamp;\n\n        default:\n          {\n            error('Should have found matching lanes. This is a bug in React.');\n          }\n          return NoTimestamp;\n      }\n    }\n\n    function markStarvedLanesAsExpired(root, currentTime) {\n      // TODO: This gets called every time we yield. We can optimize by storing\n      // the earliest expiration time on the root. Then use that to quickly bail out\n      // of this function.\n      var pendingLanes = root.pendingLanes;\n      var suspendedLanes = root.suspendedLanes;\n      var pingedLanes = root.pingedLanes;\n      var expirationTimes = root.expirationTimes; // Iterate through the pending lanes and check if we've reached their\n      // expiration time. If so, we'll assume the update is being starved and mark\n      // it as expired to force it to finish.\n\n      var lanes = pendingLanes;\n\n      while (lanes > 0) {\n        var index = pickArbitraryLaneIndex(lanes);\n        var lane = 1 << index;\n        var expirationTime = expirationTimes[index];\n\n        if (expirationTime === NoTimestamp) {\n          // Found a pending lane with no expiration time. If it's not suspended, or\n          // if it's pinged, assume it's CPU-bound. Compute a new expiration time\n          // using the current time.\n          if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {\n            // Assumes timestamps are monotonically increasing.\n            expirationTimes[index] = computeExpirationTime(lane, currentTime);\n          }\n        } else if (expirationTime <= currentTime) {\n          // This lane expired\n          root.expiredLanes |= lane;\n        }\n\n        lanes &= ~lane;\n      }\n    } // This returns the highest priority pending lanes regardless of whether they\n\n\n    function getLanesToRetrySynchronouslyOnError(root) {\n      var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;\n\n      if (everythingButOffscreen !== NoLanes) {\n        return everythingButOffscreen;\n      }\n\n      if (everythingButOffscreen & OffscreenLane) {\n        return OffscreenLane;\n      }\n\n      return NoLanes;\n    }\n\n    function includesSyncLane(lanes) {\n      return (lanes & SyncLane) !== NoLanes;\n    }\n\n    function includesNonIdleWork(lanes) {\n      return (lanes & NonIdleLanes) !== NoLanes;\n    }\n\n    function includesOnlyRetries(lanes) {\n      return (lanes & RetryLanes) === lanes;\n    }\n\n    function includesOnlyTransitions(lanes) {\n      return (lanes & TransitionLanes) === lanes;\n    }\n\n    function includesBlockingLane(root, lanes) {\n      var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;\n      return (lanes & SyncDefaultLanes) !== NoLanes;\n    }\n\n    function includesExpiredLane(root, lanes) {\n      // This is a separate check from includesBlockingLane because a lane can\n      // expire after a render has already started.\n      return (lanes & root.expiredLanes) !== NoLanes;\n    }\n\n    function isTransitionLane(lane) {\n      return (lane & TransitionLanes) !== 0;\n    }\n\n    function claimNextTransitionLane() {\n      // Cycle through the lanes, assigning each new transition to the next lane.\n      // In most cases, this means every transition gets its own lane, until we\n      // run out of lanes and cycle back to the beginning.\n      var lane = nextTransitionLane;\n      nextTransitionLane <<= 1;\n\n      if ((nextTransitionLane & TransitionLanes) === 0) {\n        nextTransitionLane = TransitionLane1;\n      }\n\n      return lane;\n    }\n\n    function claimNextRetryLane() {\n      var lane = nextRetryLane;\n      nextRetryLane <<= 1;\n\n      if ((nextRetryLane & RetryLanes) === 0) {\n        nextRetryLane = RetryLane1;\n      }\n\n      return lane;\n    }\n\n    function getHighestPriorityLane(lanes) {\n      return lanes & -lanes;\n    }\n\n    function pickArbitraryLane(lanes) {\n      // This wrapper function gets inlined. Only exists so to communicate that it\n      // doesn't matter which bit is selected; you can pick any bit without\n      // affecting the algorithms where its used. Here I'm using\n      // getHighestPriorityLane because it requires the fewest operations.\n      return getHighestPriorityLane(lanes);\n    }\n\n    function pickArbitraryLaneIndex(lanes) {\n      return 31 - clz32(lanes);\n    }\n\n    function laneToIndex(lane) {\n      return pickArbitraryLaneIndex(lane);\n    }\n\n    function includesSomeLane(a, b) {\n      return (a & b) !== NoLanes;\n    }\n\n    function isSubsetOfLanes(set, subset) {\n      return (set & subset) === subset;\n    }\n\n    function mergeLanes(a, b) {\n      return a | b;\n    }\n\n    function removeLanes(set, subset) {\n      return set & ~subset;\n    }\n\n    function intersectLanes(a, b) {\n      return a & b;\n    } // Seems redundant, but it changes the type from a single lane (used for\n    // updates) to a group of lanes (used for flushing work).\n\n\n    function laneToLanes(lane) {\n      return lane;\n    }\n\n    function createLaneMap(initial) {\n      // Intentionally pushing one by one.\n      // https://v8.dev/blog/elements-kinds#avoid-creating-holes\n      var laneMap = [];\n\n      for (var i = 0; i < TotalLanes; i++) {\n        laneMap.push(initial);\n      }\n\n      return laneMap;\n    }\n\n    function markRootUpdated(root, updateLane, eventTime) {\n      root.pendingLanes |= updateLane; // If there are any suspended transitions, it's possible this new update\n      // could unblock them. Clear the suspended lanes so that we can try rendering\n      // them again.\n      //\n      // TODO: We really only need to unsuspend only lanes that are in the\n      // `subtreeLanes` of the updated fiber, or the update lanes of the return\n      // path. This would exclude suspended updates in an unrelated sibling tree,\n      // since there's no way for this update to unblock it.\n      //\n      // We don't do this if the incoming update is idle, because we never process\n      // idle updates until after all the regular updates have finished; there's no\n      // way it could unblock a transition.\n\n      if (updateLane !== IdleLane) {\n        root.suspendedLanes = NoLanes;\n        root.pingedLanes = NoLanes;\n      }\n\n      var eventTimes = root.eventTimes;\n      var index = laneToIndex(updateLane); // We can always overwrite an existing timestamp because we prefer the most\n      // recent event, and we assume time is monotonically increasing.\n\n      eventTimes[index] = eventTime;\n    }\n\n    function markRootSuspended(root, suspendedLanes) {\n      root.suspendedLanes |= suspendedLanes;\n      root.pingedLanes &= ~suspendedLanes; // The suspended lanes are no longer CPU-bound. Clear their expiration times.\n\n      var expirationTimes = root.expirationTimes;\n      var lanes = suspendedLanes;\n\n      while (lanes > 0) {\n        var index = pickArbitraryLaneIndex(lanes);\n        var lane = 1 << index;\n        expirationTimes[index] = NoTimestamp;\n        lanes &= ~lane;\n      }\n    }\n\n    function markRootPinged(root, pingedLanes, eventTime) {\n      root.pingedLanes |= root.suspendedLanes & pingedLanes;\n    }\n\n    function markRootFinished(root, remainingLanes) {\n      var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;\n      root.pendingLanes = remainingLanes; // Let's try everything again\n\n      root.suspendedLanes = 0;\n      root.pingedLanes = 0;\n      root.expiredLanes &= remainingLanes;\n      root.mutableReadLanes &= remainingLanes;\n      root.entangledLanes &= remainingLanes;\n      var entanglements = root.entanglements;\n      var eventTimes = root.eventTimes;\n      var expirationTimes = root.expirationTimes; // Clear the lanes that no longer have pending work\n\n      var lanes = noLongerPendingLanes;\n\n      while (lanes > 0) {\n        var index = pickArbitraryLaneIndex(lanes);\n        var lane = 1 << index;\n        entanglements[index] = NoLanes;\n        eventTimes[index] = NoTimestamp;\n        expirationTimes[index] = NoTimestamp;\n        lanes &= ~lane;\n      }\n    }\n\n    function markRootEntangled(root, entangledLanes) {\n      // In addition to entangling each of the given lanes with each other, we also\n      // have to consider _transitive_ entanglements. For each lane that is already\n      // entangled with *any* of the given lanes, that lane is now transitively\n      // entangled with *all* the given lanes.\n      //\n      // Translated: If C is entangled with A, then entangling A with B also\n      // entangles C with B.\n      //\n      // If this is hard to grasp, it might help to intentionally break this\n      // function and look at the tests that fail in ReactTransition-test.js. Try\n      // commenting out one of the conditions below.\n      var rootEntangledLanes = root.entangledLanes |= entangledLanes;\n      var entanglements = root.entanglements;\n      var lanes = rootEntangledLanes;\n\n      while (lanes) {\n        var index = pickArbitraryLaneIndex(lanes);\n        var lane = 1 << index;\n\n        if ( // Is this one of the newly entangled lanes?\n        lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?\n        entanglements[index] & entangledLanes) {\n          entanglements[index] |= entangledLanes;\n        }\n\n        lanes &= ~lane;\n      }\n    }\n\n    var DiscreteEventPriority = SyncLane;\n    var ContinuousEventPriority = InputContinuousLane;\n    var DefaultEventPriority = DefaultLane;\n    var IdleEventPriority = IdleLane;\n    var currentUpdatePriority = NoLane;\n\n    function getCurrentUpdatePriority() {\n      return currentUpdatePriority;\n    }\n\n    function setCurrentUpdatePriority(newPriority) {\n      currentUpdatePriority = newPriority;\n    }\n\n    function higherEventPriority(a, b) {\n      return a !== 0 && a < b ? a : b;\n    }\n\n    function lowerEventPriority(a, b) {\n      return a === 0 || a > b ? a : b;\n    }\n\n    function isHigherEventPriority(a, b) {\n      return a !== 0 && a < b;\n    }\n\n    function lanesToEventPriority(lanes) {\n      var lane = getHighestPriorityLane(lanes);\n\n      if (!isHigherEventPriority(DiscreteEventPriority, lane)) {\n        return DiscreteEventPriority;\n      }\n\n      if (!isHigherEventPriority(ContinuousEventPriority, lane)) {\n        return ContinuousEventPriority;\n      }\n\n      if (includesNonIdleWork(lane)) {\n        return DefaultEventPriority;\n      }\n\n      return IdleEventPriority;\n    } // Renderers that don't support hydration\n    // can re-export everything from this module.\n\n\n    function shim() {\n      throw new Error('The current renderer does not support hydration. ' + 'This error is likely caused by a bug in React. ' + 'Please file an issue.');\n    } // Hydration (when unsupported)\n\n\n    var isSuspenseInstancePending = shim;\n    var isSuspenseInstanceFallback = shim;\n    var hydrateTextInstance = shim;\n    var errorHydratingContainer = shim;\n    var NO_CONTEXT = {};\n    var UPDATE_SIGNAL = {};\n    var nodeToInstanceMap = new WeakMap();\n    {\n      Object.freeze(NO_CONTEXT);\n      Object.freeze(UPDATE_SIGNAL);\n    }\n\n    function getPublicInstance(inst) {\n      switch (inst.tag) {\n        case 'INSTANCE':\n          var createNodeMock = inst.rootContainerInstance.createNodeMock;\n          var mockNode = createNodeMock({\n            type: inst.type,\n            props: inst.props\n          });\n\n          if (typeof mockNode === 'object' && mockNode !== null) {\n            nodeToInstanceMap.set(mockNode, inst);\n          }\n\n          return mockNode;\n\n        default:\n          return inst;\n      }\n    }\n\n    function appendChild(parentInstance, child) {\n      {\n        if (!isArray(parentInstance.children)) {\n          error('An invalid container has been provided. ' + 'This may indicate that another renderer is being used in addition to the test renderer. ' + '(For example, ReactDOM.createPortal inside of a ReactTestRenderer tree.) ' + 'This is not supported.');\n        }\n      }\n      var index = parentInstance.children.indexOf(child);\n\n      if (index !== -1) {\n        parentInstance.children.splice(index, 1);\n      }\n\n      parentInstance.children.push(child);\n    }\n\n    function insertBefore(parentInstance, child, beforeChild) {\n      var index = parentInstance.children.indexOf(child);\n\n      if (index !== -1) {\n        parentInstance.children.splice(index, 1);\n      }\n\n      var beforeIndex = parentInstance.children.indexOf(beforeChild);\n      parentInstance.children.splice(beforeIndex, 0, child);\n    }\n\n    function removeChild(parentInstance, child) {\n      var index = parentInstance.children.indexOf(child);\n      parentInstance.children.splice(index, 1);\n    }\n\n    function clearContainer(container) {\n      container.children.splice(0);\n    }\n\n    function getRootHostContext(rootContainerInstance) {\n      return NO_CONTEXT;\n    }\n\n    function getChildHostContext(parentHostContext, type, rootContainerInstance) {\n      return NO_CONTEXT;\n    }\n\n    function prepareForCommit(containerInfo) {\n      // noop\n      return null;\n    }\n\n    function resetAfterCommit(containerInfo) {// noop\n    }\n\n    function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {\n      return {\n        type: type,\n        props: props,\n        isHidden: false,\n        children: [],\n        internalInstanceHandle: internalInstanceHandle,\n        rootContainerInstance: rootContainerInstance,\n        tag: 'INSTANCE'\n      };\n    }\n\n    function appendInitialChild(parentInstance, child) {\n      var index = parentInstance.children.indexOf(child);\n\n      if (index !== -1) {\n        parentInstance.children.splice(index, 1);\n      }\n\n      parentInstance.children.push(child);\n    }\n\n    function prepareUpdate(testElement, type, oldProps, newProps, rootContainerInstance, hostContext) {\n      return UPDATE_SIGNAL;\n    }\n\n    function shouldSetTextContent(type, props) {\n      return false;\n    }\n\n    function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {\n      return {\n        text: text,\n        isHidden: false,\n        tag: 'TEXT'\n      };\n    }\n\n    function getCurrentEventPriority() {\n      return DefaultEventPriority;\n    }\n\n    var scheduleTimeout = setTimeout;\n    var cancelTimeout = clearTimeout;\n    var noTimeout = -1; // -------------------\n\n    function commitUpdate(instance, updatePayload, type, oldProps, newProps, internalInstanceHandle) {\n      instance.type = type;\n      instance.props = newProps;\n    }\n\n    function commitTextUpdate(textInstance, oldText, newText) {\n      textInstance.text = newText;\n    }\n\n    function resetTextContent(testElement) {// noop\n    }\n\n    var appendChildToContainer = appendChild;\n    var insertInContainerBefore = insertBefore;\n    var removeChildFromContainer = removeChild;\n\n    function hideInstance(instance) {\n      instance.isHidden = true;\n    }\n\n    function hideTextInstance(textInstance) {\n      textInstance.isHidden = true;\n    }\n\n    function unhideInstance(instance, props) {\n      instance.isHidden = false;\n    }\n\n    function unhideTextInstance(textInstance, text) {\n      textInstance.isHidden = false;\n    }\n\n    function preparePortalMount(portalInstance) {// noop\n    }\n\n    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n    var prefix;\n\n    function describeBuiltInComponentFrame(name, source, ownerFn) {\n      {\n        if (prefix === undefined) {\n          // Extract the VM specific prefix used by each line.\n          try {\n            throw Error();\n          } catch (x) {\n            var match = x.stack.trim().match(/\\n( *(at )?)/);\n            prefix = match && match[1] || '';\n          }\n        } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n        return '\\n' + prefix + name;\n      }\n    }\n\n    var reentry = false;\n    var componentFrameCache;\n    {\n      var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n      componentFrameCache = new PossiblyWeakMap();\n    }\n\n    function describeNativeComponentFrame(fn, construct) {\n      // If something asked for a stack inside a fake render, it should get ignored.\n      if (!fn || reentry) {\n        return '';\n      }\n\n      {\n        var frame = componentFrameCache.get(fn);\n\n        if (frame !== undefined) {\n          return frame;\n        }\n      }\n      var control;\n      reentry = true;\n      var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.\n\n      Error.prepareStackTrace = undefined;\n      var previousDispatcher;\n      {\n        previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n        // for warnings.\n\n        ReactCurrentDispatcher.current = null;\n        disableLogs();\n      }\n\n      try {\n        // This should throw.\n        if (construct) {\n          // Something should be setting the props in the constructor.\n          var Fake = function () {\n            throw Error();\n          }; // $FlowFixMe\n\n\n          Object.defineProperty(Fake.prototype, 'props', {\n            set: function () {\n              // We use a throwing setter instead of frozen or non-writable props\n              // because that won't throw in a non-strict mode function.\n              throw Error();\n            }\n          });\n\n          if (typeof Reflect === 'object' && Reflect.construct) {\n            // We construct a different control for this case to include any extra\n            // frames added by the construct call.\n            try {\n              Reflect.construct(Fake, []);\n            } catch (x) {\n              control = x;\n            }\n\n            Reflect.construct(fn, [], Fake);\n          } else {\n            try {\n              Fake.call();\n            } catch (x) {\n              control = x;\n            }\n\n            fn.call(Fake.prototype);\n          }\n        } else {\n          try {\n            throw Error();\n          } catch (x) {\n            control = x;\n          }\n\n          fn();\n        }\n      } catch (sample) {\n        // This is inlined manually because closure doesn't do it for us.\n        if (sample && control && typeof sample.stack === 'string') {\n          // This extracts the first frame from the sample that isn't also in the control.\n          // Skipping one frame that we assume is the frame that calls the two.\n          var sampleLines = sample.stack.split('\\n');\n          var controlLines = control.stack.split('\\n');\n          var s = sampleLines.length - 1;\n          var c = controlLines.length - 1;\n\n          while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n            // We expect at least one stack frame to be shared.\n            // Typically this will be the root most one. However, stack frames may be\n            // cut off due to maximum stack limits. In this case, one maybe cut off\n            // earlier than the other. We assume that the sample is longer or the same\n            // and there for cut off earlier. So we should find the root most frame in\n            // the sample somewhere in the control.\n            c--;\n          }\n\n          for (; s >= 1 && c >= 0; s--, c--) {\n            // Next we find the first one that isn't the same which should be the\n            // frame that called our sample function and the control.\n            if (sampleLines[s] !== controlLines[c]) {\n              // In V8, the first line is describing the message but other VMs don't.\n              // If we're about to return the first line, and the control is also on the same\n              // line, that's a pretty good indicator that our sample threw at same line as\n              // the control. I.e. before we entered the sample frame. So we ignore this result.\n              // This can happen if you passed a class to function component, or non-function.\n              if (s !== 1 || c !== 1) {\n                do {\n                  s--;\n                  c--; // We may still have similar intermediate frames from the construct call.\n                  // The next one that isn't the same should be our match though.\n\n                  if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                    // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                    var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                    // but we have a user-provided \"displayName\"\n                    // splice it in to make the stack more readable.\n\n\n                    if (fn.displayName && _frame.includes('<anonymous>')) {\n                      _frame = _frame.replace('<anonymous>', fn.displayName);\n                    }\n\n                    {\n                      if (typeof fn === 'function') {\n                        componentFrameCache.set(fn, _frame);\n                      }\n                    } // Return the line we found.\n\n                    return _frame;\n                  }\n                } while (s >= 1 && c >= 0);\n              }\n\n              break;\n            }\n          }\n        }\n      } finally {\n        reentry = false;\n        {\n          ReactCurrentDispatcher.current = previousDispatcher;\n          reenableLogs();\n        }\n        Error.prepareStackTrace = previousPrepareStackTrace;\n      } // Fallback to just using the name if we couldn't make it throw.\n\n\n      var name = fn ? fn.displayName || fn.name : '';\n      var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n      {\n        if (typeof fn === 'function') {\n          componentFrameCache.set(fn, syntheticFrame);\n        }\n      }\n      return syntheticFrame;\n    }\n\n    function describeClassComponentFrame(ctor, source, ownerFn) {\n      {\n        return describeNativeComponentFrame(ctor, true);\n      }\n    }\n\n    function describeFunctionComponentFrame(fn, source, ownerFn) {\n      {\n        return describeNativeComponentFrame(fn, false);\n      }\n    }\n\n    function shouldConstruct(Component) {\n      var prototype = Component.prototype;\n      return !!(prototype && prototype.isReactComponent);\n    }\n\n    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n      if (type == null) {\n        return '';\n      }\n\n      if (typeof type === 'function') {\n        {\n          return describeNativeComponentFrame(type, shouldConstruct(type));\n        }\n      }\n\n      if (typeof type === 'string') {\n        return describeBuiltInComponentFrame(type);\n      }\n\n      switch (type) {\n        case REACT_SUSPENSE_TYPE:\n          return describeBuiltInComponentFrame('Suspense');\n\n        case REACT_SUSPENSE_LIST_TYPE:\n          return describeBuiltInComponentFrame('SuspenseList');\n      }\n\n      if (typeof type === 'object') {\n        switch (type.$$typeof) {\n          case REACT_FORWARD_REF_TYPE:\n            return describeFunctionComponentFrame(type.render);\n\n          case REACT_MEMO_TYPE:\n            // Memo may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n\n          case REACT_LAZY_TYPE:\n            {\n              var lazyComponent = type;\n              var payload = lazyComponent._payload;\n              var init = lazyComponent._init;\n\n              try {\n                // Lazy may contain any component type so we recursively resolve it.\n                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n              } catch (x) {}\n            }\n        }\n      }\n\n      return '';\n    }\n\n    var hasOwnProperty = Object.prototype.hasOwnProperty;\n    var loggedTypeFailures = {};\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\n    function setCurrentlyValidatingElement(element) {\n      {\n        if (element) {\n          var owner = element._owner;\n          var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n          ReactDebugCurrentFrame.setExtraStackFrame(stack);\n        } else {\n          ReactDebugCurrentFrame.setExtraStackFrame(null);\n        }\n      }\n    }\n\n    function checkPropTypes(typeSpecs, values, location, componentName, element) {\n      {\n        // $FlowFixMe This is okay but Flow doesn't know it.\n        var has = Function.call.bind(hasOwnProperty);\n\n        for (var typeSpecName in typeSpecs) {\n          if (has(typeSpecs, typeSpecName)) {\n            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n            // fail the render phase where it didn't fail before. So we log it.\n            // After these have been cleaned up, we'll let them throw.\n\n            try {\n              // This is intentionally an invariant that gets caught. It's the same\n              // behavior as without this statement except with a better message.\n              if (typeof typeSpecs[typeSpecName] !== 'function') {\n                // eslint-disable-next-line react-internal/prod-error-codes\n                var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\n                err.name = 'Invariant Violation';\n                throw err;\n              }\n\n              error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\n            } catch (ex) {\n              error$1 = ex;\n            }\n\n            if (error$1 && !(error$1 instanceof Error)) {\n              setCurrentlyValidatingElement(element);\n              error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\n              setCurrentlyValidatingElement(null);\n            }\n\n            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n              // Only monitor this failure once because there tends to be a lot of the\n              // same error.\n              loggedTypeFailures[error$1.message] = true;\n              setCurrentlyValidatingElement(element);\n              error('Failed %s type: %s', location, error$1.message);\n              setCurrentlyValidatingElement(null);\n            }\n          }\n        }\n      }\n    }\n\n    var valueStack = [];\n    var fiberStack;\n    {\n      fiberStack = [];\n    }\n    var index = -1;\n\n    function createCursor(defaultValue) {\n      return {\n        current: defaultValue\n      };\n    }\n\n    function pop(cursor, fiber) {\n      if (index < 0) {\n        {\n          error('Unexpected pop.');\n        }\n        return;\n      }\n\n      {\n        if (fiber !== fiberStack[index]) {\n          error('Unexpected Fiber popped.');\n        }\n      }\n      cursor.current = valueStack[index];\n      valueStack[index] = null;\n      {\n        fiberStack[index] = null;\n      }\n      index--;\n    }\n\n    function push(cursor, value, fiber) {\n      index++;\n      valueStack[index] = cursor.current;\n      {\n        fiberStack[index] = fiber;\n      }\n      cursor.current = value;\n    }\n\n    var warnedAboutMissingGetChildContext;\n    {\n      warnedAboutMissingGetChildContext = {};\n    }\n    var emptyContextObject = {};\n    {\n      Object.freeze(emptyContextObject);\n    } // A cursor to the current merged context object on the stack.\n\n    var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.\n\n    var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.\n    // We use this to get access to the parent context after we have already\n    // pushed the next context provider, and now need to merge their contexts.\n\n    var previousContext = emptyContextObject;\n\n    function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {\n      {\n        if (didPushOwnContextIfProvider && isContextProvider(Component)) {\n          // If the fiber is a context provider itself, when we read its context\n          // we may have already pushed its own child context on the stack. A context\n          // provider should not \"see\" its own child context. Therefore we read the\n          // previous (parent) context instead for a context provider.\n          return previousContext;\n        }\n\n        return contextStackCursor.current;\n      }\n    }\n\n    function cacheContext(workInProgress, unmaskedContext, maskedContext) {\n      {\n        var instance = workInProgress.stateNode;\n        instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;\n        instance.__reactInternalMemoizedMaskedChildContext = maskedContext;\n      }\n    }\n\n    function getMaskedContext(workInProgress, unmaskedContext) {\n      {\n        var type = workInProgress.type;\n        var contextTypes = type.contextTypes;\n\n        if (!contextTypes) {\n          return emptyContextObject;\n        } // Avoid recreating masked context unless unmasked context has changed.\n        // Failing to do this will result in unnecessary calls to componentWillReceiveProps.\n        // This may trigger infinite loops if componentWillReceiveProps calls setState.\n\n\n        var instance = workInProgress.stateNode;\n\n        if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {\n          return instance.__reactInternalMemoizedMaskedChildContext;\n        }\n\n        var context = {};\n\n        for (var key in contextTypes) {\n          context[key] = unmaskedContext[key];\n        }\n\n        {\n          var name = getComponentNameFromFiber(workInProgress) || 'Unknown';\n          checkPropTypes(contextTypes, context, 'context', name);\n        } // Cache unmasked context so we can avoid recreating masked context unless necessary.\n        // Context is created before the class component is instantiated so check for instance.\n\n        if (instance) {\n          cacheContext(workInProgress, unmaskedContext, context);\n        }\n\n        return context;\n      }\n    }\n\n    function hasContextChanged() {\n      {\n        return didPerformWorkStackCursor.current;\n      }\n    }\n\n    function isContextProvider(type) {\n      {\n        var childContextTypes = type.childContextTypes;\n        return childContextTypes !== null && childContextTypes !== undefined;\n      }\n    }\n\n    function popContext(fiber) {\n      {\n        pop(didPerformWorkStackCursor, fiber);\n        pop(contextStackCursor, fiber);\n      }\n    }\n\n    function popTopLevelContextObject(fiber) {\n      {\n        pop(didPerformWorkStackCursor, fiber);\n        pop(contextStackCursor, fiber);\n      }\n    }\n\n    function pushTopLevelContextObject(fiber, context, didChange) {\n      {\n        if (contextStackCursor.current !== emptyContextObject) {\n          throw new Error('Unexpected context found on stack. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n        }\n\n        push(contextStackCursor, context, fiber);\n        push(didPerformWorkStackCursor, didChange, fiber);\n      }\n    }\n\n    function processChildContext(fiber, type, parentContext) {\n      {\n        var instance = fiber.stateNode;\n        var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.\n        // It has only been added in Fiber to match the (unintentional) behavior in Stack.\n\n        if (typeof instance.getChildContext !== 'function') {\n          {\n            var componentName = getComponentNameFromFiber(fiber) || 'Unknown';\n\n            if (!warnedAboutMissingGetChildContext[componentName]) {\n              warnedAboutMissingGetChildContext[componentName] = true;\n              error('%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);\n            }\n          }\n          return parentContext;\n        }\n\n        var childContext = instance.getChildContext();\n\n        for (var contextKey in childContext) {\n          if (!(contextKey in childContextTypes)) {\n            throw new Error((getComponentNameFromFiber(fiber) || 'Unknown') + \".getChildContext(): key \\\"\" + contextKey + \"\\\" is not defined in childContextTypes.\");\n          }\n        }\n\n        {\n          var name = getComponentNameFromFiber(fiber) || 'Unknown';\n          checkPropTypes(childContextTypes, childContext, 'child context', name);\n        }\n        return assign({}, parentContext, childContext);\n      }\n    }\n\n    function pushContextProvider(workInProgress) {\n      {\n        var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.\n        // If the instance does not exist yet, we will push null at first,\n        // and replace it on the stack later when invalidating the context.\n\n        var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.\n        // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.\n\n        previousContext = contextStackCursor.current;\n        push(contextStackCursor, memoizedMergedChildContext, workInProgress);\n        push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);\n        return true;\n      }\n    }\n\n    function invalidateContextProvider(workInProgress, type, didChange) {\n      {\n        var instance = workInProgress.stateNode;\n\n        if (!instance) {\n          throw new Error('Expected to have an instance by this point. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n        }\n\n        if (didChange) {\n          // Merge parent and own context.\n          // Skip this if we're not updating due to sCU.\n          // This avoids unnecessarily recomputing memoized values.\n          var mergedContext = processChildContext(workInProgress, type, previousContext);\n          instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.\n          // It is important to unwind the context in the reverse order.\n\n          pop(didPerformWorkStackCursor, workInProgress);\n          pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.\n\n          push(contextStackCursor, mergedContext, workInProgress);\n          push(didPerformWorkStackCursor, didChange, workInProgress);\n        } else {\n          pop(didPerformWorkStackCursor, workInProgress);\n          push(didPerformWorkStackCursor, didChange, workInProgress);\n        }\n      }\n    }\n\n    function findCurrentUnmaskedContext(fiber) {\n      {\n        // Currently this is only used with renderSubtreeIntoContainer; not sure if it\n        // makes sense elsewhere\n        if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {\n          throw new Error('Expected subtree parent to be a mounted class component. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n        }\n\n        var node = fiber;\n\n        do {\n          switch (node.tag) {\n            case HostRoot:\n              return node.stateNode.context;\n\n            case ClassComponent:\n              {\n                var Component = node.type;\n\n                if (isContextProvider(Component)) {\n                  return node.stateNode.__reactInternalMemoizedMergedChildContext;\n                }\n\n                break;\n              }\n          }\n\n          node = node.return;\n        } while (node !== null);\n\n        throw new Error('Found unexpected detached subtree parent. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n      }\n    }\n\n    var LegacyRoot = 0;\n    var ConcurrentRoot = 1;\n    /**\n     * inlined Object.is polyfill to avoid requiring consumers ship their own\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n     */\n\n    function is(x, y) {\n      return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare\n      ;\n    }\n\n    var objectIs = typeof Object.is === 'function' ? Object.is : is;\n    var syncQueue = null;\n    var includesLegacySyncCallbacks = false;\n    var isFlushingSyncQueue = false;\n\n    function scheduleSyncCallback(callback) {\n      // Push this callback into an internal queue. We'll flush these either in\n      // the next tick, or earlier if something calls `flushSyncCallbackQueue`.\n      if (syncQueue === null) {\n        syncQueue = [callback];\n      } else {\n        // Push onto existing queue. Don't need to schedule a callback because\n        // we already scheduled one when we created the queue.\n        syncQueue.push(callback);\n      }\n    }\n\n    function scheduleLegacySyncCallback(callback) {\n      includesLegacySyncCallbacks = true;\n      scheduleSyncCallback(callback);\n    }\n\n    function flushSyncCallbacksOnlyInLegacyMode() {\n      // Only flushes the queue if there's a legacy sync callback scheduled.\n      // TODO: There's only a single type of callback: performSyncOnWorkOnRoot. So\n      // it might make more sense for the queue to be a list of roots instead of a\n      // list of generic callbacks. Then we can have two: one for legacy roots, one\n      // for concurrent roots. And this method would only flush the legacy ones.\n      if (includesLegacySyncCallbacks) {\n        flushSyncCallbacks();\n      }\n    }\n\n    function flushSyncCallbacks() {\n      if (!isFlushingSyncQueue && syncQueue !== null) {\n        // Prevent re-entrance.\n        isFlushingSyncQueue = true;\n        var i = 0;\n        var previousUpdatePriority = getCurrentUpdatePriority();\n\n        try {\n          var isSync = true;\n          var queue = syncQueue; // TODO: Is this necessary anymore? The only user code that runs in this\n          // queue is in the render or commit phases.\n\n          setCurrentUpdatePriority(DiscreteEventPriority);\n\n          for (; i < queue.length; i++) {\n            var callback = queue[i];\n\n            do {\n              callback = callback(isSync);\n            } while (callback !== null);\n          }\n\n          syncQueue = null;\n          includesLegacySyncCallbacks = false;\n        } catch (error) {\n          // If something throws, leave the remaining callbacks on the queue.\n          if (syncQueue !== null) {\n            syncQueue = syncQueue.slice(i + 1);\n          } // Resume flushing in the next tick\n\n\n          scheduleCallback(ImmediatePriority, flushSyncCallbacks);\n          throw error;\n        } finally {\n          setCurrentUpdatePriority(previousUpdatePriority);\n          isFlushingSyncQueue = false;\n        }\n      }\n\n      return null;\n    } // This is imported by the event replaying implementation in React DOM. It's\n    // in a separate file to break a circular dependency between the renderer and\n    // the reconciler.\n\n\n    function isRootDehydrated(root) {\n      var currentState = root.current.memoizedState;\n      return currentState.isDehydrated;\n    }\n\n    var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;\n    var NoTransition = null;\n\n    function requestCurrentTransition() {\n      return ReactCurrentBatchConfig.transition;\n    }\n    /**\n     * Performs equality by iterating through keys on an object and returning false\n     * when any key has values which are not strictly equal between the arguments.\n     * Returns true when the values of all keys are strictly equal.\n     */\n\n\n    function shallowEqual(objA, objB) {\n      if (objectIs(objA, objB)) {\n        return true;\n      }\n\n      if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {\n        return false;\n      }\n\n      var keysA = Object.keys(objA);\n      var keysB = Object.keys(objB);\n\n      if (keysA.length !== keysB.length) {\n        return false;\n      } // Test for A's keys different from B.\n\n\n      for (var i = 0; i < keysA.length; i++) {\n        var currentKey = keysA[i];\n\n        if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    function describeFiber(fiber) {\n      var owner = fiber._debugOwner ? fiber._debugOwner.type : null;\n      var source = fiber._debugSource;\n\n      switch (fiber.tag) {\n        case HostComponent:\n          return describeBuiltInComponentFrame(fiber.type);\n\n        case LazyComponent:\n          return describeBuiltInComponentFrame('Lazy');\n\n        case SuspenseComponent:\n          return describeBuiltInComponentFrame('Suspense');\n\n        case SuspenseListComponent:\n          return describeBuiltInComponentFrame('SuspenseList');\n\n        case FunctionComponent:\n        case IndeterminateComponent:\n        case SimpleMemoComponent:\n          return describeFunctionComponentFrame(fiber.type);\n\n        case ForwardRef:\n          return describeFunctionComponentFrame(fiber.type.render);\n\n        case ClassComponent:\n          return describeClassComponentFrame(fiber.type);\n\n        default:\n          return '';\n      }\n    }\n\n    function getStackByFiberInDevAndProd(workInProgress) {\n      try {\n        var info = '';\n        var node = workInProgress;\n\n        do {\n          info += describeFiber(node);\n          node = node.return;\n        } while (node);\n\n        return info;\n      } catch (x) {\n        return '\\nError generating stack: ' + x.message + '\\n' + x.stack;\n      }\n    }\n\n    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n    var current = null;\n    var isRendering = false;\n\n    function getCurrentFiberOwnerNameInDevOrNull() {\n      {\n        if (current === null) {\n          return null;\n        }\n\n        var owner = current._debugOwner;\n\n        if (owner !== null && typeof owner !== 'undefined') {\n          return getComponentNameFromFiber(owner);\n        }\n      }\n      return null;\n    }\n\n    function getCurrentFiberStackInDev() {\n      {\n        if (current === null) {\n          return '';\n        } // Safe because if current fiber exists, we are reconciling,\n        // and it is guaranteed to be the work-in-progress version.\n\n\n        return getStackByFiberInDevAndProd(current);\n      }\n    }\n\n    function resetCurrentFiber() {\n      {\n        ReactDebugCurrentFrame$1.getCurrentStack = null;\n        current = null;\n        isRendering = false;\n      }\n    }\n\n    function setCurrentFiber(fiber) {\n      {\n        ReactDebugCurrentFrame$1.getCurrentStack = getCurrentFiberStackInDev;\n        current = fiber;\n        isRendering = false;\n      }\n    }\n\n    function setIsRendering(rendering) {\n      {\n        isRendering = rendering;\n      }\n    }\n\n    var ReactStrictModeWarnings = {\n      recordUnsafeLifecycleWarnings: function (fiber, instance) {},\n      flushPendingUnsafeLifecycleWarnings: function () {},\n      recordLegacyContextWarning: function (fiber, instance) {},\n      flushLegacyContextWarning: function () {},\n      discardPendingWarnings: function () {}\n    };\n    {\n      var findStrictRoot = function (fiber) {\n        var maybeStrictRoot = null;\n        var node = fiber;\n\n        while (node !== null) {\n          if (node.mode & StrictLegacyMode) {\n            maybeStrictRoot = node;\n          }\n\n          node = node.return;\n        }\n\n        return maybeStrictRoot;\n      };\n\n      var setToSortedString = function (set) {\n        var array = [];\n        set.forEach(function (value) {\n          array.push(value);\n        });\n        return array.sort().join(', ');\n      };\n\n      var pendingComponentWillMountWarnings = [];\n      var pendingUNSAFE_ComponentWillMountWarnings = [];\n      var pendingComponentWillReceivePropsWarnings = [];\n      var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n      var pendingComponentWillUpdateWarnings = [];\n      var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.\n\n      var didWarnAboutUnsafeLifecycles = new Set();\n\n      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {\n        // Dedupe strategy: Warn once per component.\n        if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {\n          return;\n        }\n\n        if (typeof instance.componentWillMount === 'function' && // Don't warn about react-lifecycles-compat polyfilled components.\n        instance.componentWillMount.__suppressDeprecationWarning !== true) {\n          pendingComponentWillMountWarnings.push(fiber);\n        }\n\n        if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === 'function') {\n          pendingUNSAFE_ComponentWillMountWarnings.push(fiber);\n        }\n\n        if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {\n          pendingComponentWillReceivePropsWarnings.push(fiber);\n        }\n\n        if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n          pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);\n        }\n\n        if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {\n          pendingComponentWillUpdateWarnings.push(fiber);\n        }\n\n        if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === 'function') {\n          pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);\n        }\n      };\n\n      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {\n        // We do an initial pass to gather component names\n        var componentWillMountUniqueNames = new Set();\n\n        if (pendingComponentWillMountWarnings.length > 0) {\n          pendingComponentWillMountWarnings.forEach(function (fiber) {\n            componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n            didWarnAboutUnsafeLifecycles.add(fiber.type);\n          });\n          pendingComponentWillMountWarnings = [];\n        }\n\n        var UNSAFE_componentWillMountUniqueNames = new Set();\n\n        if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {\n          pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {\n            UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n            didWarnAboutUnsafeLifecycles.add(fiber.type);\n          });\n          pendingUNSAFE_ComponentWillMountWarnings = [];\n        }\n\n        var componentWillReceivePropsUniqueNames = new Set();\n\n        if (pendingComponentWillReceivePropsWarnings.length > 0) {\n          pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {\n            componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n            didWarnAboutUnsafeLifecycles.add(fiber.type);\n          });\n          pendingComponentWillReceivePropsWarnings = [];\n        }\n\n        var UNSAFE_componentWillReceivePropsUniqueNames = new Set();\n\n        if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {\n          pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {\n            UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n            didWarnAboutUnsafeLifecycles.add(fiber.type);\n          });\n          pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n        }\n\n        var componentWillUpdateUniqueNames = new Set();\n\n        if (pendingComponentWillUpdateWarnings.length > 0) {\n          pendingComponentWillUpdateWarnings.forEach(function (fiber) {\n            componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n            didWarnAboutUnsafeLifecycles.add(fiber.type);\n          });\n          pendingComponentWillUpdateWarnings = [];\n        }\n\n        var UNSAFE_componentWillUpdateUniqueNames = new Set();\n\n        if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {\n          pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {\n            UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n            didWarnAboutUnsafeLifecycles.add(fiber.type);\n          });\n          pendingUNSAFE_ComponentWillUpdateWarnings = [];\n        } // Finally, we flush all the warnings\n        // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'\n\n\n        if (UNSAFE_componentWillMountUniqueNames.size > 0) {\n          var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);\n          error('Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n' + '\\nPlease update the following components: %s', sortedNames);\n        }\n\n        if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {\n          var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);\n\n          error('Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + \"* If you're updating state whenever props change, \" + 'refactor your code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\\n' + '\\nPlease update the following components: %s', _sortedNames);\n        }\n\n        if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {\n          var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);\n\n          error('Using UNSAFE_componentWillUpdate in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + '\\nPlease update the following components: %s', _sortedNames2);\n        }\n\n        if (componentWillMountUniqueNames.size > 0) {\n          var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);\n\n          warn('componentWillMount has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n' + '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' + '\\nPlease update the following components: %s', _sortedNames3);\n        }\n\n        if (componentWillReceivePropsUniqueNames.size > 0) {\n          var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);\n\n          warn('componentWillReceiveProps has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + \"* If you're updating state whenever props change, refactor your \" + 'code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\\n' + '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' + '\\nPlease update the following components: %s', _sortedNames4);\n        }\n\n        if (componentWillUpdateUniqueNames.size > 0) {\n          var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);\n\n          warn('componentWillUpdate has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' + '\\nPlease update the following components: %s', _sortedNames5);\n        }\n      };\n\n      var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.\n\n      var didWarnAboutLegacyContext = new Set();\n\n      ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {\n        var strictRoot = findStrictRoot(fiber);\n\n        if (strictRoot === null) {\n          error('Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n          return;\n        } // Dedup strategy: Warn once per component.\n\n\n        if (didWarnAboutLegacyContext.has(fiber.type)) {\n          return;\n        }\n\n        var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);\n\n        if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {\n          if (warningsForRoot === undefined) {\n            warningsForRoot = [];\n            pendingLegacyContextWarning.set(strictRoot, warningsForRoot);\n          }\n\n          warningsForRoot.push(fiber);\n        }\n      };\n\n      ReactStrictModeWarnings.flushLegacyContextWarning = function () {\n        pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {\n          if (fiberArray.length === 0) {\n            return;\n          }\n\n          var firstFiber = fiberArray[0];\n          var uniqueNames = new Set();\n          fiberArray.forEach(function (fiber) {\n            uniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n            didWarnAboutLegacyContext.add(fiber.type);\n          });\n          var sortedNames = setToSortedString(uniqueNames);\n\n          try {\n            setCurrentFiber(firstFiber);\n            error('Legacy context API has been detected within a strict-mode tree.' + '\\n\\nThe old API will be supported in all 16.x releases, but applications ' + 'using it should migrate to the new version.' + '\\n\\nPlease update the following components: %s' + '\\n\\nLearn more about this warning here: https://reactjs.org/link/legacy-context', sortedNames);\n          } finally {\n            resetCurrentFiber();\n          }\n        });\n      };\n\n      ReactStrictModeWarnings.discardPendingWarnings = function () {\n        pendingComponentWillMountWarnings = [];\n        pendingUNSAFE_ComponentWillMountWarnings = [];\n        pendingComponentWillReceivePropsWarnings = [];\n        pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n        pendingComponentWillUpdateWarnings = [];\n        pendingUNSAFE_ComponentWillUpdateWarnings = [];\n        pendingLegacyContextWarning = new Map();\n      };\n    }\n    /*\n     * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol\n     * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n     *\n     * The functions in this module will throw an easier-to-understand,\n     * easier-to-debug exception with a clear errors message message explaining the\n     * problem. (Instead of a confusing exception thrown inside the implementation\n     * of the `value` object).\n     */\n    // $FlowFixMe only called in DEV, so void return is not possible.\n\n    function typeName(value) {\n      {\n        // toStringTag is needed for namespaced types like Temporal.Instant\n        var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n        var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';\n        return type;\n      }\n    } // $FlowFixMe only called in DEV, so void return is not possible.\n\n\n    function willCoercionThrow(value) {\n      {\n        try {\n          testStringCoercion(value);\n          return false;\n        } catch (e) {\n          return true;\n        }\n      }\n    }\n\n    function testStringCoercion(value) {\n      // If you ended up here by following an exception call stack, here's what's\n      // happened: you supplied an object or symbol value to React (as a prop, key,\n      // DOM attribute, CSS property, string ref, etc.) and when React tried to\n      // coerce it to a string using `'' + value`, an exception was thrown.\n      //\n      // The most common types that will cause this exception are `Symbol` instances\n      // and Temporal objects like `Temporal.Instant`. But any object that has a\n      // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n      // exception. (Library authors do this to prevent users from using built-in\n      // numeric operators like `+` or comparison operators like `>=` because custom\n      // methods are needed to perform accurate arithmetic or comparison.)\n      //\n      // To fix the problem, coerce this object or symbol value to a string before\n      // passing it to React. The most reliable way is usually `String(value)`.\n      //\n      // To find which value is throwing, check the browser or debugger console.\n      // Before this exception was thrown, there should be `console.error` output\n      // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n      // problem and how that type was used: key, atrribute, input value prop, etc.\n      // In most cases, this console output also shows the component and its\n      // ancestor components where the exception happened.\n      //\n      // eslint-disable-next-line react-internal/safe-string-coercion\n      return '' + value;\n    }\n\n    function checkPropStringCoercion(value, propName) {\n      {\n        if (willCoercionThrow(value)) {\n          error('The provided `%s` prop is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', propName, typeName(value));\n          return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n        }\n      }\n    }\n\n    function resolveDefaultProps(Component, baseProps) {\n      if (Component && Component.defaultProps) {\n        // Resolve default props. Taken from ReactElement\n        var props = assign({}, baseProps);\n        var defaultProps = Component.defaultProps;\n\n        for (var propName in defaultProps) {\n          if (props[propName] === undefined) {\n            props[propName] = defaultProps[propName];\n          }\n        }\n\n        return props;\n      }\n\n      return baseProps;\n    }\n\n    var valueCursor = createCursor(null);\n    var rendererSigil;\n    {\n      // Use this to detect multiple renderers using the same context\n      rendererSigil = {};\n    }\n    var currentlyRenderingFiber = null;\n    var lastContextDependency = null;\n    var lastFullyObservedContext = null;\n    var isDisallowedContextReadInDEV = false;\n\n    function resetContextDependencies() {\n      // This is called right before React yields execution, to ensure `readContext`\n      // cannot be called outside the render phase.\n      currentlyRenderingFiber = null;\n      lastContextDependency = null;\n      lastFullyObservedContext = null;\n      {\n        isDisallowedContextReadInDEV = false;\n      }\n    }\n\n    function enterDisallowedContextReadInDEV() {\n      {\n        isDisallowedContextReadInDEV = true;\n      }\n    }\n\n    function exitDisallowedContextReadInDEV() {\n      {\n        isDisallowedContextReadInDEV = false;\n      }\n    }\n\n    function pushProvider(providerFiber, context, nextValue) {\n      {\n        push(valueCursor, context._currentValue2, providerFiber);\n        context._currentValue2 = nextValue;\n        {\n          if (context._currentRenderer2 !== undefined && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil) {\n            error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');\n          }\n\n          context._currentRenderer2 = rendererSigil;\n        }\n      }\n    }\n\n    function popProvider(context, providerFiber) {\n      var currentValue = valueCursor.current;\n      pop(valueCursor, providerFiber);\n      {\n        {\n          context._currentValue2 = currentValue;\n        }\n      }\n    }\n\n    function scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {\n      // Update the child lanes of all the ancestors, including the alternates.\n      var node = parent;\n\n      while (node !== null) {\n        var alternate = node.alternate;\n\n        if (!isSubsetOfLanes(node.childLanes, renderLanes)) {\n          node.childLanes = mergeLanes(node.childLanes, renderLanes);\n\n          if (alternate !== null) {\n            alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n          }\n        } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) {\n          alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n        }\n\n        if (node === propagationRoot) {\n          break;\n        }\n\n        node = node.return;\n      }\n\n      {\n        if (node !== propagationRoot) {\n          error('Expected to find the propagation root when scheduling context work. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n        }\n      }\n    }\n\n    function propagateContextChange(workInProgress, context, renderLanes) {\n      {\n        propagateContextChange_eager(workInProgress, context, renderLanes);\n      }\n    }\n\n    function propagateContextChange_eager(workInProgress, context, renderLanes) {\n      var fiber = workInProgress.child;\n\n      if (fiber !== null) {\n        // Set the return pointer of the child to the work-in-progress fiber.\n        fiber.return = workInProgress;\n      }\n\n      while (fiber !== null) {\n        var nextFiber = void 0; // Visit this fiber.\n\n        var list = fiber.dependencies;\n\n        if (list !== null) {\n          nextFiber = fiber.child;\n          var dependency = list.firstContext;\n\n          while (dependency !== null) {\n            // Check if the context matches.\n            if (dependency.context === context) {\n              // Match! Schedule an update on this fiber.\n              if (fiber.tag === ClassComponent) {\n                // Schedule a force update on the work-in-progress.\n                var lane = pickArbitraryLane(renderLanes);\n                var update = createUpdate(NoTimestamp, lane);\n                update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the\n                // update to the current fiber, too, which means it will persist even if\n                // this render is thrown away. Since it's a race condition, not sure it's\n                // worth fixing.\n                // Inlined `enqueueUpdate` to remove interleaved update check\n\n                var updateQueue = fiber.updateQueue;\n                if (updateQueue === null) ;else {\n                  var sharedQueue = updateQueue.shared;\n                  var pending = sharedQueue.pending;\n\n                  if (pending === null) {\n                    // This is the first update. Create a circular list.\n                    update.next = update;\n                  } else {\n                    update.next = pending.next;\n                    pending.next = update;\n                  }\n\n                  sharedQueue.pending = update;\n                }\n              }\n\n              fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n              var alternate = fiber.alternate;\n\n              if (alternate !== null) {\n                alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n              }\n\n              scheduleContextWorkOnParentPath(fiber.return, renderLanes, workInProgress); // Mark the updated lanes on the list, too.\n\n              list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the\n              // dependency list.\n\n              break;\n            }\n\n            dependency = dependency.next;\n          }\n        } else if (fiber.tag === ContextProvider) {\n          // Don't scan deeper if this is a matching provider\n          nextFiber = fiber.type === workInProgress.type ? null : fiber.child;\n        } else {\n          // Traverse down.\n          nextFiber = fiber.child;\n        }\n\n        if (nextFiber !== null) {\n          // Set the return pointer of the child to the work-in-progress fiber.\n          nextFiber.return = fiber;\n        } else {\n          // No child. Traverse to next sibling.\n          nextFiber = fiber;\n\n          while (nextFiber !== null) {\n            if (nextFiber === workInProgress) {\n              // We're back to the root of this subtree. Exit.\n              nextFiber = null;\n              break;\n            }\n\n            var sibling = nextFiber.sibling;\n\n            if (sibling !== null) {\n              // Set the return pointer of the sibling to the work-in-progress fiber.\n              sibling.return = nextFiber.return;\n              nextFiber = sibling;\n              break;\n            } // No more siblings. Traverse up.\n\n\n            nextFiber = nextFiber.return;\n          }\n        }\n\n        fiber = nextFiber;\n      }\n    }\n\n    function prepareToReadContext(workInProgress, renderLanes) {\n      currentlyRenderingFiber = workInProgress;\n      lastContextDependency = null;\n      lastFullyObservedContext = null;\n      var dependencies = workInProgress.dependencies;\n\n      if (dependencies !== null) {\n        {\n          var firstContext = dependencies.firstContext;\n\n          if (firstContext !== null) {\n            if (includesSomeLane(dependencies.lanes, renderLanes)) {\n              // Context list has a pending update. Mark that this fiber performed work.\n              markWorkInProgressReceivedUpdate();\n            } // Reset the work-in-progress list\n\n\n            dependencies.firstContext = null;\n          }\n        }\n      }\n    }\n\n    function readContext(context) {\n      {\n        // This warning would fire if you read context inside a Hook like useMemo.\n        // Unlike the class check below, it's not enforced in production for perf.\n        if (isDisallowedContextReadInDEV) {\n          error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');\n        }\n      }\n      var value = context._currentValue2;\n      if (lastFullyObservedContext === context) ;else {\n        var contextItem = {\n          context: context,\n          memoizedValue: value,\n          next: null\n        };\n\n        if (lastContextDependency === null) {\n          if (currentlyRenderingFiber === null) {\n            throw new Error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');\n          } // This is the first dependency for this component. Create a new list.\n\n\n          lastContextDependency = contextItem;\n          currentlyRenderingFiber.dependencies = {\n            lanes: NoLanes,\n            firstContext: contextItem\n          };\n        } else {\n          // Append a new context item.\n          lastContextDependency = lastContextDependency.next = contextItem;\n        }\n      }\n      return value;\n    } // An array of all update queues that received updates during the current\n    // render. When this render exits, either because it finishes or because it is\n    // interrupted, the interleaved updates will be transferred onto the main part\n    // of the queue.\n\n\n    var interleavedQueues = null;\n\n    function pushInterleavedQueue(queue) {\n      if (interleavedQueues === null) {\n        interleavedQueues = [queue];\n      } else {\n        interleavedQueues.push(queue);\n      }\n    }\n\n    function enqueueInterleavedUpdates() {\n      // Transfer the interleaved updates onto the main queue. Each queue has a\n      // `pending` field and an `interleaved` field. When they are not null, they\n      // point to the last node in a circular linked list. We need to append the\n      // interleaved list to the end of the pending list by joining them into a\n      // single, circular list.\n      if (interleavedQueues !== null) {\n        for (var i = 0; i < interleavedQueues.length; i++) {\n          var queue = interleavedQueues[i];\n          var lastInterleavedUpdate = queue.interleaved;\n\n          if (lastInterleavedUpdate !== null) {\n            queue.interleaved = null;\n            var firstInterleavedUpdate = lastInterleavedUpdate.next;\n            var lastPendingUpdate = queue.pending;\n\n            if (lastPendingUpdate !== null) {\n              var firstPendingUpdate = lastPendingUpdate.next;\n              lastPendingUpdate.next = firstInterleavedUpdate;\n              lastInterleavedUpdate.next = firstPendingUpdate;\n            }\n\n            queue.pending = lastInterleavedUpdate;\n          }\n        }\n\n        interleavedQueues = null;\n      }\n    }\n\n    var UpdateState = 0;\n    var ReplaceState = 1;\n    var ForceUpdate = 2;\n    var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.\n    // It should only be read right after calling `processUpdateQueue`, via\n    // `checkHasForceUpdateAfterProcessing`.\n\n    var hasForceUpdate = false;\n    var didWarnUpdateInsideUpdate;\n    var currentlyProcessingQueue;\n    {\n      didWarnUpdateInsideUpdate = false;\n      currentlyProcessingQueue = null;\n    }\n\n    function initializeUpdateQueue(fiber) {\n      var queue = {\n        baseState: fiber.memoizedState,\n        firstBaseUpdate: null,\n        lastBaseUpdate: null,\n        shared: {\n          pending: null,\n          interleaved: null,\n          lanes: NoLanes\n        },\n        effects: null\n      };\n      fiber.updateQueue = queue;\n    }\n\n    function cloneUpdateQueue(current, workInProgress) {\n      // Clone the update queue from current. Unless it's already a clone.\n      var queue = workInProgress.updateQueue;\n      var currentQueue = current.updateQueue;\n\n      if (queue === currentQueue) {\n        var clone = {\n          baseState: currentQueue.baseState,\n          firstBaseUpdate: currentQueue.firstBaseUpdate,\n          lastBaseUpdate: currentQueue.lastBaseUpdate,\n          shared: currentQueue.shared,\n          effects: currentQueue.effects\n        };\n        workInProgress.updateQueue = clone;\n      }\n    }\n\n    function createUpdate(eventTime, lane) {\n      var update = {\n        eventTime: eventTime,\n        lane: lane,\n        tag: UpdateState,\n        payload: null,\n        callback: null,\n        next: null\n      };\n      return update;\n    }\n\n    function enqueueUpdate(fiber, update, lane) {\n      var updateQueue = fiber.updateQueue;\n\n      if (updateQueue === null) {\n        // Only occurs if the fiber has been unmounted.\n        return;\n      }\n\n      var sharedQueue = updateQueue.shared;\n\n      if (isInterleavedUpdate(fiber)) {\n        var interleaved = sharedQueue.interleaved;\n\n        if (interleaved === null) {\n          // This is the first update. Create a circular list.\n          update.next = update; // At the end of the current render, this queue's interleaved updates will\n          // be transferred to the pending queue.\n\n          pushInterleavedQueue(sharedQueue);\n        } else {\n          update.next = interleaved.next;\n          interleaved.next = update;\n        }\n\n        sharedQueue.interleaved = update;\n      } else {\n        var pending = sharedQueue.pending;\n\n        if (pending === null) {\n          // This is the first update. Create a circular list.\n          update.next = update;\n        } else {\n          update.next = pending.next;\n          pending.next = update;\n        }\n\n        sharedQueue.pending = update;\n      }\n\n      {\n        if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {\n          error('An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');\n          didWarnUpdateInsideUpdate = true;\n        }\n      }\n    }\n\n    function entangleTransitions(root, fiber, lane) {\n      var updateQueue = fiber.updateQueue;\n\n      if (updateQueue === null) {\n        // Only occurs if the fiber has been unmounted.\n        return;\n      }\n\n      var sharedQueue = updateQueue.shared;\n\n      if (isTransitionLane(lane)) {\n        var queueLanes = sharedQueue.lanes; // If any entangled lanes are no longer pending on the root, then they must\n        // have finished. We can remove them from the shared queue, which represents\n        // a superset of the actually pending lanes. In some cases we may entangle\n        // more than we need to, but that's OK. In fact it's worse if we *don't*\n        // entangle when we should.\n\n        queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.\n\n        var newQueueLanes = mergeLanes(queueLanes, lane);\n        sharedQueue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if\n        // the lane finished since the last time we entangled it. So we need to\n        // entangle it again, just to be sure.\n\n        markRootEntangled(root, newQueueLanes);\n      }\n    }\n\n    function enqueueCapturedUpdate(workInProgress, capturedUpdate) {\n      // Captured updates are updates that are thrown by a child during the render\n      // phase. They should be discarded if the render is aborted. Therefore,\n      // we should only put them on the work-in-progress queue, not the current one.\n      var queue = workInProgress.updateQueue; // Check if the work-in-progress queue is a clone.\n\n      var current = workInProgress.alternate;\n\n      if (current !== null) {\n        var currentQueue = current.updateQueue;\n\n        if (queue === currentQueue) {\n          // The work-in-progress queue is the same as current. This happens when\n          // we bail out on a parent fiber that then captures an error thrown by\n          // a child. Since we want to append the update only to the work-in\n          // -progress queue, we need to clone the updates. We usually clone during\n          // processUpdateQueue, but that didn't happen in this case because we\n          // skipped over the parent when we bailed out.\n          var newFirst = null;\n          var newLast = null;\n          var firstBaseUpdate = queue.firstBaseUpdate;\n\n          if (firstBaseUpdate !== null) {\n            // Loop through the updates and clone them.\n            var update = firstBaseUpdate;\n\n            do {\n              var clone = {\n                eventTime: update.eventTime,\n                lane: update.lane,\n                tag: update.tag,\n                payload: update.payload,\n                callback: update.callback,\n                next: null\n              };\n\n              if (newLast === null) {\n                newFirst = newLast = clone;\n              } else {\n                newLast.next = clone;\n                newLast = clone;\n              }\n\n              update = update.next;\n            } while (update !== null); // Append the captured update the end of the cloned list.\n\n\n            if (newLast === null) {\n              newFirst = newLast = capturedUpdate;\n            } else {\n              newLast.next = capturedUpdate;\n              newLast = capturedUpdate;\n            }\n          } else {\n            // There are no base updates.\n            newFirst = newLast = capturedUpdate;\n          }\n\n          queue = {\n            baseState: currentQueue.baseState,\n            firstBaseUpdate: newFirst,\n            lastBaseUpdate: newLast,\n            shared: currentQueue.shared,\n            effects: currentQueue.effects\n          };\n          workInProgress.updateQueue = queue;\n          return;\n        }\n      } // Append the update to the end of the list.\n\n\n      var lastBaseUpdate = queue.lastBaseUpdate;\n\n      if (lastBaseUpdate === null) {\n        queue.firstBaseUpdate = capturedUpdate;\n      } else {\n        lastBaseUpdate.next = capturedUpdate;\n      }\n\n      queue.lastBaseUpdate = capturedUpdate;\n    }\n\n    function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {\n      switch (update.tag) {\n        case ReplaceState:\n          {\n            var payload = update.payload;\n\n            if (typeof payload === 'function') {\n              // Updater function\n              {\n                enterDisallowedContextReadInDEV();\n              }\n              var nextState = payload.call(instance, prevState, nextProps);\n              {\n                exitDisallowedContextReadInDEV();\n              }\n              return nextState;\n            } // State object\n\n\n            return payload;\n          }\n\n        case CaptureUpdate:\n          {\n            workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;\n          }\n        // Intentional fallthrough\n\n        case UpdateState:\n          {\n            var _payload = update.payload;\n            var partialState;\n\n            if (typeof _payload === 'function') {\n              // Updater function\n              {\n                enterDisallowedContextReadInDEV();\n              }\n              partialState = _payload.call(instance, prevState, nextProps);\n              {\n                exitDisallowedContextReadInDEV();\n              }\n            } else {\n              // Partial state object\n              partialState = _payload;\n            }\n\n            if (partialState === null || partialState === undefined) {\n              // Null and undefined are treated as no-ops.\n              return prevState;\n            } // Merge the partial state and the previous state.\n\n\n            return assign({}, prevState, partialState);\n          }\n\n        case ForceUpdate:\n          {\n            hasForceUpdate = true;\n            return prevState;\n          }\n      }\n\n      return prevState;\n    }\n\n    function processUpdateQueue(workInProgress, props, instance, renderLanes) {\n      // This is always non-null on a ClassComponent or HostRoot\n      var queue = workInProgress.updateQueue;\n      hasForceUpdate = false;\n      {\n        currentlyProcessingQueue = queue.shared;\n      }\n      var firstBaseUpdate = queue.firstBaseUpdate;\n      var lastBaseUpdate = queue.lastBaseUpdate; // Check if there are pending updates. If so, transfer them to the base queue.\n\n      var pendingQueue = queue.shared.pending;\n\n      if (pendingQueue !== null) {\n        queue.shared.pending = null; // The pending queue is circular. Disconnect the pointer between first\n        // and last so that it's non-circular.\n\n        var lastPendingUpdate = pendingQueue;\n        var firstPendingUpdate = lastPendingUpdate.next;\n        lastPendingUpdate.next = null; // Append pending updates to base queue\n\n        if (lastBaseUpdate === null) {\n          firstBaseUpdate = firstPendingUpdate;\n        } else {\n          lastBaseUpdate.next = firstPendingUpdate;\n        }\n\n        lastBaseUpdate = lastPendingUpdate; // If there's a current queue, and it's different from the base queue, then\n        // we need to transfer the updates to that queue, too. Because the base\n        // queue is a singly-linked list with no cycles, we can append to both\n        // lists and take advantage of structural sharing.\n        // TODO: Pass `current` as argument\n\n        var current = workInProgress.alternate;\n\n        if (current !== null) {\n          // This is always non-null on a ClassComponent or HostRoot\n          var currentQueue = current.updateQueue;\n          var currentLastBaseUpdate = currentQueue.lastBaseUpdate;\n\n          if (currentLastBaseUpdate !== lastBaseUpdate) {\n            if (currentLastBaseUpdate === null) {\n              currentQueue.firstBaseUpdate = firstPendingUpdate;\n            } else {\n              currentLastBaseUpdate.next = firstPendingUpdate;\n            }\n\n            currentQueue.lastBaseUpdate = lastPendingUpdate;\n          }\n        }\n      } // These values may change as we process the queue.\n\n\n      if (firstBaseUpdate !== null) {\n        // Iterate through the list of updates to compute the result.\n        var newState = queue.baseState; // TODO: Don't need to accumulate this. Instead, we can remove renderLanes\n        // from the original lanes.\n\n        var newLanes = NoLanes;\n        var newBaseState = null;\n        var newFirstBaseUpdate = null;\n        var newLastBaseUpdate = null;\n        var update = firstBaseUpdate;\n\n        do {\n          var updateLane = update.lane;\n          var updateEventTime = update.eventTime;\n\n          if (!isSubsetOfLanes(renderLanes, updateLane)) {\n            // Priority is insufficient. Skip this update. If this is the first\n            // skipped update, the previous update/state is the new base\n            // update/state.\n            var clone = {\n              eventTime: updateEventTime,\n              lane: updateLane,\n              tag: update.tag,\n              payload: update.payload,\n              callback: update.callback,\n              next: null\n            };\n\n            if (newLastBaseUpdate === null) {\n              newFirstBaseUpdate = newLastBaseUpdate = clone;\n              newBaseState = newState;\n            } else {\n              newLastBaseUpdate = newLastBaseUpdate.next = clone;\n            } // Update the remaining priority in the queue.\n\n\n            newLanes = mergeLanes(newLanes, updateLane);\n          } else {\n            // This update does have sufficient priority.\n            if (newLastBaseUpdate !== null) {\n              var _clone = {\n                eventTime: updateEventTime,\n                // This update is going to be committed so we never want uncommit\n                // it. Using NoLane works because 0 is a subset of all bitmasks, so\n                // this will never be skipped by the check above.\n                lane: NoLane,\n                tag: update.tag,\n                payload: update.payload,\n                callback: update.callback,\n                next: null\n              };\n              newLastBaseUpdate = newLastBaseUpdate.next = _clone;\n            } // Process this update.\n\n\n            newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);\n            var callback = update.callback;\n\n            if (callback !== null && // If the update was already committed, we should not queue its\n            // callback again.\n            update.lane !== NoLane) {\n              workInProgress.flags |= Callback;\n              var effects = queue.effects;\n\n              if (effects === null) {\n                queue.effects = [update];\n              } else {\n                effects.push(update);\n              }\n            }\n          }\n\n          update = update.next;\n\n          if (update === null) {\n            pendingQueue = queue.shared.pending;\n\n            if (pendingQueue === null) {\n              break;\n            } else {\n              // An update was scheduled from inside a reducer. Add the new\n              // pending updates to the end of the list and keep processing.\n              var _lastPendingUpdate = pendingQueue; // Intentionally unsound. Pending updates form a circular list, but we\n              // unravel them when transferring them to the base queue.\n\n              var _firstPendingUpdate = _lastPendingUpdate.next;\n              _lastPendingUpdate.next = null;\n              update = _firstPendingUpdate;\n              queue.lastBaseUpdate = _lastPendingUpdate;\n              queue.shared.pending = null;\n            }\n          }\n        } while (true);\n\n        if (newLastBaseUpdate === null) {\n          newBaseState = newState;\n        }\n\n        queue.baseState = newBaseState;\n        queue.firstBaseUpdate = newFirstBaseUpdate;\n        queue.lastBaseUpdate = newLastBaseUpdate; // Interleaved updates are stored on a separate queue. We aren't going to\n        // process them during this render, but we do need to track which lanes\n        // are remaining.\n\n        var lastInterleaved = queue.shared.interleaved;\n\n        if (lastInterleaved !== null) {\n          var interleaved = lastInterleaved;\n\n          do {\n            newLanes = mergeLanes(newLanes, interleaved.lane);\n            interleaved = interleaved.next;\n          } while (interleaved !== lastInterleaved);\n        } else if (firstBaseUpdate === null) {\n          // `queue.lanes` is used for entangling transitions. We can set it back to\n          // zero once the queue is empty.\n          queue.shared.lanes = NoLanes;\n        } // Set the remaining expiration time to be whatever is remaining in the queue.\n        // This should be fine because the only two other things that contribute to\n        // expiration time are props and context. We're already in the middle of the\n        // begin phase by the time we start processing the queue, so we've already\n        // dealt with the props. Context in components that specify\n        // shouldComponentUpdate is tricky; but we'll have to account for\n        // that regardless.\n\n\n        markSkippedUpdateLanes(newLanes);\n        workInProgress.lanes = newLanes;\n        workInProgress.memoizedState = newState;\n      }\n\n      {\n        currentlyProcessingQueue = null;\n      }\n    }\n\n    function callCallback(callback, context) {\n      if (typeof callback !== 'function') {\n        throw new Error('Invalid argument passed as callback. Expected a function. Instead ' + (\"received: \" + callback));\n      }\n\n      callback.call(context);\n    }\n\n    function resetHasForceUpdateBeforeProcessing() {\n      hasForceUpdate = false;\n    }\n\n    function checkHasForceUpdateAfterProcessing() {\n      return hasForceUpdate;\n    }\n\n    function commitUpdateQueue(finishedWork, finishedQueue, instance) {\n      // Commit the effects\n      var effects = finishedQueue.effects;\n      finishedQueue.effects = null;\n\n      if (effects !== null) {\n        for (var i = 0; i < effects.length; i++) {\n          var effect = effects[i];\n          var callback = effect.callback;\n\n          if (callback !== null) {\n            effect.callback = null;\n            callCallback(callback, instance);\n          }\n        }\n      }\n    }\n\n    var fakeInternalInstance = {}; // React.Component uses a shared frozen object by default.\n    // We'll use it to determine whether we need to initialize legacy refs.\n\n    var emptyRefsObject = new React.Component().refs;\n    var didWarnAboutStateAssignmentForComponent;\n    var didWarnAboutUninitializedState;\n    var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;\n    var didWarnAboutLegacyLifecyclesAndDerivedState;\n    var didWarnAboutUndefinedDerivedState;\n    var warnOnUndefinedDerivedState;\n    var warnOnInvalidCallback;\n    var didWarnAboutDirectlyAssigningPropsToState;\n    var didWarnAboutContextTypeAndContextTypes;\n    var didWarnAboutInvalidateContextType;\n    {\n      didWarnAboutStateAssignmentForComponent = new Set();\n      didWarnAboutUninitializedState = new Set();\n      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();\n      didWarnAboutLegacyLifecyclesAndDerivedState = new Set();\n      didWarnAboutDirectlyAssigningPropsToState = new Set();\n      didWarnAboutUndefinedDerivedState = new Set();\n      didWarnAboutContextTypeAndContextTypes = new Set();\n      didWarnAboutInvalidateContextType = new Set();\n      var didWarnOnInvalidCallback = new Set();\n\n      warnOnInvalidCallback = function (callback, callerName) {\n        if (callback === null || typeof callback === 'function') {\n          return;\n        }\n\n        var key = callerName + '_' + callback;\n\n        if (!didWarnOnInvalidCallback.has(key)) {\n          didWarnOnInvalidCallback.add(key);\n          error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);\n        }\n      };\n\n      warnOnUndefinedDerivedState = function (type, partialState) {\n        if (partialState === undefined) {\n          var componentName = getComponentNameFromType(type) || 'Component';\n\n          if (!didWarnAboutUndefinedDerivedState.has(componentName)) {\n            didWarnAboutUndefinedDerivedState.add(componentName);\n            error('%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);\n          }\n        }\n      }; // This is so gross but it's at least non-critical and can be removed if\n      // it causes problems. This is meant to give a nicer error message for\n      // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,\n      // ...)) which otherwise throws a \"_processChildContext is not a function\"\n      // exception.\n\n\n      Object.defineProperty(fakeInternalInstance, '_processChildContext', {\n        enumerable: false,\n        value: function () {\n          throw new Error('_processChildContext is not available in React 16+. This likely ' + 'means you have multiple copies of React and are attempting to nest ' + 'a React 15 tree inside a React 16 tree using ' + \"unstable_renderSubtreeIntoContainer, which isn't supported. Try \" + 'to make sure you have only one copy of React (and ideally, switch ' + 'to ReactDOM.createPortal).');\n        }\n      });\n      Object.freeze(fakeInternalInstance);\n    }\n\n    function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {\n      var prevState = workInProgress.memoizedState;\n      var partialState = getDerivedStateFromProps(nextProps, prevState);\n      {\n        warnOnUndefinedDerivedState(ctor, partialState);\n      } // Merge the partial state and the previous state.\n\n      var memoizedState = partialState === null || partialState === undefined ? prevState : assign({}, prevState, partialState);\n      workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the\n      // base state.\n\n      if (workInProgress.lanes === NoLanes) {\n        // Queue is always non-null for classes\n        var updateQueue = workInProgress.updateQueue;\n        updateQueue.baseState = memoizedState;\n      }\n    }\n\n    var classComponentUpdater = {\n      isMounted: isMounted,\n      enqueueSetState: function (inst, payload, callback) {\n        var fiber = get(inst);\n        var eventTime = requestEventTime();\n        var lane = requestUpdateLane(fiber);\n        var update = createUpdate(eventTime, lane);\n        update.payload = payload;\n\n        if (callback !== undefined && callback !== null) {\n          {\n            warnOnInvalidCallback(callback, 'setState');\n          }\n          update.callback = callback;\n        }\n\n        enqueueUpdate(fiber, update);\n        var root = scheduleUpdateOnFiber(fiber, lane, eventTime);\n\n        if (root !== null) {\n          entangleTransitions(root, fiber, lane);\n        }\n      },\n      enqueueReplaceState: function (inst, payload, callback) {\n        var fiber = get(inst);\n        var eventTime = requestEventTime();\n        var lane = requestUpdateLane(fiber);\n        var update = createUpdate(eventTime, lane);\n        update.tag = ReplaceState;\n        update.payload = payload;\n\n        if (callback !== undefined && callback !== null) {\n          {\n            warnOnInvalidCallback(callback, 'replaceState');\n          }\n          update.callback = callback;\n        }\n\n        enqueueUpdate(fiber, update);\n        var root = scheduleUpdateOnFiber(fiber, lane, eventTime);\n\n        if (root !== null) {\n          entangleTransitions(root, fiber, lane);\n        }\n      },\n      enqueueForceUpdate: function (inst, callback) {\n        var fiber = get(inst);\n        var eventTime = requestEventTime();\n        var lane = requestUpdateLane(fiber);\n        var update = createUpdate(eventTime, lane);\n        update.tag = ForceUpdate;\n\n        if (callback !== undefined && callback !== null) {\n          {\n            warnOnInvalidCallback(callback, 'forceUpdate');\n          }\n          update.callback = callback;\n        }\n\n        enqueueUpdate(fiber, update);\n        var root = scheduleUpdateOnFiber(fiber, lane, eventTime);\n\n        if (root !== null) {\n          entangleTransitions(root, fiber, lane);\n        }\n      }\n    };\n\n    function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {\n      var instance = workInProgress.stateNode;\n\n      if (typeof instance.shouldComponentUpdate === 'function') {\n        var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);\n        {\n          if (shouldUpdate === undefined) {\n            error('%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentNameFromType(ctor) || 'Component');\n          }\n        }\n        return shouldUpdate;\n      }\n\n      if (ctor.prototype && ctor.prototype.isPureReactComponent) {\n        return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);\n      }\n\n      return true;\n    }\n\n    function checkClassInstance(workInProgress, ctor, newProps) {\n      var instance = workInProgress.stateNode;\n      {\n        var name = getComponentNameFromType(ctor) || 'Component';\n        var renderPresent = instance.render;\n\n        if (!renderPresent) {\n          if (ctor.prototype && typeof ctor.prototype.render === 'function') {\n            error('%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);\n          } else {\n            error('%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);\n          }\n        }\n\n        if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {\n          error('getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);\n        }\n\n        if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {\n          error('getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);\n        }\n\n        if (instance.propTypes) {\n          error('propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);\n        }\n\n        if (instance.contextType) {\n          error('contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name);\n        }\n\n        {\n          if (instance.contextTypes) {\n            error('contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);\n          }\n\n          if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {\n            didWarnAboutContextTypeAndContextTypes.add(ctor);\n            error('%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);\n          }\n        }\n\n        if (typeof instance.componentShouldUpdate === 'function') {\n          error('%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);\n        }\n\n        if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {\n          error('%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentNameFromType(ctor) || 'A pure component');\n        }\n\n        if (typeof instance.componentDidUnmount === 'function') {\n          error('%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);\n        }\n\n        if (typeof instance.componentDidReceiveProps === 'function') {\n          error('%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);\n        }\n\n        if (typeof instance.componentWillRecieveProps === 'function') {\n          error('%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);\n        }\n\n        if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {\n          error('%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name);\n        }\n\n        var hasMutatedProps = instance.props !== newProps;\n\n        if (instance.props !== undefined && hasMutatedProps) {\n          error('%s(...): When calling super() in `%s`, make sure to pass ' + \"up the same props that your component's constructor was passed.\", name, name);\n        }\n\n        if (instance.defaultProps) {\n          error('Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);\n        }\n\n        if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {\n          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);\n          error('%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentNameFromType(ctor));\n        }\n\n        if (typeof instance.getDerivedStateFromProps === 'function') {\n          error('%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);\n        }\n\n        if (typeof instance.getDerivedStateFromError === 'function') {\n          error('%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);\n        }\n\n        if (typeof ctor.getSnapshotBeforeUpdate === 'function') {\n          error('%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name);\n        }\n\n        var _state = instance.state;\n\n        if (_state && (typeof _state !== 'object' || isArray(_state))) {\n          error('%s.state: must be set to an object or null', name);\n        }\n\n        if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') {\n          error('%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name);\n        }\n      }\n    }\n\n    function adoptClassInstance(workInProgress, instance) {\n      instance.updater = classComponentUpdater;\n      workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates\n\n      set(instance, workInProgress);\n      {\n        instance._reactInternalInstance = fakeInternalInstance;\n      }\n    }\n\n    function constructClassInstance(workInProgress, ctor, props) {\n      var isLegacyContextConsumer = false;\n      var unmaskedContext = emptyContextObject;\n      var context = emptyContextObject;\n      var contextType = ctor.contextType;\n      {\n        if ('contextType' in ctor) {\n          var isValid = // Allow null for conditional declaration\n          contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>\n\n          if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {\n            didWarnAboutInvalidateContextType.add(ctor);\n            var addendum = '';\n\n            if (contextType === undefined) {\n              addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';\n            } else if (typeof contextType !== 'object') {\n              addendum = ' However, it is set to a ' + typeof contextType + '.';\n            } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {\n              addendum = ' Did you accidentally pass the Context.Provider instead?';\n            } else if (contextType._context !== undefined) {\n              // <Context.Consumer>\n              addendum = ' Did you accidentally pass the Context.Consumer instead?';\n            } else {\n              addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';\n            }\n\n            error('%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentNameFromType(ctor) || 'Component', addendum);\n          }\n        }\n      }\n\n      if (typeof contextType === 'object' && contextType !== null) {\n        context = readContext(contextType);\n      } else {\n        unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n        var contextTypes = ctor.contextTypes;\n        isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;\n        context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;\n      }\n\n      var instance = new ctor(props, context); // Instantiate twice to help detect side-effects.\n\n      var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;\n      adoptClassInstance(workInProgress, instance);\n      {\n        if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {\n          var componentName = getComponentNameFromType(ctor) || 'Component';\n\n          if (!didWarnAboutUninitializedState.has(componentName)) {\n            didWarnAboutUninitializedState.add(componentName);\n            error('`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);\n          }\n        } // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n        // Warn about these lifecycles if they are present.\n        // Don't warn about react-lifecycles-compat polyfilled methods though.\n\n\n        if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {\n          var foundWillMountName = null;\n          var foundWillReceivePropsName = null;\n          var foundWillUpdateName = null;\n\n          if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {\n            foundWillMountName = 'componentWillMount';\n          } else if (typeof instance.UNSAFE_componentWillMount === 'function') {\n            foundWillMountName = 'UNSAFE_componentWillMount';\n          }\n\n          if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {\n            foundWillReceivePropsName = 'componentWillReceiveProps';\n          } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n            foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';\n          }\n\n          if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {\n            foundWillUpdateName = 'componentWillUpdate';\n          } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n            foundWillUpdateName = 'UNSAFE_componentWillUpdate';\n          }\n\n          if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {\n            var _componentName = getComponentNameFromType(ctor) || 'Component';\n\n            var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';\n\n            if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {\n              didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);\n              error('Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\\n\\n' + 'The above lifecycles should be removed. Learn more about this warning here:\\n' + 'https://reactjs.org/link/unsafe-component-lifecycles', _componentName, newApiName, foundWillMountName !== null ? \"\\n  \" + foundWillMountName : '', foundWillReceivePropsName !== null ? \"\\n  \" + foundWillReceivePropsName : '', foundWillUpdateName !== null ? \"\\n  \" + foundWillUpdateName : '');\n            }\n          }\n        }\n      } // Cache unmasked context so we can avoid recreating masked context unless necessary.\n      // ReactFiberContext usually updates this cache but can't for newly-created instances.\n\n      if (isLegacyContextConsumer) {\n        cacheContext(workInProgress, unmaskedContext, context);\n      }\n\n      return instance;\n    }\n\n    function callComponentWillMount(workInProgress, instance) {\n      var oldState = instance.state;\n\n      if (typeof instance.componentWillMount === 'function') {\n        instance.componentWillMount();\n      }\n\n      if (typeof instance.UNSAFE_componentWillMount === 'function') {\n        instance.UNSAFE_componentWillMount();\n      }\n\n      if (oldState !== instance.state) {\n        {\n          error('%s.componentWillMount(): Assigning directly to this.state is ' + \"deprecated (except inside a component's \" + 'constructor). Use setState instead.', getComponentNameFromFiber(workInProgress) || 'Component');\n        }\n        classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n      }\n    }\n\n    function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {\n      var oldState = instance.state;\n\n      if (typeof instance.componentWillReceiveProps === 'function') {\n        instance.componentWillReceiveProps(newProps, nextContext);\n      }\n\n      if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n        instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);\n      }\n\n      if (instance.state !== oldState) {\n        {\n          var componentName = getComponentNameFromFiber(workInProgress) || 'Component';\n\n          if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {\n            didWarnAboutStateAssignmentForComponent.add(componentName);\n            error('%s.componentWillReceiveProps(): Assigning directly to ' + \"this.state is deprecated (except inside a component's \" + 'constructor). Use setState instead.', componentName);\n          }\n        }\n        classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n      }\n    } // Invokes the mount life-cycles on a previously never rendered instance.\n\n\n    function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {\n      {\n        checkClassInstance(workInProgress, ctor, newProps);\n      }\n      var instance = workInProgress.stateNode;\n      instance.props = newProps;\n      instance.state = workInProgress.memoizedState;\n      instance.refs = emptyRefsObject;\n      initializeUpdateQueue(workInProgress);\n      var contextType = ctor.contextType;\n\n      if (typeof contextType === 'object' && contextType !== null) {\n        instance.context = readContext(contextType);\n      } else {\n        var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n        instance.context = getMaskedContext(workInProgress, unmaskedContext);\n      }\n\n      {\n        if (instance.state === newProps) {\n          var componentName = getComponentNameFromType(ctor) || 'Component';\n\n          if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {\n            didWarnAboutDirectlyAssigningPropsToState.add(componentName);\n            error('%s: It is not recommended to assign props directly to state ' + \"because updates to props won't be reflected in state. \" + 'In most cases, it is better to use props directly.', componentName);\n          }\n        }\n\n        if (workInProgress.mode & StrictLegacyMode) {\n          ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);\n        }\n\n        {\n          ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);\n        }\n      }\n      instance.state = workInProgress.memoizedState;\n      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n\n      if (typeof getDerivedStateFromProps === 'function') {\n        applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n        instance.state = workInProgress.memoizedState;\n      } // In order to support react-lifecycles-compat polyfilled components,\n      // Unsafe lifecycles should not be invoked for components using the new APIs.\n\n\n      if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {\n        callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's\n        // process them now.\n\n        processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n        instance.state = workInProgress.memoizedState;\n      }\n\n      if (typeof instance.componentDidMount === 'function') {\n        var fiberFlags = Update;\n        workInProgress.flags |= fiberFlags;\n      }\n    }\n\n    function resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {\n      var instance = workInProgress.stateNode;\n      var oldProps = workInProgress.memoizedProps;\n      instance.props = oldProps;\n      var oldContext = instance.context;\n      var contextType = ctor.contextType;\n      var nextContext = emptyContextObject;\n\n      if (typeof contextType === 'object' && contextType !== null) {\n        nextContext = readContext(contextType);\n      } else {\n        var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n        nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);\n      }\n\n      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n      var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what\n      // ever the previously attempted to render - not the \"current\". However,\n      // during componentDidUpdate we pass the \"current\" props.\n      // In order to support react-lifecycles-compat polyfilled components,\n      // Unsafe lifecycles should not be invoked for components using the new APIs.\n\n      if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {\n        if (oldProps !== newProps || oldContext !== nextContext) {\n          callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);\n        }\n      }\n\n      resetHasForceUpdateBeforeProcessing();\n      var oldState = workInProgress.memoizedState;\n      var newState = instance.state = oldState;\n      processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n      newState = workInProgress.memoizedState;\n\n      if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {\n        // If an update was already in progress, we should schedule an Update\n        // effect even though we're bailing out, so that cWU/cDU are called.\n        if (typeof instance.componentDidMount === 'function') {\n          var fiberFlags = Update;\n          workInProgress.flags |= fiberFlags;\n        }\n\n        return false;\n      }\n\n      if (typeof getDerivedStateFromProps === 'function') {\n        applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n        newState = workInProgress.memoizedState;\n      }\n\n      var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);\n\n      if (shouldUpdate) {\n        // In order to support react-lifecycles-compat polyfilled components,\n        // Unsafe lifecycles should not be invoked for components using the new APIs.\n        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {\n          if (typeof instance.componentWillMount === 'function') {\n            instance.componentWillMount();\n          }\n\n          if (typeof instance.UNSAFE_componentWillMount === 'function') {\n            instance.UNSAFE_componentWillMount();\n          }\n        }\n\n        if (typeof instance.componentDidMount === 'function') {\n          var _fiberFlags = Update;\n          workInProgress.flags |= _fiberFlags;\n        }\n      } else {\n        // If an update was already in progress, we should schedule an Update\n        // effect even though we're bailing out, so that cWU/cDU are called.\n        if (typeof instance.componentDidMount === 'function') {\n          var _fiberFlags2 = Update;\n          workInProgress.flags |= _fiberFlags2;\n        } // If shouldComponentUpdate returned false, we should still update the\n        // memoized state to indicate that this work can be reused.\n\n\n        workInProgress.memoizedProps = newProps;\n        workInProgress.memoizedState = newState;\n      } // Update the existing instance's state, props, and context pointers even\n      // if shouldComponentUpdate returns false.\n\n\n      instance.props = newProps;\n      instance.state = newState;\n      instance.context = nextContext;\n      return shouldUpdate;\n    } // Invokes the update life-cycles and returns false if it shouldn't rerender.\n\n\n    function updateClassInstance(current, workInProgress, ctor, newProps, renderLanes) {\n      var instance = workInProgress.stateNode;\n      cloneUpdateQueue(current, workInProgress);\n      var unresolvedOldProps = workInProgress.memoizedProps;\n      var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);\n      instance.props = oldProps;\n      var unresolvedNewProps = workInProgress.pendingProps;\n      var oldContext = instance.context;\n      var contextType = ctor.contextType;\n      var nextContext = emptyContextObject;\n\n      if (typeof contextType === 'object' && contextType !== null) {\n        nextContext = readContext(contextType);\n      } else {\n        var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n        nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);\n      }\n\n      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n      var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what\n      // ever the previously attempted to render - not the \"current\". However,\n      // during componentDidUpdate we pass the \"current\" props.\n      // In order to support react-lifecycles-compat polyfilled components,\n      // Unsafe lifecycles should not be invoked for components using the new APIs.\n\n      if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {\n        if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {\n          callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);\n        }\n      }\n\n      resetHasForceUpdateBeforeProcessing();\n      var oldState = workInProgress.memoizedState;\n      var newState = instance.state = oldState;\n      processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n      newState = workInProgress.memoizedState;\n\n      if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {\n        // If an update was already in progress, we should schedule an Update\n        // effect even though we're bailing out, so that cWU/cDU are called.\n        if (typeof instance.componentDidUpdate === 'function') {\n          if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n            workInProgress.flags |= Update;\n          }\n        }\n\n        if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n          if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n            workInProgress.flags |= Snapshot;\n          }\n        }\n\n        return false;\n      }\n\n      if (typeof getDerivedStateFromProps === 'function') {\n        applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n        newState = workInProgress.memoizedState;\n      }\n\n      var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,\n      // both before and after `shouldComponentUpdate` has been called. Not ideal,\n      // but I'm loath to refactor this function. This only happens for memoized\n      // components so it's not that common.\n      enableLazyContextPropagation;\n\n      if (shouldUpdate) {\n        // In order to support react-lifecycles-compat polyfilled components,\n        // Unsafe lifecycles should not be invoked for components using the new APIs.\n        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {\n          if (typeof instance.componentWillUpdate === 'function') {\n            instance.componentWillUpdate(newProps, newState, nextContext);\n          }\n\n          if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n            instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);\n          }\n        }\n\n        if (typeof instance.componentDidUpdate === 'function') {\n          workInProgress.flags |= Update;\n        }\n\n        if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n          workInProgress.flags |= Snapshot;\n        }\n      } else {\n        // If an update was already in progress, we should schedule an Update\n        // effect even though we're bailing out, so that cWU/cDU are called.\n        if (typeof instance.componentDidUpdate === 'function') {\n          if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n            workInProgress.flags |= Update;\n          }\n        }\n\n        if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n          if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n            workInProgress.flags |= Snapshot;\n          }\n        } // If shouldComponentUpdate returned false, we should still update the\n        // memoized props/state to indicate that this work can be reused.\n\n\n        workInProgress.memoizedProps = newProps;\n        workInProgress.memoizedState = newState;\n      } // Update the existing instance's state, props, and context pointers even\n      // if shouldComponentUpdate returns false.\n\n\n      instance.props = newProps;\n      instance.state = newState;\n      instance.context = nextContext;\n      return shouldUpdate;\n    } // TODO: Use the unified fiber stack module instead of this local one?\n    // Intentionally not using it yet to derisk the initial implementation, because\n    // the way we push/pop these values is a bit unusual. If there's a mistake, I'd\n    // rather the ids be wrong than crash the whole reconciler.\n\n\n    var forkStack = [];\n    var forkStackIndex = 0;\n    var treeForkProvider = null;\n    var treeForkCount = 0;\n    var idStack = [];\n    var idStackIndex = 0;\n    var treeContextProvider = null;\n    var treeContextId = 1;\n    var treeContextOverflow = '';\n\n    function popTreeContext(workInProgress) {\n      // Restore the previous values.\n      // This is a bit more complicated than other context-like modules in Fiber\n      // because the same Fiber may appear on the stack multiple times and for\n      // different reasons. We have to keep popping until the work-in-progress is\n      // no longer at the top of the stack.\n      while (workInProgress === treeForkProvider) {\n        treeForkProvider = forkStack[--forkStackIndex];\n        forkStack[forkStackIndex] = null;\n        treeForkCount = forkStack[--forkStackIndex];\n        forkStack[forkStackIndex] = null;\n      }\n\n      while (workInProgress === treeContextProvider) {\n        treeContextProvider = idStack[--idStackIndex];\n        idStack[idStackIndex] = null;\n        treeContextOverflow = idStack[--idStackIndex];\n        idStack[idStackIndex] = null;\n        treeContextId = idStack[--idStackIndex];\n        idStack[idStackIndex] = null;\n      }\n    }\n\n    var isHydrating = false;\n\n    function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {\n      {\n        throw new Error('Expected prepareToHydrateHostInstance() to never be called. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n      }\n    }\n\n    function prepareToHydrateHostTextInstance(fiber) {\n      {\n        throw new Error('Expected prepareToHydrateHostTextInstance() to never be called. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n      }\n      var shouldUpdate = hydrateTextInstance();\n    }\n\n    function popHydrationState(fiber) {\n      {\n        return false;\n      }\n    }\n\n    function getIsHydrating() {\n      return isHydrating;\n    }\n\n    var didWarnAboutMaps;\n    var didWarnAboutGenerators;\n    var didWarnAboutStringRefs;\n    var ownerHasKeyUseWarning;\n    var ownerHasFunctionTypeWarning;\n\n    var warnForMissingKey = function (child, returnFiber) {};\n\n    {\n      didWarnAboutMaps = false;\n      didWarnAboutGenerators = false;\n      didWarnAboutStringRefs = {};\n      /**\n       * Warn if there's no key explicitly set on dynamic arrays of children or\n       * object keys are not valid. This allows us to keep track of children between\n       * updates.\n       */\n\n      ownerHasKeyUseWarning = {};\n      ownerHasFunctionTypeWarning = {};\n\n      warnForMissingKey = function (child, returnFiber) {\n        if (child === null || typeof child !== 'object') {\n          return;\n        }\n\n        if (!child._store || child._store.validated || child.key != null) {\n          return;\n        }\n\n        if (typeof child._store !== 'object') {\n          throw new Error('React Component in warnForMissingKey should have a _store. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n        }\n\n        child._store.validated = true;\n        var componentName = getComponentNameFromFiber(returnFiber) || 'Component';\n\n        if (ownerHasKeyUseWarning[componentName]) {\n          return;\n        }\n\n        ownerHasKeyUseWarning[componentName] = true;\n        error('Each child in a list should have a unique ' + '\"key\" prop. See https://reactjs.org/link/warning-keys for ' + 'more information.');\n      };\n    }\n\n    function coerceRef(returnFiber, current, element) {\n      var mixedRef = element.ref;\n\n      if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {\n        {\n          // TODO: Clean this up once we turn on the string ref warning for\n          // everyone, because the strict mode case will no longer be relevant\n          if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs\n          // because these cannot be automatically converted to an arrow function\n          // using a codemod. Therefore, we don't have to warn about string refs again.\n          !(element._owner && element._self && element._owner.stateNode !== element._self)) {\n            var componentName = getComponentNameFromFiber(returnFiber) || 'Component';\n\n            if (!didWarnAboutStringRefs[componentName]) {\n              {\n                error('A string ref, \"%s\", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', mixedRef);\n              }\n              didWarnAboutStringRefs[componentName] = true;\n            }\n          }\n        }\n\n        if (element._owner) {\n          var owner = element._owner;\n          var inst;\n\n          if (owner) {\n            var ownerFiber = owner;\n\n            if (ownerFiber.tag !== ClassComponent) {\n              throw new Error('Function components cannot have string refs. ' + 'We recommend using useRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref');\n            }\n\n            inst = ownerFiber.stateNode;\n          }\n\n          if (!inst) {\n            throw new Error(\"Missing owner for string ref \" + mixedRef + \". This error is likely caused by a \" + 'bug in React. Please file an issue.');\n          } // Assigning this to a const so Flow knows it won't change in the closure\n\n\n          var resolvedInst = inst;\n          {\n            checkPropStringCoercion(mixedRef, 'ref');\n          }\n          var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref\n\n          if (current !== null && current.ref !== null && typeof current.ref === 'function' && current.ref._stringRef === stringRef) {\n            return current.ref;\n          }\n\n          var ref = function (value) {\n            var refs = resolvedInst.refs;\n\n            if (refs === emptyRefsObject) {\n              // This is a lazy pooled frozen object, so we need to initialize.\n              refs = resolvedInst.refs = {};\n            }\n\n            if (value === null) {\n              delete refs[stringRef];\n            } else {\n              refs[stringRef] = value;\n            }\n          };\n\n          ref._stringRef = stringRef;\n          return ref;\n        } else {\n          if (typeof mixedRef !== 'string') {\n            throw new Error('Expected ref to be a function, a string, an object returned by React.createRef(), or null.');\n          }\n\n          if (!element._owner) {\n            throw new Error(\"Element ref was specified as a string (\" + mixedRef + \") but no owner was set. This could happen for one of\" + ' the following reasons:\\n' + '1. You may be adding a ref to a function component\\n' + \"2. You may be adding a ref to a component that was not created inside a component's render method\\n\" + '3. You have multiple copies of React loaded\\n' + 'See https://reactjs.org/link/refs-must-have-owner for more information.');\n          }\n        }\n      }\n\n      return mixedRef;\n    }\n\n    function throwOnInvalidObjectType(returnFiber, newChild) {\n      var childString = Object.prototype.toString.call(newChild);\n      throw new Error(\"Objects are not valid as a React child (found: \" + (childString === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : childString) + \"). \" + 'If you meant to render a collection of children, use an array ' + 'instead.');\n    }\n\n    function warnOnFunctionType(returnFiber) {\n      {\n        var componentName = getComponentNameFromFiber(returnFiber) || 'Component';\n\n        if (ownerHasFunctionTypeWarning[componentName]) {\n          return;\n        }\n\n        ownerHasFunctionTypeWarning[componentName] = true;\n        error('Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');\n      }\n    } // to be able to optimize each path individually by branching early. This needs\n    // a compiler or we can do it manually. Helpers that don't need this branching\n    // live outside of this function.\n\n\n    function ChildReconciler(shouldTrackSideEffects) {\n      function deleteChild(returnFiber, childToDelete) {\n        if (!shouldTrackSideEffects) {\n          // Noop.\n          return;\n        }\n\n        var deletions = returnFiber.deletions;\n\n        if (deletions === null) {\n          returnFiber.deletions = [childToDelete];\n          returnFiber.flags |= ChildDeletion;\n        } else {\n          deletions.push(childToDelete);\n        }\n      }\n\n      function deleteRemainingChildren(returnFiber, currentFirstChild) {\n        if (!shouldTrackSideEffects) {\n          // Noop.\n          return null;\n        } // TODO: For the shouldClone case, this could be micro-optimized a bit by\n        // assuming that after the first child we've already added everything.\n\n\n        var childToDelete = currentFirstChild;\n\n        while (childToDelete !== null) {\n          deleteChild(returnFiber, childToDelete);\n          childToDelete = childToDelete.sibling;\n        }\n\n        return null;\n      }\n\n      function mapRemainingChildren(returnFiber, currentFirstChild) {\n        // Add the remaining children to a temporary map so that we can find them by\n        // keys quickly. Implicit (null) keys get added to this set with their index\n        // instead.\n        var existingChildren = new Map();\n        var existingChild = currentFirstChild;\n\n        while (existingChild !== null) {\n          if (existingChild.key !== null) {\n            existingChildren.set(existingChild.key, existingChild);\n          } else {\n            existingChildren.set(existingChild.index, existingChild);\n          }\n\n          existingChild = existingChild.sibling;\n        }\n\n        return existingChildren;\n      }\n\n      function useFiber(fiber, pendingProps) {\n        // We currently set sibling to null and index to 0 here because it is easy\n        // to forget to do before returning it. E.g. for the single child case.\n        var clone = createWorkInProgress(fiber, pendingProps);\n        clone.index = 0;\n        clone.sibling = null;\n        return clone;\n      }\n\n      function placeChild(newFiber, lastPlacedIndex, newIndex) {\n        newFiber.index = newIndex;\n\n        if (!shouldTrackSideEffects) {\n          // During hydration, the useId algorithm needs to know which fibers are\n          // part of a list of children (arrays, iterators).\n          newFiber.flags |= Forked;\n          return lastPlacedIndex;\n        }\n\n        var current = newFiber.alternate;\n\n        if (current !== null) {\n          var oldIndex = current.index;\n\n          if (oldIndex < lastPlacedIndex) {\n            // This is a move.\n            newFiber.flags |= Placement;\n            return lastPlacedIndex;\n          } else {\n            // This item can stay in place.\n            return oldIndex;\n          }\n        } else {\n          // This is an insertion.\n          newFiber.flags |= Placement;\n          return lastPlacedIndex;\n        }\n      }\n\n      function placeSingleChild(newFiber) {\n        // This is simpler for the single child case. We only need to do a\n        // placement for inserting new children.\n        if (shouldTrackSideEffects && newFiber.alternate === null) {\n          newFiber.flags |= Placement;\n        }\n\n        return newFiber;\n      }\n\n      function updateTextNode(returnFiber, current, textContent, lanes) {\n        if (current === null || current.tag !== HostText) {\n          // Insert\n          var created = createFiberFromText(textContent, returnFiber.mode, lanes);\n          created.return = returnFiber;\n          return created;\n        } else {\n          // Update\n          var existing = useFiber(current, textContent);\n          existing.return = returnFiber;\n          return existing;\n        }\n      }\n\n      function updateElement(returnFiber, current, element, lanes) {\n        var elementType = element.type;\n\n        if (elementType === REACT_FRAGMENT_TYPE) {\n          return updateFragment(returnFiber, current, element.props.children, lanes, element.key);\n        }\n\n        if (current !== null) {\n          if (current.elementType === elementType || // Keep this check inline so it only runs on the false path:\n          isCompatibleFamilyForHotReloading(current, element) || // Lazy types should reconcile their resolved type.\n          // We need to do this after the Hot Reloading check above,\n          // because hot reloading has different semantics than prod because\n          // it doesn't resuspend. So we can't let the call below suspend.\n          enableLazyElements) {\n            // Move based on index\n            var existing = useFiber(current, element.props);\n            existing.ref = coerceRef(returnFiber, current, element);\n            existing.return = returnFiber;\n            {\n              existing._debugSource = element._source;\n              existing._debugOwner = element._owner;\n            }\n            return existing;\n          }\n        } // Insert\n\n\n        var created = createFiberFromElement(element, returnFiber.mode, lanes);\n        created.ref = coerceRef(returnFiber, current, element);\n        created.return = returnFiber;\n        return created;\n      }\n\n      function updatePortal(returnFiber, current, portal, lanes) {\n        if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {\n          // Insert\n          var created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n          created.return = returnFiber;\n          return created;\n        } else {\n          // Update\n          var existing = useFiber(current, portal.children || []);\n          existing.return = returnFiber;\n          return existing;\n        }\n      }\n\n      function updateFragment(returnFiber, current, fragment, lanes, key) {\n        if (current === null || current.tag !== Fragment) {\n          // Insert\n          var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);\n          created.return = returnFiber;\n          return created;\n        } else {\n          // Update\n          var existing = useFiber(current, fragment);\n          existing.return = returnFiber;\n          return existing;\n        }\n      }\n\n      function createChild(returnFiber, newChild, lanes) {\n        if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {\n          // Text nodes don't have keys. If the previous node is implicitly keyed\n          // we can continue to replace it without aborting even if it is not a text\n          // node.\n          var created = createFiberFromText('' + newChild, returnFiber.mode, lanes);\n          created.return = returnFiber;\n          return created;\n        }\n\n        if (typeof newChild === 'object' && newChild !== null) {\n          switch (newChild.$$typeof) {\n            case REACT_ELEMENT_TYPE:\n              {\n                var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);\n\n                _created.ref = coerceRef(returnFiber, null, newChild);\n                _created.return = returnFiber;\n                return _created;\n              }\n\n            case REACT_PORTAL_TYPE:\n              {\n                var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);\n\n                _created2.return = returnFiber;\n                return _created2;\n              }\n          }\n\n          if (isArray(newChild) || getIteratorFn(newChild)) {\n            var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);\n\n            _created3.return = returnFiber;\n            return _created3;\n          }\n\n          throwOnInvalidObjectType(returnFiber, newChild);\n        }\n\n        {\n          if (typeof newChild === 'function') {\n            warnOnFunctionType(returnFiber);\n          }\n        }\n        return null;\n      }\n\n      function updateSlot(returnFiber, oldFiber, newChild, lanes) {\n        // Update the fiber if the keys match, otherwise return null.\n        var key = oldFiber !== null ? oldFiber.key : null;\n\n        if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {\n          // Text nodes don't have keys. If the previous node is implicitly keyed\n          // we can continue to replace it without aborting even if it is not a text\n          // node.\n          if (key !== null) {\n            return null;\n          }\n\n          return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);\n        }\n\n        if (typeof newChild === 'object' && newChild !== null) {\n          switch (newChild.$$typeof) {\n            case REACT_ELEMENT_TYPE:\n              {\n                if (newChild.key === key) {\n                  return updateElement(returnFiber, oldFiber, newChild, lanes);\n                } else {\n                  return null;\n                }\n              }\n\n            case REACT_PORTAL_TYPE:\n              {\n                if (newChild.key === key) {\n                  return updatePortal(returnFiber, oldFiber, newChild, lanes);\n                } else {\n                  return null;\n                }\n              }\n          }\n\n          if (isArray(newChild) || getIteratorFn(newChild)) {\n            if (key !== null) {\n              return null;\n            }\n\n            return updateFragment(returnFiber, oldFiber, newChild, lanes, null);\n          }\n\n          throwOnInvalidObjectType(returnFiber, newChild);\n        }\n\n        {\n          if (typeof newChild === 'function') {\n            warnOnFunctionType(returnFiber);\n          }\n        }\n        return null;\n      }\n\n      function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {\n        if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {\n          // Text nodes don't have keys, so we neither have to check the old nor\n          // new node for the key. If both are text nodes, they match.\n          var matchedFiber = existingChildren.get(newIdx) || null;\n          return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);\n        }\n\n        if (typeof newChild === 'object' && newChild !== null) {\n          switch (newChild.$$typeof) {\n            case REACT_ELEMENT_TYPE:\n              {\n                var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;\n\n                return updateElement(returnFiber, _matchedFiber, newChild, lanes);\n              }\n\n            case REACT_PORTAL_TYPE:\n              {\n                var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;\n\n                return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);\n              }\n          }\n\n          if (isArray(newChild) || getIteratorFn(newChild)) {\n            var _matchedFiber3 = existingChildren.get(newIdx) || null;\n\n            return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);\n          }\n\n          throwOnInvalidObjectType(returnFiber, newChild);\n        }\n\n        {\n          if (typeof newChild === 'function') {\n            warnOnFunctionType(returnFiber);\n          }\n        }\n        return null;\n      }\n      /**\n       * Warns if there is a duplicate or missing key\n       */\n\n\n      function warnOnInvalidKey(child, knownKeys, returnFiber) {\n        {\n          if (typeof child !== 'object' || child === null) {\n            return knownKeys;\n          }\n\n          switch (child.$$typeof) {\n            case REACT_ELEMENT_TYPE:\n            case REACT_PORTAL_TYPE:\n              warnForMissingKey(child, returnFiber);\n              var key = child.key;\n\n              if (typeof key !== 'string') {\n                break;\n              }\n\n              if (knownKeys === null) {\n                knownKeys = new Set();\n                knownKeys.add(key);\n                break;\n              }\n\n              if (!knownKeys.has(key)) {\n                knownKeys.add(key);\n                break;\n              }\n\n              error('Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);\n              break;\n          }\n        }\n        return knownKeys;\n      }\n\n      function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {\n        // This algorithm can't optimize by searching from both ends since we\n        // don't have backpointers on fibers. I'm trying to see how far we can get\n        // with that model. If it ends up not being worth the tradeoffs, we can\n        // add it later.\n        // Even with a two ended optimization, we'd want to optimize for the case\n        // where there are few changes and brute force the comparison instead of\n        // going for the Map. It'd like to explore hitting that path first in\n        // forward-only mode and only go for the Map once we notice that we need\n        // lots of look ahead. This doesn't handle reversal as well as two ended\n        // search but that's unusual. Besides, for the two ended optimization to\n        // work on Iterables, we'd need to copy the whole set.\n        // In this first iteration, we'll just live with hitting the bad case\n        // (adding everything to a Map) in for every insert/move.\n        // If you change this code, also update reconcileChildrenIterator() which\n        // uses the same algorithm.\n        {\n          // First, validate keys.\n          var knownKeys = null;\n\n          for (var i = 0; i < newChildren.length; i++) {\n            var child = newChildren[i];\n            knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n          }\n        }\n        var resultingFirstChild = null;\n        var previousNewFiber = null;\n        var oldFiber = currentFirstChild;\n        var lastPlacedIndex = 0;\n        var newIdx = 0;\n        var nextOldFiber = null;\n\n        for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {\n          if (oldFiber.index > newIdx) {\n            nextOldFiber = oldFiber;\n            oldFiber = null;\n          } else {\n            nextOldFiber = oldFiber.sibling;\n          }\n\n          var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);\n\n          if (newFiber === null) {\n            // TODO: This breaks on empty slots like null children. That's\n            // unfortunate because it triggers the slow path all the time. We need\n            // a better way to communicate whether this was a miss or null,\n            // boolean, undefined, etc.\n            if (oldFiber === null) {\n              oldFiber = nextOldFiber;\n            }\n\n            break;\n          }\n\n          if (shouldTrackSideEffects) {\n            if (oldFiber && newFiber.alternate === null) {\n              // We matched the slot, but we didn't reuse the existing fiber, so we\n              // need to delete the existing child.\n              deleteChild(returnFiber, oldFiber);\n            }\n          }\n\n          lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n\n          if (previousNewFiber === null) {\n            // TODO: Move out of the loop. This only happens for the first run.\n            resultingFirstChild = newFiber;\n          } else {\n            // TODO: Defer siblings if we're not at the right index for this slot.\n            // I.e. if we had null values before, then we want to defer this\n            // for each null value. However, we also don't want to call updateSlot\n            // with the previous one.\n            previousNewFiber.sibling = newFiber;\n          }\n\n          previousNewFiber = newFiber;\n          oldFiber = nextOldFiber;\n        }\n\n        if (newIdx === newChildren.length) {\n          // We've reached the end of the new children. We can delete the rest.\n          deleteRemainingChildren(returnFiber, oldFiber);\n          return resultingFirstChild;\n        }\n\n        if (oldFiber === null) {\n          // If we don't have any more existing children we can choose a fast path\n          // since the rest will all be insertions.\n          for (; newIdx < newChildren.length; newIdx++) {\n            var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);\n\n            if (_newFiber === null) {\n              continue;\n            }\n\n            lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);\n\n            if (previousNewFiber === null) {\n              // TODO: Move out of the loop. This only happens for the first run.\n              resultingFirstChild = _newFiber;\n            } else {\n              previousNewFiber.sibling = _newFiber;\n            }\n\n            previousNewFiber = _newFiber;\n          }\n\n          return resultingFirstChild;\n        } // Add all children to a key map for quick lookups.\n\n\n        var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.\n\n        for (; newIdx < newChildren.length; newIdx++) {\n          var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);\n\n          if (_newFiber2 !== null) {\n            if (shouldTrackSideEffects) {\n              if (_newFiber2.alternate !== null) {\n                // The new fiber is a work in progress, but if there exists a\n                // current, that means that we reused the fiber. We need to delete\n                // it from the child list so that we don't add it to the deletion\n                // list.\n                existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);\n              }\n            }\n\n            lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);\n\n            if (previousNewFiber === null) {\n              resultingFirstChild = _newFiber2;\n            } else {\n              previousNewFiber.sibling = _newFiber2;\n            }\n\n            previousNewFiber = _newFiber2;\n          }\n        }\n\n        if (shouldTrackSideEffects) {\n          // Any existing children that weren't consumed above were deleted. We need\n          // to add them to the deletion list.\n          existingChildren.forEach(function (child) {\n            return deleteChild(returnFiber, child);\n          });\n        }\n\n        return resultingFirstChild;\n      }\n\n      function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {\n        // This is the same implementation as reconcileChildrenArray(),\n        // but using the iterator instead.\n        var iteratorFn = getIteratorFn(newChildrenIterable);\n\n        if (typeof iteratorFn !== 'function') {\n          throw new Error('An object is not an iterable. This error is likely caused by a bug in ' + 'React. Please file an issue.');\n        }\n\n        {\n          // We don't support rendering Generators because it's a mutation.\n          // See https://github.com/facebook/react/issues/12995\n          if (typeof Symbol === 'function' && // $FlowFixMe Flow doesn't know about toStringTag\n          newChildrenIterable[Symbol.toStringTag] === 'Generator') {\n            if (!didWarnAboutGenerators) {\n              error('Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.');\n            }\n\n            didWarnAboutGenerators = true;\n          } // Warn about using Maps as children\n\n\n          if (newChildrenIterable.entries === iteratorFn) {\n            if (!didWarnAboutMaps) {\n              error('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');\n            }\n\n            didWarnAboutMaps = true;\n          } // First, validate keys.\n          // We'll get a different iterator later for the main pass.\n\n\n          var _newChildren = iteratorFn.call(newChildrenIterable);\n\n          if (_newChildren) {\n            var knownKeys = null;\n\n            var _step = _newChildren.next();\n\n            for (; !_step.done; _step = _newChildren.next()) {\n              var child = _step.value;\n              knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n            }\n          }\n        }\n        var newChildren = iteratorFn.call(newChildrenIterable);\n\n        if (newChildren == null) {\n          throw new Error('An iterable object provided no iterator.');\n        }\n\n        var resultingFirstChild = null;\n        var previousNewFiber = null;\n        var oldFiber = currentFirstChild;\n        var lastPlacedIndex = 0;\n        var newIdx = 0;\n        var nextOldFiber = null;\n        var step = newChildren.next();\n\n        for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {\n          if (oldFiber.index > newIdx) {\n            nextOldFiber = oldFiber;\n            oldFiber = null;\n          } else {\n            nextOldFiber = oldFiber.sibling;\n          }\n\n          var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);\n\n          if (newFiber === null) {\n            // TODO: This breaks on empty slots like null children. That's\n            // unfortunate because it triggers the slow path all the time. We need\n            // a better way to communicate whether this was a miss or null,\n            // boolean, undefined, etc.\n            if (oldFiber === null) {\n              oldFiber = nextOldFiber;\n            }\n\n            break;\n          }\n\n          if (shouldTrackSideEffects) {\n            if (oldFiber && newFiber.alternate === null) {\n              // We matched the slot, but we didn't reuse the existing fiber, so we\n              // need to delete the existing child.\n              deleteChild(returnFiber, oldFiber);\n            }\n          }\n\n          lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n\n          if (previousNewFiber === null) {\n            // TODO: Move out of the loop. This only happens for the first run.\n            resultingFirstChild = newFiber;\n          } else {\n            // TODO: Defer siblings if we're not at the right index for this slot.\n            // I.e. if we had null values before, then we want to defer this\n            // for each null value. However, we also don't want to call updateSlot\n            // with the previous one.\n            previousNewFiber.sibling = newFiber;\n          }\n\n          previousNewFiber = newFiber;\n          oldFiber = nextOldFiber;\n        }\n\n        if (step.done) {\n          // We've reached the end of the new children. We can delete the rest.\n          deleteRemainingChildren(returnFiber, oldFiber);\n          return resultingFirstChild;\n        }\n\n        if (oldFiber === null) {\n          // If we don't have any more existing children we can choose a fast path\n          // since the rest will all be insertions.\n          for (; !step.done; newIdx++, step = newChildren.next()) {\n            var _newFiber3 = createChild(returnFiber, step.value, lanes);\n\n            if (_newFiber3 === null) {\n              continue;\n            }\n\n            lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);\n\n            if (previousNewFiber === null) {\n              // TODO: Move out of the loop. This only happens for the first run.\n              resultingFirstChild = _newFiber3;\n            } else {\n              previousNewFiber.sibling = _newFiber3;\n            }\n\n            previousNewFiber = _newFiber3;\n          }\n\n          return resultingFirstChild;\n        } // Add all children to a key map for quick lookups.\n\n\n        var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.\n\n        for (; !step.done; newIdx++, step = newChildren.next()) {\n          var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);\n\n          if (_newFiber4 !== null) {\n            if (shouldTrackSideEffects) {\n              if (_newFiber4.alternate !== null) {\n                // The new fiber is a work in progress, but if there exists a\n                // current, that means that we reused the fiber. We need to delete\n                // it from the child list so that we don't add it to the deletion\n                // list.\n                existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);\n              }\n            }\n\n            lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);\n\n            if (previousNewFiber === null) {\n              resultingFirstChild = _newFiber4;\n            } else {\n              previousNewFiber.sibling = _newFiber4;\n            }\n\n            previousNewFiber = _newFiber4;\n          }\n        }\n\n        if (shouldTrackSideEffects) {\n          // Any existing children that weren't consumed above were deleted. We need\n          // to add them to the deletion list.\n          existingChildren.forEach(function (child) {\n            return deleteChild(returnFiber, child);\n          });\n        }\n\n        return resultingFirstChild;\n      }\n\n      function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {\n        // There's no need to check for keys on text nodes since we don't have a\n        // way to define them.\n        if (currentFirstChild !== null && currentFirstChild.tag === HostText) {\n          // We already have an existing node so let's just update it and delete\n          // the rest.\n          deleteRemainingChildren(returnFiber, currentFirstChild.sibling);\n          var existing = useFiber(currentFirstChild, textContent);\n          existing.return = returnFiber;\n          return existing;\n        } // The existing first child is not a text node so we need to create one\n        // and delete the existing ones.\n\n\n        deleteRemainingChildren(returnFiber, currentFirstChild);\n        var created = createFiberFromText(textContent, returnFiber.mode, lanes);\n        created.return = returnFiber;\n        return created;\n      }\n\n      function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {\n        var key = element.key;\n        var child = currentFirstChild;\n\n        while (child !== null) {\n          // TODO: If key === null and child.key === null, then this only applies to\n          // the first item in the list.\n          if (child.key === key) {\n            var elementType = element.type;\n\n            if (elementType === REACT_FRAGMENT_TYPE) {\n              if (child.tag === Fragment) {\n                deleteRemainingChildren(returnFiber, child.sibling);\n                var existing = useFiber(child, element.props.children);\n                existing.return = returnFiber;\n                {\n                  existing._debugSource = element._source;\n                  existing._debugOwner = element._owner;\n                }\n                return existing;\n              }\n            } else {\n              if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:\n              isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.\n              // We need to do this after the Hot Reloading check above,\n              // because hot reloading has different semantics than prod because\n              // it doesn't resuspend. So we can't let the call below suspend.\n              enableLazyElements) {\n                deleteRemainingChildren(returnFiber, child.sibling);\n\n                var _existing = useFiber(child, element.props);\n\n                _existing.ref = coerceRef(returnFiber, child, element);\n                _existing.return = returnFiber;\n                {\n                  _existing._debugSource = element._source;\n                  _existing._debugOwner = element._owner;\n                }\n                return _existing;\n              }\n            } // Didn't match.\n\n\n            deleteRemainingChildren(returnFiber, child);\n            break;\n          } else {\n            deleteChild(returnFiber, child);\n          }\n\n          child = child.sibling;\n        }\n\n        if (element.type === REACT_FRAGMENT_TYPE) {\n          var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);\n          created.return = returnFiber;\n          return created;\n        } else {\n          var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);\n\n          _created4.ref = coerceRef(returnFiber, currentFirstChild, element);\n          _created4.return = returnFiber;\n          return _created4;\n        }\n      }\n\n      function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {\n        var key = portal.key;\n        var child = currentFirstChild;\n\n        while (child !== null) {\n          // TODO: If key === null and child.key === null, then this only applies to\n          // the first item in the list.\n          if (child.key === key) {\n            if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {\n              deleteRemainingChildren(returnFiber, child.sibling);\n              var existing = useFiber(child, portal.children || []);\n              existing.return = returnFiber;\n              return existing;\n            } else {\n              deleteRemainingChildren(returnFiber, child);\n              break;\n            }\n          } else {\n            deleteChild(returnFiber, child);\n          }\n\n          child = child.sibling;\n        }\n\n        var created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n        created.return = returnFiber;\n        return created;\n      } // This API will tag the children with the side-effect of the reconciliation\n      // itself. They will be added to the side-effect list as we pass through the\n      // children and the parent.\n\n\n      function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {\n        // This function is not recursive.\n        // If the top level item is an array, we treat it as a set of children,\n        // not as a fragment. Nested arrays on the other hand will be treated as\n        // fragment nodes. Recursion happens at the normal flow.\n        // Handle top level unkeyed fragments as if they were arrays.\n        // This leads to an ambiguity between <>{[...]}</> and <>...</>.\n        // We treat the ambiguous cases above the same.\n        var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;\n\n        if (isUnkeyedTopLevelFragment) {\n          newChild = newChild.props.children;\n        } // Handle object types\n\n\n        if (typeof newChild === 'object' && newChild !== null) {\n          switch (newChild.$$typeof) {\n            case REACT_ELEMENT_TYPE:\n              return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));\n\n            case REACT_PORTAL_TYPE:\n              return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));\n          }\n\n          if (isArray(newChild)) {\n            return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);\n          }\n\n          if (getIteratorFn(newChild)) {\n            return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);\n          }\n\n          throwOnInvalidObjectType(returnFiber, newChild);\n        }\n\n        if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {\n          return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, lanes));\n        }\n\n        {\n          if (typeof newChild === 'function') {\n            warnOnFunctionType(returnFiber);\n          }\n        } // Remaining cases are all treated as empty.\n\n        return deleteRemainingChildren(returnFiber, currentFirstChild);\n      }\n\n      return reconcileChildFibers;\n    }\n\n    var reconcileChildFibers = ChildReconciler(true);\n    var mountChildFibers = ChildReconciler(false);\n\n    function cloneChildFibers(current, workInProgress) {\n      if (current !== null && workInProgress.child !== current.child) {\n        throw new Error('Resuming work not yet implemented.');\n      }\n\n      if (workInProgress.child === null) {\n        return;\n      }\n\n      var currentChild = workInProgress.child;\n      var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);\n      workInProgress.child = newChild;\n      newChild.return = workInProgress;\n\n      while (currentChild.sibling !== null) {\n        currentChild = currentChild.sibling;\n        newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);\n        newChild.return = workInProgress;\n      }\n\n      newChild.sibling = null;\n    } // Reset a workInProgress child set to prepare it for a second pass.\n\n\n    function resetChildFibers(workInProgress, lanes) {\n      var child = workInProgress.child;\n\n      while (child !== null) {\n        resetWorkInProgress(child, lanes);\n        child = child.sibling;\n      }\n    }\n\n    var NO_CONTEXT$1 = {};\n    var contextStackCursor$1 = createCursor(NO_CONTEXT$1);\n    var contextFiberStackCursor = createCursor(NO_CONTEXT$1);\n    var rootInstanceStackCursor = createCursor(NO_CONTEXT$1);\n\n    function requiredContext(c) {\n      if (c === NO_CONTEXT$1) {\n        throw new Error('Expected host context to exist. This error is likely caused by a bug ' + 'in React. Please file an issue.');\n      }\n\n      return c;\n    }\n\n    function getRootHostContainer() {\n      var rootInstance = requiredContext(rootInstanceStackCursor.current);\n      return rootInstance;\n    }\n\n    function pushHostContainer(fiber, nextRootInstance) {\n      // Push current root instance onto the stack;\n      // This allows us to reset root when portals are popped.\n      push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.\n      // This enables us to pop only Fibers that provide unique contexts.\n\n      push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.\n      // However, we can't just call getRootHostContext() and push it because\n      // we'd have a different number of entries on the stack depending on\n      // whether getRootHostContext() throws somewhere in renderer code or not.\n      // So we push an empty value first. This lets us safely unwind on errors.\n\n      push(contextStackCursor$1, NO_CONTEXT$1, fiber);\n      var nextRootContext = getRootHostContext(); // Now that we know this function doesn't throw, replace it.\n\n      pop(contextStackCursor$1, fiber);\n      push(contextStackCursor$1, nextRootContext, fiber);\n    }\n\n    function popHostContainer(fiber) {\n      pop(contextStackCursor$1, fiber);\n      pop(contextFiberStackCursor, fiber);\n      pop(rootInstanceStackCursor, fiber);\n    }\n\n    function getHostContext() {\n      var context = requiredContext(contextStackCursor$1.current);\n      return context;\n    }\n\n    function pushHostContext(fiber) {\n      var rootInstance = requiredContext(rootInstanceStackCursor.current);\n      var context = requiredContext(contextStackCursor$1.current);\n      var nextContext = getChildHostContext(context, fiber.type); // Don't push this Fiber's context unless it's unique.\n\n      if (context === nextContext) {\n        return;\n      } // Track the context and the Fiber that provided it.\n      // This enables us to pop only Fibers that provide unique contexts.\n\n\n      push(contextFiberStackCursor, fiber, fiber);\n      push(contextStackCursor$1, nextContext, fiber);\n    }\n\n    function popHostContext(fiber) {\n      // Do not pop unless this Fiber provided the current context.\n      // pushHostContext() only pushes Fibers that provide unique contexts.\n      if (contextFiberStackCursor.current !== fiber) {\n        return;\n      }\n\n      pop(contextStackCursor$1, fiber);\n      pop(contextFiberStackCursor, fiber);\n    }\n\n    var DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is\n    // inherited deeply down the subtree. The upper bits only affect\n    // this immediate suspense boundary and gets reset each new\n    // boundary or suspense list.\n\n    var SubtreeSuspenseContextMask = 1; // Subtree Flags:\n    // InvisibleParentSuspenseContext indicates that one of our parent Suspense\n    // boundaries is not currently showing visible main content.\n    // Either because it is already showing a fallback or is not mounted at all.\n    // We can use this to determine if it is desirable to trigger a fallback at\n    // the parent. If not, then we might need to trigger undesirable boundaries\n    // and/or suspend the commit to avoid hiding the parent content.\n\n    var InvisibleParentSuspenseContext = 1; // Shallow Flags:\n    // ForceSuspenseFallback can be used by SuspenseList to force newly added\n    // items into their fallback state during one of the render passes.\n\n    var ForceSuspenseFallback = 2;\n    var suspenseStackCursor = createCursor(DefaultSuspenseContext);\n\n    function hasSuspenseContext(parentContext, flag) {\n      return (parentContext & flag) !== 0;\n    }\n\n    function setDefaultShallowSuspenseContext(parentContext) {\n      return parentContext & SubtreeSuspenseContextMask;\n    }\n\n    function setShallowSuspenseContext(parentContext, shallowContext) {\n      return parentContext & SubtreeSuspenseContextMask | shallowContext;\n    }\n\n    function addSubtreeSuspenseContext(parentContext, subtreeContext) {\n      return parentContext | subtreeContext;\n    }\n\n    function pushSuspenseContext(fiber, newContext) {\n      push(suspenseStackCursor, newContext, fiber);\n    }\n\n    function popSuspenseContext(fiber) {\n      pop(suspenseStackCursor, fiber);\n    }\n\n    function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {\n      // If it was the primary children that just suspended, capture and render the\n      // fallback. Otherwise, don't capture and bubble to the next boundary.\n      var nextState = workInProgress.memoizedState;\n\n      if (nextState !== null) {\n        if (nextState.dehydrated !== null) {\n          // A dehydrated boundary always captures.\n          return true;\n        }\n\n        return false;\n      }\n\n      var props = workInProgress.memoizedProps; // Regular boundaries always capture.\n\n      {\n        return true;\n      } // If it's a boundary we should avoid, then we prefer to bubble up to the\n    }\n\n    function findFirstSuspended(row) {\n      var node = row;\n\n      while (node !== null) {\n        if (node.tag === SuspenseComponent) {\n          var state = node.memoizedState;\n\n          if (state !== null) {\n            var dehydrated = state.dehydrated;\n\n            if (dehydrated === null || isSuspenseInstancePending() || isSuspenseInstanceFallback()) {\n              return node;\n            }\n          }\n        } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't\n        // keep track of whether it suspended or not.\n        node.memoizedProps.revealOrder !== undefined) {\n          var didSuspend = (node.flags & DidCapture) !== NoFlags;\n\n          if (didSuspend) {\n            return node;\n          }\n        } else if (node.child !== null) {\n          node.child.return = node;\n          node = node.child;\n          continue;\n        }\n\n        if (node === row) {\n          return null;\n        }\n\n        while (node.sibling === null) {\n          if (node.return === null || node.return === row) {\n            return null;\n          }\n\n          node = node.return;\n        }\n\n        node.sibling.return = node.return;\n        node = node.sibling;\n      }\n\n      return null;\n    }\n\n    var NoFlags$1 =\n    /*   */\n    0; // Represents whether effect should fire.\n\n    var HasEffect =\n    /* */\n    1; // Represents the phase in which the effect (not the clean-up) fires.\n\n    var Insertion =\n    /*  */\n    2;\n    var Layout =\n    /*    */\n    4;\n    var Passive$1 =\n    /*   */\n    8; // and should be reset before starting a new render.\n    // This tracks which mutable sources need to be reset after a render.\n\n    var workInProgressSources = [];\n\n    function resetWorkInProgressVersions() {\n      for (var i = 0; i < workInProgressSources.length; i++) {\n        var mutableSource = workInProgressSources[i];\n        {\n          mutableSource._workInProgressVersionSecondary = null;\n        }\n      }\n\n      workInProgressSources.length = 0;\n    }\n\n    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,\n        ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;\n    var didWarnAboutMismatchedHooksForComponent;\n    var didWarnUncachedGetSnapshot;\n    {\n      didWarnAboutMismatchedHooksForComponent = new Set();\n    } // These are set right before calling the component.\n\n    var renderLanes = NoLanes; // The work-in-progress fiber. I've named it differently to distinguish it from\n    // the work-in-progress hook.\n\n    var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The\n    // current hook list is the list that belongs to the current fiber. The\n    // work-in-progress hook list is a new list that will be added to the\n    // work-in-progress fiber.\n\n    var currentHook = null;\n    var workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This\n    // does not get reset if we do another render pass; only when we're completely\n    // finished evaluating this component. This is an optimization so we know\n    // whether we need to clear render phase updates after a throw.\n\n    var didScheduleRenderPhaseUpdate = false; // Where an update was scheduled only during the current render pass. This\n    // gets reset after each attempt.\n    // TODO: Maybe there's some way to consolidate this with\n    // `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.\n\n    var didScheduleRenderPhaseUpdateDuringThisPass = false; // Counts the number of useId hooks in this component.\n    // hydration). This counter is global, so client ids are not stable across\n    // render attempts.\n\n    var globalClientIdCounter = 0;\n    var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook\n\n    var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.\n    // The list stores the order of hooks used during the initial render (mount).\n    // Subsequent renders (updates) reference this list.\n\n    var hookTypesDev = null;\n    var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore\n    // the dependencies for Hooks that need them (e.g. useEffect or useMemo).\n    // When true, such Hooks will always be \"remounted\". Only used during hot reload.\n\n    var ignorePreviousDependencies = false;\n\n    function mountHookTypesDev() {\n      {\n        var hookName = currentHookNameInDev;\n\n        if (hookTypesDev === null) {\n          hookTypesDev = [hookName];\n        } else {\n          hookTypesDev.push(hookName);\n        }\n      }\n    }\n\n    function updateHookTypesDev() {\n      {\n        var hookName = currentHookNameInDev;\n\n        if (hookTypesDev !== null) {\n          hookTypesUpdateIndexDev++;\n\n          if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {\n            warnOnHookMismatchInDev(hookName);\n          }\n        }\n      }\n    }\n\n    function checkDepsAreArrayDev(deps) {\n      {\n        if (deps !== undefined && deps !== null && !isArray(deps)) {\n          // Verify deps, but only on mount to avoid extra checks.\n          // It's unlikely their type would change as usually you define them inline.\n          error('%s received a final argument that is not an array (instead, received `%s`). When ' + 'specified, the final argument must be an array.', currentHookNameInDev, typeof deps);\n        }\n      }\n    }\n\n    function warnOnHookMismatchInDev(currentHookName) {\n      {\n        var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);\n\n        if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {\n          didWarnAboutMismatchedHooksForComponent.add(componentName);\n\n          if (hookTypesDev !== null) {\n            var table = '';\n            var secondColumnStart = 30;\n\n            for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {\n              var oldHookName = hookTypesDev[i];\n              var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;\n              var row = i + 1 + \". \" + oldHookName; // Extra space so second column lines up\n              // lol @ IE not supporting String#repeat\n\n              while (row.length < secondColumnStart) {\n                row += ' ';\n              }\n\n              row += newHookName + '\\n';\n              table += row;\n            }\n\n            error('React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\\n\\n' + '   Previous render            Next render\\n' + '   ------------------------------------------------------\\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n', componentName, table);\n          }\n        }\n      }\n    }\n\n    function throwInvalidHookError() {\n      throw new Error('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' + ' one of the following reasons:\\n' + '1. You might have mismatching versions of React and the renderer (such as React DOM)\\n' + '2. You might be breaking the Rules of Hooks\\n' + '3. You might have more than one copy of React in the same app\\n' + 'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.');\n    }\n\n    function areHookInputsEqual(nextDeps, prevDeps) {\n      {\n        if (ignorePreviousDependencies) {\n          // Only true when this component is being hot reloaded.\n          return false;\n        }\n      }\n\n      if (prevDeps === null) {\n        {\n          error('%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);\n        }\n        return false;\n      }\n\n      {\n        // Don't bother comparing lengths in prod because these arrays should be\n        // passed inline.\n        if (nextDeps.length !== prevDeps.length) {\n          error('The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\\n\\n' + 'Previous: %s\\n' + 'Incoming: %s', currentHookNameInDev, \"[\" + prevDeps.join(', ') + \"]\", \"[\" + nextDeps.join(', ') + \"]\");\n        }\n      }\n\n      for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {\n        if (objectIs(nextDeps[i], prevDeps[i])) {\n          continue;\n        }\n\n        return false;\n      }\n\n      return true;\n    }\n\n    function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {\n      renderLanes = nextRenderLanes;\n      currentlyRenderingFiber$1 = workInProgress;\n      {\n        hookTypesDev = current !== null ? current._debugHookTypes : null;\n        hookTypesUpdateIndexDev = -1; // Used for hot reloading:\n\n        ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;\n      }\n      workInProgress.memoizedState = null;\n      workInProgress.updateQueue = null;\n      workInProgress.lanes = NoLanes; // The following should have already been reset\n      // currentHook = null;\n      // workInProgressHook = null;\n      // didScheduleRenderPhaseUpdate = false;\n      // localIdCounter = 0;\n      // TODO Warn if no hooks are used at all during mount, then some are used during update.\n      // Currently we will identify the update render as a mount because memoizedState === null.\n      // This is tricky because it's valid for certain types of components (e.g. React.lazy)\n      // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.\n      // Non-stateful hooks (e.g. context) don't get added to memoizedState,\n      // so memoizedState would be null during updates and mounts.\n\n      {\n        if (current !== null && current.memoizedState !== null) {\n          ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;\n        } else if (hookTypesDev !== null) {\n          // This dispatcher handles an edge case where a component is updating,\n          // but no stateful hooks have been used.\n          // We want to match the production code behavior (which will use HooksDispatcherOnMount),\n          // but with the extra DEV validation to ensure hooks ordering hasn't changed.\n          // This dispatcher does that.\n          ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;\n        } else {\n          ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;\n        }\n      }\n      var children = Component(props, secondArg); // Check if there was a render phase update\n\n      if (didScheduleRenderPhaseUpdateDuringThisPass) {\n        // Keep rendering in a loop for as long as render phase updates continue to\n        // be scheduled. Use a counter to prevent infinite loops.\n        var numberOfReRenders = 0;\n\n        do {\n          didScheduleRenderPhaseUpdateDuringThisPass = false;\n\n          if (numberOfReRenders >= RE_RENDER_LIMIT) {\n            throw new Error('Too many re-renders. React limits the number of renders to prevent ' + 'an infinite loop.');\n          }\n\n          numberOfReRenders += 1;\n          {\n            // Even when hot reloading, allow dependencies to stabilize\n            // after first render to prevent infinite render phase updates.\n            ignorePreviousDependencies = false;\n          } // Start over from the beginning of the list\n\n          currentHook = null;\n          workInProgressHook = null;\n          workInProgress.updateQueue = null;\n          {\n            // Also validate hook order for cascading updates.\n            hookTypesUpdateIndexDev = -1;\n          }\n          ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;\n          children = Component(props, secondArg);\n        } while (didScheduleRenderPhaseUpdateDuringThisPass);\n      } // We can assume the previous dispatcher is always this one, since we set it\n      // at the beginning of the render phase and there's no re-entrance.\n\n\n      ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;\n      {\n        workInProgress._debugHookTypes = hookTypesDev;\n      } // This check uses currentHook so that it works the same in DEV and prod bundles.\n      // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.\n\n      var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;\n      renderLanes = NoLanes;\n      currentlyRenderingFiber$1 = null;\n      currentHook = null;\n      workInProgressHook = null;\n      {\n        currentHookNameInDev = null;\n        hookTypesDev = null;\n        hookTypesUpdateIndexDev = -1; // Confirm that a static flag was not added or removed since the last\n        // render. If this fires, it suggests that we incorrectly reset the static\n        // flags in some other part of the codebase. This has happened before, for\n        // example, in the SuspenseList implementation.\n\n        if (current !== null && (current.flags & StaticMask) !== (workInProgress.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird\n        // and creates false positives. To make this work in legacy mode, we'd\n        // need to mark fibers that commit in an incomplete state, somehow. For\n        // now I'll disable the warning that most of the bugs that would trigger\n        // it are either exclusive to concurrent mode or exist in both.\n        (current.mode & ConcurrentMode) !== NoMode) {\n          error('Internal React error: Expected static flag was missing. Please ' + 'notify the React team.');\n        }\n      }\n      didScheduleRenderPhaseUpdate = false; // This is reset by checkDidRenderIdHook\n      // localIdCounter = 0;\n\n      if (didRenderTooFewHooks) {\n        throw new Error('Rendered fewer hooks than expected. This may be caused by an accidental ' + 'early return statement.');\n      }\n\n      return children;\n    }\n\n    function bailoutHooks(current, workInProgress, lanes) {\n      workInProgress.updateQueue = current.updateQueue; // TODO: Don't need to reset the flags here, because they're reset in the\n      // complete phase (bubbleProperties).\n\n      {\n        workInProgress.flags &= ~(Passive | Update);\n      }\n      current.lanes = removeLanes(current.lanes, lanes);\n    }\n\n    function resetHooksAfterThrow() {\n      // We can assume the previous dispatcher is always this one, since we set it\n      // at the beginning of the render phase and there's no re-entrance.\n      ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;\n\n      if (didScheduleRenderPhaseUpdate) {\n        // There were render phase updates. These are only valid for this render\n        // phase, which we are now aborting. Remove the updates from the queues so\n        // they do not persist to the next render. Do not remove updates from hooks\n        // that weren't processed.\n        //\n        // Only reset the updates from the queue if it has a clone. If it does\n        // not have a clone, that means it wasn't processed, and the updates were\n        // scheduled before we entered the render phase.\n        var hook = currentlyRenderingFiber$1.memoizedState;\n\n        while (hook !== null) {\n          var queue = hook.queue;\n\n          if (queue !== null) {\n            queue.pending = null;\n          }\n\n          hook = hook.next;\n        }\n\n        didScheduleRenderPhaseUpdate = false;\n      }\n\n      renderLanes = NoLanes;\n      currentlyRenderingFiber$1 = null;\n      currentHook = null;\n      workInProgressHook = null;\n      {\n        hookTypesDev = null;\n        hookTypesUpdateIndexDev = -1;\n        currentHookNameInDev = null;\n        isUpdatingOpaqueValueInRenderPhase = false;\n      }\n      didScheduleRenderPhaseUpdateDuringThisPass = false;\n    }\n\n    function mountWorkInProgressHook() {\n      var hook = {\n        memoizedState: null,\n        baseState: null,\n        baseQueue: null,\n        queue: null,\n        next: null\n      };\n\n      if (workInProgressHook === null) {\n        // This is the first hook in the list\n        currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;\n      } else {\n        // Append to the end of the list\n        workInProgressHook = workInProgressHook.next = hook;\n      }\n\n      return workInProgressHook;\n    }\n\n    function updateWorkInProgressHook() {\n      // This function is used both for updates and for re-renders triggered by a\n      // render phase update. It assumes there is either a current hook we can\n      // clone, or a work-in-progress hook from a previous render pass that we can\n      // use as a base. When we reach the end of the base list, we must switch to\n      // the dispatcher used for mounts.\n      var nextCurrentHook;\n\n      if (currentHook === null) {\n        var current = currentlyRenderingFiber$1.alternate;\n\n        if (current !== null) {\n          nextCurrentHook = current.memoizedState;\n        } else {\n          nextCurrentHook = null;\n        }\n      } else {\n        nextCurrentHook = currentHook.next;\n      }\n\n      var nextWorkInProgressHook;\n\n      if (workInProgressHook === null) {\n        nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;\n      } else {\n        nextWorkInProgressHook = workInProgressHook.next;\n      }\n\n      if (nextWorkInProgressHook !== null) {\n        // There's already a work-in-progress. Reuse it.\n        workInProgressHook = nextWorkInProgressHook;\n        nextWorkInProgressHook = workInProgressHook.next;\n        currentHook = nextCurrentHook;\n      } else {\n        // Clone from the current hook.\n        if (nextCurrentHook === null) {\n          throw new Error('Rendered more hooks than during the previous render.');\n        }\n\n        currentHook = nextCurrentHook;\n        var newHook = {\n          memoizedState: currentHook.memoizedState,\n          baseState: currentHook.baseState,\n          baseQueue: currentHook.baseQueue,\n          queue: currentHook.queue,\n          next: null\n        };\n\n        if (workInProgressHook === null) {\n          // This is the first hook in the list.\n          currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;\n        } else {\n          // Append to the end of the list.\n          workInProgressHook = workInProgressHook.next = newHook;\n        }\n      }\n\n      return workInProgressHook;\n    }\n\n    function createFunctionComponentUpdateQueue() {\n      return {\n        lastEffect: null,\n        stores: null\n      };\n    }\n\n    function basicStateReducer(state, action) {\n      // $FlowFixMe: Flow doesn't like mixed types\n      return typeof action === 'function' ? action(state) : action;\n    }\n\n    function mountReducer(reducer, initialArg, init) {\n      var hook = mountWorkInProgressHook();\n      var initialState;\n\n      if (init !== undefined) {\n        initialState = init(initialArg);\n      } else {\n        initialState = initialArg;\n      }\n\n      hook.memoizedState = hook.baseState = initialState;\n      var queue = {\n        pending: null,\n        interleaved: null,\n        lanes: NoLanes,\n        dispatch: null,\n        lastRenderedReducer: reducer,\n        lastRenderedState: initialState\n      };\n      hook.queue = queue;\n      var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);\n      return [hook.memoizedState, dispatch];\n    }\n\n    function updateReducer(reducer, initialArg, init) {\n      var hook = updateWorkInProgressHook();\n      var queue = hook.queue;\n\n      if (queue === null) {\n        throw new Error('Should have a queue. This is likely a bug in React. Please file an issue.');\n      }\n\n      queue.lastRenderedReducer = reducer;\n      var current = currentHook; // The last rebase update that is NOT part of the base state.\n\n      var baseQueue = current.baseQueue; // The last pending update that hasn't been processed yet.\n\n      var pendingQueue = queue.pending;\n\n      if (pendingQueue !== null) {\n        // We have new updates that haven't been processed yet.\n        // We'll add them to the base queue.\n        if (baseQueue !== null) {\n          // Merge the pending queue and the base queue.\n          var baseFirst = baseQueue.next;\n          var pendingFirst = pendingQueue.next;\n          baseQueue.next = pendingFirst;\n          pendingQueue.next = baseFirst;\n        }\n\n        {\n          if (current.baseQueue !== baseQueue) {\n            // Internal invariant that should never happen, but feasibly could in\n            // the future if we implement resuming, or some form of that.\n            error('Internal error: Expected work-in-progress queue to be a clone. ' + 'This is a bug in React.');\n          }\n        }\n        current.baseQueue = baseQueue = pendingQueue;\n        queue.pending = null;\n      }\n\n      if (baseQueue !== null) {\n        // We have a queue to process.\n        var first = baseQueue.next;\n        var newState = current.baseState;\n        var newBaseState = null;\n        var newBaseQueueFirst = null;\n        var newBaseQueueLast = null;\n        var update = first;\n\n        do {\n          var updateLane = update.lane;\n\n          if (!isSubsetOfLanes(renderLanes, updateLane)) {\n            // Priority is insufficient. Skip this update. If this is the first\n            // skipped update, the previous update/state is the new base\n            // update/state.\n            var clone = {\n              lane: updateLane,\n              action: update.action,\n              hasEagerState: update.hasEagerState,\n              eagerState: update.eagerState,\n              next: null\n            };\n\n            if (newBaseQueueLast === null) {\n              newBaseQueueFirst = newBaseQueueLast = clone;\n              newBaseState = newState;\n            } else {\n              newBaseQueueLast = newBaseQueueLast.next = clone;\n            } // Update the remaining priority in the queue.\n            // TODO: Don't need to accumulate this. Instead, we can remove\n            // renderLanes from the original lanes.\n\n\n            currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);\n            markSkippedUpdateLanes(updateLane);\n          } else {\n            // This update does have sufficient priority.\n            if (newBaseQueueLast !== null) {\n              var _clone = {\n                // This update is going to be committed so we never want uncommit\n                // it. Using NoLane works because 0 is a subset of all bitmasks, so\n                // this will never be skipped by the check above.\n                lane: NoLane,\n                action: update.action,\n                hasEagerState: update.hasEagerState,\n                eagerState: update.eagerState,\n                next: null\n              };\n              newBaseQueueLast = newBaseQueueLast.next = _clone;\n            } // Process this update.\n\n\n            if (update.hasEagerState) {\n              // If this update is a state update (not a reducer) and was processed eagerly,\n              // we can use the eagerly computed state\n              newState = update.eagerState;\n            } else {\n              var action = update.action;\n              newState = reducer(newState, action);\n            }\n          }\n\n          update = update.next;\n        } while (update !== null && update !== first);\n\n        if (newBaseQueueLast === null) {\n          newBaseState = newState;\n        } else {\n          newBaseQueueLast.next = newBaseQueueFirst;\n        } // Mark that the fiber performed work, but only if the new state is\n        // different from the current state.\n\n\n        if (!objectIs(newState, hook.memoizedState)) {\n          markWorkInProgressReceivedUpdate();\n        }\n\n        hook.memoizedState = newState;\n        hook.baseState = newBaseState;\n        hook.baseQueue = newBaseQueueLast;\n        queue.lastRenderedState = newState;\n      } // Interleaved updates are stored on a separate queue. We aren't going to\n      // process them during this render, but we do need to track which lanes\n      // are remaining.\n\n\n      var lastInterleaved = queue.interleaved;\n\n      if (lastInterleaved !== null) {\n        var interleaved = lastInterleaved;\n\n        do {\n          var interleavedLane = interleaved.lane;\n          currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);\n          markSkippedUpdateLanes(interleavedLane);\n          interleaved = interleaved.next;\n        } while (interleaved !== lastInterleaved);\n      } else if (baseQueue === null) {\n        // `queue.lanes` is used for entangling transitions. We can set it back to\n        // zero once the queue is empty.\n        queue.lanes = NoLanes;\n      }\n\n      var dispatch = queue.dispatch;\n      return [hook.memoizedState, dispatch];\n    }\n\n    function rerenderReducer(reducer, initialArg, init) {\n      var hook = updateWorkInProgressHook();\n      var queue = hook.queue;\n\n      if (queue === null) {\n        throw new Error('Should have a queue. This is likely a bug in React. Please file an issue.');\n      }\n\n      queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous\n      // work-in-progress hook.\n\n      var dispatch = queue.dispatch;\n      var lastRenderPhaseUpdate = queue.pending;\n      var newState = hook.memoizedState;\n\n      if (lastRenderPhaseUpdate !== null) {\n        // The queue doesn't persist past this render pass.\n        queue.pending = null;\n        var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;\n        var update = firstRenderPhaseUpdate;\n\n        do {\n          // Process this render phase update. We don't have to check the\n          // priority because it will always be the same as the current\n          // render's.\n          var action = update.action;\n          newState = reducer(newState, action);\n          update = update.next;\n        } while (update !== firstRenderPhaseUpdate); // Mark that the fiber performed work, but only if the new state is\n        // different from the current state.\n\n\n        if (!objectIs(newState, hook.memoizedState)) {\n          markWorkInProgressReceivedUpdate();\n        }\n\n        hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to\n        // the base state unless the queue is empty.\n        // TODO: Not sure if this is the desired semantics, but it's what we\n        // do for gDSFP. I can't remember why.\n\n        if (hook.baseQueue === null) {\n          hook.baseState = newState;\n        }\n\n        queue.lastRenderedState = newState;\n      }\n\n      return [newState, dispatch];\n    }\n\n    function mountMutableSource(source, getSnapshot, subscribe) {\n      {\n        return undefined;\n      }\n    }\n\n    function updateMutableSource(source, getSnapshot, subscribe) {\n      {\n        return undefined;\n      }\n    }\n\n    function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n      var fiber = currentlyRenderingFiber$1;\n      var hook = mountWorkInProgressHook();\n      var nextSnapshot;\n      {\n        nextSnapshot = getSnapshot();\n        {\n          if (!didWarnUncachedGetSnapshot) {\n            var cachedSnapshot = getSnapshot();\n\n            if (!objectIs(nextSnapshot, cachedSnapshot)) {\n              error('The result of getSnapshot should be cached to avoid an infinite loop');\n              didWarnUncachedGetSnapshot = true;\n            }\n          }\n        } // Unless we're rendering a blocking lane, schedule a consistency check.\n        // Right before committing, we will walk the tree and check if any of the\n        // stores were mutated.\n        //\n        // We won't do this if we're hydrating server-rendered content, because if\n        // the content is stale, it's already visible anyway. Instead we'll patch\n        // it up in a passive effect.\n\n        var root = getWorkInProgressRoot();\n\n        if (root === null) {\n          throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');\n        }\n\n        if (!includesBlockingLane(root, renderLanes)) {\n          pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\n        }\n      } // Read the current snapshot from the store on every render. This breaks the\n      // normal rules of React, and only works because store updates are\n      // always synchronous.\n\n      hook.memoizedState = nextSnapshot;\n      var inst = {\n        value: nextSnapshot,\n        getSnapshot: getSnapshot\n      };\n      hook.queue = inst; // Schedule an effect to subscribe to the store.\n\n      mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]); // Schedule an effect to update the mutable instance fields. We will update\n      // this whenever subscribe, getSnapshot, or value changes. Because there's no\n      // clean-up function, and we track the deps correctly, we can call pushEffect\n      // directly, without storing any additional state. For the same reason, we\n      // don't need to set a static flag, either.\n      // TODO: We can move this to the passive phase once we add a pre-commit\n      // consistency check. See the next comment.\n\n      fiber.flags |= Passive;\n      pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null);\n      return nextSnapshot;\n    }\n\n    function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n      var fiber = currentlyRenderingFiber$1;\n      var hook = updateWorkInProgressHook(); // Read the current snapshot from the store on every render. This breaks the\n      // normal rules of React, and only works because store updates are\n      // always synchronous.\n\n      var nextSnapshot = getSnapshot();\n      {\n        if (!didWarnUncachedGetSnapshot) {\n          var cachedSnapshot = getSnapshot();\n\n          if (!objectIs(nextSnapshot, cachedSnapshot)) {\n            error('The result of getSnapshot should be cached to avoid an infinite loop');\n            didWarnUncachedGetSnapshot = true;\n          }\n        }\n      }\n      var prevSnapshot = hook.memoizedState;\n      var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);\n\n      if (snapshotChanged) {\n        hook.memoizedState = nextSnapshot;\n        markWorkInProgressReceivedUpdate();\n      }\n\n      var inst = hook.queue;\n      updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]); // Whenever getSnapshot or subscribe changes, we need to check in the\n      // commit phase if there was an interleaved mutation. In concurrent mode\n      // this can happen all the time, but even in synchronous mode, an earlier\n      // effect may have mutated the store.\n\n      if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by\n      // checking whether we scheduled a subscription effect above.\n      workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {\n        fiber.flags |= Passive;\n        pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null); // Unless we're rendering a blocking lane, schedule a consistency check.\n        // Right before committing, we will walk the tree and check if any of the\n        // stores were mutated.\n\n        var root = getWorkInProgressRoot();\n\n        if (root === null) {\n          throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');\n        }\n\n        if (!includesBlockingLane(root, renderLanes)) {\n          pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\n        }\n      }\n\n      return nextSnapshot;\n    }\n\n    function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {\n      fiber.flags |= StoreConsistency;\n      var check = {\n        getSnapshot: getSnapshot,\n        value: renderedSnapshot\n      };\n      var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;\n\n      if (componentUpdateQueue === null) {\n        componentUpdateQueue = createFunctionComponentUpdateQueue();\n        currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;\n        componentUpdateQueue.stores = [check];\n      } else {\n        var stores = componentUpdateQueue.stores;\n\n        if (stores === null) {\n          componentUpdateQueue.stores = [check];\n        } else {\n          stores.push(check);\n        }\n      }\n    }\n\n    function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {\n      // These are updated in the passive phase\n      inst.value = nextSnapshot;\n      inst.getSnapshot = getSnapshot; // Something may have been mutated in between render and commit. This could\n      // have been in an event that fired before the passive effects, or it could\n      // have been in a layout effect. In that case, we would have used the old\n      // snapsho and getSnapshot values to bail out. We need to check one more time.\n\n      if (checkIfSnapshotChanged(inst)) {\n        // Force a re-render.\n        forceStoreRerender(fiber);\n      }\n    }\n\n    function subscribeToStore(fiber, inst, subscribe) {\n      var handleStoreChange = function () {\n        // The store changed. Check if the snapshot changed since the last time we\n        // read from the store.\n        if (checkIfSnapshotChanged(inst)) {\n          // Force a re-render.\n          forceStoreRerender(fiber);\n        }\n      }; // Subscribe to the store and return a clean-up function.\n\n\n      return subscribe(handleStoreChange);\n    }\n\n    function checkIfSnapshotChanged(inst) {\n      var latestGetSnapshot = inst.getSnapshot;\n      var prevValue = inst.value;\n\n      try {\n        var nextValue = latestGetSnapshot();\n        return !objectIs(prevValue, nextValue);\n      } catch (error) {\n        return true;\n      }\n    }\n\n    function forceStoreRerender(fiber) {\n      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n    }\n\n    function mountState(initialState) {\n      var hook = mountWorkInProgressHook();\n\n      if (typeof initialState === 'function') {\n        // $FlowFixMe: Flow doesn't like mixed types\n        initialState = initialState();\n      }\n\n      hook.memoizedState = hook.baseState = initialState;\n      var queue = {\n        pending: null,\n        interleaved: null,\n        lanes: NoLanes,\n        dispatch: null,\n        lastRenderedReducer: basicStateReducer,\n        lastRenderedState: initialState\n      };\n      hook.queue = queue;\n      var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);\n      return [hook.memoizedState, dispatch];\n    }\n\n    function updateState(initialState) {\n      return updateReducer(basicStateReducer);\n    }\n\n    function rerenderState(initialState) {\n      return rerenderReducer(basicStateReducer);\n    }\n\n    function pushEffect(tag, create, destroy, deps) {\n      var effect = {\n        tag: tag,\n        create: create,\n        destroy: destroy,\n        deps: deps,\n        // Circular\n        next: null\n      };\n      var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;\n\n      if (componentUpdateQueue === null) {\n        componentUpdateQueue = createFunctionComponentUpdateQueue();\n        currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;\n        componentUpdateQueue.lastEffect = effect.next = effect;\n      } else {\n        var lastEffect = componentUpdateQueue.lastEffect;\n\n        if (lastEffect === null) {\n          componentUpdateQueue.lastEffect = effect.next = effect;\n        } else {\n          var firstEffect = lastEffect.next;\n          lastEffect.next = effect;\n          effect.next = firstEffect;\n          componentUpdateQueue.lastEffect = effect;\n        }\n      }\n\n      return effect;\n    }\n\n    function mountRef(initialValue) {\n      var hook = mountWorkInProgressHook();\n      {\n        var _ref2 = {\n          current: initialValue\n        };\n        hook.memoizedState = _ref2;\n        return _ref2;\n      }\n    }\n\n    function updateRef(initialValue) {\n      var hook = updateWorkInProgressHook();\n      return hook.memoizedState;\n    }\n\n    function mountEffectImpl(fiberFlags, hookFlags, create, deps) {\n      var hook = mountWorkInProgressHook();\n      var nextDeps = deps === undefined ? null : deps;\n      currentlyRenderingFiber$1.flags |= fiberFlags;\n      hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);\n    }\n\n    function updateEffectImpl(fiberFlags, hookFlags, create, deps) {\n      var hook = updateWorkInProgressHook();\n      var nextDeps = deps === undefined ? null : deps;\n      var destroy = undefined;\n\n      if (currentHook !== null) {\n        var prevEffect = currentHook.memoizedState;\n        destroy = prevEffect.destroy;\n\n        if (nextDeps !== null) {\n          var prevDeps = prevEffect.deps;\n\n          if (areHookInputsEqual(nextDeps, prevDeps)) {\n            hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);\n            return;\n          }\n        }\n      }\n\n      currentlyRenderingFiber$1.flags |= fiberFlags;\n      hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);\n    }\n\n    function mountEffect(create, deps) {\n      {\n        return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);\n      }\n    }\n\n    function updateEffect(create, deps) {\n      return updateEffectImpl(Passive, Passive$1, create, deps);\n    }\n\n    function mountInsertionEffect(create, deps) {\n      return mountEffectImpl(Update, Insertion, create, deps);\n    }\n\n    function updateInsertionEffect(create, deps) {\n      return updateEffectImpl(Update, Insertion, create, deps);\n    }\n\n    function mountLayoutEffect(create, deps) {\n      var fiberFlags = Update;\n      return mountEffectImpl(fiberFlags, Layout, create, deps);\n    }\n\n    function updateLayoutEffect(create, deps) {\n      return updateEffectImpl(Update, Layout, create, deps);\n    }\n\n    function imperativeHandleEffect(create, ref) {\n      if (typeof ref === 'function') {\n        var refCallback = ref;\n\n        var _inst = create();\n\n        refCallback(_inst);\n        return function () {\n          refCallback(null);\n        };\n      } else if (ref !== null && ref !== undefined) {\n        var refObject = ref;\n        {\n          if (!refObject.hasOwnProperty('current')) {\n            error('Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}');\n          }\n        }\n\n        var _inst2 = create();\n\n        refObject.current = _inst2;\n        return function () {\n          refObject.current = null;\n        };\n      }\n    }\n\n    function mountImperativeHandle(ref, create, deps) {\n      {\n        if (typeof create !== 'function') {\n          error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');\n        }\n      } // TODO: If deps are provided, should we skip comparing the ref itself?\n\n      var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n      var fiberFlags = Update;\n      return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);\n    }\n\n    function updateImperativeHandle(ref, create, deps) {\n      {\n        if (typeof create !== 'function') {\n          error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');\n        }\n      } // TODO: If deps are provided, should we skip comparing the ref itself?\n\n      var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n      return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);\n    }\n\n    function mountDebugValue(value, formatterFn) {// This hook is normally a no-op.\n      // The react-debug-hooks package injects its own implementation\n      // so that e.g. DevTools can display custom hook values.\n    }\n\n    var updateDebugValue = mountDebugValue;\n\n    function mountCallback(callback, deps) {\n      var hook = mountWorkInProgressHook();\n      var nextDeps = deps === undefined ? null : deps;\n      hook.memoizedState = [callback, nextDeps];\n      return callback;\n    }\n\n    function updateCallback(callback, deps) {\n      var hook = updateWorkInProgressHook();\n      var nextDeps = deps === undefined ? null : deps;\n      var prevState = hook.memoizedState;\n\n      if (prevState !== null) {\n        if (nextDeps !== null) {\n          var prevDeps = prevState[1];\n\n          if (areHookInputsEqual(nextDeps, prevDeps)) {\n            return prevState[0];\n          }\n        }\n      }\n\n      hook.memoizedState = [callback, nextDeps];\n      return callback;\n    }\n\n    function mountMemo(nextCreate, deps) {\n      var hook = mountWorkInProgressHook();\n      var nextDeps = deps === undefined ? null : deps;\n      var nextValue = nextCreate();\n      hook.memoizedState = [nextValue, nextDeps];\n      return nextValue;\n    }\n\n    function updateMemo(nextCreate, deps) {\n      var hook = updateWorkInProgressHook();\n      var nextDeps = deps === undefined ? null : deps;\n      var prevState = hook.memoizedState;\n\n      if (prevState !== null) {\n        // Assume these are defined. If they're not, areHookInputsEqual will warn.\n        if (nextDeps !== null) {\n          var prevDeps = prevState[1];\n\n          if (areHookInputsEqual(nextDeps, prevDeps)) {\n            return prevState[0];\n          }\n        }\n      }\n\n      var nextValue = nextCreate();\n      hook.memoizedState = [nextValue, nextDeps];\n      return nextValue;\n    }\n\n    function mountDeferredValue(value) {\n      var _mountState = mountState(value),\n          prevValue = _mountState[0],\n          setValue = _mountState[1];\n\n      mountEffect(function () {\n        var prevTransition = ReactCurrentBatchConfig$1.transition;\n        ReactCurrentBatchConfig$1.transition = {};\n\n        try {\n          setValue(value);\n        } finally {\n          ReactCurrentBatchConfig$1.transition = prevTransition;\n        }\n      }, [value]);\n      return prevValue;\n    }\n\n    function updateDeferredValue(value) {\n      var _updateState = updateState(),\n          prevValue = _updateState[0],\n          setValue = _updateState[1];\n\n      updateEffect(function () {\n        var prevTransition = ReactCurrentBatchConfig$1.transition;\n        ReactCurrentBatchConfig$1.transition = {};\n\n        try {\n          setValue(value);\n        } finally {\n          ReactCurrentBatchConfig$1.transition = prevTransition;\n        }\n      }, [value]);\n      return prevValue;\n    }\n\n    function rerenderDeferredValue(value) {\n      var _rerenderState = rerenderState(),\n          prevValue = _rerenderState[0],\n          setValue = _rerenderState[1];\n\n      updateEffect(function () {\n        var prevTransition = ReactCurrentBatchConfig$1.transition;\n        ReactCurrentBatchConfig$1.transition = {};\n\n        try {\n          setValue(value);\n        } finally {\n          ReactCurrentBatchConfig$1.transition = prevTransition;\n        }\n      }, [value]);\n      return prevValue;\n    }\n\n    function startTransition(setPending, callback, options) {\n      var previousPriority = getCurrentUpdatePriority();\n      setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));\n      setPending(true);\n      var prevTransition = ReactCurrentBatchConfig$1.transition;\n      ReactCurrentBatchConfig$1.transition = {};\n      var currentTransition = ReactCurrentBatchConfig$1.transition;\n      {\n        ReactCurrentBatchConfig$1.transition._updatedFibers = new Set();\n      }\n\n      try {\n        setPending(false);\n        callback();\n      } finally {\n        setCurrentUpdatePriority(previousPriority);\n        ReactCurrentBatchConfig$1.transition = prevTransition;\n        {\n          if (prevTransition === null && currentTransition._updatedFibers) {\n            var updatedFibersCount = currentTransition._updatedFibers.size;\n\n            if (updatedFibersCount > 10) {\n              warn('Detected a large number of updates inside startTransition. ' + 'If this is due to a subscription please re-write it to use React provided hooks. ' + 'Otherwise concurrent mode guarantees are off the table.');\n            }\n\n            currentTransition._updatedFibers.clear();\n          }\n        }\n      }\n    }\n\n    function mountTransition() {\n      var _mountState2 = mountState(false),\n          isPending = _mountState2[0],\n          setPending = _mountState2[1]; // The `start` method never changes.\n\n\n      var start = startTransition.bind(null, setPending);\n      var hook = mountWorkInProgressHook();\n      hook.memoizedState = start;\n      return [isPending, start];\n    }\n\n    function updateTransition() {\n      var _updateState2 = updateState(),\n          isPending = _updateState2[0];\n\n      var hook = updateWorkInProgressHook();\n      var start = hook.memoizedState;\n      return [isPending, start];\n    }\n\n    function rerenderTransition() {\n      var _rerenderState2 = rerenderState(),\n          isPending = _rerenderState2[0];\n\n      var hook = updateWorkInProgressHook();\n      var start = hook.memoizedState;\n      return [isPending, start];\n    }\n\n    var isUpdatingOpaqueValueInRenderPhase = false;\n\n    function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {\n      {\n        return isUpdatingOpaqueValueInRenderPhase;\n      }\n    }\n\n    function mountId() {\n      var hook = mountWorkInProgressHook();\n      var root = getWorkInProgressRoot(); // TODO: In Fizz, id generation is specific to each server config. Maybe we\n      // should do this in Fiber, too? Deferring this decision for now because\n      // there's no other place to store the prefix except for an internal field on\n      // the public createRoot object, which the fiber tree does not currently have\n      // a reference to.\n\n      var identifierPrefix = root.identifierPrefix;\n      var id;\n      {\n        // Use a lowercase r prefix for client-generated ids.\n        var globalClientId = globalClientIdCounter++;\n        id = ':' + identifierPrefix + 'r' + globalClientId.toString(32) + ':';\n      }\n      hook.memoizedState = id;\n      return id;\n    }\n\n    function updateId() {\n      var hook = updateWorkInProgressHook();\n      var id = hook.memoizedState;\n      return id;\n    }\n\n    function dispatchReducerAction(fiber, queue, action) {\n      {\n        if (typeof arguments[3] === 'function') {\n          error(\"State updates from the useState() and useReducer() Hooks don't support the \" + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');\n        }\n      }\n      var lane = requestUpdateLane(fiber);\n      var update = {\n        lane: lane,\n        action: action,\n        hasEagerState: false,\n        eagerState: null,\n        next: null\n      };\n\n      if (isRenderPhaseUpdate(fiber)) {\n        enqueueRenderPhaseUpdate(queue, update);\n      } else {\n        enqueueUpdate$1(fiber, queue, update);\n        var eventTime = requestEventTime();\n        var root = scheduleUpdateOnFiber(fiber, lane, eventTime);\n\n        if (root !== null) {\n          entangleTransitionUpdate(root, queue, lane);\n        }\n      }\n    }\n\n    function dispatchSetState(fiber, queue, action) {\n      {\n        if (typeof arguments[3] === 'function') {\n          error(\"State updates from the useState() and useReducer() Hooks don't support the \" + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');\n        }\n      }\n      var lane = requestUpdateLane(fiber);\n      var update = {\n        lane: lane,\n        action: action,\n        hasEagerState: false,\n        eagerState: null,\n        next: null\n      };\n\n      if (isRenderPhaseUpdate(fiber)) {\n        enqueueRenderPhaseUpdate(queue, update);\n      } else {\n        enqueueUpdate$1(fiber, queue, update);\n        var alternate = fiber.alternate;\n\n        if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {\n          // The queue is currently empty, which means we can eagerly compute the\n          // next state before entering the render phase. If the new state is the\n          // same as the current state, we may be able to bail out entirely.\n          var lastRenderedReducer = queue.lastRenderedReducer;\n\n          if (lastRenderedReducer !== null) {\n            var prevDispatcher;\n            {\n              prevDispatcher = ReactCurrentDispatcher$1.current;\n              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n            }\n\n            try {\n              var currentState = queue.lastRenderedState;\n              var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute\n              // it, on the update object. If the reducer hasn't changed by the\n              // time we enter the render phase, then the eager state can be used\n              // without calling the reducer again.\n\n              update.hasEagerState = true;\n              update.eagerState = eagerState;\n\n              if (objectIs(eagerState, currentState)) {\n                // Fast path. We can bail out without scheduling React to re-render.\n                // It's still possible that we'll need to rebase this update later,\n                // if the component re-renders for a different reason and by that\n                // time the reducer has changed.\n                return;\n              }\n            } catch (error) {// Suppress the error. It will throw again in the render phase.\n            } finally {\n              {\n                ReactCurrentDispatcher$1.current = prevDispatcher;\n              }\n            }\n          }\n        }\n\n        var eventTime = requestEventTime();\n        var root = scheduleUpdateOnFiber(fiber, lane, eventTime);\n\n        if (root !== null) {\n          entangleTransitionUpdate(root, queue, lane);\n        }\n      }\n    }\n\n    function isRenderPhaseUpdate(fiber) {\n      var alternate = fiber.alternate;\n      return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;\n    }\n\n    function enqueueRenderPhaseUpdate(queue, update) {\n      // This is a render phase update. Stash it in a lazily-created map of\n      // queue -> linked list of updates. After this render pass, we'll restart\n      // and apply the stashed updates on top of the work-in-progress hook.\n      didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;\n      var pending = queue.pending;\n\n      if (pending === null) {\n        // This is the first update. Create a circular list.\n        update.next = update;\n      } else {\n        update.next = pending.next;\n        pending.next = update;\n      }\n\n      queue.pending = update;\n    }\n\n    function enqueueUpdate$1(fiber, queue, update, lane) {\n      if (isInterleavedUpdate(fiber)) {\n        var interleaved = queue.interleaved;\n\n        if (interleaved === null) {\n          // This is the first update. Create a circular list.\n          update.next = update; // At the end of the current render, this queue's interleaved updates will\n          // be transferred to the pending queue.\n\n          pushInterleavedQueue(queue);\n        } else {\n          update.next = interleaved.next;\n          interleaved.next = update;\n        }\n\n        queue.interleaved = update;\n      } else {\n        var pending = queue.pending;\n\n        if (pending === null) {\n          // This is the first update. Create a circular list.\n          update.next = update;\n        } else {\n          update.next = pending.next;\n          pending.next = update;\n        }\n\n        queue.pending = update;\n      }\n    }\n\n    function entangleTransitionUpdate(root, queue, lane) {\n      if (isTransitionLane(lane)) {\n        var queueLanes = queue.lanes; // If any entangled lanes are no longer pending on the root, then they\n        // must have finished. We can remove them from the shared queue, which\n        // represents a superset of the actually pending lanes. In some cases we\n        // may entangle more than we need to, but that's OK. In fact it's worse if\n        // we *don't* entangle when we should.\n\n        queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.\n\n        var newQueueLanes = mergeLanes(queueLanes, lane);\n        queue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if\n        // the lane finished since the last time we entangled it. So we need to\n        // entangle it again, just to be sure.\n\n        markRootEntangled(root, newQueueLanes);\n      }\n    }\n\n    var ContextOnlyDispatcher = {\n      readContext: readContext,\n      useCallback: throwInvalidHookError,\n      useContext: throwInvalidHookError,\n      useEffect: throwInvalidHookError,\n      useImperativeHandle: throwInvalidHookError,\n      useInsertionEffect: throwInvalidHookError,\n      useLayoutEffect: throwInvalidHookError,\n      useMemo: throwInvalidHookError,\n      useReducer: throwInvalidHookError,\n      useRef: throwInvalidHookError,\n      useState: throwInvalidHookError,\n      useDebugValue: throwInvalidHookError,\n      useDeferredValue: throwInvalidHookError,\n      useTransition: throwInvalidHookError,\n      useMutableSource: throwInvalidHookError,\n      useSyncExternalStore: throwInvalidHookError,\n      useId: throwInvalidHookError,\n      unstable_isNewReconciler: enableNewReconciler\n    };\n    var HooksDispatcherOnMountInDEV = null;\n    var HooksDispatcherOnMountWithHookTypesInDEV = null;\n    var HooksDispatcherOnUpdateInDEV = null;\n    var HooksDispatcherOnRerenderInDEV = null;\n    var InvalidNestedHooksDispatcherOnMountInDEV = null;\n    var InvalidNestedHooksDispatcherOnUpdateInDEV = null;\n    var InvalidNestedHooksDispatcherOnRerenderInDEV = null;\n    {\n      var warnInvalidContextAccess = function () {\n        error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');\n      };\n\n      var warnInvalidHookAccess = function () {\n        error('Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://reactjs.org/link/rules-of-hooks');\n      };\n\n      HooksDispatcherOnMountInDEV = {\n        readContext: function (context) {\n          return readContext(context);\n        },\n        useCallback: function (callback, deps) {\n          currentHookNameInDev = 'useCallback';\n          mountHookTypesDev();\n          checkDepsAreArrayDev(deps);\n          return mountCallback(callback, deps);\n        },\n        useContext: function (context) {\n          currentHookNameInDev = 'useContext';\n          mountHookTypesDev();\n          return readContext(context);\n        },\n        useEffect: function (create, deps) {\n          currentHookNameInDev = 'useEffect';\n          mountHookTypesDev();\n          checkDepsAreArrayDev(deps);\n          return mountEffect(create, deps);\n        },\n        useImperativeHandle: function (ref, create, deps) {\n          currentHookNameInDev = 'useImperativeHandle';\n          mountHookTypesDev();\n          checkDepsAreArrayDev(deps);\n          return mountImperativeHandle(ref, create, deps);\n        },\n        useInsertionEffect: function (create, deps) {\n          currentHookNameInDev = 'useInsertionEffect';\n          mountHookTypesDev();\n          checkDepsAreArrayDev(deps);\n          return mountInsertionEffect(create, deps);\n        },\n        useLayoutEffect: function (create, deps) {\n          currentHookNameInDev = 'useLayoutEffect';\n          mountHookTypesDev();\n          checkDepsAreArrayDev(deps);\n          return mountLayoutEffect(create, deps);\n        },\n        useMemo: function (create, deps) {\n          currentHookNameInDev = 'useMemo';\n          mountHookTypesDev();\n          checkDepsAreArrayDev(deps);\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n          try {\n            return mountMemo(create, deps);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useReducer: function (reducer, initialArg, init) {\n          currentHookNameInDev = 'useReducer';\n          mountHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n          try {\n            return mountReducer(reducer, initialArg, init);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useRef: function (initialValue) {\n          currentHookNameInDev = 'useRef';\n          mountHookTypesDev();\n          return mountRef(initialValue);\n        },\n        useState: function (initialState) {\n          currentHookNameInDev = 'useState';\n          mountHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n          try {\n            return mountState(initialState);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useDebugValue: function (value, formatterFn) {\n          currentHookNameInDev = 'useDebugValue';\n          mountHookTypesDev();\n          return mountDebugValue();\n        },\n        useDeferredValue: function (value) {\n          currentHookNameInDev = 'useDeferredValue';\n          mountHookTypesDev();\n          return mountDeferredValue(value);\n        },\n        useTransition: function () {\n          currentHookNameInDev = 'useTransition';\n          mountHookTypesDev();\n          return mountTransition();\n        },\n        useMutableSource: function (source, getSnapshot, subscribe) {\n          currentHookNameInDev = 'useMutableSource';\n          mountHookTypesDev();\n          return mountMutableSource();\n        },\n        useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n          currentHookNameInDev = 'useSyncExternalStore';\n          mountHookTypesDev();\n          return mountSyncExternalStore(subscribe, getSnapshot);\n        },\n        useId: function () {\n          currentHookNameInDev = 'useId';\n          mountHookTypesDev();\n          return mountId();\n        },\n        unstable_isNewReconciler: enableNewReconciler\n      };\n      HooksDispatcherOnMountWithHookTypesInDEV = {\n        readContext: function (context) {\n          return readContext(context);\n        },\n        useCallback: function (callback, deps) {\n          currentHookNameInDev = 'useCallback';\n          updateHookTypesDev();\n          return mountCallback(callback, deps);\n        },\n        useContext: function (context) {\n          currentHookNameInDev = 'useContext';\n          updateHookTypesDev();\n          return readContext(context);\n        },\n        useEffect: function (create, deps) {\n          currentHookNameInDev = 'useEffect';\n          updateHookTypesDev();\n          return mountEffect(create, deps);\n        },\n        useImperativeHandle: function (ref, create, deps) {\n          currentHookNameInDev = 'useImperativeHandle';\n          updateHookTypesDev();\n          return mountImperativeHandle(ref, create, deps);\n        },\n        useInsertionEffect: function (create, deps) {\n          currentHookNameInDev = 'useInsertionEffect';\n          updateHookTypesDev();\n          return mountInsertionEffect(create, deps);\n        },\n        useLayoutEffect: function (create, deps) {\n          currentHookNameInDev = 'useLayoutEffect';\n          updateHookTypesDev();\n          return mountLayoutEffect(create, deps);\n        },\n        useMemo: function (create, deps) {\n          currentHookNameInDev = 'useMemo';\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n          try {\n            return mountMemo(create, deps);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useReducer: function (reducer, initialArg, init) {\n          currentHookNameInDev = 'useReducer';\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n          try {\n            return mountReducer(reducer, initialArg, init);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useRef: function (initialValue) {\n          currentHookNameInDev = 'useRef';\n          updateHookTypesDev();\n          return mountRef(initialValue);\n        },\n        useState: function (initialState) {\n          currentHookNameInDev = 'useState';\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n          try {\n            return mountState(initialState);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useDebugValue: function (value, formatterFn) {\n          currentHookNameInDev = 'useDebugValue';\n          updateHookTypesDev();\n          return mountDebugValue();\n        },\n        useDeferredValue: function (value) {\n          currentHookNameInDev = 'useDeferredValue';\n          updateHookTypesDev();\n          return mountDeferredValue(value);\n        },\n        useTransition: function () {\n          currentHookNameInDev = 'useTransition';\n          updateHookTypesDev();\n          return mountTransition();\n        },\n        useMutableSource: function (source, getSnapshot, subscribe) {\n          currentHookNameInDev = 'useMutableSource';\n          updateHookTypesDev();\n          return mountMutableSource();\n        },\n        useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n          currentHookNameInDev = 'useSyncExternalStore';\n          updateHookTypesDev();\n          return mountSyncExternalStore(subscribe, getSnapshot);\n        },\n        useId: function () {\n          currentHookNameInDev = 'useId';\n          updateHookTypesDev();\n          return mountId();\n        },\n        unstable_isNewReconciler: enableNewReconciler\n      };\n      HooksDispatcherOnUpdateInDEV = {\n        readContext: function (context) {\n          return readContext(context);\n        },\n        useCallback: function (callback, deps) {\n          currentHookNameInDev = 'useCallback';\n          updateHookTypesDev();\n          return updateCallback(callback, deps);\n        },\n        useContext: function (context) {\n          currentHookNameInDev = 'useContext';\n          updateHookTypesDev();\n          return readContext(context);\n        },\n        useEffect: function (create, deps) {\n          currentHookNameInDev = 'useEffect';\n          updateHookTypesDev();\n          return updateEffect(create, deps);\n        },\n        useImperativeHandle: function (ref, create, deps) {\n          currentHookNameInDev = 'useImperativeHandle';\n          updateHookTypesDev();\n          return updateImperativeHandle(ref, create, deps);\n        },\n        useInsertionEffect: function (create, deps) {\n          currentHookNameInDev = 'useInsertionEffect';\n          updateHookTypesDev();\n          return updateInsertionEffect(create, deps);\n        },\n        useLayoutEffect: function (create, deps) {\n          currentHookNameInDev = 'useLayoutEffect';\n          updateHookTypesDev();\n          return updateLayoutEffect(create, deps);\n        },\n        useMemo: function (create, deps) {\n          currentHookNameInDev = 'useMemo';\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n          try {\n            return updateMemo(create, deps);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useReducer: function (reducer, initialArg, init) {\n          currentHookNameInDev = 'useReducer';\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n          try {\n            return updateReducer(reducer, initialArg, init);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useRef: function (initialValue) {\n          currentHookNameInDev = 'useRef';\n          updateHookTypesDev();\n          return updateRef();\n        },\n        useState: function (initialState) {\n          currentHookNameInDev = 'useState';\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n          try {\n            return updateState(initialState);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useDebugValue: function (value, formatterFn) {\n          currentHookNameInDev = 'useDebugValue';\n          updateHookTypesDev();\n          return updateDebugValue();\n        },\n        useDeferredValue: function (value) {\n          currentHookNameInDev = 'useDeferredValue';\n          updateHookTypesDev();\n          return updateDeferredValue(value);\n        },\n        useTransition: function () {\n          currentHookNameInDev = 'useTransition';\n          updateHookTypesDev();\n          return updateTransition();\n        },\n        useMutableSource: function (source, getSnapshot, subscribe) {\n          currentHookNameInDev = 'useMutableSource';\n          updateHookTypesDev();\n          return updateMutableSource();\n        },\n        useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n          currentHookNameInDev = 'useSyncExternalStore';\n          updateHookTypesDev();\n          return updateSyncExternalStore(subscribe, getSnapshot);\n        },\n        useId: function () {\n          currentHookNameInDev = 'useId';\n          updateHookTypesDev();\n          return updateId();\n        },\n        unstable_isNewReconciler: enableNewReconciler\n      };\n      HooksDispatcherOnRerenderInDEV = {\n        readContext: function (context) {\n          return readContext(context);\n        },\n        useCallback: function (callback, deps) {\n          currentHookNameInDev = 'useCallback';\n          updateHookTypesDev();\n          return updateCallback(callback, deps);\n        },\n        useContext: function (context) {\n          currentHookNameInDev = 'useContext';\n          updateHookTypesDev();\n          return readContext(context);\n        },\n        useEffect: function (create, deps) {\n          currentHookNameInDev = 'useEffect';\n          updateHookTypesDev();\n          return updateEffect(create, deps);\n        },\n        useImperativeHandle: function (ref, create, deps) {\n          currentHookNameInDev = 'useImperativeHandle';\n          updateHookTypesDev();\n          return updateImperativeHandle(ref, create, deps);\n        },\n        useInsertionEffect: function (create, deps) {\n          currentHookNameInDev = 'useInsertionEffect';\n          updateHookTypesDev();\n          return updateInsertionEffect(create, deps);\n        },\n        useLayoutEffect: function (create, deps) {\n          currentHookNameInDev = 'useLayoutEffect';\n          updateHookTypesDev();\n          return updateLayoutEffect(create, deps);\n        },\n        useMemo: function (create, deps) {\n          currentHookNameInDev = 'useMemo';\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n\n          try {\n            return updateMemo(create, deps);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useReducer: function (reducer, initialArg, init) {\n          currentHookNameInDev = 'useReducer';\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n\n          try {\n            return rerenderReducer(reducer, initialArg, init);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useRef: function (initialValue) {\n          currentHookNameInDev = 'useRef';\n          updateHookTypesDev();\n          return updateRef();\n        },\n        useState: function (initialState) {\n          currentHookNameInDev = 'useState';\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n\n          try {\n            return rerenderState(initialState);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useDebugValue: function (value, formatterFn) {\n          currentHookNameInDev = 'useDebugValue';\n          updateHookTypesDev();\n          return updateDebugValue();\n        },\n        useDeferredValue: function (value) {\n          currentHookNameInDev = 'useDeferredValue';\n          updateHookTypesDev();\n          return rerenderDeferredValue(value);\n        },\n        useTransition: function () {\n          currentHookNameInDev = 'useTransition';\n          updateHookTypesDev();\n          return rerenderTransition();\n        },\n        useMutableSource: function (source, getSnapshot, subscribe) {\n          currentHookNameInDev = 'useMutableSource';\n          updateHookTypesDev();\n          return updateMutableSource();\n        },\n        useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n          currentHookNameInDev = 'useSyncExternalStore';\n          updateHookTypesDev();\n          return updateSyncExternalStore(subscribe, getSnapshot);\n        },\n        useId: function () {\n          currentHookNameInDev = 'useId';\n          updateHookTypesDev();\n          return updateId();\n        },\n        unstable_isNewReconciler: enableNewReconciler\n      };\n      InvalidNestedHooksDispatcherOnMountInDEV = {\n        readContext: function (context) {\n          warnInvalidContextAccess();\n          return readContext(context);\n        },\n        useCallback: function (callback, deps) {\n          currentHookNameInDev = 'useCallback';\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountCallback(callback, deps);\n        },\n        useContext: function (context) {\n          currentHookNameInDev = 'useContext';\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return readContext(context);\n        },\n        useEffect: function (create, deps) {\n          currentHookNameInDev = 'useEffect';\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountEffect(create, deps);\n        },\n        useImperativeHandle: function (ref, create, deps) {\n          currentHookNameInDev = 'useImperativeHandle';\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountImperativeHandle(ref, create, deps);\n        },\n        useInsertionEffect: function (create, deps) {\n          currentHookNameInDev = 'useInsertionEffect';\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountInsertionEffect(create, deps);\n        },\n        useLayoutEffect: function (create, deps) {\n          currentHookNameInDev = 'useLayoutEffect';\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountLayoutEffect(create, deps);\n        },\n        useMemo: function (create, deps) {\n          currentHookNameInDev = 'useMemo';\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n          try {\n            return mountMemo(create, deps);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useReducer: function (reducer, initialArg, init) {\n          currentHookNameInDev = 'useReducer';\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n          try {\n            return mountReducer(reducer, initialArg, init);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useRef: function (initialValue) {\n          currentHookNameInDev = 'useRef';\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountRef(initialValue);\n        },\n        useState: function (initialState) {\n          currentHookNameInDev = 'useState';\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n          try {\n            return mountState(initialState);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useDebugValue: function (value, formatterFn) {\n          currentHookNameInDev = 'useDebugValue';\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountDebugValue();\n        },\n        useDeferredValue: function (value) {\n          currentHookNameInDev = 'useDeferredValue';\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountDeferredValue(value);\n        },\n        useTransition: function () {\n          currentHookNameInDev = 'useTransition';\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountTransition();\n        },\n        useMutableSource: function (source, getSnapshot, subscribe) {\n          currentHookNameInDev = 'useMutableSource';\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountMutableSource();\n        },\n        useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n          currentHookNameInDev = 'useSyncExternalStore';\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountSyncExternalStore(subscribe, getSnapshot);\n        },\n        useId: function () {\n          currentHookNameInDev = 'useId';\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountId();\n        },\n        unstable_isNewReconciler: enableNewReconciler\n      };\n      InvalidNestedHooksDispatcherOnUpdateInDEV = {\n        readContext: function (context) {\n          warnInvalidContextAccess();\n          return readContext(context);\n        },\n        useCallback: function (callback, deps) {\n          currentHookNameInDev = 'useCallback';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateCallback(callback, deps);\n        },\n        useContext: function (context) {\n          currentHookNameInDev = 'useContext';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return readContext(context);\n        },\n        useEffect: function (create, deps) {\n          currentHookNameInDev = 'useEffect';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateEffect(create, deps);\n        },\n        useImperativeHandle: function (ref, create, deps) {\n          currentHookNameInDev = 'useImperativeHandle';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateImperativeHandle(ref, create, deps);\n        },\n        useInsertionEffect: function (create, deps) {\n          currentHookNameInDev = 'useInsertionEffect';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateInsertionEffect(create, deps);\n        },\n        useLayoutEffect: function (create, deps) {\n          currentHookNameInDev = 'useLayoutEffect';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateLayoutEffect(create, deps);\n        },\n        useMemo: function (create, deps) {\n          currentHookNameInDev = 'useMemo';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n          try {\n            return updateMemo(create, deps);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useReducer: function (reducer, initialArg, init) {\n          currentHookNameInDev = 'useReducer';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n          try {\n            return updateReducer(reducer, initialArg, init);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useRef: function (initialValue) {\n          currentHookNameInDev = 'useRef';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateRef();\n        },\n        useState: function (initialState) {\n          currentHookNameInDev = 'useState';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n          try {\n            return updateState(initialState);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useDebugValue: function (value, formatterFn) {\n          currentHookNameInDev = 'useDebugValue';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateDebugValue();\n        },\n        useDeferredValue: function (value) {\n          currentHookNameInDev = 'useDeferredValue';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateDeferredValue(value);\n        },\n        useTransition: function () {\n          currentHookNameInDev = 'useTransition';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateTransition();\n        },\n        useMutableSource: function (source, getSnapshot, subscribe) {\n          currentHookNameInDev = 'useMutableSource';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateMutableSource();\n        },\n        useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n          currentHookNameInDev = 'useSyncExternalStore';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateSyncExternalStore(subscribe, getSnapshot);\n        },\n        useId: function () {\n          currentHookNameInDev = 'useId';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateId();\n        },\n        unstable_isNewReconciler: enableNewReconciler\n      };\n      InvalidNestedHooksDispatcherOnRerenderInDEV = {\n        readContext: function (context) {\n          warnInvalidContextAccess();\n          return readContext(context);\n        },\n        useCallback: function (callback, deps) {\n          currentHookNameInDev = 'useCallback';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateCallback(callback, deps);\n        },\n        useContext: function (context) {\n          currentHookNameInDev = 'useContext';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return readContext(context);\n        },\n        useEffect: function (create, deps) {\n          currentHookNameInDev = 'useEffect';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateEffect(create, deps);\n        },\n        useImperativeHandle: function (ref, create, deps) {\n          currentHookNameInDev = 'useImperativeHandle';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateImperativeHandle(ref, create, deps);\n        },\n        useInsertionEffect: function (create, deps) {\n          currentHookNameInDev = 'useInsertionEffect';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateInsertionEffect(create, deps);\n        },\n        useLayoutEffect: function (create, deps) {\n          currentHookNameInDev = 'useLayoutEffect';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateLayoutEffect(create, deps);\n        },\n        useMemo: function (create, deps) {\n          currentHookNameInDev = 'useMemo';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n          try {\n            return updateMemo(create, deps);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useReducer: function (reducer, initialArg, init) {\n          currentHookNameInDev = 'useReducer';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n          try {\n            return rerenderReducer(reducer, initialArg, init);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useRef: function (initialValue) {\n          currentHookNameInDev = 'useRef';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateRef();\n        },\n        useState: function (initialState) {\n          currentHookNameInDev = 'useState';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n          try {\n            return rerenderState(initialState);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useDebugValue: function (value, formatterFn) {\n          currentHookNameInDev = 'useDebugValue';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateDebugValue();\n        },\n        useDeferredValue: function (value) {\n          currentHookNameInDev = 'useDeferredValue';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return rerenderDeferredValue(value);\n        },\n        useTransition: function () {\n          currentHookNameInDev = 'useTransition';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return rerenderTransition();\n        },\n        useMutableSource: function (source, getSnapshot, subscribe) {\n          currentHookNameInDev = 'useMutableSource';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateMutableSource();\n        },\n        useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n          currentHookNameInDev = 'useSyncExternalStore';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateSyncExternalStore(subscribe, getSnapshot);\n        },\n        useId: function () {\n          currentHookNameInDev = 'useId';\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateId();\n        },\n        unstable_isNewReconciler: enableNewReconciler\n      };\n    }\n    var now$1 = Scheduler$1.unstable_now;\n    var commitTime = 0;\n    var layoutEffectStartTime = -1;\n    var profilerStartTime = -1;\n    var passiveEffectStartTime = -1;\n    /**\n     * Tracks whether the current update was a nested/cascading update (scheduled from a layout effect).\n     *\n     * The overall sequence is:\n     *   1. render\n     *   2. commit (and call `onRender`, `onCommit`)\n     *   3. check for nested updates\n     *   4. flush passive effects (and call `onPostCommit`)\n     *\n     * Nested updates are identified in step 3 above,\n     * but step 4 still applies to the work that was just committed.\n     * We use two flags to track nested updates then:\n     * one tracks whether the upcoming update is a nested update,\n     * and the other tracks whether the current update was a nested update.\n     * The first value gets synced to the second at the start of the render phase.\n     */\n\n    var currentUpdateIsNested = false;\n    var nestedUpdateScheduled = false;\n\n    function isCurrentUpdateNested() {\n      return currentUpdateIsNested;\n    }\n\n    function markNestedUpdateScheduled() {\n      {\n        nestedUpdateScheduled = true;\n      }\n    }\n\n    function resetNestedUpdateFlag() {\n      {\n        currentUpdateIsNested = false;\n        nestedUpdateScheduled = false;\n      }\n    }\n\n    function syncNestedUpdateFlag() {\n      {\n        currentUpdateIsNested = nestedUpdateScheduled;\n        nestedUpdateScheduled = false;\n      }\n    }\n\n    function getCommitTime() {\n      return commitTime;\n    }\n\n    function recordCommitTime() {\n      commitTime = now$1();\n    }\n\n    function startProfilerTimer(fiber) {\n      profilerStartTime = now$1();\n\n      if (fiber.actualStartTime < 0) {\n        fiber.actualStartTime = now$1();\n      }\n    }\n\n    function stopProfilerTimerIfRunning(fiber) {\n      profilerStartTime = -1;\n    }\n\n    function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {\n      if (profilerStartTime >= 0) {\n        var elapsedTime = now$1() - profilerStartTime;\n        fiber.actualDuration += elapsedTime;\n\n        if (overrideBaseTime) {\n          fiber.selfBaseDuration = elapsedTime;\n        }\n\n        profilerStartTime = -1;\n      }\n    }\n\n    function recordLayoutEffectDuration(fiber) {\n      if (layoutEffectStartTime >= 0) {\n        var elapsedTime = now$1() - layoutEffectStartTime;\n        layoutEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor\n        // Or the root (for the DevTools Profiler to read)\n\n        var parentFiber = fiber.return;\n\n        while (parentFiber !== null) {\n          switch (parentFiber.tag) {\n            case HostRoot:\n              var root = parentFiber.stateNode;\n              root.effectDuration += elapsedTime;\n              return;\n\n            case Profiler:\n              var parentStateNode = parentFiber.stateNode;\n              parentStateNode.effectDuration += elapsedTime;\n              return;\n          }\n\n          parentFiber = parentFiber.return;\n        }\n      }\n    }\n\n    function recordPassiveEffectDuration(fiber) {\n      if (passiveEffectStartTime >= 0) {\n        var elapsedTime = now$1() - passiveEffectStartTime;\n        passiveEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor\n        // Or the root (for the DevTools Profiler to read)\n\n        var parentFiber = fiber.return;\n\n        while (parentFiber !== null) {\n          switch (parentFiber.tag) {\n            case HostRoot:\n              var root = parentFiber.stateNode;\n\n              if (root !== null) {\n                root.passiveEffectDuration += elapsedTime;\n              }\n\n              return;\n\n            case Profiler:\n              var parentStateNode = parentFiber.stateNode;\n\n              if (parentStateNode !== null) {\n                // Detached fibers have their state node cleared out.\n                // In this case, the return pointer is also cleared out,\n                // so we won't be able to report the time spent in this Profiler's subtree.\n                parentStateNode.passiveEffectDuration += elapsedTime;\n              }\n\n              return;\n          }\n\n          parentFiber = parentFiber.return;\n        }\n      }\n    }\n\n    function startLayoutEffectTimer() {\n      layoutEffectStartTime = now$1();\n    }\n\n    function startPassiveEffectTimer() {\n      passiveEffectStartTime = now$1();\n    }\n\n    function transferActualDuration(fiber) {\n      // Transfer time spent rendering these children so we don't lose it\n      // after we rerender. This is used as a helper in special cases\n      // where we should count the work of multiple passes.\n      var child = fiber.child;\n\n      while (child) {\n        fiber.actualDuration += child.actualDuration;\n        child = child.sibling;\n      }\n    }\n\n    function createCapturedValue(value, source) {\n      // If the value is an error, call this function immediately after it is thrown\n      // so the stack is accurate.\n      return {\n        value: value,\n        source: source,\n        stack: getStackByFiberInDevAndProd(source)\n      };\n    } // This module is forked in different environments.\n    // By default, return `true` to log errors to the console.\n    // Forks can return `false` if this isn't desirable.\n\n\n    function showErrorDialog(boundary, errorInfo) {\n      return true;\n    }\n\n    function logCapturedError(boundary, errorInfo) {\n      try {\n        var logError = showErrorDialog(boundary, errorInfo); // Allow injected showErrorDialog() to prevent default console.error logging.\n        // This enables renderers like ReactNative to better manage redbox behavior.\n\n        if (logError === false) {\n          return;\n        }\n\n        var error = errorInfo.value;\n\n        if (true) {\n          var source = errorInfo.source;\n          var stack = errorInfo.stack;\n          var componentStack = stack !== null ? stack : ''; // Browsers support silencing uncaught errors by calling\n          // `preventDefault()` in window `error` handler.\n          // We record this information as an expando on the error.\n\n          if (error != null && error._suppressLogging) {\n            if (boundary.tag === ClassComponent) {\n              // The error is recoverable and was silenced.\n              // Ignore it and don't print the stack addendum.\n              // This is handy for testing error boundaries without noise.\n              return;\n            } // The error is fatal. Since the silencing might have\n            // been accidental, we'll surface it anyway.\n            // However, the browser would have silenced the original error\n            // so we'll print it first, and then print the stack addendum.\n\n\n            console['error'](error); // Don't transform to our wrapper\n            // For a more detailed description of this block, see:\n            // https://github.com/facebook/react/pull/13384\n          }\n\n          var componentName = source ? getComponentNameFromFiber(source) : null;\n          var componentNameMessage = componentName ? \"The above error occurred in the <\" + componentName + \"> component:\" : 'The above error occurred in one of your React components:';\n          var errorBoundaryMessage;\n\n          if (boundary.tag === HostRoot) {\n            errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\\n' + 'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';\n          } else {\n            var errorBoundaryName = getComponentNameFromFiber(boundary) || 'Anonymous';\n            errorBoundaryMessage = \"React will try to recreate this component tree from scratch \" + (\"using the error boundary you provided, \" + errorBoundaryName + \".\");\n          }\n\n          var combinedMessage = componentNameMessage + \"\\n\" + componentStack + \"\\n\\n\" + (\"\" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.\n          // We don't include the original error message and JS stack because the browser\n          // has already printed it. Even if the application swallows the error, it is still\n          // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.\n\n          console['error'](combinedMessage); // Don't transform to our wrapper\n        } else {\n          // In production, we print the error directly.\n          // This will include the message, the JS stack, and anything the browser wants to show.\n          // We pass the error object instead of custom message so that the browser displays the error natively.\n          console['error'](error); // Don't transform to our wrapper\n        }\n      } catch (e) {\n        // This method must not throw, or React internal state will get messed up.\n        // If console.error is overridden, or logCapturedError() shows a dialog that throws,\n        // we want to report this error outside of the normal stack as a last resort.\n        // https://github.com/facebook/react/issues/13188\n        setTimeout(function () {\n          throw e;\n        });\n      }\n    }\n\n    var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;\n\n    function createRootErrorUpdate(fiber, errorInfo, lane) {\n      var update = createUpdate(NoTimestamp, lane); // Unmount the root by rendering null.\n\n      update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property\n      // being called \"element\".\n\n      update.payload = {\n        element: null\n      };\n      var error = errorInfo.value;\n\n      update.callback = function () {\n        onUncaughtError(error);\n        logCapturedError(fiber, errorInfo);\n      };\n\n      return update;\n    }\n\n    function createClassErrorUpdate(fiber, errorInfo, lane) {\n      var update = createUpdate(NoTimestamp, lane);\n      update.tag = CaptureUpdate;\n      var getDerivedStateFromError = fiber.type.getDerivedStateFromError;\n\n      if (typeof getDerivedStateFromError === 'function') {\n        var error$1 = errorInfo.value;\n\n        update.payload = function () {\n          return getDerivedStateFromError(error$1);\n        };\n\n        update.callback = function () {\n          {\n            markFailedErrorBoundaryForHotReloading(fiber);\n          }\n          logCapturedError(fiber, errorInfo);\n        };\n      }\n\n      var inst = fiber.stateNode;\n\n      if (inst !== null && typeof inst.componentDidCatch === 'function') {\n        update.callback = function callback() {\n          {\n            markFailedErrorBoundaryForHotReloading(fiber);\n          }\n          logCapturedError(fiber, errorInfo);\n\n          if (typeof getDerivedStateFromError !== 'function') {\n            // To preserve the preexisting retry behavior of error boundaries,\n            // we keep track of which ones already failed during this batch.\n            // This gets reset before we yield back to the browser.\n            // TODO: Warn in strict mode if getDerivedStateFromError is\n            // not defined.\n            markLegacyErrorBoundaryAsFailed(this);\n          }\n\n          var error$1 = errorInfo.value;\n          var stack = errorInfo.stack;\n          this.componentDidCatch(error$1, {\n            componentStack: stack !== null ? stack : ''\n          });\n          {\n            if (typeof getDerivedStateFromError !== 'function') {\n              // If componentDidCatch is the only error boundary method defined,\n              // then it needs to call setState to recover from errors.\n              // If no state update is scheduled then the boundary will swallow the error.\n              if (!includesSomeLane(fiber.lanes, SyncLane)) {\n                error('%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentNameFromFiber(fiber) || 'Unknown');\n              }\n            }\n          }\n        };\n      }\n\n      return update;\n    }\n\n    function attachPingListener(root, wakeable, lanes) {\n      // Attach a ping listener\n      //\n      // The data might resolve before we have a chance to commit the fallback. Or,\n      // in the case of a refresh, we'll never commit a fallback. So we need to\n      // attach a listener now. When it resolves (\"pings\"), we can decide whether to\n      // try rendering the tree again.\n      //\n      // Only attach a listener if one does not already exist for the lanes\n      // we're currently rendering (which acts like a \"thread ID\" here).\n      //\n      // We only need to do this in concurrent mode. Legacy Suspense always\n      // commits fallbacks synchronously, so there are no pings.\n      var pingCache = root.pingCache;\n      var threadIDs;\n\n      if (pingCache === null) {\n        pingCache = root.pingCache = new PossiblyWeakMap$1();\n        threadIDs = new Set();\n        pingCache.set(wakeable, threadIDs);\n      } else {\n        threadIDs = pingCache.get(wakeable);\n\n        if (threadIDs === undefined) {\n          threadIDs = new Set();\n          pingCache.set(wakeable, threadIDs);\n        }\n      }\n\n      if (!threadIDs.has(lanes)) {\n        // Memoize using the thread ID to prevent redundant listeners.\n        threadIDs.add(lanes);\n        var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);\n        wakeable.then(ping, ping);\n      }\n    }\n\n    function attachRetryListener(suspenseBoundary, root, wakeable, lanes) {\n      // Retry listener\n      //\n      // If the fallback does commit, we need to attach a different type of\n      // listener. This one schedules an update on the Suspense boundary to turn\n      // the fallback state off.\n      //\n      // Stash the wakeable on the boundary fiber so we can access it in the\n      // commit phase.\n      //\n      // When the wakeable resolves, we'll attempt to render the boundary\n      // again (\"retry\").\n      var wakeables = suspenseBoundary.updateQueue;\n\n      if (wakeables === null) {\n        var updateQueue = new Set();\n        updateQueue.add(wakeable);\n        suspenseBoundary.updateQueue = updateQueue;\n      } else {\n        wakeables.add(wakeable);\n      }\n    }\n\n    function resetSuspendedComponent(sourceFiber, rootRenderLanes) {\n      // A legacy mode Suspense quirk, only relevant to hook components.\n      var tag = sourceFiber.tag;\n\n      if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {\n        var currentSource = sourceFiber.alternate;\n\n        if (currentSource) {\n          sourceFiber.updateQueue = currentSource.updateQueue;\n          sourceFiber.memoizedState = currentSource.memoizedState;\n          sourceFiber.lanes = currentSource.lanes;\n        } else {\n          sourceFiber.updateQueue = null;\n          sourceFiber.memoizedState = null;\n        }\n      }\n    }\n\n    function getNearestSuspenseBoundaryToCapture(returnFiber) {\n      var node = returnFiber;\n\n      do {\n        if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {\n          return node;\n        } // This boundary already captured during this render. Continue to the next\n        // boundary.\n\n\n        node = node.return;\n      } while (node !== null);\n\n      return null;\n    }\n\n    function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes) {\n      // This marks a Suspense boundary so that when we're unwinding the stack,\n      // it captures the suspended \"exception\" and does a second (fallback) pass.\n      if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {\n        // Legacy Mode Suspense\n        //\n        // If the boundary is in legacy mode, we should *not*\n        // suspend the commit. Pretend as if the suspended component rendered\n        // null and keep rendering. When the Suspense boundary completes,\n        // we'll do a second pass to render the fallback.\n        if (suspenseBoundary === returnFiber) {\n          // Special case where we suspended while reconciling the children of\n          // a Suspense boundary's inner Offscreen wrapper fiber. This happens\n          // when a React.lazy component is a direct child of a\n          // Suspense boundary.\n          //\n          // Suspense boundaries are implemented as multiple fibers, but they\n          // are a single conceptual unit. The legacy mode behavior where we\n          // pretend the suspended fiber committed as `null` won't work,\n          // because in this case the \"suspended\" fiber is the inner\n          // Offscreen wrapper.\n          //\n          // Because the contents of the boundary haven't started rendering\n          // yet (i.e. nothing in the tree has partially rendered) we can\n          // switch to the regular, concurrent mode behavior: mark the\n          // boundary with ShouldCapture and enter the unwind phase.\n          suspenseBoundary.flags |= ShouldCapture;\n        } else {\n          suspenseBoundary.flags |= DidCapture;\n          sourceFiber.flags |= ForceUpdateForLegacySuspense; // We're going to commit this fiber even though it didn't complete.\n          // But we shouldn't call any lifecycle methods or callbacks. Remove\n          // all lifecycle effect tags.\n\n          sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);\n\n          if (sourceFiber.tag === ClassComponent) {\n            var currentSourceFiber = sourceFiber.alternate;\n\n            if (currentSourceFiber === null) {\n              // This is a new mount. Change the tag so it's not mistaken for a\n              // completed class component. For example, we should not call\n              // componentWillUnmount if it is deleted.\n              sourceFiber.tag = IncompleteClassComponent;\n            } else {\n              // When we try rendering again, we should not reuse the current fiber,\n              // since it's known to be in an inconsistent state. Use a force update to\n              // prevent a bail out.\n              var update = createUpdate(NoTimestamp, SyncLane);\n              update.tag = ForceUpdate;\n              enqueueUpdate(sourceFiber, update);\n            }\n          } // The source fiber did not complete. Mark it with Sync priority to\n          // indicate that it still has pending work.\n\n\n          sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);\n        }\n\n        return suspenseBoundary;\n      } // Confirmed that the boundary is in a concurrent mode tree. Continue\n      // with the normal suspend path.\n      //\n      // After this we'll use a set of heuristics to determine whether this\n      // render pass will run to completion or restart or \"suspend\" the commit.\n      // The actual logic for this is spread out in different places.\n      //\n      // This first principle is that if we're going to suspend when we complete\n      // a root, then we should also restart if we get an update or ping that\n      // might unsuspend it, and vice versa. The only reason to suspend is\n      // because you think you might want to restart before committing. However,\n      // it doesn't make sense to restart only while in the period we're suspended.\n      //\n      // Restarting too aggressively is also not good because it starves out any\n      // intermediate loading state. So we use heuristics to determine when.\n      // Suspense Heuristics\n      //\n      // If nothing threw a Promise or all the same fallbacks are already showing,\n      // then don't suspend/restart.\n      //\n      // If this is an initial render of a new tree of Suspense boundaries and\n      // those trigger a fallback, then don't suspend/restart. We want to ensure\n      // that we can show the initial loading state as quickly as possible.\n      //\n      // If we hit a \"Delayed\" case, such as when we'd switch from content back into\n      // a fallback, then we should always suspend/restart. Transitions apply\n      // to this case. If none is defined, JND is used instead.\n      //\n      // If we're already showing a fallback and it gets \"retried\", allowing us to show\n      // another level, but there's still an inner boundary that would show a fallback,\n      // then we suspend/restart for 500ms since the last time we showed a fallback\n      // anywhere in the tree. This effectively throttles progressive loading into a\n      // consistent train of commits. This also gives us an opportunity to restart to\n      // get to the completed state slightly earlier.\n      //\n      // If there's ambiguity due to batching it's resolved in preference of:\n      // 1) \"delayed\", 2) \"initial render\", 3) \"retry\".\n      //\n      // We want to ensure that a \"busy\" state doesn't get force committed. We want to\n      // ensure that new initial loading states can commit as soon as possible.\n\n\n      suspenseBoundary.flags |= ShouldCapture; // TODO: I think we can remove this, since we now use `DidCapture` in\n      // the begin phase to prevent an early bailout.\n\n      suspenseBoundary.lanes = rootRenderLanes;\n      return suspenseBoundary;\n    }\n\n    function throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {\n      // The source fiber did not complete.\n      sourceFiber.flags |= Incomplete;\n\n      if (value !== null && typeof value === 'object' && typeof value.then === 'function') {\n        // This is a wakeable. The component suspended.\n        var wakeable = value;\n        resetSuspendedComponent(sourceFiber);\n        var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);\n\n        if (suspenseBoundary !== null) {\n          suspenseBoundary.flags &= ~ForceClientRender;\n          markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // We only attach ping listeners in concurrent mode. Legacy Suspense always\n          // commits fallbacks synchronously, so there are no pings.\n\n          if (suspenseBoundary.mode & ConcurrentMode) {\n            attachPingListener(root, wakeable, rootRenderLanes);\n          }\n\n          attachRetryListener(suspenseBoundary, root, wakeable);\n          return;\n        } else {\n          // No boundary was found. Unless this is a sync update, this is OK.\n          // We can suspend and wait for more data to arrive.\n          if (!includesSyncLane(rootRenderLanes)) {\n            // This is not a sync update. Suspend. Since we're not activating a\n            // Suspense boundary, this will unwind all the way to the root without\n            // performing a second pass to render a fallback. (This is arguably how\n            // refresh transitions should work, too, since we're not going to commit\n            // the fallbacks anyway.)\n            //\n            // This case also applies to initial hydration.\n            attachPingListener(root, wakeable, rootRenderLanes);\n            renderDidSuspendDelayIfPossible();\n            return;\n          } // This is a sync/discrete update. We treat this case like an error\n          // because discrete renders are expected to produce a complete tree\n          // synchronously to maintain consistency with external state.\n\n\n          var uncaughtSuspenseError = new Error('A component suspended while responding to synchronous input. This ' + 'will cause the UI to be replaced with a loading indicator. To ' + 'fix, updates that suspend should be wrapped ' + 'with startTransition.'); // If we're outside a transition, fall through to the regular error path.\n          // The error will be caught by the nearest suspense boundary.\n\n          value = uncaughtSuspenseError;\n        }\n      } // We didn't find a boundary that could handle this type of exception. Start\n      // over and traverse parent path again, this time treating the exception\n      // as an error.\n\n\n      renderDidError(value);\n      value = createCapturedValue(value, sourceFiber);\n      var workInProgress = returnFiber;\n\n      do {\n        switch (workInProgress.tag) {\n          case HostRoot:\n            {\n              var _errorInfo = value;\n              workInProgress.flags |= ShouldCapture;\n              var lane = pickArbitraryLane(rootRenderLanes);\n              workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n              var update = createRootErrorUpdate(workInProgress, _errorInfo, lane);\n              enqueueCapturedUpdate(workInProgress, update);\n              return;\n            }\n\n          case ClassComponent:\n            // Capture and retry\n            var errorInfo = value;\n            var ctor = workInProgress.type;\n            var instance = workInProgress.stateNode;\n\n            if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {\n              workInProgress.flags |= ShouldCapture;\n\n              var _lane = pickArbitraryLane(rootRenderLanes);\n\n              workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane); // Schedule the error boundary to re-render using updated state\n\n              var _update = createClassErrorUpdate(workInProgress, errorInfo, _lane);\n\n              enqueueCapturedUpdate(workInProgress, _update);\n              return;\n            }\n\n            break;\n        }\n\n        workInProgress = workInProgress.return;\n      } while (workInProgress !== null);\n    }\n\n    function getSuspendedCache() {\n      {\n        return null;\n      } // This function is called when a Suspense boundary suspends. It returns the\n    }\n\n    function markUpdate(workInProgress) {\n      // Tag the fiber with an update effect. This turns a Placement into\n      // a PlacementAndUpdate.\n      workInProgress.flags |= Update;\n    }\n\n    function markRef(workInProgress) {\n      workInProgress.flags |= Ref;\n    }\n\n    var appendAllChildren;\n    var updateHostContainer;\n    var updateHostComponent;\n    var updateHostText;\n    {\n      // Mutation mode\n      appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {\n        // We only have the top Fiber that was created but we need recurse down its\n        // children to find all the terminal nodes.\n        var node = workInProgress.child;\n\n        while (node !== null) {\n          if (node.tag === HostComponent || node.tag === HostText) {\n            appendInitialChild(parent, node.stateNode);\n          } else if (node.tag === HostPortal) ;else if (node.child !== null) {\n            node.child.return = node;\n            node = node.child;\n            continue;\n          }\n\n          if (node === workInProgress) {\n            return;\n          }\n\n          while (node.sibling === null) {\n            if (node.return === null || node.return === workInProgress) {\n              return;\n            }\n\n            node = node.return;\n          }\n\n          node.sibling.return = node.return;\n          node = node.sibling;\n        }\n      };\n\n      updateHostContainer = function (current, workInProgress) {// Noop\n      };\n\n      updateHostComponent = function (current, workInProgress, type, newProps, rootContainerInstance) {\n        // If we have an alternate, that means this is an update and we need to\n        // schedule a side-effect to do the updates.\n        var oldProps = current.memoizedProps;\n\n        if (oldProps === newProps) {\n          // In mutation mode, this is sufficient for a bailout because\n          // we won't touch this node even if children changed.\n          return;\n        } // If we get updated because one of our children updated, we don't\n        // have newProps so we'll have to reuse them.\n        // TODO: Split the update API as separate for the props vs. children.\n        // Even better would be if children weren't special cased at all tho.\n\n\n        var instance = workInProgress.stateNode;\n        var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host\n        // component is hitting the resume path. Figure out why. Possibly\n        // related to `hidden`.\n\n        var updatePayload = prepareUpdate(); // TODO: Type this specific to this type of component.\n\n        workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there\n        // is a new ref we mark this as an update. All the work is done in commitWork.\n\n        if (updatePayload) {\n          markUpdate(workInProgress);\n        }\n      };\n\n      updateHostText = function (current, workInProgress, oldText, newText) {\n        // If the text differs, mark it as an update. All the work in done in commitWork.\n        if (oldText !== newText) {\n          markUpdate(workInProgress);\n        }\n      };\n    }\n\n    function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {\n      switch (renderState.tailMode) {\n        case 'hidden':\n          {\n            // Any insertions at the end of the tail list after this point\n            // should be invisible. If there are already mounted boundaries\n            // anything before them are not considered for collapsing.\n            // Therefore we need to go through the whole tail to find if\n            // there are any.\n            var tailNode = renderState.tail;\n            var lastTailNode = null;\n\n            while (tailNode !== null) {\n              if (tailNode.alternate !== null) {\n                lastTailNode = tailNode;\n              }\n\n              tailNode = tailNode.sibling;\n            } // Next we're simply going to delete all insertions after the\n            // last rendered item.\n\n\n            if (lastTailNode === null) {\n              // All remaining items in the tail are insertions.\n              renderState.tail = null;\n            } else {\n              // Detach the insertion after the last node that was already\n              // inserted.\n              lastTailNode.sibling = null;\n            }\n\n            break;\n          }\n\n        case 'collapsed':\n          {\n            // Any insertions at the end of the tail list after this point\n            // should be invisible. If there are already mounted boundaries\n            // anything before them are not considered for collapsing.\n            // Therefore we need to go through the whole tail to find if\n            // there are any.\n            var _tailNode = renderState.tail;\n            var _lastTailNode = null;\n\n            while (_tailNode !== null) {\n              if (_tailNode.alternate !== null) {\n                _lastTailNode = _tailNode;\n              }\n\n              _tailNode = _tailNode.sibling;\n            } // Next we're simply going to delete all insertions after the\n            // last rendered item.\n\n\n            if (_lastTailNode === null) {\n              // All remaining items in the tail are insertions.\n              if (!hasRenderedATailFallback && renderState.tail !== null) {\n                // We suspended during the head. We want to show at least one\n                // row at the tail. So we'll keep on and cut off the rest.\n                renderState.tail.sibling = null;\n              } else {\n                renderState.tail = null;\n              }\n            } else {\n              // Detach the insertion after the last node that was already\n              // inserted.\n              _lastTailNode.sibling = null;\n            }\n\n            break;\n          }\n      }\n    }\n\n    function bubbleProperties(completedWork) {\n      var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;\n      var newChildLanes = NoLanes;\n      var subtreeFlags = NoFlags;\n\n      if (!didBailout) {\n        // Bubble up the earliest expiration time.\n        if ((completedWork.mode & ProfileMode) !== NoMode) {\n          // In profiling mode, resetChildExpirationTime is also used to reset\n          // profiler durations.\n          var actualDuration = completedWork.actualDuration;\n          var treeBaseDuration = completedWork.selfBaseDuration;\n          var child = completedWork.child;\n\n          while (child !== null) {\n            newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));\n            subtreeFlags |= child.subtreeFlags;\n            subtreeFlags |= child.flags; // When a fiber is cloned, its actualDuration is reset to 0. This value will\n            // only be updated if work is done on the fiber (i.e. it doesn't bailout).\n            // When work is done, it should bubble to the parent's actualDuration. If\n            // the fiber has not been cloned though, (meaning no work was done), then\n            // this value will reflect the amount of time spent working on a previous\n            // render. In that case it should not bubble. We determine whether it was\n            // cloned by comparing the child pointer.\n\n            actualDuration += child.actualDuration;\n            treeBaseDuration += child.treeBaseDuration;\n            child = child.sibling;\n          }\n\n          completedWork.actualDuration = actualDuration;\n          completedWork.treeBaseDuration = treeBaseDuration;\n        } else {\n          var _child = completedWork.child;\n\n          while (_child !== null) {\n            newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));\n            subtreeFlags |= _child.subtreeFlags;\n            subtreeFlags |= _child.flags; // Update the return pointer so the tree is consistent. This is a code\n            // smell because it assumes the commit phase is never concurrent with\n            // the render phase. Will address during refactor to alternate model.\n\n            _child.return = completedWork;\n            _child = _child.sibling;\n          }\n        }\n\n        completedWork.subtreeFlags |= subtreeFlags;\n      } else {\n        // Bubble up the earliest expiration time.\n        if ((completedWork.mode & ProfileMode) !== NoMode) {\n          // In profiling mode, resetChildExpirationTime is also used to reset\n          // profiler durations.\n          var _treeBaseDuration = completedWork.selfBaseDuration;\n          var _child2 = completedWork.child;\n\n          while (_child2 !== null) {\n            newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes)); // \"Static\" flags share the lifetime of the fiber/hook they belong to,\n            // so we should bubble those up even during a bailout. All the other\n            // flags have a lifetime only of a single render + commit, so we should\n            // ignore them.\n\n            subtreeFlags |= _child2.subtreeFlags & StaticMask;\n            subtreeFlags |= _child2.flags & StaticMask;\n            _treeBaseDuration += _child2.treeBaseDuration;\n            _child2 = _child2.sibling;\n          }\n\n          completedWork.treeBaseDuration = _treeBaseDuration;\n        } else {\n          var _child3 = completedWork.child;\n\n          while (_child3 !== null) {\n            newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes)); // \"Static\" flags share the lifetime of the fiber/hook they belong to,\n            // so we should bubble those up even during a bailout. All the other\n            // flags have a lifetime only of a single render + commit, so we should\n            // ignore them.\n\n            subtreeFlags |= _child3.subtreeFlags & StaticMask;\n            subtreeFlags |= _child3.flags & StaticMask; // Update the return pointer so the tree is consistent. This is a code\n            // smell because it assumes the commit phase is never concurrent with\n            // the render phase. Will address during refactor to alternate model.\n\n            _child3.return = completedWork;\n            _child3 = _child3.sibling;\n          }\n        }\n\n        completedWork.subtreeFlags |= subtreeFlags;\n      }\n\n      completedWork.childLanes = newChildLanes;\n      return didBailout;\n    }\n\n    function completeWork(current, workInProgress, renderLanes) {\n      var newProps = workInProgress.pendingProps; // Note: This intentionally doesn't check if we're hydrating because comparing\n      // to the current tree provider fiber is just as fast and less error-prone.\n      // Ideally we would have a special version of the work loop only\n      // for hydration.\n\n      popTreeContext(workInProgress);\n\n      switch (workInProgress.tag) {\n        case IndeterminateComponent:\n        case LazyComponent:\n        case SimpleMemoComponent:\n        case FunctionComponent:\n        case ForwardRef:\n        case Fragment:\n        case Mode:\n        case Profiler:\n        case ContextConsumer:\n        case MemoComponent:\n          bubbleProperties(workInProgress);\n          return null;\n\n        case ClassComponent:\n          {\n            var Component = workInProgress.type;\n\n            if (isContextProvider(Component)) {\n              popContext(workInProgress);\n            }\n\n            bubbleProperties(workInProgress);\n            return null;\n          }\n\n        case HostRoot:\n          {\n            var fiberRoot = workInProgress.stateNode;\n            popHostContainer(workInProgress);\n            popTopLevelContextObject(workInProgress);\n            resetWorkInProgressVersions();\n\n            if (fiberRoot.pendingContext) {\n              fiberRoot.context = fiberRoot.pendingContext;\n              fiberRoot.pendingContext = null;\n            }\n\n            if (current === null || current.child === null) {\n              // If we hydrated, pop so that we can delete any remaining children\n              // that weren't hydrated.\n              var wasHydrated = popHydrationState();\n\n              if (wasHydrated) {\n                // If we hydrated, then we'll need to schedule an update for\n                // the commit side-effects on the root.\n                markUpdate(workInProgress);\n              } else {\n                if (current !== null) {\n                  var prevState = current.memoizedState;\n\n                  if ( // Check if this is a client root\n                  !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)\n                  (workInProgress.flags & ForceClientRender) !== NoFlags) {\n                    // Schedule an effect to clear this container at the start of the\n                    // next commit. This handles the case of React rendering into a\n                    // container with previous children. It's also safe to do for\n                    // updates too, because current.child would only be null if the\n                    // previous render was null (so the container would already\n                    // be empty).\n                    workInProgress.flags |= Snapshot; // If this was a forced client render, there may have been\n                  }\n                }\n              }\n            }\n\n            updateHostContainer(current, workInProgress);\n            bubbleProperties(workInProgress);\n            return null;\n          }\n\n        case HostComponent:\n          {\n            popHostContext(workInProgress);\n            var rootContainerInstance = getRootHostContainer();\n            var type = workInProgress.type;\n\n            if (current !== null && workInProgress.stateNode != null) {\n              updateHostComponent(current, workInProgress, type, newProps, rootContainerInstance);\n\n              if (current.ref !== workInProgress.ref) {\n                markRef(workInProgress);\n              }\n            } else {\n              if (!newProps) {\n                if (workInProgress.stateNode === null) {\n                  throw new Error('We must have new props for new mounts. This error is likely ' + 'caused by a bug in React. Please file an issue.');\n                } // This can happen when we abort work.\n\n\n                bubbleProperties(workInProgress);\n                return null;\n              }\n\n              var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context\n              // \"stack\" as the parent. Then append children as we go in beginWork\n              // or completeWork depending on whether we want to add them top->down or\n              // bottom->up. Top->down is faster in IE11.\n\n              var _wasHydrated = popHydrationState();\n\n              if (_wasHydrated) {\n                // TODO: Move this and createInstance step into the beginPhase\n                // to consolidate.\n                if (prepareToHydrateHostInstance()) {\n                  // If changes to the hydrated node need to be applied at the\n                  // commit-phase we mark this as such.\n                  markUpdate(workInProgress);\n                }\n              } else {\n                var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);\n                appendAllChildren(instance, workInProgress, false, false);\n                workInProgress.stateNode = instance; // Certain renderers require commit-time effects for initial mount.\n              }\n\n              if (workInProgress.ref !== null) {\n                // If there is a ref on a host node we need to schedule a callback\n                markRef(workInProgress);\n              }\n            }\n\n            bubbleProperties(workInProgress);\n            return null;\n          }\n\n        case HostText:\n          {\n            var newText = newProps;\n\n            if (current && workInProgress.stateNode != null) {\n              var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need\n              // to schedule a side-effect to do the updates.\n\n              updateHostText(current, workInProgress, oldText, newText);\n            } else {\n              if (typeof newText !== 'string') {\n                if (workInProgress.stateNode === null) {\n                  throw new Error('We must have new props for new mounts. This error is likely ' + 'caused by a bug in React. Please file an issue.');\n                } // This can happen when we abort work.\n\n              }\n\n              var _rootContainerInstance = getRootHostContainer();\n\n              var _currentHostContext = getHostContext();\n\n              var _wasHydrated2 = popHydrationState();\n\n              if (_wasHydrated2) {\n                if (prepareToHydrateHostTextInstance()) {\n                  markUpdate(workInProgress);\n                }\n              } else {\n                workInProgress.stateNode = createTextInstance(newText);\n              }\n            }\n\n            bubbleProperties(workInProgress);\n            return null;\n          }\n\n        case SuspenseComponent:\n          {\n            popSuspenseContext(workInProgress);\n            var nextState = workInProgress.memoizedState;\n\n            if ((workInProgress.flags & DidCapture) !== NoFlags) {\n              // Something suspended. Re-render with the fallback children.\n              workInProgress.lanes = renderLanes; // Do not reset the effect list.\n\n              if ((workInProgress.mode & ProfileMode) !== NoMode) {\n                transferActualDuration(workInProgress);\n              } // Don't bubble properties in this case.\n\n\n              return workInProgress;\n            }\n\n            var nextDidTimeout = nextState !== null;\n            var prevDidTimeout = false;\n            if (current === null) ;else {\n              var _prevState = current.memoizedState;\n              prevDidTimeout = _prevState !== null;\n            } // an effect to toggle the subtree's visibility. When we switch from\n            // fallback -> primary, the inner Offscreen fiber schedules this effect\n            // as part of its normal complete phase. But when we switch from\n            // primary -> fallback, the inner Offscreen fiber does not have a complete\n            // phase. So we need to schedule its effect here.\n            //\n            // We also use this flag to connect/disconnect the effects, but the same\n            // logic applies: when re-connecting, the Offscreen fiber's complete\n            // phase will handle scheduling the effect. It's only when the fallback\n            // is active that we have to do anything special.\n\n            if (nextDidTimeout && !prevDidTimeout) {\n              var _offscreenFiber = workInProgress.child;\n              _offscreenFiber.flags |= Visibility; // TODO: This will still suspend a synchronous tree if anything\n              // in the concurrent tree already suspended during this render.\n              // This is a known bug.\n\n              if ((workInProgress.mode & ConcurrentMode) !== NoMode) {\n                // TODO: Move this back to throwException because this is too late\n                // if this is a large tree which is common for initial loads. We\n                // don't know if we should restart a render or not until we get\n                // this marker, and this is too late.\n                // If this render already had a ping or lower pri updates,\n                // and this is the first time we know we're going to suspend we\n                // should be able to immediately restart from within throwException.\n                var hasInvisibleChildContext = current === null && (workInProgress.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);\n\n                if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {\n                  // If this was in an invisible tree or a new render, then showing\n                  // this boundary is ok.\n                  renderDidSuspend();\n                } else {\n                  // Otherwise, we're going to have to hide content so we should\n                  // suspend for longer if possible.\n                  renderDidSuspendDelayIfPossible();\n                }\n              }\n            }\n\n            var wakeables = workInProgress.updateQueue;\n\n            if (wakeables !== null) {\n              // Schedule an effect to attach a retry listener to the promise.\n              // TODO: Move to passive phase\n              workInProgress.flags |= Update;\n            }\n\n            bubbleProperties(workInProgress);\n            {\n              if ((workInProgress.mode & ProfileMode) !== NoMode) {\n                if (nextDidTimeout) {\n                  // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n                  var _primaryChildFragment2 = workInProgress.child;\n\n                  if (_primaryChildFragment2 !== null) {\n                    // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n                    workInProgress.treeBaseDuration -= _primaryChildFragment2.treeBaseDuration;\n                  }\n                }\n              }\n            }\n            return null;\n          }\n\n        case HostPortal:\n          popHostContainer(workInProgress);\n          updateHostContainer(current, workInProgress);\n\n          if (current === null) {\n            preparePortalMount(workInProgress.stateNode.containerInfo);\n          }\n\n          bubbleProperties(workInProgress);\n          return null;\n\n        case ContextProvider:\n          // Pop provider fiber\n          var context = workInProgress.type._context;\n          popProvider(context, workInProgress);\n          bubbleProperties(workInProgress);\n          return null;\n\n        case IncompleteClassComponent:\n          {\n            // Same as class component case. I put it down here so that the tags are\n            // sequential to ensure this switch is compiled to a jump table.\n            var _Component = workInProgress.type;\n\n            if (isContextProvider(_Component)) {\n              popContext(workInProgress);\n            }\n\n            bubbleProperties(workInProgress);\n            return null;\n          }\n\n        case SuspenseListComponent:\n          {\n            popSuspenseContext(workInProgress);\n            var renderState = workInProgress.memoizedState;\n\n            if (renderState === null) {\n              // We're running in the default, \"independent\" mode.\n              // We don't do anything in this mode.\n              bubbleProperties(workInProgress);\n              return null;\n            }\n\n            var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;\n            var renderedTail = renderState.rendering;\n\n            if (renderedTail === null) {\n              // We just rendered the head.\n              if (!didSuspendAlready) {\n                // This is the first pass. We need to figure out if anything is still\n                // suspended in the rendered set.\n                // If new content unsuspended, but there's still some content that\n                // didn't. Then we need to do a second pass that forces everything\n                // to keep showing their fallbacks.\n                // We might be suspended if something in this render pass suspended, or\n                // something in the previous committed pass suspended. Otherwise,\n                // there's no chance so we can skip the expensive call to\n                // findFirstSuspended.\n                var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.flags & DidCapture) === NoFlags);\n\n                if (!cannotBeSuspended) {\n                  var row = workInProgress.child;\n\n                  while (row !== null) {\n                    var suspended = findFirstSuspended(row);\n\n                    if (suspended !== null) {\n                      didSuspendAlready = true;\n                      workInProgress.flags |= DidCapture;\n                      cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as\n                      // part of the second pass. In that case nothing will subscribe to\n                      // its thenables. Instead, we'll transfer its thenables to the\n                      // SuspenseList so that it can retry if they resolve.\n                      // There might be multiple of these in the list but since we're\n                      // going to wait for all of them anyway, it doesn't really matter\n                      // which ones gets to ping. In theory we could get clever and keep\n                      // track of how many dependencies remain but it gets tricky because\n                      // in the meantime, we can add/remove/change items and dependencies.\n                      // We might bail out of the loop before finding any but that\n                      // doesn't matter since that means that the other boundaries that\n                      // we did find already has their listeners attached.\n\n                      var newThenables = suspended.updateQueue;\n\n                      if (newThenables !== null) {\n                        workInProgress.updateQueue = newThenables;\n                        workInProgress.flags |= Update;\n                      } // Rerender the whole list, but this time, we'll force fallbacks\n                      // to stay in place.\n                      // Reset the effect flags before doing the second pass since that's now invalid.\n                      // Reset the child fibers to their original state.\n\n\n                      workInProgress.subtreeFlags = NoFlags;\n                      resetChildFibers(workInProgress, renderLanes); // Set up the Suspense Context to force suspense and immediately\n                      // rerender the children.\n\n                      pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback)); // Don't bubble properties in this case.\n\n                      return workInProgress.child;\n                    }\n\n                    row = row.sibling;\n                  }\n                }\n\n                if (renderState.tail !== null && now() > getRenderTargetTime()) {\n                  // We have already passed our CPU deadline but we still have rows\n                  // left in the tail. We'll just give up further attempts to render\n                  // the main content and only render fallbacks.\n                  workInProgress.flags |= DidCapture;\n                  didSuspendAlready = true;\n                  cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this\n                  // to get it started back up to attempt the next item. While in terms\n                  // of priority this work has the same priority as this current render,\n                  // it's not part of the same transition once the transition has\n                  // committed. If it's sync, we still want to yield so that it can be\n                  // painted. Conceptually, this is really the same as pinging.\n                  // We can use any RetryLane even if it's the one currently rendering\n                  // since we're leaving it behind on this node.\n\n                  workInProgress.lanes = SomeRetryLane;\n                }\n              } else {\n                cutOffTailIfNeeded(renderState, false);\n              } // Next we're going to render the tail.\n\n            } else {\n              // Append the rendered row to the child list.\n              if (!didSuspendAlready) {\n                var _suspended = findFirstSuspended(renderedTail);\n\n                if (_suspended !== null) {\n                  workInProgress.flags |= DidCapture;\n                  didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't\n                  // get lost if this row ends up dropped during a second pass.\n\n                  var _newThenables = _suspended.updateQueue;\n\n                  if (_newThenables !== null) {\n                    workInProgress.updateQueue = _newThenables;\n                    workInProgress.flags |= Update;\n                  }\n\n                  cutOffTailIfNeeded(renderState, true); // This might have been modified.\n\n                  if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate && !getIsHydrating() // We don't cut it if we're hydrating.\n                  ) {\n                    // We're done.\n                    bubbleProperties(workInProgress);\n                    return null;\n                  }\n                } else if ( // The time it took to render last row is greater than the remaining\n                // time we have to render. So rendering one more row would likely\n                // exceed it.\n                now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes !== OffscreenLane) {\n                  // We have now passed our CPU deadline and we'll just give up further\n                  // attempts to render the main content and only render fallbacks.\n                  // The assumption is that this is usually faster.\n                  workInProgress.flags |= DidCapture;\n                  didSuspendAlready = true;\n                  cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this\n                  // to get it started back up to attempt the next item. While in terms\n                  // of priority this work has the same priority as this current render,\n                  // it's not part of the same transition once the transition has\n                  // committed. If it's sync, we still want to yield so that it can be\n                  // painted. Conceptually, this is really the same as pinging.\n                  // We can use any RetryLane even if it's the one currently rendering\n                  // since we're leaving it behind on this node.\n\n                  workInProgress.lanes = SomeRetryLane;\n                }\n              }\n\n              if (renderState.isBackwards) {\n                // The effect list of the backwards tail will have been added\n                // to the end. This breaks the guarantee that life-cycles fire in\n                // sibling order but that isn't a strong guarantee promised by React.\n                // Especially since these might also just pop in during future commits.\n                // Append to the beginning of the list.\n                renderedTail.sibling = workInProgress.child;\n                workInProgress.child = renderedTail;\n              } else {\n                var previousSibling = renderState.last;\n\n                if (previousSibling !== null) {\n                  previousSibling.sibling = renderedTail;\n                } else {\n                  workInProgress.child = renderedTail;\n                }\n\n                renderState.last = renderedTail;\n              }\n            }\n\n            if (renderState.tail !== null) {\n              // We still have tail rows to render.\n              // Pop a row.\n              var next = renderState.tail;\n              renderState.rendering = next;\n              renderState.tail = next.sibling;\n              renderState.renderingStartTime = now();\n              next.sibling = null; // Restore the context.\n              // TODO: We can probably just avoid popping it instead and only\n              // setting it the first time we go from not suspended to suspended.\n\n              var suspenseContext = suspenseStackCursor.current;\n\n              if (didSuspendAlready) {\n                suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);\n              } else {\n                suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n              }\n\n              pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.\n              // Don't bubble properties in this case.\n\n              return next;\n            }\n\n            bubbleProperties(workInProgress);\n            return null;\n          }\n\n        case ScopeComponent:\n          {\n            break;\n          }\n\n        case OffscreenComponent:\n        case LegacyHiddenComponent:\n          {\n            popRenderLanes(workInProgress);\n            var _nextState = workInProgress.memoizedState;\n            var nextIsHidden = _nextState !== null;\n\n            if (current !== null) {\n              var _prevState2 = current.memoizedState;\n              var prevIsHidden = _prevState2 !== null;\n\n              if (prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.\n              !enableLegacyHidden) {\n                workInProgress.flags |= Visibility;\n              }\n            }\n\n            if (!nextIsHidden || (workInProgress.mode & ConcurrentMode) === NoMode) {\n              bubbleProperties(workInProgress);\n            } else {\n              // Don't bubble properties for hidden children unless we're rendering\n              // at offscreen priority.\n              if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {\n                bubbleProperties(workInProgress);\n                {\n                  // Check if there was an insertion or update in the hidden subtree.\n                  // If so, we need to hide those nodes in the commit phase, so\n                  // schedule a visibility effect.\n                  if (workInProgress.subtreeFlags & (Placement | Update)) {\n                    workInProgress.flags |= Visibility;\n                  }\n                }\n              }\n            }\n\n            return null;\n          }\n\n        case CacheComponent:\n          {\n            return null;\n          }\n\n        case TracingMarkerComponent:\n          {\n            return null;\n          }\n      }\n\n      throw new Error(\"Unknown unit of work tag (\" + workInProgress.tag + \"). This error is likely caused by a bug in \" + 'React. Please file an issue.');\n    }\n\n    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\n    var didReceiveUpdate = false;\n    var didWarnAboutBadClass;\n    var didWarnAboutModulePatternComponent;\n    var didWarnAboutContextTypeOnFunctionComponent;\n    var didWarnAboutGetDerivedStateOnFunctionComponent;\n    var didWarnAboutFunctionRefs;\n    var didWarnAboutReassigningProps;\n    var didWarnAboutRevealOrder;\n    var didWarnAboutTailOptions;\n    {\n      didWarnAboutBadClass = {};\n      didWarnAboutModulePatternComponent = {};\n      didWarnAboutContextTypeOnFunctionComponent = {};\n      didWarnAboutGetDerivedStateOnFunctionComponent = {};\n      didWarnAboutFunctionRefs = {};\n      didWarnAboutReassigningProps = false;\n      didWarnAboutRevealOrder = {};\n      didWarnAboutTailOptions = {};\n    }\n\n    function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {\n      if (current === null) {\n        // If this is a fresh new component that hasn't been rendered yet, we\n        // won't update its child set by applying minimal side-effects. Instead,\n        // we will add them all to the child before it gets rendered. That means\n        // we can optimize this reconciliation pass by not tracking side-effects.\n        workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);\n      } else {\n        // If the current child is the same as the work in progress, it means that\n        // we haven't yet started any work on these children. Therefore, we use\n        // the clone algorithm to create a copy of all the current children.\n        // If we had any progressed work already, that is invalid at this point so\n        // let's throw it out.\n        workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);\n      }\n    }\n\n    function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes) {\n      // This function is fork of reconcileChildren. It's used in cases where we\n      // want to reconcile without matching against the existing set. This has the\n      // effect of all current children being unmounted; even if the type and key\n      // are the same, the old child is unmounted and a new child is created.\n      //\n      // To do this, we're going to go through the reconcile algorithm twice. In\n      // the first pass, we schedule a deletion for all the current children by\n      // passing null.\n      workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes); // In the second pass, we mount the new children. The trick here is that we\n      // pass null in place of where we usually pass the current child set. This has\n      // the effect of remounting all children regardless of whether their\n      // identities match.\n\n      workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);\n    }\n\n    function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {\n      // TODO: current can be non-null here even if the component\n      // hasn't yet mounted. This happens after the first render suspends.\n      // We'll need to figure out if this is fine or can cause issues.\n      {\n        if (workInProgress.type !== workInProgress.elementType) {\n          // Lazy component props can't be validated in createElement\n          // because they're only guaranteed to be resolved here.\n          var innerPropTypes = Component.propTypes;\n\n          if (innerPropTypes) {\n            checkPropTypes(innerPropTypes, nextProps, // Resolved props\n            'prop', getComponentNameFromType(Component));\n          }\n        }\n      }\n      var render = Component.render;\n      var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent\n\n      var nextChildren;\n      prepareToReadContext(workInProgress, renderLanes);\n      {\n        ReactCurrentOwner$1.current = workInProgress;\n        setIsRendering(true);\n        nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);\n        setIsRendering(false);\n      }\n\n      if (current !== null && !didReceiveUpdate) {\n        bailoutHooks(current, workInProgress, renderLanes);\n        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n      }\n\n      workInProgress.flags |= PerformedWork;\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n\n    function updateMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {\n      if (current === null) {\n        var type = Component.type;\n\n        if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.\n        Component.defaultProps === undefined) {\n          var resolvedType = type;\n          {\n            resolvedType = resolveFunctionForHotReloading(type);\n          } // If this is a plain function component without default props,\n          // and with only the default shallow comparison, we upgrade it\n          // to a SimpleMemoComponent to allow fast path updates.\n\n          workInProgress.tag = SimpleMemoComponent;\n          workInProgress.type = resolvedType;\n          {\n            validateFunctionComponentInDev(workInProgress, type);\n          }\n          return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, renderLanes);\n        }\n\n        {\n          var innerPropTypes = type.propTypes;\n\n          if (innerPropTypes) {\n            // Inner memo component props aren't currently validated in createElement.\n            // We could move it there, but we'd still need this for lazy code path.\n            checkPropTypes(innerPropTypes, nextProps, // Resolved props\n            'prop', getComponentNameFromType(type));\n          }\n        }\n        var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);\n        child.ref = workInProgress.ref;\n        child.return = workInProgress;\n        workInProgress.child = child;\n        return child;\n      }\n\n      {\n        var _type = Component.type;\n        var _innerPropTypes = _type.propTypes;\n\n        if (_innerPropTypes) {\n          // Inner memo component props aren't currently validated in createElement.\n          // We could move it there, but we'd still need this for lazy code path.\n          checkPropTypes(_innerPropTypes, nextProps, // Resolved props\n          'prop', getComponentNameFromType(_type));\n        }\n      }\n      var currentChild = current.child; // This is always exactly one child\n\n      var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);\n\n      if (!hasScheduledUpdateOrContext) {\n        // This will be the props with resolved defaultProps,\n        // unlike current.memoizedProps which will be the unresolved ones.\n        var prevProps = currentChild.memoizedProps; // Default to shallow comparison\n\n        var compare = Component.compare;\n        compare = compare !== null ? compare : shallowEqual;\n\n        if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {\n          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n        }\n      } // React DevTools reads this flag.\n\n\n      workInProgress.flags |= PerformedWork;\n      var newChild = createWorkInProgress(currentChild, nextProps);\n      newChild.ref = workInProgress.ref;\n      newChild.return = workInProgress;\n      workInProgress.child = newChild;\n      return newChild;\n    }\n\n    function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {\n      // TODO: current can be non-null here even if the component\n      // hasn't yet mounted. This happens when the inner render suspends.\n      // We'll need to figure out if this is fine or can cause issues.\n      {\n        if (workInProgress.type !== workInProgress.elementType) {\n          // Lazy component props can't be validated in createElement\n          // because they're only guaranteed to be resolved here.\n          var outerMemoType = workInProgress.elementType;\n\n          if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {\n            // We warn when you define propTypes on lazy()\n            // so let's just skip over it to find memo() outer wrapper.\n            // Inner props for memo are validated later.\n            var lazyComponent = outerMemoType;\n            var payload = lazyComponent._payload;\n            var init = lazyComponent._init;\n\n            try {\n              outerMemoType = init(payload);\n            } catch (x) {\n              outerMemoType = null;\n            } // Inner propTypes will be validated in the function component path.\n\n\n            var outerPropTypes = outerMemoType && outerMemoType.propTypes;\n\n            if (outerPropTypes) {\n              checkPropTypes(outerPropTypes, nextProps, // Resolved (SimpleMemoComponent has no defaultProps)\n              'prop', getComponentNameFromType(outerMemoType));\n            }\n          }\n        }\n      }\n\n      if (current !== null) {\n        var prevProps = current.memoizedProps;\n\n        if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && // Prevent bailout if the implementation changed due to hot reload.\n        workInProgress.type === current.type) {\n          didReceiveUpdate = false;\n\n          if (!checkScheduledUpdateOrContext(current, renderLanes)) {\n            // The pending lanes were cleared at the beginning of beginWork. We're\n            // about to bail out, but there might be other lanes that weren't\n            // included in the current render. Usually, the priority level of the\n            // remaining updates is accumulated during the evaluation of the\n            // component (i.e. when processing the update queue). But since since\n            // we're bailing out early *without* evaluating the component, we need\n            // to account for it here, too. Reset to the value of the current fiber.\n            // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,\n            // because a MemoComponent fiber does not have hooks or an update queue;\n            // rather, it wraps around an inner component, which may or may not\n            // contains hooks.\n            // TODO: Move the reset at in beginWork out of the common path so that\n            // this is no longer necessary.\n            workInProgress.lanes = current.lanes;\n            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n          } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\n            // This is a special case that only exists for legacy mode.\n            // See https://github.com/facebook/react/pull/19216.\n            didReceiveUpdate = true;\n          }\n        }\n      }\n\n      return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);\n    }\n\n    function updateOffscreenComponent(current, workInProgress, renderLanes) {\n      var nextProps = workInProgress.pendingProps;\n      var nextChildren = nextProps.children;\n      var prevState = current !== null ? current.memoizedState : null;\n\n      if (nextProps.mode === 'hidden' || enableLegacyHidden) {\n        // Rendering a hidden tree.\n        if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n          // In legacy sync mode, don't defer the subtree. Render it now.\n          var nextState = {\n            baseLanes: NoLanes,\n            cachePool: null\n          };\n          workInProgress.memoizedState = nextState;\n          pushRenderLanes(workInProgress, renderLanes);\n        } else if (!includesSomeLane(renderLanes, OffscreenLane)) {\n          var spawnedCachePool = null; // We're hidden, and we're not rendering at Offscreen. We will bail out\n          // and resume this tree later.\n\n          var nextBaseLanes;\n\n          if (prevState !== null) {\n            var prevBaseLanes = prevState.baseLanes;\n            nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);\n          } else {\n            nextBaseLanes = renderLanes;\n          } // Schedule this fiber to re-render at offscreen priority. Then bailout.\n\n\n          workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);\n          var _nextState = {\n            baseLanes: nextBaseLanes,\n            cachePool: spawnedCachePool\n          };\n          workInProgress.memoizedState = _nextState;\n          workInProgress.updateQueue = null; // to avoid a push/pop misalignment.\n\n          pushRenderLanes(workInProgress, nextBaseLanes);\n          return null;\n        } else {\n          // This is the second render. The surrounding visible content has already\n          // committed. Now we resume rendering the hidden tree.\n          // Rendering at offscreen, so we can clear the base lanes.\n          var _nextState2 = {\n            baseLanes: NoLanes,\n            cachePool: null\n          };\n          workInProgress.memoizedState = _nextState2; // Push the lanes that were skipped when we bailed out.\n\n          var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes;\n          pushRenderLanes(workInProgress, subtreeRenderLanes);\n        }\n      } else {\n        // Rendering a visible tree.\n        var _subtreeRenderLanes;\n\n        if (prevState !== null) {\n          // We're going from hidden -> visible.\n          _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes);\n          workInProgress.memoizedState = null;\n        } else {\n          // We weren't previously hidden, and we still aren't, so there's nothing\n          // special to do. Need to push to the stack regardless, though, to avoid\n          // a push/pop misalignment.\n          _subtreeRenderLanes = renderLanes;\n        }\n\n        pushRenderLanes(workInProgress, _subtreeRenderLanes);\n      }\n\n      {\n        reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n        return workInProgress.child;\n      }\n    }\n\n    function updateFragment(current, workInProgress, renderLanes) {\n      var nextChildren = workInProgress.pendingProps;\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n\n    function updateMode(current, workInProgress, renderLanes) {\n      var nextChildren = workInProgress.pendingProps.children;\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n\n    function updateProfiler(current, workInProgress, renderLanes) {\n      {\n        workInProgress.flags |= Update;\n        {\n          // Reset effect durations for the next eventual effect phase.\n          // These are reset during render to allow the DevTools commit hook a chance to read them,\n          var stateNode = workInProgress.stateNode;\n          stateNode.effectDuration = 0;\n          stateNode.passiveEffectDuration = 0;\n        }\n      }\n      var nextProps = workInProgress.pendingProps;\n      var nextChildren = nextProps.children;\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n\n    function markRef$1(current, workInProgress) {\n      var ref = workInProgress.ref;\n\n      if (current === null && ref !== null || current !== null && current.ref !== ref) {\n        // Schedule a Ref effect\n        workInProgress.flags |= Ref;\n      }\n    }\n\n    function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {\n      {\n        if (workInProgress.type !== workInProgress.elementType) {\n          // Lazy component props can't be validated in createElement\n          // because they're only guaranteed to be resolved here.\n          var innerPropTypes = Component.propTypes;\n\n          if (innerPropTypes) {\n            checkPropTypes(innerPropTypes, nextProps, // Resolved props\n            'prop', getComponentNameFromType(Component));\n          }\n        }\n      }\n      var context;\n      {\n        var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);\n        context = getMaskedContext(workInProgress, unmaskedContext);\n      }\n      var nextChildren;\n      prepareToReadContext(workInProgress, renderLanes);\n      {\n        ReactCurrentOwner$1.current = workInProgress;\n        setIsRendering(true);\n        nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);\n        setIsRendering(false);\n      }\n\n      if (current !== null && !didReceiveUpdate) {\n        bailoutHooks(current, workInProgress, renderLanes);\n        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n      }\n\n      workInProgress.flags |= PerformedWork;\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n\n    function updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {\n      {\n        // This is used by DevTools to force a boundary to error.\n        switch (shouldError(workInProgress)) {\n          case false:\n            {\n              var _instance = workInProgress.stateNode;\n              var ctor = workInProgress.type; // TODO This way of resetting the error boundary state is a hack.\n              // Is there a better way to do this?\n\n              var tempInstance = new ctor(workInProgress.memoizedProps, _instance.context);\n              var state = tempInstance.state;\n\n              _instance.updater.enqueueSetState(_instance, state, null);\n\n              break;\n            }\n\n          case true:\n            {\n              workInProgress.flags |= DidCapture;\n              workInProgress.flags |= ShouldCapture; // eslint-disable-next-line react-internal/prod-error-codes\n\n              var error$1 = new Error('Simulated error coming from DevTools');\n              var lane = pickArbitraryLane(renderLanes);\n              workInProgress.lanes = mergeLanes(workInProgress.lanes, lane); // Schedule the error boundary to re-render using updated state\n\n              var update = createClassErrorUpdate(workInProgress, createCapturedValue(error$1, workInProgress), lane);\n              enqueueCapturedUpdate(workInProgress, update);\n              break;\n            }\n        }\n\n        if (workInProgress.type !== workInProgress.elementType) {\n          // Lazy component props can't be validated in createElement\n          // because they're only guaranteed to be resolved here.\n          var innerPropTypes = Component.propTypes;\n\n          if (innerPropTypes) {\n            checkPropTypes(innerPropTypes, nextProps, // Resolved props\n            'prop', getComponentNameFromType(Component));\n          }\n        }\n      } // Push context providers early to prevent context stack mismatches.\n      // During mounting we don't know the child context yet as the instance doesn't exist.\n      // We will invalidate the child context in finishClassComponent() right after rendering.\n\n      var hasContext;\n\n      if (isContextProvider(Component)) {\n        hasContext = true;\n        pushContextProvider(workInProgress);\n      } else {\n        hasContext = false;\n      }\n\n      prepareToReadContext(workInProgress, renderLanes);\n      var instance = workInProgress.stateNode;\n      var shouldUpdate;\n\n      if (instance === null) {\n        if (current !== null) {\n          // A class component without an instance only mounts if it suspended\n          // inside a non-concurrent tree, in an inconsistent state. We want to\n          // treat it like a new mount, even though an empty version of it already\n          // committed. Disconnect the alternate pointers.\n          current.alternate = null;\n          workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect\n\n          workInProgress.flags |= Placement;\n        } // In the initial pass we might need to construct the instance.\n\n\n        constructClassInstance(workInProgress, Component, nextProps);\n        mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n        shouldUpdate = true;\n      } else if (current === null) {\n        // In a resume, we'll already have an instance we can reuse.\n        shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes);\n      } else {\n        shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderLanes);\n      }\n\n      var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes);\n      {\n        var inst = workInProgress.stateNode;\n\n        if (shouldUpdate && inst.props !== nextProps) {\n          if (!didWarnAboutReassigningProps) {\n            error('It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentNameFromFiber(workInProgress) || 'a component');\n          }\n\n          didWarnAboutReassigningProps = true;\n        }\n      }\n      return nextUnitOfWork;\n    }\n\n    function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {\n      // Refs should update even if shouldComponentUpdate returns false\n      markRef$1(current, workInProgress);\n      var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;\n\n      if (!shouldUpdate && !didCaptureError) {\n        // Context providers should defer to sCU for rendering\n        if (hasContext) {\n          invalidateContextProvider(workInProgress, Component, false);\n        }\n\n        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n      }\n\n      var instance = workInProgress.stateNode; // Rerender\n\n      ReactCurrentOwner$1.current = workInProgress;\n      var nextChildren;\n\n      if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {\n        // If we captured an error, but getDerivedStateFromError is not defined,\n        // unmount all the children. componentDidCatch will schedule an update to\n        // re-render a fallback. This is temporary until we migrate everyone to\n        // the new API.\n        // TODO: Warn in a future release.\n        nextChildren = null;\n        {\n          stopProfilerTimerIfRunning();\n        }\n      } else {\n        {\n          setIsRendering(true);\n          nextChildren = instance.render();\n          setIsRendering(false);\n        }\n      } // React DevTools reads this flag.\n\n\n      workInProgress.flags |= PerformedWork;\n\n      if (current !== null && didCaptureError) {\n        // If we're recovering from an error, reconcile without reusing any of\n        // the existing children. Conceptually, the normal children and the children\n        // that are shown on error are two different sets, so we shouldn't reuse\n        // normal children even if their identities match.\n        forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes);\n      } else {\n        reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      } // Memoize state using the values we just used to render.\n      // TODO: Restructure so we never read values from the instance.\n\n\n      workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.\n\n      if (hasContext) {\n        invalidateContextProvider(workInProgress, Component, true);\n      }\n\n      return workInProgress.child;\n    }\n\n    function pushHostRootContext(workInProgress) {\n      var root = workInProgress.stateNode;\n\n      if (root.pendingContext) {\n        pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);\n      } else if (root.context) {\n        // Should always be set\n        pushTopLevelContextObject(workInProgress, root.context, false);\n      }\n\n      pushHostContainer(workInProgress, root.containerInfo);\n    }\n\n    function updateHostRoot(current, workInProgress, renderLanes) {\n      pushHostRootContext(workInProgress);\n\n      if (current === null) {\n        throw new Error('Should have a current fiber. This is a bug in React.');\n      }\n\n      var nextProps = workInProgress.pendingProps;\n      var prevState = workInProgress.memoizedState;\n      var prevChildren = prevState.element;\n      cloneUpdateQueue(current, workInProgress);\n      processUpdateQueue(workInProgress, nextProps, null, renderLanes);\n      var nextState = workInProgress.memoizedState;\n      var root = workInProgress.stateNode; // being called \"element\".\n\n      var nextChildren = nextState.element;\n      {\n        if (nextChildren === prevChildren) {\n          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n        }\n\n        reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      }\n      return workInProgress.child;\n    }\n\n    function updateHostComponent$1(current, workInProgress, renderLanes) {\n      pushHostContext(workInProgress);\n      var type = workInProgress.type;\n      var nextProps = workInProgress.pendingProps;\n      var prevProps = current !== null ? current.memoizedProps : null;\n      var nextChildren = nextProps.children;\n\n      if (prevProps !== null && shouldSetTextContent()) {\n        // If we're switching from a direct text child to a normal child, or to\n        // empty, we need to schedule the text content to be reset.\n        workInProgress.flags |= ContentReset;\n      }\n\n      markRef$1(current, workInProgress);\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n\n    function updateHostText$1(current, workInProgress) {\n      // immediately after.\n      return null;\n    }\n\n    function mountLazyComponent(_current, workInProgress, elementType, renderLanes) {\n      if (_current !== null) {\n        // A lazy component only mounts if it suspended inside a non-\n        // concurrent tree, in an inconsistent state. We want to treat it like\n        // a new mount, even though an empty version of it already committed.\n        // Disconnect the alternate pointers.\n        _current.alternate = null;\n        workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect\n\n        workInProgress.flags |= Placement;\n      }\n\n      var props = workInProgress.pendingProps;\n      var lazyComponent = elementType;\n      var payload = lazyComponent._payload;\n      var init = lazyComponent._init;\n      var Component = init(payload); // Store the unwrapped component in the type.\n\n      workInProgress.type = Component;\n      var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);\n      var resolvedProps = resolveDefaultProps(Component, props);\n      var child;\n\n      switch (resolvedTag) {\n        case FunctionComponent:\n          {\n            {\n              validateFunctionComponentInDev(workInProgress, Component);\n              workInProgress.type = Component = resolveFunctionForHotReloading(Component);\n            }\n            child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes);\n            return child;\n          }\n\n        case ClassComponent:\n          {\n            {\n              workInProgress.type = Component = resolveClassForHotReloading(Component);\n            }\n            child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes);\n            return child;\n          }\n\n        case ForwardRef:\n          {\n            {\n              workInProgress.type = Component = resolveForwardRefForHotReloading(Component);\n            }\n            child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes);\n            return child;\n          }\n\n        case MemoComponent:\n          {\n            {\n              if (workInProgress.type !== workInProgress.elementType) {\n                var outerPropTypes = Component.propTypes;\n\n                if (outerPropTypes) {\n                  checkPropTypes(outerPropTypes, resolvedProps, // Resolved for outer only\n                  'prop', getComponentNameFromType(Component));\n                }\n              }\n            }\n            child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too\n            renderLanes);\n            return child;\n          }\n      }\n\n      var hint = '';\n      {\n        if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {\n          hint = ' Did you wrap a component in React.lazy() more than once?';\n        }\n      } // This message intentionally doesn't mention ForwardRef or MemoComponent\n      // because the fact that it's a separate type of work is an\n      // implementation detail.\n\n      throw new Error(\"Element type is invalid. Received a promise that resolves to: \" + Component + \". \" + (\"Lazy element type must resolve to a class or function.\" + hint));\n    }\n\n    function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes) {\n      if (_current !== null) {\n        // An incomplete component only mounts if it suspended inside a non-\n        // concurrent tree, in an inconsistent state. We want to treat it like\n        // a new mount, even though an empty version of it already committed.\n        // Disconnect the alternate pointers.\n        _current.alternate = null;\n        workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect\n\n        workInProgress.flags |= Placement;\n      } // Promote the fiber to a class and try rendering again.\n\n\n      workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`\n      // Push context providers early to prevent context stack mismatches.\n      // During mounting we don't know the child context yet as the instance doesn't exist.\n      // We will invalidate the child context in finishClassComponent() right after rendering.\n\n      var hasContext;\n\n      if (isContextProvider(Component)) {\n        hasContext = true;\n        pushContextProvider(workInProgress);\n      } else {\n        hasContext = false;\n      }\n\n      prepareToReadContext(workInProgress, renderLanes);\n      constructClassInstance(workInProgress, Component, nextProps);\n      mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n      return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);\n    }\n\n    function mountIndeterminateComponent(_current, workInProgress, Component, renderLanes) {\n      if (_current !== null) {\n        // An indeterminate component only mounts if it suspended inside a non-\n        // concurrent tree, in an inconsistent state. We want to treat it like\n        // a new mount, even though an empty version of it already committed.\n        // Disconnect the alternate pointers.\n        _current.alternate = null;\n        workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect\n\n        workInProgress.flags |= Placement;\n      }\n\n      var props = workInProgress.pendingProps;\n      var context;\n      {\n        var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);\n        context = getMaskedContext(workInProgress, unmaskedContext);\n      }\n      prepareToReadContext(workInProgress, renderLanes);\n      var value;\n      {\n        if (Component.prototype && typeof Component.prototype.render === 'function') {\n          var componentName = getComponentNameFromType(Component) || 'Unknown';\n\n          if (!didWarnAboutBadClass[componentName]) {\n            error(\"The <%s /> component appears to have a render method, but doesn't extend React.Component. \" + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);\n            didWarnAboutBadClass[componentName] = true;\n          }\n        }\n\n        if (workInProgress.mode & StrictLegacyMode) {\n          ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);\n        }\n\n        setIsRendering(true);\n        ReactCurrentOwner$1.current = workInProgress;\n        value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);\n        setIsRendering(false);\n      }\n      workInProgress.flags |= PerformedWork;\n      {\n        // Support for module components is deprecated and is removed behind a flag.\n        // Whether or not it would crash later, we want to show a good message in DEV first.\n        if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {\n          var _componentName = getComponentNameFromType(Component) || 'Unknown';\n\n          if (!didWarnAboutModulePatternComponent[_componentName]) {\n            error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + \"If you can't use a class try assigning the prototype on the function as a workaround. \" + \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" + 'cannot be called with `new` by React.', _componentName, _componentName, _componentName);\n            didWarnAboutModulePatternComponent[_componentName] = true;\n          }\n        }\n      }\n\n      if ( // Run these checks in production only if the flag is off.\n      // Eventually we'll delete this branch altogether.\n      typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {\n        {\n          var _componentName2 = getComponentNameFromType(Component) || 'Unknown';\n\n          if (!didWarnAboutModulePatternComponent[_componentName2]) {\n            error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + \"If you can't use a class try assigning the prototype on the function as a workaround. \" + \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" + 'cannot be called with `new` by React.', _componentName2, _componentName2, _componentName2);\n            didWarnAboutModulePatternComponent[_componentName2] = true;\n          }\n        } // Proceed under the assumption that this is a class instance\n\n        workInProgress.tag = ClassComponent; // Throw out any hooks that were used.\n\n        workInProgress.memoizedState = null;\n        workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.\n        // During mounting we don't know the child context yet as the instance doesn't exist.\n        // We will invalidate the child context in finishClassComponent() right after rendering.\n\n        var hasContext = false;\n\n        if (isContextProvider(Component)) {\n          hasContext = true;\n          pushContextProvider(workInProgress);\n        } else {\n          hasContext = false;\n        }\n\n        workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;\n        initializeUpdateQueue(workInProgress);\n        adoptClassInstance(workInProgress, value);\n        mountClassInstance(workInProgress, Component, props, renderLanes);\n        return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);\n      } else {\n        // Proceed under the assumption that this is a function component\n        workInProgress.tag = FunctionComponent;\n        reconcileChildren(null, workInProgress, value, renderLanes);\n        {\n          validateFunctionComponentInDev(workInProgress, Component);\n        }\n        return workInProgress.child;\n      }\n    }\n\n    function validateFunctionComponentInDev(workInProgress, Component) {\n      {\n        if (Component) {\n          if (Component.childContextTypes) {\n            error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');\n          }\n        }\n\n        if (workInProgress.ref !== null) {\n          var info = '';\n          var ownerName = getCurrentFiberOwnerNameInDevOrNull();\n\n          if (ownerName) {\n            info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n          }\n\n          var warningKey = ownerName || '';\n          var debugSource = workInProgress._debugSource;\n\n          if (debugSource) {\n            warningKey = debugSource.fileName + ':' + debugSource.lineNumber;\n          }\n\n          if (!didWarnAboutFunctionRefs[warningKey]) {\n            didWarnAboutFunctionRefs[warningKey] = true;\n            error('Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);\n          }\n        }\n\n        if (typeof Component.getDerivedStateFromProps === 'function') {\n          var _componentName3 = getComponentNameFromType(Component) || 'Unknown';\n\n          if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {\n            error('%s: Function components do not support getDerivedStateFromProps.', _componentName3);\n            didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;\n          }\n        }\n\n        if (typeof Component.contextType === 'object' && Component.contextType !== null) {\n          var _componentName4 = getComponentNameFromType(Component) || 'Unknown';\n\n          if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {\n            error('%s: Function components do not support contextType.', _componentName4);\n            didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;\n          }\n        }\n      }\n    }\n\n    var SUSPENDED_MARKER = {\n      dehydrated: null,\n      treeContext: null,\n      retryLane: NoLane\n    };\n\n    function mountSuspenseOffscreenState(renderLanes) {\n      return {\n        baseLanes: renderLanes,\n        cachePool: getSuspendedCache()\n      };\n    }\n\n    function updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {\n      var cachePool = null;\n      return {\n        baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes),\n        cachePool: cachePool\n      };\n    } // TODO: Probably should inline this back\n\n\n    function shouldRemainOnFallback(suspenseContext, current, workInProgress, renderLanes) {\n      // If we're already showing a fallback, there are cases where we need to\n      // remain on that fallback regardless of whether the content has resolved.\n      // For example, SuspenseList coordinates when nested content appears.\n      if (current !== null) {\n        var suspenseState = current.memoizedState;\n\n        if (suspenseState === null) {\n          // Currently showing content. Don't hide it, even if ForceSuspenseFallback\n          // is true. More precise name might be \"ForceRemainSuspenseFallback\".\n          // Note: This is a factoring smell. Can't remain on a fallback if there's\n          // no fallback to remain on.\n          return false;\n        }\n      } // Not currently showing content. Consult the Suspense context.\n\n\n      return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);\n    }\n\n    function getRemainingWorkInPrimaryTree(current, renderLanes) {\n      // TODO: Should not remove render lanes that were pinged during this render\n      return removeLanes(current.childLanes, renderLanes);\n    }\n\n    function updateSuspenseComponent(current, workInProgress, renderLanes) {\n      var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.\n\n      {\n        if (shouldSuspend(workInProgress)) {\n          workInProgress.flags |= DidCapture;\n        }\n      }\n      var suspenseContext = suspenseStackCursor.current;\n      var showFallback = false;\n      var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;\n\n      if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {\n        // Something in this boundary's subtree already suspended. Switch to\n        // rendering the fallback children.\n        showFallback = true;\n        workInProgress.flags &= ~DidCapture;\n      } else {\n        // Attempting the main content\n        if (current === null || current.memoizedState !== null) {\n          // This is a new mount or this boundary is already showing a fallback state.\n          // Mark this subtree context as having at least one invisible parent that could\n          // handle the fallback state.\n          // Avoided boundaries are not considered since they cannot handle preferred fallback states.\n          {\n            suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);\n          }\n        }\n      }\n\n      suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n      pushSuspenseContext(workInProgress, suspenseContext); // OK, the next part is confusing. We're about to reconcile the Suspense\n      // boundary's children. This involves some custom reconciliation logic. Two\n      // main reasons this is so complicated.\n      //\n      // First, Legacy Mode has different semantics for backwards compatibility. The\n      // primary tree will commit in an inconsistent state, so when we do the\n      // second pass to render the fallback, we do some exceedingly, uh, clever\n      // hacks to make that not totally break. Like transferring effects and\n      // deletions from hidden tree. In Concurrent Mode, it's much simpler,\n      // because we bailout on the primary tree completely and leave it in its old\n      // state, no effects. Same as what we do for Offscreen (except that\n      // Offscreen doesn't have the first render pass).\n      //\n      // Second is hydration. During hydration, the Suspense fiber has a slightly\n      // different layout, where the child points to a dehydrated fragment, which\n      // contains the DOM rendered by the server.\n      //\n      // Third, even if you set all that aside, Suspense is like error boundaries in\n      // that we first we try to render one tree, and if that fails, we render again\n      // and switch to a different tree. Like a try/catch block. So we have to track\n      // which branch we're currently rendering. Ideally we would model this using\n      // a stack.\n\n      if (current === null) {\n        var nextPrimaryChildren = nextProps.children;\n        var nextFallbackChildren = nextProps.fallback;\n\n        if (showFallback) {\n          var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);\n          var primaryChildFragment = workInProgress.child;\n          primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);\n          workInProgress.memoizedState = SUSPENDED_MARKER;\n          return fallbackFragment;\n        } else {\n          return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren);\n        }\n      } else {\n        // This is an update.\n        // If the current fiber has a SuspenseState, that means it's already showing\n        // a fallback.\n        var prevState = current.memoizedState;\n\n        if (prevState !== null) {\n          if (showFallback) {\n            var _nextFallbackChildren2 = nextProps.fallback;\n            var _nextPrimaryChildren2 = nextProps.children;\n\n            var _fallbackChildFragment = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes);\n\n            var _primaryChildFragment3 = workInProgress.child;\n            var prevOffscreenState = current.child.memoizedState;\n            _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);\n            _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes);\n            workInProgress.memoizedState = SUSPENDED_MARKER;\n            return _fallbackChildFragment;\n          } else {\n            var _nextPrimaryChildren3 = nextProps.children;\n\n            var _primaryChildFragment4 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren3, renderLanes);\n\n            workInProgress.memoizedState = null;\n            return _primaryChildFragment4;\n          }\n        } else {\n          // The current tree is not already showing a fallback.\n          if (showFallback) {\n            // Timed out.\n            var _nextFallbackChildren3 = nextProps.fallback;\n            var _nextPrimaryChildren4 = nextProps.children;\n\n            var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes);\n\n            var _primaryChildFragment5 = workInProgress.child;\n            var _prevOffscreenState = current.child.memoizedState;\n            _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes);\n            _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes); // Skip the primary children, and continue working on the\n            // fallback children.\n\n            workInProgress.memoizedState = SUSPENDED_MARKER;\n            return _fallbackChildFragment2;\n          } else {\n            // Still haven't timed out. Continue rendering the children, like we\n            // normally do.\n            var _nextPrimaryChildren5 = nextProps.children;\n\n            var _primaryChildFragment6 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren5, renderLanes);\n\n            workInProgress.memoizedState = null;\n            return _primaryChildFragment6;\n          }\n        }\n      }\n    }\n\n    function mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes) {\n      var mode = workInProgress.mode;\n      var primaryChildProps = {\n        mode: 'visible',\n        children: primaryChildren\n      };\n      var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);\n      primaryChildFragment.return = workInProgress;\n      workInProgress.child = primaryChildFragment;\n      return primaryChildFragment;\n    }\n\n    function mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes) {\n      var mode = workInProgress.mode;\n      var progressedPrimaryFragment = workInProgress.child;\n      var primaryChildProps = {\n        mode: 'hidden',\n        children: primaryChildren\n      };\n      var primaryChildFragment;\n      var fallbackChildFragment;\n\n      if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {\n        // In legacy mode, we commit the primary tree as if it successfully\n        // completed, even though it's in an inconsistent state.\n        primaryChildFragment = progressedPrimaryFragment;\n        primaryChildFragment.childLanes = NoLanes;\n        primaryChildFragment.pendingProps = primaryChildProps;\n\n        if (workInProgress.mode & ProfileMode) {\n          // Reset the durations from the first pass so they aren't included in the\n          // final amounts. This seems counterintuitive, since we're intentionally\n          // not measuring part of the render phase, but this makes it match what we\n          // do in Concurrent Mode.\n          primaryChildFragment.actualDuration = 0;\n          primaryChildFragment.actualStartTime = -1;\n          primaryChildFragment.selfBaseDuration = 0;\n          primaryChildFragment.treeBaseDuration = 0;\n        }\n\n        fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);\n      } else {\n        primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);\n        fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);\n      }\n\n      primaryChildFragment.return = workInProgress;\n      fallbackChildFragment.return = workInProgress;\n      primaryChildFragment.sibling = fallbackChildFragment;\n      workInProgress.child = primaryChildFragment;\n      return fallbackChildFragment;\n    }\n\n    function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes) {\n      // The props argument to `createFiberFromOffscreen` is `any` typed, so we use\n      // this wrapper function to constrain it.\n      return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);\n    }\n\n    function updateWorkInProgressOffscreenFiber(current, offscreenProps) {\n      // The props argument to `createWorkInProgress` is `any` typed, so we use this\n      // wrapper function to constrain it.\n      return createWorkInProgress(current, offscreenProps);\n    }\n\n    function updateSuspensePrimaryChildren(current, workInProgress, primaryChildren, renderLanes) {\n      var currentPrimaryChildFragment = current.child;\n      var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;\n      var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {\n        mode: 'visible',\n        children: primaryChildren\n      });\n\n      if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n        primaryChildFragment.lanes = renderLanes;\n      }\n\n      primaryChildFragment.return = workInProgress;\n      primaryChildFragment.sibling = null;\n\n      if (currentFallbackChildFragment !== null) {\n        // Delete the fallback child fragment\n        var deletions = workInProgress.deletions;\n\n        if (deletions === null) {\n          workInProgress.deletions = [currentFallbackChildFragment];\n          workInProgress.flags |= ChildDeletion;\n        } else {\n          deletions.push(currentFallbackChildFragment);\n        }\n      }\n\n      workInProgress.child = primaryChildFragment;\n      return primaryChildFragment;\n    }\n\n    function updateSuspenseFallbackChildren(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {\n      var mode = workInProgress.mode;\n      var currentPrimaryChildFragment = current.child;\n      var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;\n      var primaryChildProps = {\n        mode: 'hidden',\n        children: primaryChildren\n      };\n      var primaryChildFragment;\n\n      if ( // In legacy mode, we commit the primary tree as if it successfully\n      // completed, even though it's in an inconsistent state.\n      (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was\n      // already cloned. In legacy mode, the only case where this isn't true is\n      // when DevTools forces us to display a fallback; we skip the first render\n      // pass entirely and go straight to rendering the fallback. (In Concurrent\n      // Mode, SuspenseList can also trigger this scenario, but this is a legacy-\n      // only codepath.)\n      workInProgress.child !== currentPrimaryChildFragment) {\n        var progressedPrimaryFragment = workInProgress.child;\n        primaryChildFragment = progressedPrimaryFragment;\n        primaryChildFragment.childLanes = NoLanes;\n        primaryChildFragment.pendingProps = primaryChildProps;\n\n        if (workInProgress.mode & ProfileMode) {\n          // Reset the durations from the first pass so they aren't included in the\n          // final amounts. This seems counterintuitive, since we're intentionally\n          // not measuring part of the render phase, but this makes it match what we\n          // do in Concurrent Mode.\n          primaryChildFragment.actualDuration = 0;\n          primaryChildFragment.actualStartTime = -1;\n          primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;\n          primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;\n        } // However, since we're going to remain on the fallback, we no longer want\n        // to delete it.\n\n\n        workInProgress.deletions = null;\n      } else {\n        primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps); // (We don't do this in legacy mode, because in legacy mode we don't re-use\n        // the current tree; see previous branch.)\n\n        primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;\n      }\n\n      var fallbackChildFragment;\n\n      if (currentFallbackChildFragment !== null) {\n        fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);\n      } else {\n        fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null); // Needs a placement effect because the parent (the Suspense boundary) already\n        // mounted but this is a new fiber.\n\n        fallbackChildFragment.flags |= Placement;\n      }\n\n      fallbackChildFragment.return = workInProgress;\n      primaryChildFragment.return = workInProgress;\n      primaryChildFragment.sibling = fallbackChildFragment;\n      workInProgress.child = primaryChildFragment;\n      return fallbackChildFragment;\n    }\n\n    function scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {\n      fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n      var alternate = fiber.alternate;\n\n      if (alternate !== null) {\n        alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n      }\n\n      scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);\n    }\n\n    function propagateSuspenseContextChange(workInProgress, firstChild, renderLanes) {\n      // Mark any Suspense boundaries with fallbacks as having work to do.\n      // If they were previously forced into fallbacks, they may now be able\n      // to unblock.\n      var node = firstChild;\n\n      while (node !== null) {\n        if (node.tag === SuspenseComponent) {\n          var state = node.memoizedState;\n\n          if (state !== null) {\n            scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);\n          }\n        } else if (node.tag === SuspenseListComponent) {\n          // If the tail is hidden there might not be an Suspense boundaries\n          // to schedule work on. In this case we have to schedule it on the\n          // list itself.\n          // We don't have to traverse to the children of the list since\n          // the list will propagate the change when it rerenders.\n          scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);\n        } else if (node.child !== null) {\n          node.child.return = node;\n          node = node.child;\n          continue;\n        }\n\n        if (node === workInProgress) {\n          return;\n        }\n\n        while (node.sibling === null) {\n          if (node.return === null || node.return === workInProgress) {\n            return;\n          }\n\n          node = node.return;\n        }\n\n        node.sibling.return = node.return;\n        node = node.sibling;\n      }\n    }\n\n    function findLastContentRow(firstChild) {\n      // This is going to find the last row among these children that is already\n      // showing content on the screen, as opposed to being in fallback state or\n      // new. If a row has multiple Suspense boundaries, any of them being in the\n      // fallback state, counts as the whole row being in a fallback state.\n      // Note that the \"rows\" will be workInProgress, but any nested children\n      // will still be current since we haven't rendered them yet. The mounted\n      // order may not be the same as the new order. We use the new order.\n      var row = firstChild;\n      var lastContentRow = null;\n\n      while (row !== null) {\n        var currentRow = row.alternate; // New rows can't be content rows.\n\n        if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n          lastContentRow = row;\n        }\n\n        row = row.sibling;\n      }\n\n      return lastContentRow;\n    }\n\n    function validateRevealOrder(revealOrder) {\n      {\n        if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {\n          didWarnAboutRevealOrder[revealOrder] = true;\n\n          if (typeof revealOrder === 'string') {\n            switch (revealOrder.toLowerCase()) {\n              case 'together':\n              case 'forwards':\n              case 'backwards':\n                {\n                  error('\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase \"%s\" instead.', revealOrder, revealOrder.toLowerCase());\n                  break;\n                }\n\n              case 'forward':\n              case 'backward':\n                {\n                  error('\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use \"%ss\" instead.', revealOrder, revealOrder.toLowerCase());\n                  break;\n                }\n\n              default:\n                error('\"%s\" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean \"together\", \"forwards\" or \"backwards\"?', revealOrder);\n                break;\n            }\n          } else {\n            error('%s is not a supported value for revealOrder on <SuspenseList />. ' + 'Did you mean \"together\", \"forwards\" or \"backwards\"?', revealOrder);\n          }\n        }\n      }\n    }\n\n    function validateTailOptions(tailMode, revealOrder) {\n      {\n        if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {\n          if (tailMode !== 'collapsed' && tailMode !== 'hidden') {\n            didWarnAboutTailOptions[tailMode] = true;\n            error('\"%s\" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean \"collapsed\" or \"hidden\"?', tailMode);\n          } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {\n            didWarnAboutTailOptions[tailMode] = true;\n            error('<SuspenseList tail=\"%s\" /> is only valid if revealOrder is ' + '\"forwards\" or \"backwards\". ' + 'Did you mean to specify revealOrder=\"forwards\"?', tailMode);\n          }\n        }\n      }\n    }\n\n    function validateSuspenseListNestedChild(childSlot, index) {\n      {\n        var isAnArray = isArray(childSlot);\n        var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === 'function';\n\n        if (isAnArray || isIterable) {\n          var type = isAnArray ? 'array' : 'iterable';\n          error('A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' + 'an additional SuspenseList to configure its revealOrder: ' + '<SuspenseList revealOrder=...> ... ' + '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' + '</SuspenseList>', type, index, type);\n          return false;\n        }\n      }\n      return true;\n    }\n\n    function validateSuspenseListChildren(children, revealOrder) {\n      {\n        if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {\n          if (isArray(children)) {\n            for (var i = 0; i < children.length; i++) {\n              if (!validateSuspenseListNestedChild(children[i], i)) {\n                return;\n              }\n            }\n          } else {\n            var iteratorFn = getIteratorFn(children);\n\n            if (typeof iteratorFn === 'function') {\n              var childrenIterator = iteratorFn.call(children);\n\n              if (childrenIterator) {\n                var step = childrenIterator.next();\n                var _i = 0;\n\n                for (; !step.done; step = childrenIterator.next()) {\n                  if (!validateSuspenseListNestedChild(step.value, _i)) {\n                    return;\n                  }\n\n                  _i++;\n                }\n              }\n            } else {\n              error('A single row was passed to a <SuspenseList revealOrder=\"%s\" />. ' + 'This is not useful since it needs multiple rows. ' + 'Did you mean to pass multiple children or an array?', revealOrder);\n            }\n          }\n        }\n      }\n    }\n\n    function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {\n      var renderState = workInProgress.memoizedState;\n\n      if (renderState === null) {\n        workInProgress.memoizedState = {\n          isBackwards: isBackwards,\n          rendering: null,\n          renderingStartTime: 0,\n          last: lastContentRow,\n          tail: tail,\n          tailMode: tailMode\n        };\n      } else {\n        // We can reuse the existing object from previous renders.\n        renderState.isBackwards = isBackwards;\n        renderState.rendering = null;\n        renderState.renderingStartTime = 0;\n        renderState.last = lastContentRow;\n        renderState.tail = tail;\n        renderState.tailMode = tailMode;\n      }\n    } // This can end up rendering this component multiple passes.\n    // The first pass splits the children fibers into two sets. A head and tail.\n    // We first render the head. If anything is in fallback state, we do another\n    // pass through beginWork to rerender all children (including the tail) with\n    // the force suspend context. If the first render didn't have anything in\n    // in fallback state. Then we render each row in the tail one-by-one.\n    // That happens in the completeWork phase without going back to beginWork.\n\n\n    function updateSuspenseListComponent(current, workInProgress, renderLanes) {\n      var nextProps = workInProgress.pendingProps;\n      var revealOrder = nextProps.revealOrder;\n      var tailMode = nextProps.tail;\n      var newChildren = nextProps.children;\n      validateRevealOrder(revealOrder);\n      validateTailOptions(tailMode, revealOrder);\n      validateSuspenseListChildren(newChildren, revealOrder);\n      reconcileChildren(current, workInProgress, newChildren, renderLanes);\n      var suspenseContext = suspenseStackCursor.current;\n      var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);\n\n      if (shouldForceFallback) {\n        suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);\n        workInProgress.flags |= DidCapture;\n      } else {\n        var didSuspendBefore = current !== null && (current.flags & DidCapture) !== NoFlags;\n\n        if (didSuspendBefore) {\n          // If we previously forced a fallback, we need to schedule work\n          // on any nested boundaries to let them know to try to render\n          // again. This is the same as context updating.\n          propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes);\n        }\n\n        suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n      }\n\n      pushSuspenseContext(workInProgress, suspenseContext);\n\n      if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n        // In legacy mode, SuspenseList doesn't work so we just\n        // use make it a noop by treating it as the default revealOrder.\n        workInProgress.memoizedState = null;\n      } else {\n        switch (revealOrder) {\n          case 'forwards':\n            {\n              var lastContentRow = findLastContentRow(workInProgress.child);\n              var tail;\n\n              if (lastContentRow === null) {\n                // The whole list is part of the tail.\n                // TODO: We could fast path by just rendering the tail now.\n                tail = workInProgress.child;\n                workInProgress.child = null;\n              } else {\n                // Disconnect the tail rows after the content row.\n                // We're going to render them separately later.\n                tail = lastContentRow.sibling;\n                lastContentRow.sibling = null;\n              }\n\n              initSuspenseListRenderState(workInProgress, false, // isBackwards\n              tail, lastContentRow, tailMode);\n              break;\n            }\n\n          case 'backwards':\n            {\n              // We're going to find the first row that has existing content.\n              // At the same time we're going to reverse the list of everything\n              // we pass in the meantime. That's going to be our tail in reverse\n              // order.\n              var _tail = null;\n              var row = workInProgress.child;\n              workInProgress.child = null;\n\n              while (row !== null) {\n                var currentRow = row.alternate; // New rows can't be content rows.\n\n                if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n                  // This is the beginning of the main content.\n                  workInProgress.child = row;\n                  break;\n                }\n\n                var nextRow = row.sibling;\n                row.sibling = _tail;\n                _tail = row;\n                row = nextRow;\n              } // TODO: If workInProgress.child is null, we can continue on the tail immediately.\n\n\n              initSuspenseListRenderState(workInProgress, true, // isBackwards\n              _tail, null, // last\n              tailMode);\n              break;\n            }\n\n          case 'together':\n            {\n              initSuspenseListRenderState(workInProgress, false, // isBackwards\n              null, // tail\n              null, // last\n              undefined);\n              break;\n            }\n\n          default:\n            {\n              // The default reveal order is the same as not having\n              // a boundary.\n              workInProgress.memoizedState = null;\n            }\n        }\n      }\n\n      return workInProgress.child;\n    }\n\n    function updatePortalComponent(current, workInProgress, renderLanes) {\n      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n      var nextChildren = workInProgress.pendingProps;\n\n      if (current === null) {\n        // Portals are special because we don't append the children during mount\n        // but at commit. Therefore we need to track insertions which the normal\n        // flow doesn't do during mount. This doesn't happen at the root because\n        // the root always starts with a \"current\" with a null child.\n        // TODO: Consider unifying this with how the root works.\n        workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);\n      } else {\n        reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      }\n\n      return workInProgress.child;\n    }\n\n    var hasWarnedAboutUsingNoValuePropOnContextProvider = false;\n\n    function updateContextProvider(current, workInProgress, renderLanes) {\n      var providerType = workInProgress.type;\n      var context = providerType._context;\n      var newProps = workInProgress.pendingProps;\n      var oldProps = workInProgress.memoizedProps;\n      var newValue = newProps.value;\n      {\n        if (!('value' in newProps)) {\n          if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {\n            hasWarnedAboutUsingNoValuePropOnContextProvider = true;\n            error('The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?');\n          }\n        }\n\n        var providerPropTypes = workInProgress.type.propTypes;\n\n        if (providerPropTypes) {\n          checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');\n        }\n      }\n      pushProvider(workInProgress, context, newValue);\n      {\n        if (oldProps !== null) {\n          var oldValue = oldProps.value;\n\n          if (objectIs(oldValue, newValue)) {\n            // No change. Bailout early if children are the same.\n            if (oldProps.children === newProps.children && !hasContextChanged()) {\n              return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n            }\n          } else {\n            // The context value changed. Search for matching consumers and schedule\n            // them to update.\n            propagateContextChange(workInProgress, context, renderLanes);\n          }\n        }\n      }\n      var newChildren = newProps.children;\n      reconcileChildren(current, workInProgress, newChildren, renderLanes);\n      return workInProgress.child;\n    }\n\n    var hasWarnedAboutUsingContextAsConsumer = false;\n\n    function updateContextConsumer(current, workInProgress, renderLanes) {\n      var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In\n      // DEV mode, we create a separate object for Context.Consumer that acts\n      // like a proxy to Context. This proxy object adds unnecessary code in PROD\n      // so we use the old behaviour (Context.Consumer references Context) to\n      // reduce size and overhead. The separate object references context via\n      // a property called \"_context\", which also gives us the ability to check\n      // in DEV mode if this property exists or not and warn if it does not.\n\n      {\n        if (context._context === undefined) {\n          // This may be because it's a Context (rather than a Consumer).\n          // Or it may be because it's older React where they're the same thing.\n          // We only want to warn if we're sure it's a new React.\n          if (context !== context.Consumer) {\n            if (!hasWarnedAboutUsingContextAsConsumer) {\n              hasWarnedAboutUsingContextAsConsumer = true;\n              error('Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');\n            }\n          }\n        } else {\n          context = context._context;\n        }\n      }\n      var newProps = workInProgress.pendingProps;\n      var render = newProps.children;\n      {\n        if (typeof render !== 'function') {\n          error('A context consumer was rendered with multiple children, or a child ' + \"that isn't a function. A context consumer expects a single child \" + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.');\n        }\n      }\n      prepareToReadContext(workInProgress, renderLanes);\n      var newValue = readContext(context);\n      var newChildren;\n      {\n        ReactCurrentOwner$1.current = workInProgress;\n        setIsRendering(true);\n        newChildren = render(newValue);\n        setIsRendering(false);\n      }\n      workInProgress.flags |= PerformedWork;\n      reconcileChildren(current, workInProgress, newChildren, renderLanes);\n      return workInProgress.child;\n    }\n\n    function markWorkInProgressReceivedUpdate() {\n      didReceiveUpdate = true;\n    }\n\n    function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {\n      if (current !== null) {\n        // Reuse previous dependencies\n        workInProgress.dependencies = current.dependencies;\n      }\n\n      {\n        // Don't update \"base\" render times for bailouts.\n        stopProfilerTimerIfRunning();\n      }\n      markSkippedUpdateLanes(workInProgress.lanes); // Check if the children have any pending work.\n\n      if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {\n        // The children don't have any work either. We can skip them.\n        // TODO: Once we add back resuming, we should check if the children are\n        // a work-in-progress set. If so, we need to transfer their effects.\n        {\n          return null;\n        }\n      } // This fiber doesn't have work, but its subtree does. Clone the child\n      // fibers and continue.\n\n\n      cloneChildFibers(current, workInProgress);\n      return workInProgress.child;\n    }\n\n    function remountFiber(current, oldWorkInProgress, newWorkInProgress) {\n      {\n        var returnFiber = oldWorkInProgress.return;\n\n        if (returnFiber === null) {\n          // eslint-disable-next-line react-internal/prod-error-codes\n          throw new Error('Cannot swap the root fiber.');\n        } // Disconnect from the old current.\n        // It will get deleted.\n\n\n        current.alternate = null;\n        oldWorkInProgress.alternate = null; // Connect to the new tree.\n\n        newWorkInProgress.index = oldWorkInProgress.index;\n        newWorkInProgress.sibling = oldWorkInProgress.sibling;\n        newWorkInProgress.return = oldWorkInProgress.return;\n        newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.\n\n        if (oldWorkInProgress === returnFiber.child) {\n          returnFiber.child = newWorkInProgress;\n        } else {\n          var prevSibling = returnFiber.child;\n\n          if (prevSibling === null) {\n            // eslint-disable-next-line react-internal/prod-error-codes\n            throw new Error('Expected parent to have a child.');\n          }\n\n          while (prevSibling.sibling !== oldWorkInProgress) {\n            prevSibling = prevSibling.sibling;\n\n            if (prevSibling === null) {\n              // eslint-disable-next-line react-internal/prod-error-codes\n              throw new Error('Expected to find the previous sibling.');\n            }\n          }\n\n          prevSibling.sibling = newWorkInProgress;\n        } // Delete the old fiber and place the new one.\n        // Since the old fiber is disconnected, we have to schedule it manually.\n\n\n        var deletions = returnFiber.deletions;\n\n        if (deletions === null) {\n          returnFiber.deletions = [current];\n          returnFiber.flags |= ChildDeletion;\n        } else {\n          deletions.push(current);\n        }\n\n        newWorkInProgress.flags |= Placement; // Restart work from the new fiber.\n\n        return newWorkInProgress;\n      }\n    }\n\n    function checkScheduledUpdateOrContext(current, renderLanes) {\n      // Before performing an early bailout, we must check if there are pending\n      // updates or context.\n      var updateLanes = current.lanes;\n\n      if (includesSomeLane(updateLanes, renderLanes)) {\n        return true;\n      } // No pending update, but because context is propagated lazily, we need\n\n\n      return false;\n    }\n\n    function attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes) {\n      // This fiber does not have any pending work. Bailout without entering\n      // the begin phase. There's still some bookkeeping we that needs to be done\n      // in this optimized path, mostly pushing stuff onto the stack.\n      switch (workInProgress.tag) {\n        case HostRoot:\n          pushHostRootContext(workInProgress);\n          var root = workInProgress.stateNode;\n          break;\n\n        case HostComponent:\n          pushHostContext(workInProgress);\n          break;\n\n        case ClassComponent:\n          {\n            var Component = workInProgress.type;\n\n            if (isContextProvider(Component)) {\n              pushContextProvider(workInProgress);\n            }\n\n            break;\n          }\n\n        case HostPortal:\n          pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n          break;\n\n        case ContextProvider:\n          {\n            var newValue = workInProgress.memoizedProps.value;\n            var context = workInProgress.type._context;\n            pushProvider(workInProgress, context, newValue);\n            break;\n          }\n\n        case Profiler:\n          {\n            // Profiler should only call onRender when one of its descendants actually rendered.\n            var hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);\n\n            if (hasChildWork) {\n              workInProgress.flags |= Update;\n            }\n\n            {\n              // Reset effect durations for the next eventual effect phase.\n              // These are reset during render to allow the DevTools commit hook a chance to read them,\n              var stateNode = workInProgress.stateNode;\n              stateNode.effectDuration = 0;\n              stateNode.passiveEffectDuration = 0;\n            }\n          }\n          break;\n\n        case SuspenseComponent:\n          {\n            var state = workInProgress.memoizedState;\n\n            if (state !== null) {\n              // whether to retry the primary children, or to skip over it and\n              // go straight to the fallback. Check the priority of the primary\n              // child fragment.\n              var primaryChildFragment = workInProgress.child;\n              var primaryChildLanes = primaryChildFragment.childLanes;\n\n              if (includesSomeLane(renderLanes, primaryChildLanes)) {\n                // The primary children have pending work. Use the normal path\n                // to attempt to render the primary children again.\n                return updateSuspenseComponent(current, workInProgress, renderLanes);\n              } else {\n                // The primary child fragment does not have pending work marked\n                // on it\n                pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient\n                // priority. Bailout.\n\n                var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n\n                if (child !== null) {\n                  // The fallback children have pending work. Skip over the\n                  // primary children and work on the fallback.\n                  return child.sibling;\n                } else {\n                  // Note: We can return `null` here because we already checked\n                  // whether there were nested context consumers, via the call to\n                  // `bailoutOnAlreadyFinishedWork` above.\n                  return null;\n                }\n              }\n            } else {\n              pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));\n            }\n\n            break;\n          }\n\n        case SuspenseListComponent:\n          {\n            var didSuspendBefore = (current.flags & DidCapture) !== NoFlags;\n\n            var _hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);\n\n            if (didSuspendBefore) {\n              if (_hasChildWork) {\n                // If something was in fallback state last time, and we have all the\n                // same children then we're still in progressive loading state.\n                // Something might get unblocked by state updates or retries in the\n                // tree which will affect the tail. So we need to use the normal\n                // path to compute the correct tail.\n                return updateSuspenseListComponent(current, workInProgress, renderLanes);\n              } // If none of the children had any work, that means that none of\n              // them got retried so they'll still be blocked in the same way\n              // as before. We can fast bail out.\n\n\n              workInProgress.flags |= DidCapture;\n            } // If nothing suspended before and we're rendering the same children,\n            // then the tail doesn't matter. Anything new that suspends will work\n            // in the \"together\" mode, so we can continue from the state we had.\n\n\n            var renderState = workInProgress.memoizedState;\n\n            if (renderState !== null) {\n              // Reset to the \"together\" mode in case we've started a different\n              // update in the past but didn't complete it.\n              renderState.rendering = null;\n              renderState.tail = null;\n              renderState.lastEffect = null;\n            }\n\n            pushSuspenseContext(workInProgress, suspenseStackCursor.current);\n\n            if (_hasChildWork) {\n              break;\n            } else {\n              // If none of the children had any work, that means that none of\n              // them got retried so they'll still be blocked in the same way\n              // as before. We can fast bail out.\n              return null;\n            }\n          }\n\n        case OffscreenComponent:\n        case LegacyHiddenComponent:\n          {\n            // Need to check if the tree still needs to be deferred. This is\n            // almost identical to the logic used in the normal update path,\n            // so we'll just enter that. The only difference is we'll bail out\n            // at the next level instead of this one, because the child props\n            // have not changed. Which is fine.\n            // TODO: Probably should refactor `beginWork` to split the bailout\n            // path from the normal path. I'm tempted to do a labeled break here\n            // but I won't :)\n            workInProgress.lanes = NoLanes;\n            return updateOffscreenComponent(current, workInProgress, renderLanes);\n          }\n      }\n\n      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n    }\n\n    function beginWork(current, workInProgress, renderLanes) {\n      {\n        if (workInProgress._debugNeedsRemount && current !== null) {\n          // This will restart the begin phase with a new fiber.\n          return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));\n        }\n      }\n\n      if (current !== null) {\n        var oldProps = current.memoizedProps;\n        var newProps = workInProgress.pendingProps;\n\n        if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:\n        workInProgress.type !== current.type) {\n          // If props or context changed, mark the fiber as having performed work.\n          // This may be unset if the props are determined to be equal later (memo).\n          didReceiveUpdate = true;\n        } else {\n          // Neither props nor legacy context changes. Check if there's a pending\n          // update or context change.\n          var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);\n\n          if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there\n          // may not be work scheduled on `current`, so we check for this flag.\n          (workInProgress.flags & DidCapture) === NoFlags) {\n            // No pending updates or context. Bail out now.\n            didReceiveUpdate = false;\n            return attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes);\n          }\n\n          if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\n            // This is a special case that only exists for legacy mode.\n            // See https://github.com/facebook/react/pull/19216.\n            didReceiveUpdate = true;\n          } else {\n            // An update was scheduled on this fiber, but there are no new props\n            // nor legacy context. Set this to false. If an update queue or context\n            // consumer produces a changed value, it will set this to true. Otherwise,\n            // the component will assume the children have not changed and bail out.\n            didReceiveUpdate = false;\n          }\n        }\n      } else {\n        didReceiveUpdate = false;\n      } // Before entering the begin phase, clear pending update priority.\n      // TODO: This assumes that we're about to evaluate the component and process\n      // the update queue. However, there's an exception: SimpleMemoComponent\n      // sometimes bails out later in the begin phase. This indicates that we should\n      // move this assignment out of the common path and into each branch.\n\n\n      workInProgress.lanes = NoLanes;\n\n      switch (workInProgress.tag) {\n        case IndeterminateComponent:\n          {\n            return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes);\n          }\n\n        case LazyComponent:\n          {\n            var elementType = workInProgress.elementType;\n            return mountLazyComponent(current, workInProgress, elementType, renderLanes);\n          }\n\n        case FunctionComponent:\n          {\n            var Component = workInProgress.type;\n            var unresolvedProps = workInProgress.pendingProps;\n            var resolvedProps = workInProgress.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);\n            return updateFunctionComponent(current, workInProgress, Component, resolvedProps, renderLanes);\n          }\n\n        case ClassComponent:\n          {\n            var _Component = workInProgress.type;\n            var _unresolvedProps = workInProgress.pendingProps;\n\n            var _resolvedProps = workInProgress.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);\n\n            return updateClassComponent(current, workInProgress, _Component, _resolvedProps, renderLanes);\n          }\n\n        case HostRoot:\n          return updateHostRoot(current, workInProgress, renderLanes);\n\n        case HostComponent:\n          return updateHostComponent$1(current, workInProgress, renderLanes);\n\n        case HostText:\n          return updateHostText$1();\n\n        case SuspenseComponent:\n          return updateSuspenseComponent(current, workInProgress, renderLanes);\n\n        case HostPortal:\n          return updatePortalComponent(current, workInProgress, renderLanes);\n\n        case ForwardRef:\n          {\n            var type = workInProgress.type;\n            var _unresolvedProps2 = workInProgress.pendingProps;\n\n            var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);\n\n            return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderLanes);\n          }\n\n        case Fragment:\n          return updateFragment(current, workInProgress, renderLanes);\n\n        case Mode:\n          return updateMode(current, workInProgress, renderLanes);\n\n        case Profiler:\n          return updateProfiler(current, workInProgress, renderLanes);\n\n        case ContextProvider:\n          return updateContextProvider(current, workInProgress, renderLanes);\n\n        case ContextConsumer:\n          return updateContextConsumer(current, workInProgress, renderLanes);\n\n        case MemoComponent:\n          {\n            var _type2 = workInProgress.type;\n            var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.\n\n            var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);\n\n            {\n              if (workInProgress.type !== workInProgress.elementType) {\n                var outerPropTypes = _type2.propTypes;\n\n                if (outerPropTypes) {\n                  checkPropTypes(outerPropTypes, _resolvedProps3, // Resolved for outer only\n                  'prop', getComponentNameFromType(_type2));\n                }\n              }\n            }\n            _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);\n            return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, renderLanes);\n          }\n\n        case SimpleMemoComponent:\n          {\n            return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);\n          }\n\n        case IncompleteClassComponent:\n          {\n            var _Component2 = workInProgress.type;\n            var _unresolvedProps4 = workInProgress.pendingProps;\n\n            var _resolvedProps4 = workInProgress.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);\n\n            return mountIncompleteClassComponent(current, workInProgress, _Component2, _resolvedProps4, renderLanes);\n          }\n\n        case SuspenseListComponent:\n          {\n            return updateSuspenseListComponent(current, workInProgress, renderLanes);\n          }\n\n        case ScopeComponent:\n          {\n            break;\n          }\n\n        case OffscreenComponent:\n          {\n            return updateOffscreenComponent(current, workInProgress, renderLanes);\n          }\n      }\n\n      throw new Error(\"Unknown unit of work tag (\" + workInProgress.tag + \"). This error is likely caused by a bug in \" + 'React. Please file an issue.');\n    }\n\n    function unwindWork(current, workInProgress, renderLanes) {\n      // Note: This intentionally doesn't check if we're hydrating because comparing\n      // to the current tree provider fiber is just as fast and less error-prone.\n      // Ideally we would have a special version of the work loop only\n      // for hydration.\n      popTreeContext(workInProgress);\n\n      switch (workInProgress.tag) {\n        case ClassComponent:\n          {\n            var Component = workInProgress.type;\n\n            if (isContextProvider(Component)) {\n              popContext(workInProgress);\n            }\n\n            var flags = workInProgress.flags;\n\n            if (flags & ShouldCapture) {\n              workInProgress.flags = flags & ~ShouldCapture | DidCapture;\n\n              if ((workInProgress.mode & ProfileMode) !== NoMode) {\n                transferActualDuration(workInProgress);\n              }\n\n              return workInProgress;\n            }\n\n            return null;\n          }\n\n        case HostRoot:\n          {\n            popHostContainer(workInProgress);\n            popTopLevelContextObject(workInProgress);\n            resetWorkInProgressVersions();\n            var _flags = workInProgress.flags;\n\n            if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {\n              // There was an error during render that wasn't captured by a suspense\n              // boundary. Do a second pass on the root to unmount the children.\n              workInProgress.flags = _flags & ~ShouldCapture | DidCapture;\n              return workInProgress;\n            } // We unwound to the root without completing it. Exit.\n\n\n            return null;\n          }\n\n        case HostComponent:\n          {\n            // TODO: popHydrationState\n            popHostContext(workInProgress);\n            return null;\n          }\n\n        case SuspenseComponent:\n          {\n            popSuspenseContext(workInProgress);\n            var _flags2 = workInProgress.flags;\n\n            if (_flags2 & ShouldCapture) {\n              workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.\n\n              if ((workInProgress.mode & ProfileMode) !== NoMode) {\n                transferActualDuration(workInProgress);\n              }\n\n              return workInProgress;\n            }\n\n            return null;\n          }\n\n        case SuspenseListComponent:\n          {\n            popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been\n            // caught by a nested boundary. If not, it should bubble through.\n\n            return null;\n          }\n\n        case HostPortal:\n          popHostContainer(workInProgress);\n          return null;\n\n        case ContextProvider:\n          var context = workInProgress.type._context;\n          popProvider(context, workInProgress);\n          return null;\n\n        case OffscreenComponent:\n        case LegacyHiddenComponent:\n          popRenderLanes(workInProgress);\n          return null;\n\n        case CacheComponent:\n          return null;\n\n        default:\n          return null;\n      }\n    }\n\n    function unwindInterruptedWork(current, interruptedWork, renderLanes) {\n      // Note: This intentionally doesn't check if we're hydrating because comparing\n      // to the current tree provider fiber is just as fast and less error-prone.\n      // Ideally we would have a special version of the work loop only\n      // for hydration.\n      popTreeContext(interruptedWork);\n\n      switch (interruptedWork.tag) {\n        case ClassComponent:\n          {\n            var childContextTypes = interruptedWork.type.childContextTypes;\n\n            if (childContextTypes !== null && childContextTypes !== undefined) {\n              popContext(interruptedWork);\n            }\n\n            break;\n          }\n\n        case HostRoot:\n          {\n            popHostContainer(interruptedWork);\n            popTopLevelContextObject(interruptedWork);\n            resetWorkInProgressVersions();\n            break;\n          }\n\n        case HostComponent:\n          {\n            popHostContext(interruptedWork);\n            break;\n          }\n\n        case HostPortal:\n          popHostContainer(interruptedWork);\n          break;\n\n        case SuspenseComponent:\n          popSuspenseContext(interruptedWork);\n          break;\n\n        case SuspenseListComponent:\n          popSuspenseContext(interruptedWork);\n          break;\n\n        case ContextProvider:\n          var context = interruptedWork.type._context;\n          popProvider(context, interruptedWork);\n          break;\n\n        case OffscreenComponent:\n        case LegacyHiddenComponent:\n          popRenderLanes(interruptedWork);\n          break;\n      }\n    }\n\n    function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {\n      var funcArgs = Array.prototype.slice.call(arguments, 3);\n\n      try {\n        func.apply(context, funcArgs);\n      } catch (error) {\n        this.onError(error);\n      }\n    }\n\n    var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;\n    {\n      // In DEV mode, we swap out invokeGuardedCallback for a special version\n      // that plays more nicely with the browser's DevTools. The idea is to preserve\n      // \"Pause on exceptions\" behavior. Because React wraps all user-provided\n      // functions in invokeGuardedCallback, and the production version of\n      // invokeGuardedCallback uses a try-catch, all user exceptions are treated\n      // like caught exceptions, and the DevTools won't pause unless the developer\n      // takes the extra step of enabling pause on caught exceptions. This is\n      // unintuitive, though, because even though React has caught the error, from\n      // the developer's perspective, the error is uncaught.\n      //\n      // To preserve the expected \"Pause on exceptions\" behavior, we don't use a\n      // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake\n      // DOM node, and call the user-provided callback from inside an event handler\n      // for that fake event. If the callback throws, the error is \"captured\" using\n      // a global event handler. But because the error happens in a different\n      // event loop context, it does not interrupt the normal program flow.\n      // Effectively, this gives us try-catch behavior without actually using\n      // try-catch. Neat!\n      // Check that the browser supports the APIs we need to implement our special\n      // DEV version of invokeGuardedCallback\n      if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {\n        var fakeNode = document.createElement('react');\n\n        invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {\n          // If document doesn't exist we know for sure we will crash in this method\n          // when we call document.createEvent(). However this can cause confusing\n          // errors: https://github.com/facebook/create-react-app/issues/3482\n          // So we preemptively throw with a better message instead.\n          if (typeof document === 'undefined' || document === null) {\n            throw new Error('The `document` global was defined when React was initialized, but is not ' + 'defined anymore. This can happen in a test environment if a component ' + 'schedules an update from an asynchronous callback, but the test has already ' + 'finished running. To solve this, you can either unmount the component at ' + 'the end of your test (and ensure that any asynchronous operations get ' + 'canceled in `componentWillUnmount`), or you can change the test itself ' + 'to be asynchronous.');\n          }\n\n          var evt = document.createEvent('Event');\n          var didCall = false; // Keeps track of whether the user-provided callback threw an error. We\n          // set this to true at the beginning, then set it to false right after\n          // calling the function. If the function errors, `didError` will never be\n          // set to false. This strategy works even if the browser is flaky and\n          // fails to call our global error handler, because it doesn't rely on\n          // the error event at all.\n\n          var didError = true; // Keeps track of the value of window.event so that we can reset it\n          // during the callback to let user code access window.event in the\n          // browsers that support it.\n\n          var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event\n          // dispatching: https://github.com/facebook/react/issues/13688\n\n          var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');\n\n          function restoreAfterDispatch() {\n            // We immediately remove the callback from event listeners so that\n            // nested `invokeGuardedCallback` calls do not clash. Otherwise, a\n            // nested call would trigger the fake event handlers of any call higher\n            // in the stack.\n            fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the\n            // window.event assignment in both IE <= 10 as they throw an error\n            // \"Member not found\" in strict mode, and in Firefox which does not\n            // support window.event.\n\n            if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {\n              window.event = windowEvent;\n            }\n          } // Create an event handler for our fake event. We will synchronously\n          // dispatch our fake event using `dispatchEvent`. Inside the handler, we\n          // call the user-provided callback.\n\n\n          var funcArgs = Array.prototype.slice.call(arguments, 3);\n\n          function callCallback() {\n            didCall = true;\n            restoreAfterDispatch();\n            func.apply(context, funcArgs);\n            didError = false;\n          } // Create a global error event handler. We use this to capture the value\n          // that was thrown. It's possible that this error handler will fire more\n          // than once; for example, if non-React code also calls `dispatchEvent`\n          // and a handler for that event throws. We should be resilient to most of\n          // those cases. Even if our error event handler fires more than once, the\n          // last error event is always used. If the callback actually does error,\n          // we know that the last error event is the correct one, because it's not\n          // possible for anything else to have happened in between our callback\n          // erroring and the code that follows the `dispatchEvent` call below. If\n          // the callback doesn't error, but the error event was fired, we know to\n          // ignore it because `didError` will be false, as described above.\n\n\n          var error; // Use this to track whether the error event is ever called.\n\n          var didSetError = false;\n          var isCrossOriginError = false;\n\n          function handleWindowError(event) {\n            error = event.error;\n            didSetError = true;\n\n            if (error === null && event.colno === 0 && event.lineno === 0) {\n              isCrossOriginError = true;\n            }\n\n            if (event.defaultPrevented) {\n              // Some other error handler has prevented default.\n              // Browsers silence the error report if this happens.\n              // We'll remember this to later decide whether to log it or not.\n              if (error != null && typeof error === 'object') {\n                try {\n                  error._suppressLogging = true;\n                } catch (inner) {// Ignore.\n                }\n              }\n            }\n          } // Create a fake event type.\n\n\n          var evtType = \"react-\" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers\n\n          window.addEventListener('error', handleWindowError);\n          fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function\n          // errors, it will trigger our global error handler.\n\n          evt.initEvent(evtType, false, false);\n          fakeNode.dispatchEvent(evt);\n\n          if (windowEventDescriptor) {\n            Object.defineProperty(window, 'event', windowEventDescriptor);\n          }\n\n          if (didCall && didError) {\n            if (!didSetError) {\n              // The callback errored, but the error event never fired.\n              // eslint-disable-next-line react-internal/prod-error-codes\n              error = new Error('An error was thrown inside one of your components, but React ' + \"doesn't know what it was. This is likely due to browser \" + 'flakiness. React does its best to preserve the \"Pause on ' + 'exceptions\" behavior of the DevTools, which requires some ' + \"DEV-mode only tricks. It's possible that these don't work in \" + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');\n            } else if (isCrossOriginError) {\n              // eslint-disable-next-line react-internal/prod-error-codes\n              error = new Error(\"A cross-origin error was thrown. React doesn't have access to \" + 'the actual error object in development. ' + 'See https://reactjs.org/link/crossorigin-error for more information.');\n            }\n\n            this.onError(error);\n          } // Remove our event listeners\n\n\n          window.removeEventListener('error', handleWindowError);\n\n          if (!didCall) {\n            // Something went really wrong, and our event was not dispatched.\n            // https://github.com/facebook/react/issues/16734\n            // https://github.com/facebook/react/issues/16585\n            // Fall back to the production implementation.\n            restoreAfterDispatch();\n            return invokeGuardedCallbackProd.apply(this, arguments);\n          }\n        };\n      }\n    }\n    var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;\n    var hasError = false;\n    var caughtError = null; // Used by event system to capture/rethrow the first error.\n\n    var reporter = {\n      onError: function (error) {\n        hasError = true;\n        caughtError = error;\n      }\n    };\n    /**\n     * Call a function while guarding against errors that happens within it.\n     * Returns an error if it throws, otherwise null.\n     *\n     * In production, this is implemented using a try-catch. The reason we don't\n     * use a try-catch directly is so that we can swap out a different\n     * implementation in DEV mode.\n     *\n     * @param {String} name of the guard to use for logging or debugging\n     * @param {Function} func The function to invoke\n     * @param {*} context The context to use when calling the function\n     * @param {...*} args Arguments for function\n     */\n\n    function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {\n      hasError = false;\n      caughtError = null;\n      invokeGuardedCallbackImpl$1.apply(reporter, arguments);\n    }\n\n    function clearCaughtError() {\n      if (hasError) {\n        var error = caughtError;\n        hasError = false;\n        caughtError = null;\n        return error;\n      } else {\n        throw new Error('clearCaughtError was called but no error was captured. This error ' + 'is likely caused by a bug in React. Please file an issue.');\n      }\n    }\n\n    var didWarnAboutUndefinedSnapshotBeforeUpdate = null;\n    {\n      didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();\n    } // Used during the commit phase to track the state of the Offscreen component stack.\n\n    var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;\n    var nextEffect = null; // Used for Profiling builds to track updaters.\n\n    function reportUncaughtErrorInDEV(error) {\n      // Wrapping each small part of the commit phase into a guarded\n      // callback is a bit too slow (https://github.com/facebook/react/pull/21666).\n      // But we rely on it to surface errors to DEV tools like overlays\n      // (https://github.com/facebook/react/issues/21712).\n      // As a compromise, rethrow only caught errors in a guard.\n      {\n        invokeGuardedCallback(null, function () {\n          throw error;\n        });\n        clearCaughtError();\n      }\n    }\n\n    var callComponentWillUnmountWithTimer = function (current, instance) {\n      instance.props = current.memoizedProps;\n      instance.state = current.memoizedState;\n\n      if (current.mode & ProfileMode) {\n        try {\n          startLayoutEffectTimer();\n          instance.componentWillUnmount();\n        } finally {\n          recordLayoutEffectDuration(current);\n        }\n      } else {\n        instance.componentWillUnmount();\n      }\n    }; // Capture errors so they don't interrupt mounting.\n\n\n    function safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance) {\n      try {\n        callComponentWillUnmountWithTimer(current, instance);\n      } catch (error) {\n        reportUncaughtErrorInDEV(error);\n        captureCommitPhaseError(current, nearestMountedAncestor, error);\n      }\n    } // Capture errors so they don't interrupt mounting.\n\n\n    function safelyDetachRef(current, nearestMountedAncestor) {\n      var ref = current.ref;\n\n      if (ref !== null) {\n        if (typeof ref === 'function') {\n          var retVal;\n\n          try {\n            if (enableProfilerTimer && enableProfilerCommitHooks && current.mode & ProfileMode) {\n              try {\n                startLayoutEffectTimer();\n                retVal = ref(null);\n              } finally {\n                recordLayoutEffectDuration(current);\n              }\n            } else {\n              retVal = ref(null);\n            }\n          } catch (error) {\n            reportUncaughtErrorInDEV(error);\n            captureCommitPhaseError(current, nearestMountedAncestor, error);\n          }\n\n          {\n            if (typeof retVal === 'function') {\n              error('Unexpected return value from a callback ref in %s. ' + 'A callback ref should not return a function.', getComponentNameFromFiber(current));\n            }\n          }\n        } else {\n          ref.current = null;\n        }\n      }\n    }\n\n    function safelyCallDestroy(current, nearestMountedAncestor, destroy) {\n      try {\n        destroy();\n      } catch (error) {\n        reportUncaughtErrorInDEV(error);\n        captureCommitPhaseError(current, nearestMountedAncestor, error);\n      }\n    }\n\n    var focusedInstanceHandle = null;\n    var shouldFireAfterActiveInstanceBlur = false;\n\n    function commitBeforeMutationEffects(root, firstChild) {\n      focusedInstanceHandle = prepareForCommit(root.containerInfo);\n      nextEffect = firstChild;\n      commitBeforeMutationEffects_begin(); // We no longer need to track the active instance fiber\n\n      var shouldFire = shouldFireAfterActiveInstanceBlur;\n      shouldFireAfterActiveInstanceBlur = false;\n      focusedInstanceHandle = null;\n      return shouldFire;\n    }\n\n    function commitBeforeMutationEffects_begin() {\n      while (nextEffect !== null) {\n        var fiber = nextEffect; // This phase is only used for beforeActiveInstanceBlur.\n\n        var child = fiber.child;\n\n        if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {\n          ensureCorrectReturnPointer(child, fiber);\n          nextEffect = child;\n        } else {\n          commitBeforeMutationEffects_complete();\n        }\n      }\n    }\n\n    function commitBeforeMutationEffects_complete() {\n      while (nextEffect !== null) {\n        var fiber = nextEffect;\n        setCurrentFiber(fiber);\n\n        try {\n          commitBeforeMutationEffectsOnFiber(fiber);\n        } catch (error) {\n          reportUncaughtErrorInDEV(error);\n          captureCommitPhaseError(fiber, fiber.return, error);\n        }\n\n        resetCurrentFiber();\n        var sibling = fiber.sibling;\n\n        if (sibling !== null) {\n          ensureCorrectReturnPointer(sibling, fiber.return);\n          nextEffect = sibling;\n          return;\n        }\n\n        nextEffect = fiber.return;\n      }\n    }\n\n    function commitBeforeMutationEffectsOnFiber(finishedWork) {\n      var current = finishedWork.alternate;\n      var flags = finishedWork.flags;\n\n      if ((flags & Snapshot) !== NoFlags) {\n        setCurrentFiber(finishedWork);\n\n        switch (finishedWork.tag) {\n          case FunctionComponent:\n          case ForwardRef:\n          case SimpleMemoComponent:\n            {\n              break;\n            }\n\n          case ClassComponent:\n            {\n              if (current !== null) {\n                var prevProps = current.memoizedProps;\n                var prevState = current.memoizedState;\n                var instance = finishedWork.stateNode; // We could update instance props and state here,\n                // but instead we rely on them being set during last render.\n                // TODO: revisit this when we implement resuming.\n\n                {\n                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n                    if (instance.props !== finishedWork.memoizedProps) {\n                      error('Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                    }\n\n                    if (instance.state !== finishedWork.memoizedState) {\n                      error('Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                    }\n                  }\n                }\n                var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);\n                {\n                  var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;\n\n                  if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {\n                    didWarnSet.add(finishedWork.type);\n                    error('%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentNameFromFiber(finishedWork));\n                  }\n                }\n                instance.__reactInternalSnapshotBeforeUpdate = snapshot;\n              }\n\n              break;\n            }\n\n          case HostRoot:\n            {\n              {\n                var root = finishedWork.stateNode;\n                clearContainer(root.containerInfo);\n              }\n              break;\n            }\n\n          case HostComponent:\n          case HostText:\n          case HostPortal:\n          case IncompleteClassComponent:\n            // Nothing to do for these component types\n            break;\n\n          default:\n            {\n              throw new Error('This unit of work tag should not have side-effects. This error is ' + 'likely caused by a bug in React. Please file an issue.');\n            }\n        }\n\n        resetCurrentFiber();\n      }\n    }\n\n    function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {\n      var updateQueue = finishedWork.updateQueue;\n      var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n\n      if (lastEffect !== null) {\n        var firstEffect = lastEffect.next;\n        var effect = firstEffect;\n\n        do {\n          if ((effect.tag & flags) === flags) {\n            // Unmount\n            var destroy = effect.destroy;\n            effect.destroy = undefined;\n\n            if (destroy !== undefined) {\n              safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);\n            }\n          }\n\n          effect = effect.next;\n        } while (effect !== firstEffect);\n      }\n    }\n\n    function commitHookEffectListMount(flags, finishedWork) {\n      var updateQueue = finishedWork.updateQueue;\n      var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n\n      if (lastEffect !== null) {\n        var firstEffect = lastEffect.next;\n        var effect = firstEffect;\n\n        do {\n          if ((effect.tag & flags) === flags) {\n            var create = effect.create;\n            effect.destroy = create();\n            {\n              var destroy = effect.destroy;\n\n              if (destroy !== undefined && typeof destroy !== 'function') {\n                var hookName = void 0;\n\n                if ((effect.tag & Layout) !== NoFlags) {\n                  hookName = 'useLayoutEffect';\n                } else if ((effect.tag & Insertion) !== NoFlags) {\n                  hookName = 'useInsertionEffect';\n                } else {\n                  hookName = 'useEffect';\n                }\n\n                var addendum = void 0;\n\n                if (destroy === null) {\n                  addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';\n                } else if (typeof destroy.then === 'function') {\n                  addendum = '\\n\\nIt looks like you wrote ' + hookName + '(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\\n\\n' + hookName + '(() => {\\n' + '  async function fetchData() {\\n' + '    // You can await here\\n' + '    const response = await MyAPI.getData(someId);\\n' + '    // ...\\n' + '  }\\n' + '  fetchData();\\n' + \"}, [someId]); // Or [] if effect doesn't need props or state\\n\\n\" + 'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching';\n                } else {\n                  addendum = ' You returned: ' + destroy;\n                }\n\n                error('%s must not return anything besides a function, ' + 'which is used for clean-up.%s', hookName, addendum);\n              }\n            }\n          }\n\n          effect = effect.next;\n        } while (effect !== firstEffect);\n      }\n    }\n\n    function commitPassiveEffectDurations(finishedRoot, finishedWork) {\n      {\n        // Only Profilers with work in their subtree will have an Update effect scheduled.\n        if ((finishedWork.flags & Update) !== NoFlags) {\n          switch (finishedWork.tag) {\n            case Profiler:\n              {\n                var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;\n                var _finishedWork$memoize = finishedWork.memoizedProps,\n                    id = _finishedWork$memoize.id,\n                    onPostCommit = _finishedWork$memoize.onPostCommit; // This value will still reflect the previous commit phase.\n                // It does not get reset until the start of the next commit phase.\n\n                var commitTime = getCommitTime();\n                var phase = finishedWork.alternate === null ? 'mount' : 'update';\n                {\n                  if (isCurrentUpdateNested()) {\n                    phase = 'nested-update';\n                  }\n                }\n\n                if (typeof onPostCommit === 'function') {\n                  onPostCommit(id, phase, passiveEffectDuration, commitTime);\n                } // Bubble times to the next nearest ancestor Profiler.\n                // After we process that Profiler, we'll bubble further up.\n\n\n                var parentFiber = finishedWork.return;\n\n                outer: while (parentFiber !== null) {\n                  switch (parentFiber.tag) {\n                    case HostRoot:\n                      var root = parentFiber.stateNode;\n                      root.passiveEffectDuration += passiveEffectDuration;\n                      break outer;\n\n                    case Profiler:\n                      var parentStateNode = parentFiber.stateNode;\n                      parentStateNode.passiveEffectDuration += passiveEffectDuration;\n                      break outer;\n                  }\n\n                  parentFiber = parentFiber.return;\n                }\n\n                break;\n              }\n          }\n        }\n      }\n    }\n\n    function commitLayoutEffectOnFiber(finishedRoot, current, finishedWork, committedLanes) {\n      if ((finishedWork.flags & LayoutMask) !== NoFlags) {\n        switch (finishedWork.tag) {\n          case FunctionComponent:\n          case ForwardRef:\n          case SimpleMemoComponent:\n            {\n              {\n                // At this point layout effects have already been destroyed (during mutation phase).\n                // This is done to prevent sibling component effects from interfering with each other,\n                // e.g. a destroy function in one component should never override a ref set\n                // by a create function in another component during the same commit.\n                if (finishedWork.mode & ProfileMode) {\n                  try {\n                    startLayoutEffectTimer();\n                    commitHookEffectListMount(Layout | HasEffect, finishedWork);\n                  } finally {\n                    recordLayoutEffectDuration(finishedWork);\n                  }\n                } else {\n                  commitHookEffectListMount(Layout | HasEffect, finishedWork);\n                }\n              }\n              break;\n            }\n\n          case ClassComponent:\n            {\n              var instance = finishedWork.stateNode;\n\n              if (finishedWork.flags & Update) {\n                {\n                  if (current === null) {\n                    // We could update instance props and state here,\n                    // but instead we rely on them being set during last render.\n                    // TODO: revisit this when we implement resuming.\n                    {\n                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n                        if (instance.props !== finishedWork.memoizedProps) {\n                          error('Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                        }\n\n                        if (instance.state !== finishedWork.memoizedState) {\n                          error('Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                        }\n                      }\n                    }\n\n                    if (finishedWork.mode & ProfileMode) {\n                      try {\n                        startLayoutEffectTimer();\n                        instance.componentDidMount();\n                      } finally {\n                        recordLayoutEffectDuration(finishedWork);\n                      }\n                    } else {\n                      instance.componentDidMount();\n                    }\n                  } else {\n                    var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);\n                    var prevState = current.memoizedState; // We could update instance props and state here,\n                    // but instead we rely on them being set during last render.\n                    // TODO: revisit this when we implement resuming.\n\n                    {\n                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n                        if (instance.props !== finishedWork.memoizedProps) {\n                          error('Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                        }\n\n                        if (instance.state !== finishedWork.memoizedState) {\n                          error('Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                        }\n                      }\n                    }\n\n                    if (finishedWork.mode & ProfileMode) {\n                      try {\n                        startLayoutEffectTimer();\n                        instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);\n                      } finally {\n                        recordLayoutEffectDuration(finishedWork);\n                      }\n                    } else {\n                      instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);\n                    }\n                  }\n                }\n              } // TODO: I think this is now always non-null by the time it reaches the\n              // commit phase. Consider removing the type check.\n\n\n              var updateQueue = finishedWork.updateQueue;\n\n              if (updateQueue !== null) {\n                {\n                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n                    if (instance.props !== finishedWork.memoizedProps) {\n                      error('Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                    }\n\n                    if (instance.state !== finishedWork.memoizedState) {\n                      error('Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                    }\n                  }\n                } // We could update instance props and state here,\n                // but instead we rely on them being set during last render.\n                // TODO: revisit this when we implement resuming.\n\n                commitUpdateQueue(finishedWork, updateQueue, instance);\n              }\n\n              break;\n            }\n\n          case HostRoot:\n            {\n              // TODO: I think this is now always non-null by the time it reaches the\n              // commit phase. Consider removing the type check.\n              var _updateQueue = finishedWork.updateQueue;\n\n              if (_updateQueue !== null) {\n                var _instance = null;\n\n                if (finishedWork.child !== null) {\n                  switch (finishedWork.child.tag) {\n                    case HostComponent:\n                      _instance = getPublicInstance(finishedWork.child.stateNode);\n                      break;\n\n                    case ClassComponent:\n                      _instance = finishedWork.child.stateNode;\n                      break;\n                  }\n                }\n\n                commitUpdateQueue(finishedWork, _updateQueue, _instance);\n              }\n\n              break;\n            }\n\n          case HostComponent:\n            {\n              var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted\n              // (eg DOM renderer may schedule auto-focus for inputs and form controls).\n              // These effects should only be committed when components are first mounted,\n              // aka when there is no current/alternate.\n\n              if (current === null && finishedWork.flags & Update) {\n                var type = finishedWork.type;\n                var props = finishedWork.memoizedProps;\n              }\n\n              break;\n            }\n\n          case HostText:\n            {\n              // We have no life-cycles associated with text.\n              break;\n            }\n\n          case HostPortal:\n            {\n              // We have no life-cycles associated with portals.\n              break;\n            }\n\n          case Profiler:\n            {\n              {\n                var _finishedWork$memoize2 = finishedWork.memoizedProps,\n                    onCommit = _finishedWork$memoize2.onCommit,\n                    onRender = _finishedWork$memoize2.onRender;\n                var effectDuration = finishedWork.stateNode.effectDuration;\n                var commitTime = getCommitTime();\n                var phase = current === null ? 'mount' : 'update';\n                {\n                  if (isCurrentUpdateNested()) {\n                    phase = 'nested-update';\n                  }\n                }\n\n                if (typeof onRender === 'function') {\n                  onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime);\n                }\n\n                {\n                  if (typeof onCommit === 'function') {\n                    onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime);\n                  } // Schedule a passive effect for this Profiler to call onPostCommit hooks.\n                  // This effect should be scheduled even if there is no onPostCommit callback for this Profiler,\n                  // because the effect is also where times bubble to parent Profilers.\n\n\n                  enqueuePendingPassiveProfilerEffect(finishedWork); // Propagate layout effect durations to the next nearest Profiler ancestor.\n                  // Do not reset these values until the next render so DevTools has a chance to read them first.\n\n                  var parentFiber = finishedWork.return;\n\n                  outer: while (parentFiber !== null) {\n                    switch (parentFiber.tag) {\n                      case HostRoot:\n                        var root = parentFiber.stateNode;\n                        root.effectDuration += effectDuration;\n                        break outer;\n\n                      case Profiler:\n                        var parentStateNode = parentFiber.stateNode;\n                        parentStateNode.effectDuration += effectDuration;\n                        break outer;\n                    }\n\n                    parentFiber = parentFiber.return;\n                  }\n                }\n              }\n              break;\n            }\n\n          case SuspenseComponent:\n            {\n              break;\n            }\n\n          case SuspenseListComponent:\n          case IncompleteClassComponent:\n          case ScopeComponent:\n          case OffscreenComponent:\n          case LegacyHiddenComponent:\n            {\n              break;\n            }\n\n          default:\n            throw new Error('This unit of work tag should not have side-effects. This error is ' + 'likely caused by a bug in React. Please file an issue.');\n        }\n      }\n\n      {\n        {\n          if (finishedWork.flags & Ref) {\n            commitAttachRef(finishedWork);\n          }\n        }\n      }\n    }\n\n    function hideOrUnhideAllChildren(finishedWork, isHidden) {\n      // Only hide or unhide the top-most host nodes.\n      var hostSubtreeRoot = null;\n      {\n        // We only have the top Fiber that was inserted but we need to recurse down its\n        // children to find all the terminal nodes.\n        var node = finishedWork;\n\n        while (true) {\n          if (node.tag === HostComponent) {\n            if (hostSubtreeRoot === null) {\n              hostSubtreeRoot = node;\n              var instance = node.stateNode;\n\n              if (isHidden) {\n                hideInstance(instance);\n              } else {\n                unhideInstance(node.stateNode, node.memoizedProps);\n              }\n            }\n          } else if (node.tag === HostText) {\n            if (hostSubtreeRoot === null) {\n              var _instance3 = node.stateNode;\n\n              if (isHidden) {\n                hideTextInstance(_instance3);\n              } else {\n                unhideTextInstance(_instance3, node.memoizedProps);\n              }\n            }\n          } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ;else if (node.child !== null) {\n            node.child.return = node;\n            node = node.child;\n            continue;\n          }\n\n          if (node === finishedWork) {\n            return;\n          }\n\n          while (node.sibling === null) {\n            if (node.return === null || node.return === finishedWork) {\n              return;\n            }\n\n            if (hostSubtreeRoot === node) {\n              hostSubtreeRoot = null;\n            }\n\n            node = node.return;\n          }\n\n          if (hostSubtreeRoot === node) {\n            hostSubtreeRoot = null;\n          }\n\n          node.sibling.return = node.return;\n          node = node.sibling;\n        }\n      }\n    }\n\n    function commitAttachRef(finishedWork) {\n      var ref = finishedWork.ref;\n\n      if (ref !== null) {\n        var instance = finishedWork.stateNode;\n        var instanceToUse;\n\n        switch (finishedWork.tag) {\n          case HostComponent:\n            instanceToUse = getPublicInstance(instance);\n            break;\n\n          default:\n            instanceToUse = instance;\n        } // Moved outside to ensure DCE works with this flag\n\n\n        if (typeof ref === 'function') {\n          var retVal;\n\n          if (finishedWork.mode & ProfileMode) {\n            try {\n              startLayoutEffectTimer();\n              retVal = ref(instanceToUse);\n            } finally {\n              recordLayoutEffectDuration(finishedWork);\n            }\n          } else {\n            retVal = ref(instanceToUse);\n          }\n\n          {\n            if (typeof retVal === 'function') {\n              error('Unexpected return value from a callback ref in %s. ' + 'A callback ref should not return a function.', getComponentNameFromFiber(finishedWork));\n            }\n          }\n        } else {\n          {\n            if (!ref.hasOwnProperty('current')) {\n              error('Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().', getComponentNameFromFiber(finishedWork));\n            }\n          }\n          ref.current = instanceToUse;\n        }\n      }\n    }\n\n    function commitDetachRef(current) {\n      var currentRef = current.ref;\n\n      if (currentRef !== null) {\n        if (typeof currentRef === 'function') {\n          if (current.mode & ProfileMode) {\n            try {\n              startLayoutEffectTimer();\n              currentRef(null);\n            } finally {\n              recordLayoutEffectDuration(current);\n            }\n          } else {\n            currentRef(null);\n          }\n        } else {\n          currentRef.current = null;\n        }\n      }\n    } // User-originating errors (lifecycles and refs) should not interrupt\n    // deletion, so don't let them throw. Host-originating errors should\n    // interrupt deletion, so it's okay\n\n\n    function commitUnmount(finishedRoot, current, nearestMountedAncestor) {\n      onCommitUnmount(current);\n\n      switch (current.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case MemoComponent:\n        case SimpleMemoComponent:\n          {\n            var updateQueue = current.updateQueue;\n\n            if (updateQueue !== null) {\n              var lastEffect = updateQueue.lastEffect;\n\n              if (lastEffect !== null) {\n                var firstEffect = lastEffect.next;\n                var effect = firstEffect;\n\n                do {\n                  var _effect = effect,\n                      destroy = _effect.destroy,\n                      tag = _effect.tag;\n\n                  if (destroy !== undefined) {\n                    if ((tag & Insertion) !== NoFlags$1) {\n                      safelyCallDestroy(current, nearestMountedAncestor, destroy);\n                    } else if ((tag & Layout) !== NoFlags$1) {\n                      if (current.mode & ProfileMode) {\n                        startLayoutEffectTimer();\n                        safelyCallDestroy(current, nearestMountedAncestor, destroy);\n                        recordLayoutEffectDuration(current);\n                      } else {\n                        safelyCallDestroy(current, nearestMountedAncestor, destroy);\n                      }\n                    }\n                  }\n\n                  effect = effect.next;\n                } while (effect !== firstEffect);\n              }\n            }\n\n            return;\n          }\n\n        case ClassComponent:\n          {\n            safelyDetachRef(current, nearestMountedAncestor);\n            var instance = current.stateNode;\n\n            if (typeof instance.componentWillUnmount === 'function') {\n              safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance);\n            }\n\n            return;\n          }\n\n        case HostComponent:\n          {\n            safelyDetachRef(current, nearestMountedAncestor);\n            return;\n          }\n\n        case HostPortal:\n          {\n            // TODO: this is recursive.\n            // We are also not using this parent because\n            // the portal will get pushed immediately.\n            {\n              unmountHostComponents(finishedRoot, current, nearestMountedAncestor);\n            }\n            return;\n          }\n\n        case DehydratedFragment:\n          {\n            return;\n          }\n\n        case ScopeComponent:\n          {\n            return;\n          }\n      }\n    }\n\n    function commitNestedUnmounts(finishedRoot, root, nearestMountedAncestor) {\n      // While we're inside a removed host node we don't want to call\n      // removeChild on the inner nodes because they're removed by the top\n      // call anyway. We also want to call componentWillUnmount on all\n      // composites before this host node is removed from the tree. Therefore\n      // we do an inner loop while we're still inside the host node.\n      var node = root;\n\n      while (true) {\n        commitUnmount(finishedRoot, node, nearestMountedAncestor); // Visit children because they may contain more composite or host nodes.\n        // Skip portals because commitUnmount() currently visits them recursively.\n\n        if (node.child !== null && // If we use mutation we drill down into portals using commitUnmount above.\n        // If we don't use mutation we drill down into portals here instead.\n        node.tag !== HostPortal) {\n          node.child.return = node;\n          node = node.child;\n          continue;\n        }\n\n        if (node === root) {\n          return;\n        }\n\n        while (node.sibling === null) {\n          if (node.return === null || node.return === root) {\n            return;\n          }\n\n          node = node.return;\n        }\n\n        node.sibling.return = node.return;\n        node = node.sibling;\n      }\n    }\n\n    function detachFiberMutation(fiber) {\n      // Cut off the return pointer to disconnect it from the tree.\n      // This enables us to detect and warn against state updates on an unmounted component.\n      // It also prevents events from bubbling from within disconnected components.\n      //\n      // Ideally, we should also clear the child pointer of the parent alternate to let this\n      // get GC:ed but we don't know which for sure which parent is the current\n      // one so we'll settle for GC:ing the subtree of this child.\n      // This child itself will be GC:ed when the parent updates the next time.\n      //\n      // Note that we can't clear child or sibling pointers yet.\n      // They're needed for passive effects and for findDOMNode.\n      // We defer those fields, and all other cleanup, to the passive phase (see detachFiberAfterEffects).\n      //\n      // Don't reset the alternate yet, either. We need that so we can detach the\n      // alternate's fields in the passive phase. Clearing the return pointer is\n      // sufficient for findDOMNode semantics.\n      var alternate = fiber.alternate;\n\n      if (alternate !== null) {\n        alternate.return = null;\n      }\n\n      fiber.return = null;\n    }\n\n    function detachFiberAfterEffects(fiber) {\n      var alternate = fiber.alternate;\n\n      if (alternate !== null) {\n        fiber.alternate = null;\n        detachFiberAfterEffects(alternate);\n      } // Note: Defensively using negation instead of < in case\n      // `deletedTreeCleanUpLevel` is undefined.\n\n\n      {\n        // Clear cyclical Fiber fields. This level alone is designed to roughly\n        // approximate the planned Fiber refactor. In that world, `setState` will be\n        // bound to a special \"instance\" object instead of a Fiber. The Instance\n        // object will not have any of these fields. It will only be connected to\n        // the fiber tree via a single link at the root. So if this level alone is\n        // sufficient to fix memory issues, that bodes well for our plans.\n        fiber.child = null;\n        fiber.deletions = null;\n        fiber.sibling = null; // The `stateNode` is cyclical because on host nodes it points to the host\n        // tree, which has its own pointers to children, parents, and siblings.\n        // The other host nodes also point back to fibers, so we should detach that\n        // one, too.\n\n        if (fiber.tag === HostComponent) {\n          var hostInstance = fiber.stateNode;\n        }\n\n        fiber.stateNode = null; // I'm intentionally not clearing the `return` field in this level. We\n        // already disconnect the `return` pointer at the root of the deleted\n        // subtree (in `detachFiberMutation`). Besides, `return` by itself is not\n        // cyclical — it's only cyclical when combined with `child`, `sibling`, and\n        // `alternate`. But we'll clear it in the next level anyway, just in case.\n\n        {\n          fiber._debugOwner = null;\n        }\n        {\n          // Theoretically, nothing in here should be necessary, because we already\n          // disconnected the fiber from the tree. So even if something leaks this\n          // particular fiber, it won't leak anything else\n          //\n          // The purpose of this branch is to be super aggressive so we can measure\n          // if there's any difference in memory impact. If there is, that could\n          // indicate a React leak we don't know about.\n          fiber.return = null;\n          fiber.dependencies = null;\n          fiber.memoizedProps = null;\n          fiber.memoizedState = null;\n          fiber.pendingProps = null;\n          fiber.stateNode = null; // TODO: Move to `commitPassiveUnmountInsideDeletedTreeOnFiber` instead.\n\n          fiber.updateQueue = null;\n        }\n      }\n    }\n\n    function getHostParentFiber(fiber) {\n      var parent = fiber.return;\n\n      while (parent !== null) {\n        if (isHostParent(parent)) {\n          return parent;\n        }\n\n        parent = parent.return;\n      }\n\n      throw new Error('Expected to find a host parent. This error is likely caused by a bug ' + 'in React. Please file an issue.');\n    }\n\n    function isHostParent(fiber) {\n      return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;\n    }\n\n    function getHostSibling(fiber) {\n      // We're going to search forward into the tree until we find a sibling host\n      // node. Unfortunately, if multiple insertions are done in a row we have to\n      // search past them. This leads to exponential search for the next sibling.\n      // TODO: Find a more efficient way to do this.\n      var node = fiber;\n\n      siblings: while (true) {\n        // If we didn't find anything, let's try the next sibling.\n        while (node.sibling === null) {\n          if (node.return === null || isHostParent(node.return)) {\n            // If we pop out of the root or hit the parent the fiber we are the\n            // last sibling.\n            return null;\n          }\n\n          node = node.return;\n        }\n\n        node.sibling.return = node.return;\n        node = node.sibling;\n\n        while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {\n          // If it is not host node and, we might have a host node inside it.\n          // Try to search down until we find one.\n          if (node.flags & Placement) {\n            // If we don't have a child, try the siblings instead.\n            continue siblings;\n          } // If we don't have a child, try the siblings instead.\n          // We also skip portals because they are not part of this host tree.\n\n\n          if (node.child === null || node.tag === HostPortal) {\n            continue siblings;\n          } else {\n            node.child.return = node;\n            node = node.child;\n          }\n        } // Check if this host node is stable or about to be placed.\n\n\n        if (!(node.flags & Placement)) {\n          // Found it!\n          return node.stateNode;\n        }\n      }\n    }\n\n    function commitPlacement(finishedWork) {\n      var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.\n\n      switch (parentFiber.tag) {\n        case HostComponent:\n          {\n            var parent = parentFiber.stateNode;\n\n            if (parentFiber.flags & ContentReset) {\n              parentFiber.flags &= ~ContentReset;\n            }\n\n            var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its\n            // children to find all the terminal nodes.\n\n            insertOrAppendPlacementNode(finishedWork, before, parent);\n            break;\n          }\n\n        case HostRoot:\n        case HostPortal:\n          {\n            var _parent = parentFiber.stateNode.containerInfo;\n\n            var _before = getHostSibling(finishedWork);\n\n            insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);\n            break;\n          }\n        // eslint-disable-next-line-no-fallthrough\n\n        default:\n          throw new Error('Invalid host parent fiber. This error is likely caused by a bug ' + 'in React. Please file an issue.');\n      }\n    }\n\n    function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {\n      var tag = node.tag;\n      var isHost = tag === HostComponent || tag === HostText;\n\n      if (isHost) {\n        var stateNode = node.stateNode;\n\n        if (before) {\n          insertInContainerBefore(parent, stateNode, before);\n        } else {\n          appendChildToContainer(parent, stateNode);\n        }\n      } else if (tag === HostPortal) ;else {\n        var child = node.child;\n\n        if (child !== null) {\n          insertOrAppendPlacementNodeIntoContainer(child, before, parent);\n          var sibling = child.sibling;\n\n          while (sibling !== null) {\n            insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);\n            sibling = sibling.sibling;\n          }\n        }\n      }\n    }\n\n    function insertOrAppendPlacementNode(node, before, parent) {\n      var tag = node.tag;\n      var isHost = tag === HostComponent || tag === HostText;\n\n      if (isHost) {\n        var stateNode = node.stateNode;\n\n        if (before) {\n          insertBefore(parent, stateNode, before);\n        } else {\n          appendChild(parent, stateNode);\n        }\n      } else if (tag === HostPortal) ;else {\n        var child = node.child;\n\n        if (child !== null) {\n          insertOrAppendPlacementNode(child, before, parent);\n          var sibling = child.sibling;\n\n          while (sibling !== null) {\n            insertOrAppendPlacementNode(sibling, before, parent);\n            sibling = sibling.sibling;\n          }\n        }\n      }\n    }\n\n    function unmountHostComponents(finishedRoot, current, nearestMountedAncestor) {\n      // We only have the top Fiber that was deleted but we need to recurse down its\n      // children to find all the terminal nodes.\n      var node = current; // Each iteration, currentParent is populated with node's host parent if not\n      // currentParentIsValid.\n\n      var currentParentIsValid = false; // Note: these two variables *must* always be updated together.\n\n      var currentParent;\n      var currentParentIsContainer;\n\n      while (true) {\n        if (!currentParentIsValid) {\n          var parent = node.return;\n\n          findParent: while (true) {\n            if (parent === null) {\n              throw new Error('Expected to find a host parent. This error is likely caused by ' + 'a bug in React. Please file an issue.');\n            }\n\n            var parentStateNode = parent.stateNode;\n\n            switch (parent.tag) {\n              case HostComponent:\n                currentParent = parentStateNode;\n                currentParentIsContainer = false;\n                break findParent;\n\n              case HostRoot:\n                currentParent = parentStateNode.containerInfo;\n                currentParentIsContainer = true;\n                break findParent;\n\n              case HostPortal:\n                currentParent = parentStateNode.containerInfo;\n                currentParentIsContainer = true;\n                break findParent;\n            }\n\n            parent = parent.return;\n          }\n\n          currentParentIsValid = true;\n        }\n\n        if (node.tag === HostComponent || node.tag === HostText) {\n          commitNestedUnmounts(finishedRoot, node, nearestMountedAncestor); // After all the children have unmounted, it is now safe to remove the\n          // node from the tree.\n\n          if (currentParentIsContainer) {\n            removeChildFromContainer(currentParent, node.stateNode);\n          } else {\n            removeChild(currentParent, node.stateNode);\n          } // Don't visit children because we already visited them.\n\n        } else if (node.tag === HostPortal) {\n          if (node.child !== null) {\n            // When we go into a portal, it becomes the parent to remove from.\n            // We will reassign it back when we pop the portal on the way up.\n            currentParent = node.stateNode.containerInfo;\n            currentParentIsContainer = true; // Visit children because portals might contain host components.\n\n            node.child.return = node;\n            node = node.child;\n            continue;\n          }\n        } else {\n          commitUnmount(finishedRoot, node, nearestMountedAncestor); // Visit children because we may find more host components below.\n\n          if (node.child !== null) {\n            node.child.return = node;\n            node = node.child;\n            continue;\n          }\n        }\n\n        if (node === current) {\n          return;\n        }\n\n        while (node.sibling === null) {\n          if (node.return === null || node.return === current) {\n            return;\n          }\n\n          node = node.return;\n\n          if (node.tag === HostPortal) {\n            // When we go out of the portal, we need to restore the parent.\n            // Since we don't keep a stack of them, we will search for it.\n            currentParentIsValid = false;\n          }\n        }\n\n        node.sibling.return = node.return;\n        node = node.sibling;\n      }\n    }\n\n    function commitDeletion(finishedRoot, current, nearestMountedAncestor) {\n      {\n        // Recursively delete all host nodes from the parent.\n        // Detach refs and call componentWillUnmount() on the whole subtree.\n        unmountHostComponents(finishedRoot, current, nearestMountedAncestor);\n      }\n      detachFiberMutation(current);\n    }\n\n    function commitWork(current, finishedWork) {\n      switch (finishedWork.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case MemoComponent:\n        case SimpleMemoComponent:\n          {\n            commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);\n            commitHookEffectListMount(Insertion | HasEffect, finishedWork); // Layout effects are destroyed during the mutation phase so that all\n            // destroy functions for all fibers are called before any create functions.\n            // This prevents sibling component effects from interfering with each other,\n            // e.g. a destroy function in one component should never override a ref set\n            // by a create function in another component during the same commit.\n\n            if (finishedWork.mode & ProfileMode) {\n              try {\n                startLayoutEffectTimer();\n                commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);\n              } finally {\n                recordLayoutEffectDuration(finishedWork);\n              }\n            } else {\n              commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);\n            }\n\n            return;\n          }\n\n        case ClassComponent:\n          {\n            return;\n          }\n\n        case HostComponent:\n          {\n            var instance = finishedWork.stateNode;\n\n            if (instance != null) {\n              // Commit the work prepared earlier.\n              var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps\n              // as the newProps. The updatePayload will contain the real change in\n              // this case.\n\n              var oldProps = current !== null ? current.memoizedProps : newProps;\n              var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.\n\n              var updatePayload = finishedWork.updateQueue;\n              finishedWork.updateQueue = null;\n\n              if (updatePayload !== null) {\n                commitUpdate(instance, updatePayload, type, oldProps, newProps);\n              }\n            }\n\n            return;\n          }\n\n        case HostText:\n          {\n            if (finishedWork.stateNode === null) {\n              throw new Error('This should have a text node initialized. This error is likely ' + 'caused by a bug in React. Please file an issue.');\n            }\n\n            var textInstance = finishedWork.stateNode;\n            var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps\n            // as the newProps. The updatePayload will contain the real change in\n            // this case.\n\n            var oldText = current !== null ? current.memoizedProps : newText;\n            commitTextUpdate(textInstance, oldText, newText);\n            return;\n          }\n\n        case HostRoot:\n          {\n            return;\n          }\n\n        case Profiler:\n          {\n            return;\n          }\n\n        case SuspenseComponent:\n          {\n            commitSuspenseCallback(finishedWork);\n            attachSuspenseRetryListeners(finishedWork);\n            return;\n          }\n\n        case SuspenseListComponent:\n          {\n            attachSuspenseRetryListeners(finishedWork);\n            return;\n          }\n\n        case IncompleteClassComponent:\n          {\n            return;\n          }\n      }\n\n      throw new Error('This unit of work tag should not have side-effects. This error is ' + 'likely caused by a bug in React. Please file an issue.');\n    }\n\n    function commitSuspenseCallback(finishedWork) {\n      // TODO: Move this to passive phase\n      var newState = finishedWork.memoizedState;\n    }\n\n    function attachSuspenseRetryListeners(finishedWork) {\n      // If this boundary just timed out, then it will have a set of wakeables.\n      // For each wakeable, attach a listener so that when it resolves, React\n      // attempts to re-render the boundary in the primary (pre-timeout) state.\n      var wakeables = finishedWork.updateQueue;\n\n      if (wakeables !== null) {\n        finishedWork.updateQueue = null;\n        var retryCache = finishedWork.stateNode;\n\n        if (retryCache === null) {\n          retryCache = finishedWork.stateNode = new PossiblyWeakSet();\n        }\n\n        wakeables.forEach(function (wakeable) {\n          // Memoize using the boundary fiber to prevent redundant listeners.\n          var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);\n\n          if (!retryCache.has(wakeable)) {\n            retryCache.add(wakeable);\n            wakeable.then(retry, retry);\n          }\n        });\n      }\n    } // This function detects when a Suspense boundary goes from visible to hidden.\n\n\n    function commitResetTextContent(current) {\n      resetTextContent(current.stateNode);\n    }\n\n    function commitMutationEffects(root, firstChild, committedLanes) {\n      nextEffect = firstChild;\n      commitMutationEffects_begin(root, committedLanes);\n    }\n\n    function commitMutationEffects_begin(root, lanes) {\n      while (nextEffect !== null) {\n        var fiber = nextEffect; // TODO: Should wrap this in flags check, too, as optimization\n\n        var deletions = fiber.deletions;\n\n        if (deletions !== null) {\n          for (var i = 0; i < deletions.length; i++) {\n            var childToDelete = deletions[i];\n\n            try {\n              commitDeletion(root, childToDelete, fiber);\n            } catch (error) {\n              reportUncaughtErrorInDEV(error);\n              captureCommitPhaseError(childToDelete, fiber, error);\n            }\n          }\n        }\n\n        var child = fiber.child;\n\n        if ((fiber.subtreeFlags & MutationMask) !== NoFlags && child !== null) {\n          ensureCorrectReturnPointer(child, fiber);\n          nextEffect = child;\n        } else {\n          commitMutationEffects_complete(root, lanes);\n        }\n      }\n    }\n\n    function commitMutationEffects_complete(root, lanes) {\n      while (nextEffect !== null) {\n        var fiber = nextEffect;\n        setCurrentFiber(fiber);\n\n        try {\n          commitMutationEffectsOnFiber(fiber, root, lanes);\n        } catch (error) {\n          reportUncaughtErrorInDEV(error);\n          captureCommitPhaseError(fiber, fiber.return, error);\n        }\n\n        resetCurrentFiber();\n        var sibling = fiber.sibling;\n\n        if (sibling !== null) {\n          ensureCorrectReturnPointer(sibling, fiber.return);\n          nextEffect = sibling;\n          return;\n        }\n\n        nextEffect = fiber.return;\n      }\n    }\n\n    function commitMutationEffectsOnFiber(finishedWork, root, lanes) {\n      // TODO: The factoring of this phase could probably be improved. Consider\n      // switching on the type of work before checking the flags. That's what\n      // we do in all the other phases. I think this one is only different\n      // because of the shared reconciliation logic below.\n      var flags = finishedWork.flags;\n\n      if (flags & ContentReset) {\n        commitResetTextContent(finishedWork);\n      }\n\n      if (flags & Ref) {\n        var current = finishedWork.alternate;\n\n        if (current !== null) {\n          commitDetachRef(current);\n        }\n      }\n\n      if (flags & Visibility) {\n        switch (finishedWork.tag) {\n          case SuspenseComponent:\n            {\n              var newState = finishedWork.memoizedState;\n              var isHidden = newState !== null;\n\n              if (isHidden) {\n                var _current = finishedWork.alternate;\n                var wasHidden = _current !== null && _current.memoizedState !== null;\n\n                if (!wasHidden) {\n                  // TODO: Move to passive phase\n                  markCommitTimeOfFallback();\n                }\n              }\n\n              break;\n            }\n\n          case OffscreenComponent:\n            {\n              var _newState = finishedWork.memoizedState;\n\n              var _isHidden = _newState !== null;\n\n              var _current2 = finishedWork.alternate;\n\n              var _wasHidden = _current2 !== null && _current2.memoizedState !== null;\n\n              var offscreenBoundary = finishedWork;\n              {\n                // TODO: This needs to run whenever there's an insertion or update\n                // inside a hidden Offscreen tree.\n                hideOrUnhideAllChildren(offscreenBoundary, _isHidden);\n              }\n            }\n        }\n      } // The following switch statement is only concerned about placement,\n      // updates, and deletions. To avoid needing to add a case for every possible\n      // bitmap value, we remove the secondary effects from the effect tag and\n      // switch on that value.\n\n\n      var primaryFlags = flags & (Placement | Update | Hydrating);\n\n      switch (primaryFlags) {\n        case Placement:\n          {\n            commitPlacement(finishedWork); // Clear the \"placement\" from effect tag so that we know that this is\n            // inserted, before any life-cycles like componentDidMount gets called.\n            // TODO: findDOMNode doesn't rely on this any more but isMounted does\n            // and isMounted is deprecated anyway so we should be able to kill this.\n\n            finishedWork.flags &= ~Placement;\n            break;\n          }\n\n        case PlacementAndUpdate:\n          {\n            // Placement\n            commitPlacement(finishedWork); // Clear the \"placement\" from effect tag so that we know that this is\n            // inserted, before any life-cycles like componentDidMount gets called.\n\n            finishedWork.flags &= ~Placement; // Update\n\n            var _current3 = finishedWork.alternate;\n            commitWork(_current3, finishedWork);\n            break;\n          }\n\n        case Hydrating:\n          {\n            finishedWork.flags &= ~Hydrating;\n            break;\n          }\n\n        case HydratingAndUpdate:\n          {\n            finishedWork.flags &= ~Hydrating; // Update\n\n            var _current4 = finishedWork.alternate;\n            commitWork(_current4, finishedWork);\n            break;\n          }\n\n        case Update:\n          {\n            var _current5 = finishedWork.alternate;\n            commitWork(_current5, finishedWork);\n            break;\n          }\n      }\n    }\n\n    function commitLayoutEffects(finishedWork, root, committedLanes) {\n      nextEffect = finishedWork;\n      commitLayoutEffects_begin(finishedWork, root, committedLanes);\n    }\n\n    function commitLayoutEffects_begin(subtreeRoot, root, committedLanes) {\n      // Suspense layout effects semantics don't change for legacy roots.\n      var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;\n\n      while (nextEffect !== null) {\n        var fiber = nextEffect;\n        var firstChild = fiber.child;\n\n        if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {\n          ensureCorrectReturnPointer(firstChild, fiber);\n          nextEffect = firstChild;\n        } else {\n          commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\n        }\n      }\n    }\n\n    function commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes) {\n      while (nextEffect !== null) {\n        var fiber = nextEffect;\n\n        if ((fiber.flags & LayoutMask) !== NoFlags) {\n          var current = fiber.alternate;\n          setCurrentFiber(fiber);\n\n          try {\n            commitLayoutEffectOnFiber(root, current, fiber, committedLanes);\n          } catch (error) {\n            reportUncaughtErrorInDEV(error);\n            captureCommitPhaseError(fiber, fiber.return, error);\n          }\n\n          resetCurrentFiber();\n        }\n\n        if (fiber === subtreeRoot) {\n          nextEffect = null;\n          return;\n        }\n\n        var sibling = fiber.sibling;\n\n        if (sibling !== null) {\n          ensureCorrectReturnPointer(sibling, fiber.return);\n          nextEffect = sibling;\n          return;\n        }\n\n        nextEffect = fiber.return;\n      }\n    }\n\n    function commitPassiveMountEffects(root, finishedWork) {\n      nextEffect = finishedWork;\n      commitPassiveMountEffects_begin(finishedWork, root);\n    }\n\n    function commitPassiveMountEffects_begin(subtreeRoot, root) {\n      while (nextEffect !== null) {\n        var fiber = nextEffect;\n        var firstChild = fiber.child;\n\n        if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {\n          ensureCorrectReturnPointer(firstChild, fiber);\n          nextEffect = firstChild;\n        } else {\n          commitPassiveMountEffects_complete(subtreeRoot, root);\n        }\n      }\n    }\n\n    function commitPassiveMountEffects_complete(subtreeRoot, root) {\n      while (nextEffect !== null) {\n        var fiber = nextEffect;\n\n        if ((fiber.flags & Passive) !== NoFlags) {\n          setCurrentFiber(fiber);\n\n          try {\n            commitPassiveMountOnFiber(root, fiber);\n          } catch (error) {\n            reportUncaughtErrorInDEV(error);\n            captureCommitPhaseError(fiber, fiber.return, error);\n          }\n\n          resetCurrentFiber();\n        }\n\n        if (fiber === subtreeRoot) {\n          nextEffect = null;\n          return;\n        }\n\n        var sibling = fiber.sibling;\n\n        if (sibling !== null) {\n          ensureCorrectReturnPointer(sibling, fiber.return);\n          nextEffect = sibling;\n          return;\n        }\n\n        nextEffect = fiber.return;\n      }\n    }\n\n    function commitPassiveMountOnFiber(finishedRoot, finishedWork) {\n      switch (finishedWork.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent:\n          {\n            if (finishedWork.mode & ProfileMode) {\n              startPassiveEffectTimer();\n\n              try {\n                commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);\n              } finally {\n                recordPassiveEffectDuration(finishedWork);\n              }\n            } else {\n              commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);\n            }\n\n            break;\n          }\n      }\n    }\n\n    function commitPassiveUnmountEffects(firstChild) {\n      nextEffect = firstChild;\n      commitPassiveUnmountEffects_begin();\n    }\n\n    function commitPassiveUnmountEffects_begin() {\n      while (nextEffect !== null) {\n        var fiber = nextEffect;\n        var child = fiber.child;\n\n        if ((nextEffect.flags & ChildDeletion) !== NoFlags) {\n          var deletions = fiber.deletions;\n\n          if (deletions !== null) {\n            for (var i = 0; i < deletions.length; i++) {\n              var fiberToDelete = deletions[i];\n              nextEffect = fiberToDelete;\n              commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);\n            }\n\n            {\n              // A fiber was deleted from this parent fiber, but it's still part of\n              // the previous (alternate) parent fiber's list of children. Because\n              // children are a linked list, an earlier sibling that's still alive\n              // will be connected to the deleted fiber via its `alternate`:\n              //\n              //   live fiber\n              //   --alternate--> previous live fiber\n              //   --sibling--> deleted fiber\n              //\n              // We can't disconnect `alternate` on nodes that haven't been deleted\n              // yet, but we can disconnect the `sibling` and `child` pointers.\n              var previousFiber = fiber.alternate;\n\n              if (previousFiber !== null) {\n                var detachedChild = previousFiber.child;\n\n                if (detachedChild !== null) {\n                  previousFiber.child = null;\n\n                  do {\n                    var detachedSibling = detachedChild.sibling;\n                    detachedChild.sibling = null;\n                    detachedChild = detachedSibling;\n                  } while (detachedChild !== null);\n                }\n              }\n            }\n            nextEffect = fiber;\n          }\n        }\n\n        if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {\n          ensureCorrectReturnPointer(child, fiber);\n          nextEffect = child;\n        } else {\n          commitPassiveUnmountEffects_complete();\n        }\n      }\n    }\n\n    function commitPassiveUnmountEffects_complete() {\n      while (nextEffect !== null) {\n        var fiber = nextEffect;\n\n        if ((fiber.flags & Passive) !== NoFlags) {\n          setCurrentFiber(fiber);\n          commitPassiveUnmountOnFiber(fiber);\n          resetCurrentFiber();\n        }\n\n        var sibling = fiber.sibling;\n\n        if (sibling !== null) {\n          ensureCorrectReturnPointer(sibling, fiber.return);\n          nextEffect = sibling;\n          return;\n        }\n\n        nextEffect = fiber.return;\n      }\n    }\n\n    function commitPassiveUnmountOnFiber(finishedWork) {\n      switch (finishedWork.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent:\n          {\n            if (finishedWork.mode & ProfileMode) {\n              startPassiveEffectTimer();\n              commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);\n              recordPassiveEffectDuration(finishedWork);\n            } else {\n              commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);\n            }\n\n            break;\n          }\n      }\n    }\n\n    function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {\n      while (nextEffect !== null) {\n        var fiber = nextEffect; // Deletion effects fire in parent -> child order\n        // TODO: Check if fiber has a PassiveStatic flag\n\n        setCurrentFiber(fiber);\n        commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);\n        resetCurrentFiber();\n        var child = fiber.child; // TODO: Only traverse subtree if it has a PassiveStatic flag. (But, if we\n        // do this, still need to handle `deletedTreeCleanUpLevel` correctly.)\n\n        if (child !== null) {\n          ensureCorrectReturnPointer(child, fiber);\n          nextEffect = child;\n        } else {\n          commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);\n        }\n      }\n    }\n\n    function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {\n      while (nextEffect !== null) {\n        var fiber = nextEffect;\n        var sibling = fiber.sibling;\n        var returnFiber = fiber.return;\n        {\n          // Recursively traverse the entire deleted tree and clean up fiber fields.\n          // This is more aggressive than ideal, and the long term goal is to only\n          // have to detach the deleted tree at the root.\n          detachFiberAfterEffects(fiber);\n\n          if (fiber === deletedSubtreeRoot) {\n            nextEffect = null;\n            return;\n          }\n        }\n\n        if (sibling !== null) {\n          ensureCorrectReturnPointer(sibling, returnFiber);\n          nextEffect = sibling;\n          return;\n        }\n\n        nextEffect = returnFiber;\n      }\n    }\n\n    function commitPassiveUnmountInsideDeletedTreeOnFiber(current, nearestMountedAncestor) {\n      switch (current.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent:\n          {\n            if (current.mode & ProfileMode) {\n              startPassiveEffectTimer();\n              commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);\n              recordPassiveEffectDuration(current);\n            } else {\n              commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);\n            }\n\n            break;\n          }\n      }\n    }\n\n    var didWarnWrongReturnPointer = false;\n\n    function ensureCorrectReturnPointer(fiber, expectedReturnFiber) {\n      {\n        if (!didWarnWrongReturnPointer && fiber.return !== expectedReturnFiber) {\n          didWarnWrongReturnPointer = true;\n          error('Internal React error: Return pointer is inconsistent ' + 'with parent.');\n        }\n      } // TODO: Remove this assignment once we're confident that it won't break\n      // anything, by checking the warning logs for the above invariant\n\n      fiber.return = expectedReturnFiber;\n    } // TODO: Reuse reappearLayoutEffects traversal here?\n\n\n    var COMPONENT_TYPE = 0;\n    var HAS_PSEUDO_CLASS_TYPE = 1;\n    var ROLE_TYPE = 2;\n    var TEST_NAME_TYPE = 3;\n    var TEXT_TYPE = 4;\n\n    if (typeof Symbol === 'function' && Symbol.for) {\n      var symbolFor = Symbol.for;\n      COMPONENT_TYPE = symbolFor('selector.component');\n      HAS_PSEUDO_CLASS_TYPE = symbolFor('selector.has_pseudo_class');\n      ROLE_TYPE = symbolFor('selector.role');\n      TEST_NAME_TYPE = symbolFor('selector.test_id');\n      TEXT_TYPE = symbolFor('selector.text');\n    }\n\n    var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;\n\n    function isLegacyActEnvironment(fiber) {\n      {\n        // Legacy mode. We preserve the behavior of React 17's act. It assumes an\n        // act environment whenever `jest` is defined, but you can still turn off\n        // spurious warnings by setting IS_REACT_ACT_ENVIRONMENT explicitly\n        // to false.\n        var isReactActEnvironmentGlobal = // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global\n        typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined' ? IS_REACT_ACT_ENVIRONMENT : undefined; // $FlowExpectedError - Flow doesn't know about jest\n\n        var jestIsDefined = typeof jest !== 'undefined';\n        return jestIsDefined && isReactActEnvironmentGlobal !== false;\n      }\n    }\n\n    function isConcurrentActEnvironment() {\n      {\n        var isReactActEnvironmentGlobal = // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global\n        typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined' ? IS_REACT_ACT_ENVIRONMENT : undefined;\n\n        if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {\n          // TODO: Include link to relevant documentation page.\n          error('The current testing environment is not configured to support ' + 'act(...)');\n        }\n\n        return isReactActEnvironmentGlobal;\n      }\n    }\n\n    var ceil = Math.ceil;\n    var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher,\n        ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,\n        ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig,\n        ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;\n    var NoContext =\n    /*             */\n    0;\n    var BatchedContext =\n    /*               */\n    1;\n    var RenderContext =\n    /*                */\n    2;\n    var CommitContext =\n    /*                */\n    4;\n    var RootInProgress = 0;\n    var RootFatalErrored = 1;\n    var RootErrored = 2;\n    var RootSuspended = 3;\n    var RootSuspendedWithDelay = 4;\n    var RootCompleted = 5;\n    var RootDidNotComplete = 6; // Describes where we are in the React execution stack\n\n    var executionContext = NoContext; // The root we're working on\n\n    var workInProgressRoot = null; // The fiber we're working on\n\n    var workInProgress = null; // The lanes we're rendering\n\n    var workInProgressRootRenderLanes = NoLanes; // Stack that allows components to change the render lanes for its subtree\n    // This is a superset of the lanes we started working on at the root. The only\n    // case where it's different from `workInProgressRootRenderLanes` is when we\n    // enter a subtree that is hidden and needs to be unhidden: Suspense and\n    // Offscreen component.\n    //\n    // Most things in the work loop should deal with workInProgressRootRenderLanes.\n    // Most things in begin/complete phases should deal with subtreeRenderLanes.\n\n    var subtreeRenderLanes = NoLanes;\n    var subtreeRenderLanesCursor = createCursor(NoLanes); // Whether to root completed, errored, suspended, etc.\n\n    var workInProgressRootExitStatus = RootInProgress; // A fatal error, if one is thrown\n\n    var workInProgressRootFatalError = null; // \"Included\" lanes refer to lanes that were worked on during this render. It's\n    // slightly different than `renderLanes` because `renderLanes` can change as you\n    // enter and exit an Offscreen tree. This value is the combination of all render\n    // lanes for the entire render phase.\n\n    var workInProgressRootIncludedLanes = NoLanes; // The work left over by components that were visited during this render. Only\n    // includes unprocessed updates, not work in bailed out children.\n\n    var workInProgressRootSkippedLanes = NoLanes; // Lanes that were updated (in an interleaved event) during this render.\n\n    var workInProgressRootInterleavedUpdatedLanes = NoLanes; // Lanes that were updated during the render phase (*not* an interleaved event).\n\n    var workInProgressRootPingedLanes = NoLanes; // Errors that are thrown during the render phase.\n\n    var workInProgressRootConcurrentErrors = null; // These are errors that we recovered from without surfacing them to the UI.\n    // We will log them once the tree commits.\n\n    var workInProgressRootRecoverableErrors = null; // The most recent time we committed a fallback. This lets us ensure a train\n    // model where we don't commit new loading states in too quick succession.\n\n    var globalMostRecentFallbackTime = 0;\n    var FALLBACK_THROTTLE_MS = 500; // The absolute time for when we should start giving up on rendering\n    // more and prefer CPU suspense heuristics instead.\n\n    var workInProgressRootRenderTargetTime = Infinity; // How long a render is supposed to take before we start following CPU\n    // suspense heuristics and opt out of rendering more content.\n\n    var RENDER_TIMEOUT_MS = 500;\n\n    function resetRenderTimer() {\n      workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;\n    }\n\n    function getRenderTargetTime() {\n      return workInProgressRootRenderTargetTime;\n    }\n\n    var hasUncaughtError = false;\n    var firstUncaughtError = null;\n    var legacyErrorBoundariesThatAlreadyFailed = null; // Only used when enableProfilerNestedUpdateScheduledHook is true;\n\n    var rootDoesHavePassiveEffects = false;\n    var rootWithPendingPassiveEffects = null;\n    var pendingPassiveEffectsLanes = NoLanes;\n    var pendingPassiveProfilerEffects = [];\n    var NESTED_UPDATE_LIMIT = 50;\n    var nestedUpdateCount = 0;\n    var rootWithNestedUpdates = null;\n    var NESTED_PASSIVE_UPDATE_LIMIT = 50;\n    var nestedPassiveUpdateCount = 0; // If two updates are scheduled within the same event, we should treat their\n    // event times as simultaneous, even if the actual clock time has advanced\n    // between the first and second call.\n\n    var currentEventTime = NoTimestamp;\n    var currentEventTransitionLane = NoLanes;\n\n    function getWorkInProgressRoot() {\n      return workInProgressRoot;\n    }\n\n    function requestEventTime() {\n      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n        // We're inside React, so it's fine to read the actual time.\n        return now();\n      } // We're not inside React, so we may be in the middle of a browser event.\n\n\n      if (currentEventTime !== NoTimestamp) {\n        // Use the same start time for all updates until we enter React again.\n        return currentEventTime;\n      } // This is the first update since React yielded. Compute a new start time.\n\n\n      currentEventTime = now();\n      return currentEventTime;\n    }\n\n    function requestUpdateLane(fiber) {\n      // Special cases\n      var mode = fiber.mode;\n\n      if ((mode & ConcurrentMode) === NoMode) {\n        return SyncLane;\n      } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {\n        // This is a render phase update. These are not officially supported. The\n        // old behavior is to give this the same \"thread\" (lanes) as\n        // whatever is currently rendering. So if you call `setState` on a component\n        // that happens later in the same render, it will flush. Ideally, we want to\n        // remove the special case and treat them as if they came from an\n        // interleaved event. Regardless, this pattern is not officially supported.\n        // This behavior is only a fallback. The flag only exists until we can roll\n        // out the setState warning, since existing code might accidentally rely on\n        // the current behavior.\n        return pickArbitraryLane(workInProgressRootRenderLanes);\n      }\n\n      var isTransition = requestCurrentTransition() !== NoTransition;\n\n      if (isTransition) {\n        if (ReactCurrentBatchConfig$2.transition !== null) {\n          var transition = ReactCurrentBatchConfig$2.transition;\n\n          if (!transition._updatedFibers) {\n            transition._updatedFibers = new Set();\n          }\n\n          transition._updatedFibers.add(fiber);\n        } // The algorithm for assigning an update to a lane should be stable for all\n        // updates at the same priority within the same event. To do this, the\n        // inputs to the algorithm must be the same.\n        //\n        // The trick we use is to cache the first of each of these inputs within an\n        // event. Then reset the cached values once we can be sure the event is\n        // over. Our heuristic for that is whenever we enter a concurrent work loop.\n\n\n        if (currentEventTransitionLane === NoLane) {\n          // All transitions within the same event are assigned the same lane.\n          currentEventTransitionLane = claimNextTransitionLane();\n        }\n\n        return currentEventTransitionLane;\n      } // Updates originating inside certain React methods, like flushSync, have\n      // their priority set by tracking it with a context variable.\n      //\n      // The opaque type returned by the host config is internally a lane, so we can\n      // use that directly.\n      // TODO: Move this type conversion to the event priority module.\n\n\n      var updateLane = getCurrentUpdatePriority();\n\n      if (updateLane !== NoLane) {\n        return updateLane;\n      } // This update originated outside React. Ask the host environment for an\n      // appropriate priority, based on the type of event.\n      //\n      // The opaque type returned by the host config is internally a lane, so we can\n      // use that directly.\n      // TODO: Move this type conversion to the event priority module.\n\n\n      var eventLane = getCurrentEventPriority();\n      return eventLane;\n    }\n\n    function requestRetryLane(fiber) {\n      // This is a fork of `requestUpdateLane` designed specifically for Suspense\n      // \"retries\" — a special update that attempts to flip a Suspense boundary\n      // from its placeholder state to its primary/resolved state.\n      // Special cases\n      var mode = fiber.mode;\n\n      if ((mode & ConcurrentMode) === NoMode) {\n        return SyncLane;\n      }\n\n      return claimNextRetryLane();\n    }\n\n    function scheduleUpdateOnFiber(fiber, lane, eventTime) {\n      checkForNestedUpdates();\n      var root = markUpdateLaneFromFiberToRoot(fiber, lane);\n\n      if (root === null) {\n        return null;\n      } // Mark that the root has a pending update.\n\n\n      markRootUpdated(root, lane, eventTime);\n\n      if ((executionContext & RenderContext) !== NoLanes && root === workInProgressRoot) {\n        // This update was dispatched during the render phase. This is a mistake\n        // if the update originates from user space (with the exception of local\n        // hook updates, which are handled differently and don't reach this\n        // function), but there are some internal React features that use this as\n        // an implementation detail, like selective hydration.\n        warnAboutRenderPhaseUpdatesInDEV(fiber); // Track lanes that were updated during the render phase\n      } else {\n        warnIfUpdatesNotWrappedWithActDEV(fiber);\n\n        if (root === workInProgressRoot) {\n          // TODO: Consolidate with `isInterleavedUpdate` check\n          // Received an update to a tree that's in the middle of rendering. Mark\n          // that there was an interleaved update work on this root. Unless the\n          // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render\n          // phase update. In that case, we don't treat render phase updates as if\n          // they were interleaved, for backwards compat reasons.\n          if ((executionContext & RenderContext) === NoContext) {\n            workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);\n          }\n\n          if (workInProgressRootExitStatus === RootSuspendedWithDelay) {\n            // The root already suspended with a delay, which means this render\n            // definitely won't finish. Since we have a new update, let's mark it as\n            // suspended now, right before marking the incoming update. This has the\n            // effect of interrupting the current render and switching to the update.\n            // TODO: Make sure this doesn't override pings that happen while we've\n            // already started rendering.\n            markRootSuspended$1(root, workInProgressRootRenderLanes);\n          }\n        }\n\n        ensureRootIsScheduled(root, eventTime);\n\n        if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.\n        !ReactCurrentActQueue$1.isBatchingLegacy) {\n          // Flush the synchronous work now, unless we're already working or inside\n          // a batch. This is intentionally inside scheduleUpdateOnFiber instead of\n          // scheduleCallbackForFiber to preserve the ability to schedule a callback\n          // without immediately flushing it. We only do this for user-initiated\n          // updates, to preserve historical behavior of legacy mode.\n          resetRenderTimer();\n          flushSyncCallbacksOnlyInLegacyMode();\n        }\n      }\n\n      return root;\n    } // work without treating it as a typical update that originates from an event;\n    // e.g. retrying a Suspense boundary isn't an update, but it does schedule work\n    // on a fiber.\n\n\n    function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {\n      // Update the source fiber's lanes\n      sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);\n      var alternate = sourceFiber.alternate;\n\n      if (alternate !== null) {\n        alternate.lanes = mergeLanes(alternate.lanes, lane);\n      }\n\n      {\n        if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {\n          warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n        }\n      } // Walk the parent path to the root and update the child lanes.\n\n      var node = sourceFiber;\n      var parent = sourceFiber.return;\n\n      while (parent !== null) {\n        parent.childLanes = mergeLanes(parent.childLanes, lane);\n        alternate = parent.alternate;\n\n        if (alternate !== null) {\n          alternate.childLanes = mergeLanes(alternate.childLanes, lane);\n        } else {\n          {\n            if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {\n              warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n            }\n          }\n        }\n\n        node = parent;\n        parent = parent.return;\n      }\n\n      if (node.tag === HostRoot) {\n        var root = node.stateNode;\n        return root;\n      } else {\n        return null;\n      }\n    }\n\n    function isInterleavedUpdate(fiber, lane) {\n      return (// TODO: Optimize slightly by comparing to root that fiber belongs to.\n        // Requires some refactoring. Not a big deal though since it's rare for\n        // concurrent apps to have more than a single root.\n        workInProgressRoot !== null && (fiber.mode & ConcurrentMode) !== NoMode && // If this is a render phase update (i.e. UNSAFE_componentWillReceiveProps),\n        // then don't treat this as an interleaved update. This pattern is\n        // accompanied by a warning but we haven't fully deprecated it yet. We can\n        // remove once the deferRenderPhaseUpdateToNextBatch flag is enabled.\n        (executionContext & RenderContext) === NoContext\n      );\n    } // Use this function to schedule a task for a root. There's only one task per\n    // root; if a task was already scheduled, we'll check to make sure the priority\n    // of the existing task is the same as the priority of the next level that the\n    // root has work on. This function is called on every update, and right before\n    // exiting a task.\n\n\n    function ensureRootIsScheduled(root, currentTime) {\n      var existingCallbackNode = root.callbackNode; // Check if any lanes are being starved by other work. If so, mark them as\n      // expired so we know to work on those next.\n\n      markStarvedLanesAsExpired(root, currentTime); // Determine the next lanes to work on, and their priority.\n\n      var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);\n\n      if (nextLanes === NoLanes) {\n        // Special case: There's nothing to work on.\n        if (existingCallbackNode !== null) {\n          cancelCallback$1(existingCallbackNode);\n        }\n\n        root.callbackNode = null;\n        root.callbackPriority = NoLane;\n        return;\n      } // We use the highest priority lane to represent the priority of the callback.\n\n\n      var newCallbackPriority = getHighestPriorityLane(nextLanes); // Check if there's an existing task. We may be able to reuse it.\n\n      var existingCallbackPriority = root.callbackPriority;\n\n      if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a\n      // Scheduler task, rather than an `act` task, cancel it and re-scheduled\n      // on the `act` queue.\n      !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {\n        {\n          // If we're going to re-use an existing task, it needs to exist.\n          // Assume that discrete update microtasks are non-cancellable and null.\n          // TODO: Temporary until we confirm this warning is not fired.\n          if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {\n            error('Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.');\n          }\n        } // The priority hasn't changed. We can reuse the existing task. Exit.\n\n        return;\n      }\n\n      if (existingCallbackNode != null) {\n        // Cancel the existing callback. We'll schedule a new one below.\n        cancelCallback$1(existingCallbackNode);\n      } // Schedule a new callback.\n\n\n      var newCallbackNode;\n\n      if (newCallbackPriority === SyncLane) {\n        // Special case: Sync React callbacks are scheduled on a special\n        // internal queue\n        if (root.tag === LegacyRoot) {\n          if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {\n            ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;\n          }\n\n          scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root));\n        } else {\n          scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));\n        }\n\n        {\n          // Flush the queue in an Immediate task.\n          scheduleCallback$1(ImmediatePriority, flushSyncCallbacks);\n        }\n        newCallbackNode = null;\n      } else {\n        var schedulerPriorityLevel;\n\n        switch (lanesToEventPriority(nextLanes)) {\n          case DiscreteEventPriority:\n            schedulerPriorityLevel = ImmediatePriority;\n            break;\n\n          case ContinuousEventPriority:\n            schedulerPriorityLevel = UserBlockingPriority;\n            break;\n\n          case DefaultEventPriority:\n            schedulerPriorityLevel = NormalPriority;\n            break;\n\n          case IdleEventPriority:\n            schedulerPriorityLevel = IdlePriority;\n            break;\n\n          default:\n            schedulerPriorityLevel = NormalPriority;\n            break;\n        }\n\n        newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root));\n      }\n\n      root.callbackPriority = newCallbackPriority;\n      root.callbackNode = newCallbackNode;\n    } // This is the entry point for every concurrent task, i.e. anything that\n    // goes through Scheduler.\n\n\n    function performConcurrentWorkOnRoot(root, didTimeout) {\n      {\n        resetNestedUpdateFlag();\n      } // Since we know we're in a React event, we can clear the current\n      // event time. The next update will compute a new event time.\n\n      currentEventTime = NoTimestamp;\n      currentEventTransitionLane = NoLanes;\n\n      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n        throw new Error('Should not already be working.');\n      } // Flush any pending passive effects before deciding which lanes to work on,\n      // in case they schedule additional work.\n\n\n      var originalCallbackNode = root.callbackNode;\n      var didFlushPassiveEffects = flushPassiveEffects();\n\n      if (didFlushPassiveEffects) {\n        // Something in the passive effect phase may have canceled the current task.\n        // Check if the task node for this root was changed.\n        if (root.callbackNode !== originalCallbackNode) {\n          // The current task was canceled. Exit. We don't need to call\n          // `ensureRootIsScheduled` because the check above implies either that\n          // there's a new task, or that there's no remaining work on this root.\n          return null;\n        }\n      } // Determine the next lanes to work on, using the fields stored\n      // on the root.\n\n\n      var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);\n\n      if (lanes === NoLanes) {\n        // Defensive coding. This is never expected to happen.\n        return null;\n      } // We disable time-slicing in some cases: if the work has been CPU-bound\n      // for too long (\"expired\" work, to prevent starvation), or we're in\n      // sync-updates-by-default mode.\n      // TODO: We only check `didTimeout` defensively, to account for a Scheduler\n      // bug we're still investigating. Once the bug in Scheduler is fixed,\n      // we can remove this, since we track expiration ourselves.\n\n\n      var shouldTimeSlice = !includesBlockingLane(root, lanes) && !includesExpiredLane(root, lanes) && !didTimeout;\n      var exitStatus = shouldTimeSlice ? renderRootConcurrent(root, lanes) : renderRootSync(root, lanes);\n\n      if (exitStatus !== RootInProgress) {\n        if (exitStatus === RootErrored) {\n          // If something threw an error, try rendering one more time. We'll\n          // render synchronously to block concurrent data mutations, and we'll\n          // includes all pending updates are included. If it still fails after\n          // the second attempt, we'll give up and commit the resulting tree.\n          var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n\n          if (errorRetryLanes !== NoLanes) {\n            lanes = errorRetryLanes;\n            exitStatus = recoverFromConcurrentError(root, errorRetryLanes);\n          }\n        }\n\n        if (exitStatus === RootFatalErrored) {\n          var fatalError = workInProgressRootFatalError;\n          prepareFreshStack(root, NoLanes);\n          markRootSuspended$1(root, lanes);\n          ensureRootIsScheduled(root, now());\n          throw fatalError;\n        }\n\n        if (exitStatus === RootDidNotComplete) {\n          // The render unwound without completing the tree. This happens in special\n          // cases where need to exit the current render without producing a\n          // consistent tree or committing.\n          //\n          // This should only happen during a concurrent render, not a discrete or\n          // synchronous update. We should have already checked for this when we\n          // unwound the stack.\n          markRootSuspended$1(root, lanes);\n        } else {\n          // The render completed.\n          // Check if this render may have yielded to a concurrent event, and if so,\n          // confirm that any newly rendered stores are consistent.\n          // TODO: It's possible that even a concurrent render may never have yielded\n          // to the main thread, if it was fast enough, or if it expired. We could\n          // skip the consistency check in that case, too.\n          var renderWasConcurrent = !includesBlockingLane(root, lanes);\n          var finishedWork = root.current.alternate;\n\n          if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {\n            // A store was mutated in an interleaved event. Render again,\n            // synchronously, to block further mutations.\n            exitStatus = renderRootSync(root, lanes); // We need to check again if something threw\n\n            if (exitStatus === RootErrored) {\n              var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n\n              if (_errorRetryLanes !== NoLanes) {\n                lanes = _errorRetryLanes;\n                exitStatus = recoverFromConcurrentError(root, _errorRetryLanes); // We assume the tree is now consistent because we didn't yield to any\n                // concurrent events.\n              }\n            }\n\n            if (exitStatus === RootFatalErrored) {\n              var _fatalError = workInProgressRootFatalError;\n              prepareFreshStack(root, NoLanes);\n              markRootSuspended$1(root, lanes);\n              ensureRootIsScheduled(root, now());\n              throw _fatalError;\n            }\n          } // We now have a consistent tree. The next step is either to commit it,\n          // or, if something suspended, wait to commit it after a timeout.\n\n\n          root.finishedWork = finishedWork;\n          root.finishedLanes = lanes;\n          finishConcurrentRender(root, exitStatus, lanes);\n        }\n      }\n\n      ensureRootIsScheduled(root, now());\n\n      if (root.callbackNode === originalCallbackNode) {\n        // The task node scheduled for this root is the same one that's\n        // currently executed. Need to return a continuation.\n        return performConcurrentWorkOnRoot.bind(null, root);\n      }\n\n      return null;\n    }\n\n    function recoverFromConcurrentError(root, errorRetryLanes) {\n      // If an error occurred during hydration, discard server response and fall\n      // back to client side render.\n      // Before rendering again, save the errors from the previous attempt.\n      var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;\n\n      if (isRootDehydrated(root)) {\n        // The shell failed to hydrate. Set a flag to force a client rendering\n        // during the next attempt. To do this, we call prepareFreshStack now\n        // to create the root work-in-progress fiber. This is a bit weird in terms\n        // of factoring, because it relies on renderRootSync not calling\n        // prepareFreshStack again in the call below, which happens because the\n        // root and lanes haven't changed.\n        //\n        // TODO: I think what we should do is set ForceClientRender inside\n        // throwException, like we do for nested Suspense boundaries. The reason\n        // it's here instead is so we can switch to the synchronous work loop, too.\n        // Something to consider for a future refactor.\n        var rootWorkInProgress = prepareFreshStack(root, errorRetryLanes);\n        rootWorkInProgress.flags |= ForceClientRender;\n        {\n          errorHydratingContainer(root.containerInfo);\n        }\n      }\n\n      var exitStatus = renderRootSync(root, errorRetryLanes);\n\n      if (exitStatus !== RootErrored) {\n        // Successfully finished rendering on retry\n        // The errors from the failed first attempt have been recovered. Add\n        // them to the collection of recoverable errors. We'll log them in the\n        // commit phase.\n        var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;\n        workInProgressRootRecoverableErrors = errorsFromFirstAttempt; // The errors from the second attempt should be queued after the errors\n        // from the first attempt, to preserve the causal sequence.\n\n        if (errorsFromSecondAttempt !== null) {\n          queueRecoverableErrors(errorsFromSecondAttempt);\n        }\n      }\n\n      return exitStatus;\n    }\n\n    function queueRecoverableErrors(errors) {\n      if (workInProgressRootRecoverableErrors === null) {\n        workInProgressRootRecoverableErrors = errors;\n      } else {\n        workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);\n      }\n    }\n\n    function finishConcurrentRender(root, exitStatus, lanes) {\n      switch (exitStatus) {\n        case RootInProgress:\n        case RootFatalErrored:\n          {\n            throw new Error('Root did not complete. This is a bug in React.');\n          }\n        // Flow knows about invariant, so it complains if I add a break\n        // statement, but eslint doesn't know about invariant, so it complains\n        // if I do. eslint-disable-next-line no-fallthrough\n\n        case RootErrored:\n          {\n            // We should have already attempted to retry this tree. If we reached\n            // this point, it errored again. Commit it.\n            commitRoot(root, workInProgressRootRecoverableErrors);\n            break;\n          }\n\n        case RootSuspended:\n          {\n            markRootSuspended$1(root, lanes); // We have an acceptable loading state. We need to figure out if we\n            // should immediately commit it or wait a bit.\n\n            if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope\n            !shouldForceFlushFallbacksInDEV()) {\n              // This render only included retries, no updates. Throttle committing\n              // retries so that we don't show too many loading states too quickly.\n              var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.\n\n              if (msUntilTimeout > 10) {\n                var nextLanes = getNextLanes(root, NoLanes);\n\n                if (nextLanes !== NoLanes) {\n                  // There's additional work on this root.\n                  break;\n                }\n\n                var suspendedLanes = root.suspendedLanes;\n\n                if (!isSubsetOfLanes(suspendedLanes, lanes)) {\n                  // We should prefer to render the fallback of at the last\n                  // suspended level. Ping the last suspended level to try\n                  // rendering it again.\n                  // FIXME: What if the suspended lanes are Idle? Should not restart.\n                  var eventTime = requestEventTime();\n                  markRootPinged(root, suspendedLanes);\n                  break;\n                } // The render is suspended, it hasn't timed out, and there's no\n                // lower priority work to do. Instead of committing the fallback\n                // immediately, wait for more data to arrive.\n\n\n                root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors), msUntilTimeout);\n                break;\n              }\n            } // The work expired. Commit immediately.\n\n\n            commitRoot(root, workInProgressRootRecoverableErrors);\n            break;\n          }\n\n        case RootSuspendedWithDelay:\n          {\n            markRootSuspended$1(root, lanes);\n\n            if (includesOnlyTransitions(lanes)) {\n              // This is a transition, so we should exit without committing a\n              // placeholder and without scheduling a timeout. Delay indefinitely\n              // until we receive more data.\n              break;\n            }\n\n            if (!shouldForceFlushFallbacksInDEV()) {\n              // This is not a transition, but we did trigger an avoided state.\n              // Schedule a placeholder to display after a short delay, using the Just\n              // Noticeable Difference.\n              // TODO: Is the JND optimization worth the added complexity? If this is\n              // the only reason we track the event time, then probably not.\n              // Consider removing.\n              var mostRecentEventTime = getMostRecentEventTime(root, lanes);\n              var eventTimeMs = mostRecentEventTime;\n              var timeElapsedMs = now() - eventTimeMs;\n\n              var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs; // Don't bother with a very short suspense time.\n\n\n              if (_msUntilTimeout > 10) {\n                // Instead of committing the fallback immediately, wait for more data\n                // to arrive.\n                root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors), _msUntilTimeout);\n                break;\n              }\n            } // Commit the placeholder.\n\n\n            commitRoot(root, workInProgressRootRecoverableErrors);\n            break;\n          }\n\n        case RootCompleted:\n          {\n            // The work completed. Ready to commit.\n            commitRoot(root, workInProgressRootRecoverableErrors);\n            break;\n          }\n\n        default:\n          {\n            throw new Error('Unknown root exit status.');\n          }\n      }\n    }\n\n    function isRenderConsistentWithExternalStores(finishedWork) {\n      // Search the rendered tree for external store reads, and check whether the\n      // stores were mutated in a concurrent event. Intentionally using an iterative\n      // loop instead of recursion so we can exit early.\n      var node = finishedWork;\n\n      while (true) {\n        if (node.flags & StoreConsistency) {\n          var updateQueue = node.updateQueue;\n\n          if (updateQueue !== null) {\n            var checks = updateQueue.stores;\n\n            if (checks !== null) {\n              for (var i = 0; i < checks.length; i++) {\n                var check = checks[i];\n                var getSnapshot = check.getSnapshot;\n                var renderedValue = check.value;\n\n                try {\n                  if (!objectIs(getSnapshot(), renderedValue)) {\n                    // Found an inconsistent store.\n                    return false;\n                  }\n                } catch (error) {\n                  // If `getSnapshot` throws, return `false`. This will schedule\n                  // a re-render, and the error will be rethrown during render.\n                  return false;\n                }\n              }\n            }\n          }\n        }\n\n        var child = node.child;\n\n        if (node.subtreeFlags & StoreConsistency && child !== null) {\n          child.return = node;\n          node = child;\n          continue;\n        }\n\n        if (node === finishedWork) {\n          return true;\n        }\n\n        while (node.sibling === null) {\n          if (node.return === null || node.return === finishedWork) {\n            return true;\n          }\n\n          node = node.return;\n        }\n\n        node.sibling.return = node.return;\n        node = node.sibling;\n      } // Flow doesn't know this is unreachable, but eslint does\n      // eslint-disable-next-line no-unreachable\n\n\n      return true;\n    }\n\n    function markRootSuspended$1(root, suspendedLanes) {\n      // When suspending, we should always exclude lanes that were pinged or (more\n      // rarely, since we try to avoid it) updated during the render phase.\n      // TODO: Lol maybe there's a better way to factor this besides this\n      // obnoxiously named function :)\n      suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);\n      suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);\n      markRootSuspended(root, suspendedLanes);\n    } // This is the entry point for synchronous tasks that don't go\n    // through Scheduler\n\n\n    function performSyncWorkOnRoot(root) {\n      {\n        syncNestedUpdateFlag();\n      }\n\n      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n        throw new Error('Should not already be working.');\n      }\n\n      flushPassiveEffects();\n      var lanes = getNextLanes(root, NoLanes);\n\n      if (!includesSomeLane(lanes, SyncLane)) {\n        // There's no remaining sync work left.\n        ensureRootIsScheduled(root, now());\n        return null;\n      }\n\n      var exitStatus = renderRootSync(root, lanes);\n\n      if (root.tag !== LegacyRoot && exitStatus === RootErrored) {\n        // If something threw an error, try rendering one more time. We'll render\n        // synchronously to block concurrent data mutations, and we'll includes\n        // all pending updates are included. If it still fails after the second\n        // attempt, we'll give up and commit the resulting tree.\n        var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n\n        if (errorRetryLanes !== NoLanes) {\n          lanes = errorRetryLanes;\n          exitStatus = recoverFromConcurrentError(root, errorRetryLanes);\n        }\n      }\n\n      if (exitStatus === RootFatalErrored) {\n        var fatalError = workInProgressRootFatalError;\n        prepareFreshStack(root, NoLanes);\n        markRootSuspended$1(root, lanes);\n        ensureRootIsScheduled(root, now());\n        throw fatalError;\n      }\n\n      if (exitStatus === RootDidNotComplete) {\n        throw new Error('Root did not complete. This is a bug in React.');\n      } // We now have a consistent tree. Because this is a sync render, we\n      // will commit it even if something suspended.\n\n\n      var finishedWork = root.current.alternate;\n      root.finishedWork = finishedWork;\n      root.finishedLanes = lanes;\n      commitRoot(root, workInProgressRootRecoverableErrors); // Before exiting, make sure there's a callback scheduled for the next\n      // pending level.\n\n      ensureRootIsScheduled(root, now());\n      return null;\n    }\n\n    function batchedUpdates(fn, a) {\n      var prevExecutionContext = executionContext;\n      executionContext |= BatchedContext;\n\n      try {\n        return fn(a);\n      } finally {\n        executionContext = prevExecutionContext; // If there were legacy sync updates, flush them at the end of the outer\n        // most batchedUpdates-like method.\n\n        if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.\n        !ReactCurrentActQueue$1.isBatchingLegacy) {\n          resetRenderTimer();\n          flushSyncCallbacksOnlyInLegacyMode();\n        }\n      }\n    } // Warning, this opts-out of checking the function body.\n    // eslint-disable-next-line no-redeclare\n\n\n    function flushSync(fn) {\n      // In legacy mode, we flush pending passive effects at the beginning of the\n      // next event, not at the end of the previous one.\n      if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {\n        flushPassiveEffects();\n      }\n\n      var prevExecutionContext = executionContext;\n      executionContext |= BatchedContext;\n      var prevTransition = ReactCurrentBatchConfig$2.transition;\n      var previousPriority = getCurrentUpdatePriority();\n\n      try {\n        ReactCurrentBatchConfig$2.transition = null;\n        setCurrentUpdatePriority(DiscreteEventPriority);\n\n        if (fn) {\n          return fn();\n        } else {\n          return undefined;\n        }\n      } finally {\n        setCurrentUpdatePriority(previousPriority);\n        ReactCurrentBatchConfig$2.transition = prevTransition;\n        executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.\n        // Note that this will happen even if batchedUpdates is higher up\n        // the stack.\n\n        if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n          flushSyncCallbacks();\n        }\n      }\n    }\n\n    function pushRenderLanes(fiber, lanes) {\n      push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);\n      subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);\n      workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);\n    }\n\n    function popRenderLanes(fiber) {\n      subtreeRenderLanes = subtreeRenderLanesCursor.current;\n      pop(subtreeRenderLanesCursor, fiber);\n    }\n\n    function prepareFreshStack(root, lanes) {\n      root.finishedWork = null;\n      root.finishedLanes = NoLanes;\n      var timeoutHandle = root.timeoutHandle;\n\n      if (timeoutHandle !== noTimeout) {\n        // The root previous suspended and scheduled a timeout to commit a fallback\n        // state. Now that we have additional work, cancel the timeout.\n        root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above\n\n        cancelTimeout(timeoutHandle);\n      }\n\n      if (workInProgress !== null) {\n        var interruptedWork = workInProgress.return;\n\n        while (interruptedWork !== null) {\n          var current = interruptedWork.alternate;\n          unwindInterruptedWork(current, interruptedWork);\n          interruptedWork = interruptedWork.return;\n        }\n      }\n\n      workInProgressRoot = root;\n      var rootWorkInProgress = createWorkInProgress(root.current, null);\n      workInProgress = rootWorkInProgress;\n      workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;\n      workInProgressRootExitStatus = RootInProgress;\n      workInProgressRootFatalError = null;\n      workInProgressRootSkippedLanes = NoLanes;\n      workInProgressRootInterleavedUpdatedLanes = NoLanes;\n      workInProgressRootPingedLanes = NoLanes;\n      workInProgressRootConcurrentErrors = null;\n      workInProgressRootRecoverableErrors = null;\n      enqueueInterleavedUpdates();\n      {\n        ReactStrictModeWarnings.discardPendingWarnings();\n      }\n      return rootWorkInProgress;\n    }\n\n    function handleError(root, thrownValue) {\n      do {\n        var erroredWork = workInProgress;\n\n        try {\n          // Reset module-level state that was set during the render phase.\n          resetContextDependencies();\n          resetHooksAfterThrow();\n          resetCurrentFiber(); // TODO: I found and added this missing line while investigating a\n          // separate issue. Write a regression test using string refs.\n\n          ReactCurrentOwner$2.current = null;\n\n          if (erroredWork === null || erroredWork.return === null) {\n            // Expected to be working on a non-root fiber. This is a fatal error\n            // because there's no ancestor that can handle it; the root is\n            // supposed to capture all errors that weren't caught by an error\n            // boundary.\n            workInProgressRootExitStatus = RootFatalErrored;\n            workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next\n            // sibling, or the parent if there are no siblings. But since the root\n            // has no siblings nor a parent, we set it to null. Usually this is\n            // handled by `completeUnitOfWork` or `unwindWork`, but since we're\n            // intentionally not calling those, we need set it here.\n            // TODO: Consider calling `unwindWork` to pop the contexts.\n\n            workInProgress = null;\n            return;\n          }\n\n          if (enableProfilerTimer && erroredWork.mode & ProfileMode) {\n            // Record the time spent rendering before an error was thrown. This\n            // avoids inaccurate Profiler durations in the case of a\n            // suspended render.\n            stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);\n          }\n\n          if (enableSchedulingProfiler) {\n            markComponentRenderStopped();\n\n            if (thrownValue !== null && typeof thrownValue === 'object' && typeof thrownValue.then === 'function') {\n              var wakeable = thrownValue;\n              markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);\n            } else {\n              markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);\n            }\n          }\n\n          throwException(root, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);\n          completeUnitOfWork(erroredWork);\n        } catch (yetAnotherThrownValue) {\n          // Something in the return path also threw.\n          thrownValue = yetAnotherThrownValue;\n\n          if (workInProgress === erroredWork && erroredWork !== null) {\n            // If this boundary has already errored, then we had trouble processing\n            // the error. Bubble it to the next boundary.\n            erroredWork = erroredWork.return;\n            workInProgress = erroredWork;\n          } else {\n            erroredWork = workInProgress;\n          }\n\n          continue;\n        } // Return to the normal work loop.\n\n\n        return;\n      } while (true);\n    }\n\n    function pushDispatcher() {\n      var prevDispatcher = ReactCurrentDispatcher$2.current;\n      ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;\n\n      if (prevDispatcher === null) {\n        // The React isomorphic package does not include a default dispatcher.\n        // Instead the first renderer will lazily attach one, in order to give\n        // nicer error messages.\n        return ContextOnlyDispatcher;\n      } else {\n        return prevDispatcher;\n      }\n    }\n\n    function popDispatcher(prevDispatcher) {\n      ReactCurrentDispatcher$2.current = prevDispatcher;\n    }\n\n    function markCommitTimeOfFallback() {\n      globalMostRecentFallbackTime = now();\n    }\n\n    function markSkippedUpdateLanes(lane) {\n      workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);\n    }\n\n    function renderDidSuspend() {\n      if (workInProgressRootExitStatus === RootInProgress) {\n        workInProgressRootExitStatus = RootSuspended;\n      }\n    }\n\n    function renderDidSuspendDelayIfPossible() {\n      if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {\n        workInProgressRootExitStatus = RootSuspendedWithDelay;\n      } // Check if there are updates that we skipped tree that might have unblocked\n      // this render.\n\n\n      if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {\n        // Mark the current render as suspended so that we switch to working on\n        // the updates that were skipped. Usually we only suspend at the end of\n        // the render phase.\n        // TODO: We should probably always mark the root as suspended immediately\n        // (inside this function), since by suspending at the end of the render\n        // phase introduces a potential mistake where we suspend lanes that were\n        // pinged or updated while we were rendering.\n        markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);\n      }\n    }\n\n    function renderDidError(error) {\n      if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {\n        workInProgressRootExitStatus = RootErrored;\n      }\n\n      if (workInProgressRootConcurrentErrors === null) {\n        workInProgressRootConcurrentErrors = [error];\n      } else {\n        workInProgressRootConcurrentErrors.push(error);\n      }\n    } // Called during render to determine if anything has suspended.\n    // Returns false if we're not sure.\n\n\n    function renderHasNotSuspendedYet() {\n      // If something errored or completed, we can't really be sure,\n      // so those are false.\n      return workInProgressRootExitStatus === RootInProgress;\n    }\n\n    function renderRootSync(root, lanes) {\n      var prevExecutionContext = executionContext;\n      executionContext |= RenderContext;\n      var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack\n      // and prepare a fresh one. Otherwise we'll continue where we left off.\n\n      if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n        prepareFreshStack(root, lanes);\n      }\n\n      do {\n        try {\n          workLoopSync();\n          break;\n        } catch (thrownValue) {\n          handleError(root, thrownValue);\n        }\n      } while (true);\n\n      resetContextDependencies();\n      executionContext = prevExecutionContext;\n      popDispatcher(prevDispatcher);\n\n      if (workInProgress !== null) {\n        // This is a sync render, so we should have finished the whole tree.\n        throw new Error('Cannot commit an incomplete root. This error is likely caused by a ' + 'bug in React. Please file an issue.');\n      }\n\n      workInProgressRoot = null;\n      workInProgressRootRenderLanes = NoLanes;\n      return workInProgressRootExitStatus;\n    } // The work loop is an extremely hot path. Tell Closure not to inline it.\n\n    /** @noinline */\n\n\n    function workLoopSync() {\n      // Already timed out, so perform work without checking if we need to yield.\n      while (workInProgress !== null) {\n        performUnitOfWork(workInProgress);\n      }\n    }\n\n    function renderRootConcurrent(root, lanes) {\n      var prevExecutionContext = executionContext;\n      executionContext |= RenderContext;\n      var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack\n      // and prepare a fresh one. Otherwise we'll continue where we left off.\n\n      if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n        resetRenderTimer();\n        prepareFreshStack(root, lanes);\n      }\n\n      do {\n        try {\n          workLoopConcurrent();\n          break;\n        } catch (thrownValue) {\n          handleError(root, thrownValue);\n        }\n      } while (true);\n\n      resetContextDependencies();\n      popDispatcher(prevDispatcher);\n      executionContext = prevExecutionContext;\n\n      if (workInProgress !== null) {\n        return RootInProgress;\n      } else {\n        workInProgressRoot = null;\n        workInProgressRootRenderLanes = NoLanes; // Return the final exit status.\n\n        return workInProgressRootExitStatus;\n      }\n    }\n    /** @noinline */\n\n\n    function workLoopConcurrent() {\n      // Perform work until Scheduler asks us to yield\n      while (workInProgress !== null && !shouldYield()) {\n        performUnitOfWork(workInProgress);\n      }\n    }\n\n    function performUnitOfWork(unitOfWork) {\n      // The current, flushed, state of this fiber is the alternate. Ideally\n      // nothing should rely on this, but relying on it here means that we don't\n      // need an additional field on the work in progress.\n      var current = unitOfWork.alternate;\n      setCurrentFiber(unitOfWork);\n      var next;\n\n      if ((unitOfWork.mode & ProfileMode) !== NoMode) {\n        startProfilerTimer(unitOfWork);\n        next = beginWork$1(current, unitOfWork, subtreeRenderLanes);\n        stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);\n      } else {\n        next = beginWork$1(current, unitOfWork, subtreeRenderLanes);\n      }\n\n      resetCurrentFiber();\n      unitOfWork.memoizedProps = unitOfWork.pendingProps;\n\n      if (next === null) {\n        // If this doesn't spawn new work, complete the current work.\n        completeUnitOfWork(unitOfWork);\n      } else {\n        workInProgress = next;\n      }\n\n      ReactCurrentOwner$2.current = null;\n    }\n\n    function completeUnitOfWork(unitOfWork) {\n      // Attempt to complete the current unit of work, then move to the next\n      // sibling. If there are no more siblings, return to the parent fiber.\n      var completedWork = unitOfWork;\n\n      do {\n        // The current, flushed, state of this fiber is the alternate. Ideally\n        // nothing should rely on this, but relying on it here means that we don't\n        // need an additional field on the work in progress.\n        var current = completedWork.alternate;\n        var returnFiber = completedWork.return; // Check if the work completed or if something threw.\n\n        if ((completedWork.flags & Incomplete) === NoFlags) {\n          setCurrentFiber(completedWork);\n          var next = void 0;\n\n          if ((completedWork.mode & ProfileMode) === NoMode) {\n            next = completeWork(current, completedWork, subtreeRenderLanes);\n          } else {\n            startProfilerTimer(completedWork);\n            next = completeWork(current, completedWork, subtreeRenderLanes); // Update render duration assuming we didn't error.\n\n            stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);\n          }\n\n          resetCurrentFiber();\n\n          if (next !== null) {\n            // Completing this fiber spawned new work. Work on that next.\n            workInProgress = next;\n            return;\n          }\n        } else {\n          // This fiber did not complete because something threw. Pop values off\n          // the stack without entering the complete phase. If this is a boundary,\n          // capture values if possible.\n          var _next = unwindWork(current, completedWork); // Because this fiber did not complete, don't reset its lanes.\n\n\n          if (_next !== null) {\n            // If completing this work spawned new work, do that next. We'll come\n            // back here again.\n            // Since we're restarting, remove anything that is not a host effect\n            // from the effect tag.\n            _next.flags &= HostEffectMask;\n            workInProgress = _next;\n            return;\n          }\n\n          if ((completedWork.mode & ProfileMode) !== NoMode) {\n            // Record the render duration for the fiber that errored.\n            stopProfilerTimerIfRunningAndRecordDelta(completedWork, false); // Include the time spent working on failed children before continuing.\n\n            var actualDuration = completedWork.actualDuration;\n            var child = completedWork.child;\n\n            while (child !== null) {\n              actualDuration += child.actualDuration;\n              child = child.sibling;\n            }\n\n            completedWork.actualDuration = actualDuration;\n          }\n\n          if (returnFiber !== null) {\n            // Mark the parent fiber as incomplete and clear its subtree flags.\n            returnFiber.flags |= Incomplete;\n            returnFiber.subtreeFlags = NoFlags;\n            returnFiber.deletions = null;\n          } else {\n            // We've unwound all the way to the root.\n            workInProgressRootExitStatus = RootDidNotComplete;\n            workInProgress = null;\n            return;\n          }\n        }\n\n        var siblingFiber = completedWork.sibling;\n\n        if (siblingFiber !== null) {\n          // If there is more work to do in this returnFiber, do that next.\n          workInProgress = siblingFiber;\n          return;\n        } // Otherwise, return to the parent\n\n\n        completedWork = returnFiber; // Update the next thing we're working on in case something throws.\n\n        workInProgress = completedWork;\n      } while (completedWork !== null); // We've reached the root.\n\n\n      if (workInProgressRootExitStatus === RootInProgress) {\n        workInProgressRootExitStatus = RootCompleted;\n      }\n    }\n\n    function commitRoot(root, recoverableErrors) {\n      // TODO: This no longer makes any sense. We already wrap the mutation and\n      // layout phases. Should be able to remove.\n      var previousUpdateLanePriority = getCurrentUpdatePriority();\n      var prevTransition = ReactCurrentBatchConfig$2.transition;\n\n      try {\n        ReactCurrentBatchConfig$2.transition = null;\n        setCurrentUpdatePriority(DiscreteEventPriority);\n        commitRootImpl(root, recoverableErrors, previousUpdateLanePriority);\n      } finally {\n        ReactCurrentBatchConfig$2.transition = prevTransition;\n        setCurrentUpdatePriority(previousUpdateLanePriority);\n      }\n\n      return null;\n    }\n\n    function commitRootImpl(root, recoverableErrors, renderPriorityLevel) {\n      do {\n        // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which\n        // means `flushPassiveEffects` will sometimes result in additional\n        // passive effects. So we need to keep flushing in a loop until there are\n        // no more pending effects.\n        // TODO: Might be better if `flushPassiveEffects` did not automatically\n        // flush synchronous work at the end, to avoid factoring hazards like this.\n        flushPassiveEffects();\n      } while (rootWithPendingPassiveEffects !== null);\n\n      flushRenderPhaseStrictModeWarningsInDEV();\n\n      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n        throw new Error('Should not already be working.');\n      }\n\n      var finishedWork = root.finishedWork;\n      var lanes = root.finishedLanes;\n\n      if (finishedWork === null) {\n        return null;\n      } else {\n        {\n          if (lanes === NoLanes) {\n            error('root.finishedLanes should not be empty during a commit. This is a ' + 'bug in React.');\n          }\n        }\n      }\n\n      root.finishedWork = null;\n      root.finishedLanes = NoLanes;\n\n      if (finishedWork === root.current) {\n        throw new Error('Cannot commit the same tree as before. This error is likely caused by ' + 'a bug in React. Please file an issue.');\n      } // commitRoot never returns a continuation; it always finishes synchronously.\n      // So we can clear these now to allow a new callback to be scheduled.\n\n\n      root.callbackNode = null;\n      root.callbackPriority = NoLane; // Update the first and last pending times on this root. The new first\n      // pending time is whatever is left on the root fiber.\n\n      var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);\n      markRootFinished(root, remainingLanes);\n\n      if (root === workInProgressRoot) {\n        // We can reset these now that they are finished.\n        workInProgressRoot = null;\n        workInProgress = null;\n        workInProgressRootRenderLanes = NoLanes;\n      } // If there are pending passive effects, schedule a callback to process them.\n      // Do this as early as possible, so it is queued before anything else that\n      // might get scheduled in the commit phase. (See #16714.)\n      // TODO: Delete all other places that schedule the passive effect callback\n      // They're redundant.\n\n\n      if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {\n        if (!rootDoesHavePassiveEffects) {\n          rootDoesHavePassiveEffects = true;\n          scheduleCallback$1(NormalPriority, function () {\n            flushPassiveEffects(); // This render triggered passive effects: release the root cache pool\n            // *after* passive effects fire to avoid freeing a cache pool that may\n            // be referenced by a node in the tree (HostRoot, Cache boundary etc)\n\n            return null;\n          });\n        }\n      } // Check if there are any effects in the whole tree.\n      // TODO: This is left over from the effect list implementation, where we had\n      // to check for the existence of `firstEffect` to satisfy Flow. I think the\n      // only other reason this optimization exists is because it affects profiling.\n      // Reconsider whether this is necessary.\n\n\n      var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;\n      var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;\n\n      if (subtreeHasEffects || rootHasEffect) {\n        var prevTransition = ReactCurrentBatchConfig$2.transition;\n        ReactCurrentBatchConfig$2.transition = null;\n        var previousPriority = getCurrentUpdatePriority();\n        setCurrentUpdatePriority(DiscreteEventPriority);\n        var prevExecutionContext = executionContext;\n        executionContext |= CommitContext; // Reset this to null before calling lifecycles\n\n        ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass\n        // of the effect list for each phase: all mutation effects come before all\n        // layout effects, and so on.\n        // The first phase a \"before mutation\" phase. We use this phase to read the\n        // state of the host tree right before we mutate it. This is where\n        // getSnapshotBeforeUpdate is called.\n\n        var shouldFireAfterActiveInstanceBlur = commitBeforeMutationEffects(root, finishedWork);\n        {\n          // Mark the current commit time to be shared by all Profilers in this\n          // batch. This enables them to be grouped later.\n          recordCommitTime();\n        }\n        commitMutationEffects(root, finishedWork, lanes);\n        resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after\n        // the mutation phase, so that the previous tree is still current during\n        // componentWillUnmount, but before the layout phase, so that the finished\n        // work is current during componentDidMount/Update.\n\n        root.current = finishedWork; // The next phase is the layout phase, where we call effects that read\n\n        commitLayoutEffects(finishedWork, root, lanes); // opportunity to paint.\n\n        requestPaint();\n        executionContext = prevExecutionContext; // Reset the priority to the previous non-sync value.\n\n        setCurrentUpdatePriority(previousPriority);\n        ReactCurrentBatchConfig$2.transition = prevTransition;\n      } else {\n        // No effects.\n        root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were\n        // no effects.\n        // TODO: Maybe there's a better way to report this.\n\n        {\n          recordCommitTime();\n        }\n      }\n\n      if (rootDoesHavePassiveEffects) {\n        // This commit has passive effects. Stash a reference to them. But don't\n        // schedule a callback until after flushing layout work.\n        rootDoesHavePassiveEffects = false;\n        rootWithPendingPassiveEffects = root;\n        pendingPassiveEffectsLanes = lanes;\n      } // Read this again, since an effect might have updated it\n\n\n      remainingLanes = root.pendingLanes; // Check if there's remaining work on this root\n      // TODO: This is part of the `componentDidCatch` implementation. Its purpose\n      // is to detect whether something might have called setState inside\n      // `componentDidCatch`. The mechanism is known to be flawed because `setState`\n      // inside `componentDidCatch` is itself flawed — that's why we recommend\n      // `getDerivedStateFromError` instead. However, it could be improved by\n      // checking if remainingLanes includes Sync work, instead of whether there's\n      // any work remaining at all (which would also include stuff like Suspense\n      // retries or transitions). It's been like this for a while, though, so fixing\n      // it probably isn't that urgent.\n\n      if (remainingLanes === NoLanes) {\n        // If there's no remaining work, we can clear the set of already failed\n        // error boundaries.\n        legacyErrorBoundariesThatAlreadyFailed = null;\n      }\n\n      onCommitRoot(finishedWork.stateNode, renderPriorityLevel); // additional work on this root is scheduled.\n\n      ensureRootIsScheduled(root, now());\n\n      if (recoverableErrors !== null) {\n        // There were errors during this render, but recovered from them without\n        // needing to surface it to the UI. We log them here.\n        var onRecoverableError = root.onRecoverableError;\n\n        for (var i = 0; i < recoverableErrors.length; i++) {\n          var recoverableError = recoverableErrors[i];\n          onRecoverableError(recoverableError);\n        }\n      }\n\n      if (hasUncaughtError) {\n        hasUncaughtError = false;\n        var error$1 = firstUncaughtError;\n        firstUncaughtError = null;\n        throw error$1;\n      } // If the passive effects are the result of a discrete render, flush them\n      // synchronously at the end of the current task so that the result is\n      // immediately observable. Otherwise, we assume that they are not\n      // order-dependent and do not need to be observed by external systems, so we\n      // can wait until after paint.\n      // TODO: We can optimize this by not scheduling the callback earlier. Since we\n      // currently schedule the callback in multiple places, will wait until those\n      // are consolidated.\n\n\n      if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root.tag !== LegacyRoot) {\n        flushPassiveEffects();\n      } // Read this again, since a passive effect might have updated it\n\n\n      remainingLanes = root.pendingLanes;\n\n      if (includesSomeLane(remainingLanes, SyncLane)) {\n        {\n          markNestedUpdateScheduled();\n        } // Count the number of times the root synchronously re-renders without\n        // finishing. If there are too many, it indicates an infinite update loop.\n\n        if (root === rootWithNestedUpdates) {\n          nestedUpdateCount++;\n        } else {\n          nestedUpdateCount = 0;\n          rootWithNestedUpdates = root;\n        }\n      } else {\n        nestedUpdateCount = 0;\n      } // If layout work was scheduled, flush it now.\n\n\n      flushSyncCallbacks();\n      return null;\n    }\n\n    function flushPassiveEffects() {\n      // Returns whether passive effects were flushed.\n      // TODO: Combine this check with the one in flushPassiveEFfectsImpl. We should\n      // probably just combine the two functions. I believe they were only separate\n      // in the first place because we used to wrap it with\n      // `Scheduler.runWithPriority`, which accepts a function. But now we track the\n      // priority within React itself, so we can mutate the variable directly.\n      if (rootWithPendingPassiveEffects !== null) {\n        var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);\n        var priority = lowerEventPriority(DefaultEventPriority, renderPriority);\n        var prevTransition = ReactCurrentBatchConfig$2.transition;\n        var previousPriority = getCurrentUpdatePriority();\n\n        try {\n          ReactCurrentBatchConfig$2.transition = null;\n          setCurrentUpdatePriority(priority);\n          return flushPassiveEffectsImpl();\n        } finally {\n          setCurrentUpdatePriority(previousPriority);\n          ReactCurrentBatchConfig$2.transition = prevTransition; // Once passive effects have run for the tree - giving components a\n        }\n      }\n\n      return false;\n    }\n\n    function enqueuePendingPassiveProfilerEffect(fiber) {\n      {\n        pendingPassiveProfilerEffects.push(fiber);\n\n        if (!rootDoesHavePassiveEffects) {\n          rootDoesHavePassiveEffects = true;\n          scheduleCallback$1(NormalPriority, function () {\n            flushPassiveEffects();\n            return null;\n          });\n        }\n      }\n    }\n\n    function flushPassiveEffectsImpl() {\n      if (rootWithPendingPassiveEffects === null) {\n        return false;\n      }\n\n      var root = rootWithPendingPassiveEffects;\n      rootWithPendingPassiveEffects = null; // TODO: This is sometimes out of sync with rootWithPendingPassiveEffects.\n      // Figure out why and fix it. It's not causing any known issues (probably\n      // because it's only used for profiling), but it's a refactor hazard.\n\n      pendingPassiveEffectsLanes = NoLanes;\n\n      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n        throw new Error('Cannot flush passive effects while already rendering.');\n      }\n\n      var prevExecutionContext = executionContext;\n      executionContext |= CommitContext;\n      commitPassiveUnmountEffects(root.current);\n      commitPassiveMountEffects(root, root.current); // TODO: Move to commitPassiveMountEffects\n\n      {\n        var profilerEffects = pendingPassiveProfilerEffects;\n        pendingPassiveProfilerEffects = [];\n\n        for (var i = 0; i < profilerEffects.length; i++) {\n          var _fiber = profilerEffects[i];\n          commitPassiveEffectDurations(root, _fiber);\n        }\n      }\n      executionContext = prevExecutionContext;\n      flushSyncCallbacks(); // If additional passive effects were scheduled, increment a counter. If this\n      // exceeds the limit, we'll fire a warning.\n\n      nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1; // TODO: Move to commitPassiveMountEffects\n\n      onPostCommitRoot(root);\n      {\n        var stateNode = root.current.stateNode;\n        stateNode.effectDuration = 0;\n        stateNode.passiveEffectDuration = 0;\n      }\n      return true;\n    }\n\n    function isAlreadyFailedLegacyErrorBoundary(instance) {\n      return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);\n    }\n\n    function markLegacyErrorBoundaryAsFailed(instance) {\n      if (legacyErrorBoundariesThatAlreadyFailed === null) {\n        legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);\n      } else {\n        legacyErrorBoundariesThatAlreadyFailed.add(instance);\n      }\n    }\n\n    function prepareToThrowUncaughtError(error) {\n      if (!hasUncaughtError) {\n        hasUncaughtError = true;\n        firstUncaughtError = error;\n      }\n    }\n\n    var onUncaughtError = prepareToThrowUncaughtError;\n\n    function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {\n      var errorInfo = createCapturedValue(error, sourceFiber);\n      var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);\n      enqueueUpdate(rootFiber, update);\n      var eventTime = requestEventTime();\n      var root = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);\n\n      if (root !== null) {\n        markRootUpdated(root, SyncLane, eventTime);\n        ensureRootIsScheduled(root, eventTime);\n      }\n    }\n\n    function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {\n      if (sourceFiber.tag === HostRoot) {\n        // Error was thrown at the root. There is no parent, so the root\n        // itself should capture it.\n        captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);\n        return;\n      }\n\n      var fiber = null;\n      {\n        fiber = sourceFiber.return;\n      }\n\n      while (fiber !== null) {\n        if (fiber.tag === HostRoot) {\n          captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);\n          return;\n        } else if (fiber.tag === ClassComponent) {\n          var ctor = fiber.type;\n          var instance = fiber.stateNode;\n\n          if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {\n            var errorInfo = createCapturedValue(error$1, sourceFiber);\n            var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);\n            enqueueUpdate(fiber, update);\n            var eventTime = requestEventTime();\n            var root = markUpdateLaneFromFiberToRoot(fiber, SyncLane);\n\n            if (root !== null) {\n              markRootUpdated(root, SyncLane, eventTime);\n              ensureRootIsScheduled(root, eventTime);\n            }\n\n            return;\n          }\n        }\n\n        fiber = fiber.return;\n      }\n\n      {\n        // TODO: Until we re-land skipUnmountedBoundaries (see #20147), this warning\n        // will fire for errors that are thrown by destroy functions inside deleted\n        // trees. What it should instead do is propagate the error to the parent of\n        // the deleted tree. In the meantime, do not add this warning to the\n        // allowlist; this is only for our internal use.\n        error('Internal React error: Attempted to capture a commit phase error ' + 'inside a detached tree. This indicates a bug in React. Likely ' + 'causes include deleting the same fiber more than once, committing an ' + 'already-finished tree, or an inconsistent return pointer.\\n\\n' + 'Error message:\\n\\n%s', error$1);\n      }\n    }\n\n    function pingSuspendedRoot(root, wakeable, pingedLanes) {\n      var pingCache = root.pingCache;\n\n      if (pingCache !== null) {\n        // The wakeable resolved, so we no longer need to memoize, because it will\n        // never be thrown again.\n        pingCache.delete(wakeable);\n      }\n\n      var eventTime = requestEventTime();\n      markRootPinged(root, pingedLanes);\n      warnIfSuspenseResolutionNotWrappedWithActDEV(root);\n\n      if (workInProgressRoot === root && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {\n        // Received a ping at the same priority level at which we're currently\n        // rendering. We might want to restart this render. This should mirror\n        // the logic of whether or not a root suspends once it completes.\n        // TODO: If we're rendering sync either due to Sync, Batched or expired,\n        // we should probably never restart.\n        // If we're suspended with delay, or if it's a retry, we'll always suspend\n        // so we can always restart.\n        if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {\n          // Restart from the root.\n          prepareFreshStack(root, NoLanes);\n        } else {\n          // Even though we can't restart right now, we might get an\n          // opportunity later. So we mark this render as having a ping.\n          workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);\n        }\n      }\n\n      ensureRootIsScheduled(root, eventTime);\n    }\n\n    function retryTimedOutBoundary(boundaryFiber, retryLane) {\n      // The boundary fiber (a Suspense component or SuspenseList component)\n      // previously was rendered in its fallback state. One of the promises that\n      // suspended it has resolved, which means at least part of the tree was\n      // likely unblocked. Try rendering again, at a new lanes.\n      if (retryLane === NoLane) {\n        // TODO: Assign this to `suspenseState.retryLane`? to avoid\n        // unnecessary entanglement?\n        retryLane = requestRetryLane(boundaryFiber);\n      } // TODO: Special case idle priority?\n\n\n      var eventTime = requestEventTime();\n      var root = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);\n\n      if (root !== null) {\n        markRootUpdated(root, retryLane, eventTime);\n        ensureRootIsScheduled(root, eventTime);\n      }\n    }\n\n    function resolveRetryWakeable(boundaryFiber, wakeable) {\n      var retryLane = NoLane; // Default\n\n      var retryCache;\n      {\n        retryCache = boundaryFiber.stateNode;\n      }\n\n      if (retryCache !== null) {\n        // The wakeable resolved, so we no longer need to memoize, because it will\n        // never be thrown again.\n        retryCache.delete(wakeable);\n      }\n\n      retryTimedOutBoundary(boundaryFiber, retryLane);\n    } // Computes the next Just Noticeable Difference (JND) boundary.\n    // The theory is that a person can't tell the difference between small differences in time.\n    // Therefore, if we wait a bit longer than necessary that won't translate to a noticeable\n    // difference in the experience. However, waiting for longer might mean that we can avoid\n    // showing an intermediate loading state. The longer we have already waited, the harder it\n    // is to tell small differences in time. Therefore, the longer we've already waited,\n    // the longer we can wait additionally. At some point we have to give up though.\n    // We pick a train model where the next boundary commits at a consistent schedule.\n    // These particular numbers are vague estimates. We expect to adjust them based on research.\n\n\n    function jnd(timeElapsed) {\n      return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;\n    }\n\n    function checkForNestedUpdates() {\n      if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {\n        nestedUpdateCount = 0;\n        rootWithNestedUpdates = null;\n        throw new Error('Maximum update depth exceeded. This can happen when a component ' + 'repeatedly calls setState inside componentWillUpdate or ' + 'componentDidUpdate. React limits the number of nested updates to ' + 'prevent infinite loops.');\n      }\n\n      {\n        if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {\n          nestedPassiveUpdateCount = 0;\n          error('Maximum update depth exceeded. This can happen when a component ' + \"calls setState inside useEffect, but useEffect either doesn't \" + 'have a dependency array, or one of the dependencies changes on ' + 'every render.');\n        }\n      }\n    }\n\n    function flushRenderPhaseStrictModeWarningsInDEV() {\n      {\n        ReactStrictModeWarnings.flushLegacyContextWarning();\n        {\n          ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();\n        }\n      }\n    }\n\n    var didWarnStateUpdateForNotYetMountedComponent = null;\n\n    function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {\n      {\n        if ((executionContext & RenderContext) !== NoContext) {\n          // We let the other warning about render phase updates deal with this one.\n          return;\n        }\n\n        if (!(fiber.mode & ConcurrentMode)) {\n          return;\n        }\n\n        var tag = fiber.tag;\n\n        if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {\n          // Only warn for user-defined components, not internal ones like Suspense.\n          return;\n        } // We show the whole stack but dedupe on the top component's name because\n        // the problematic code almost always lies inside that component.\n\n\n        var componentName = getComponentNameFromFiber(fiber) || 'ReactComponent';\n\n        if (didWarnStateUpdateForNotYetMountedComponent !== null) {\n          if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {\n            return;\n          }\n\n          didWarnStateUpdateForNotYetMountedComponent.add(componentName);\n        } else {\n          didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);\n        }\n\n        var previousFiber = current;\n\n        try {\n          setCurrentFiber(fiber);\n          error(\"Can't perform a React state update on a component that hasn't mounted yet. \" + 'This indicates that you have a side-effect in your render function that ' + 'asynchronously later calls tries to update the component. Move this work to ' + 'useEffect instead.');\n        } finally {\n          if (previousFiber) {\n            setCurrentFiber(fiber);\n          } else {\n            resetCurrentFiber();\n          }\n        }\n      }\n    }\n\n    var beginWork$1;\n    {\n      beginWork$1 = beginWork;\n    }\n    var didWarnAboutUpdateInRender = false;\n    var didWarnAboutUpdateInRenderForAnotherComponent;\n    {\n      didWarnAboutUpdateInRenderForAnotherComponent = new Set();\n    }\n\n    function warnAboutRenderPhaseUpdatesInDEV(fiber) {\n      {\n        if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {\n          switch (fiber.tag) {\n            case FunctionComponent:\n            case ForwardRef:\n            case SimpleMemoComponent:\n              {\n                var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || 'Unknown'; // Dedupe by the rendering component because it's the one that needs to be fixed.\n\n                var dedupeKey = renderingComponentName;\n\n                if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {\n                  didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);\n                  var setStateComponentName = getComponentNameFromFiber(fiber) || 'Unknown';\n                  error('Cannot update a component (`%s`) while rendering a ' + 'different component (`%s`). To locate the bad setState() call inside `%s`, ' + 'follow the stack trace as described in https://reactjs.org/link/setstate-in-render', setStateComponentName, renderingComponentName, renderingComponentName);\n                }\n\n                break;\n              }\n\n            case ClassComponent:\n              {\n                if (!didWarnAboutUpdateInRender) {\n                  error('Cannot update during an existing state transition (such as ' + 'within `render`). Render methods should be a pure ' + 'function of props and state.');\n                  didWarnAboutUpdateInRender = true;\n                }\n\n                break;\n              }\n          }\n        }\n      }\n    }\n\n    var fakeActCallbackNode = {};\n\n    function scheduleCallback$1(priorityLevel, callback) {\n      {\n        // If we're currently inside an `act` scope, bypass Scheduler and push to\n        // the `act` queue instead.\n        var actQueue = ReactCurrentActQueue$1.current;\n\n        if (actQueue !== null) {\n          actQueue.push(callback);\n          return fakeActCallbackNode;\n        } else {\n          return scheduleCallback(priorityLevel, callback);\n        }\n      }\n    }\n\n    function cancelCallback$1(callbackNode) {\n      if (callbackNode === fakeActCallbackNode) {\n        return;\n      } // In production, always call Scheduler. This function will be stripped out.\n\n\n      return cancelCallback(callbackNode);\n    }\n\n    function shouldForceFlushFallbacksInDEV() {\n      // Never force flush in production. This function should get stripped out.\n      return ReactCurrentActQueue$1.current !== null;\n    }\n\n    function warnIfUpdatesNotWrappedWithActDEV(fiber) {\n      {\n        if (fiber.mode & ConcurrentMode) {\n          if (!isConcurrentActEnvironment()) {\n            // Not in an act environment. No need to warn.\n            return;\n          }\n        } else {\n          // Legacy mode has additional cases where we suppress a warning.\n          if (!isLegacyActEnvironment()) {\n            // Not in an act environment. No need to warn.\n            return;\n          }\n\n          if (executionContext !== NoContext) {\n            // Legacy mode doesn't warn if the update is batched, i.e.\n            // batchedUpdates or flushSync.\n            return;\n          }\n\n          if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {\n            // For backwards compatibility with pre-hooks code, legacy mode only\n            // warns for updates that originate from a hook.\n            return;\n          }\n        }\n\n        if (ReactCurrentActQueue$1.current === null) {\n          var previousFiber = current;\n\n          try {\n            setCurrentFiber(fiber);\n            error('An update to %s inside a test was not wrapped in act(...).\\n\\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\\n\\n' + 'act(() => {\\n' + '  /* fire events that update state */\\n' + '});\\n' + '/* assert on the output */\\n\\n' + \"This ensures that you're testing the behavior the user would see \" + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act', getComponentNameFromFiber(fiber));\n          } finally {\n            if (previousFiber) {\n              setCurrentFiber(fiber);\n            } else {\n              resetCurrentFiber();\n            }\n          }\n        }\n      }\n    }\n\n    function warnIfSuspenseResolutionNotWrappedWithActDEV(root) {\n      {\n        if (root.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {\n          error('A suspended resource finished loading inside a test, but the event ' + 'was not wrapped in act(...).\\n\\n' + 'When testing, code that resolves suspended data should be wrapped ' + 'into act(...):\\n\\n' + 'act(() => {\\n' + '  /* finish loading suspended data */\\n' + '});\\n' + '/* assert on the output */\\n\\n' + \"This ensures that you're testing the behavior the user would see \" + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act');\n        }\n      }\n    }\n    /* eslint-disable react-internal/prod-error-codes */\n\n\n    var resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.\n\n    var failedBoundaries = null;\n\n    var setRefreshHandler = function (handler) {\n      {\n        resolveFamily = handler;\n      }\n    };\n\n    function resolveFunctionForHotReloading(type) {\n      {\n        if (resolveFamily === null) {\n          // Hot reloading is disabled.\n          return type;\n        }\n\n        var family = resolveFamily(type);\n\n        if (family === undefined) {\n          return type;\n        } // Use the latest known implementation.\n\n\n        return family.current;\n      }\n    }\n\n    function resolveClassForHotReloading(type) {\n      // No implementation differences.\n      return resolveFunctionForHotReloading(type);\n    }\n\n    function resolveForwardRefForHotReloading(type) {\n      {\n        if (resolveFamily === null) {\n          // Hot reloading is disabled.\n          return type;\n        }\n\n        var family = resolveFamily(type);\n\n        if (family === undefined) {\n          // Check if we're dealing with a real forwardRef. Don't want to crash early.\n          if (type !== null && type !== undefined && typeof type.render === 'function') {\n            // ForwardRef is special because its resolved .type is an object,\n            // but it's possible that we only have its inner render function in the map.\n            // If that inner render function is different, we'll build a new forwardRef type.\n            var currentRender = resolveFunctionForHotReloading(type.render);\n\n            if (type.render !== currentRender) {\n              var syntheticType = {\n                $$typeof: REACT_FORWARD_REF_TYPE,\n                render: currentRender\n              };\n\n              if (type.displayName !== undefined) {\n                syntheticType.displayName = type.displayName;\n              }\n\n              return syntheticType;\n            }\n          }\n\n          return type;\n        } // Use the latest known implementation.\n\n\n        return family.current;\n      }\n    }\n\n    function isCompatibleFamilyForHotReloading(fiber, element) {\n      {\n        if (resolveFamily === null) {\n          // Hot reloading is disabled.\n          return false;\n        }\n\n        var prevType = fiber.elementType;\n        var nextType = element.type; // If we got here, we know types aren't === equal.\n\n        var needsCompareFamilies = false;\n        var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;\n\n        switch (fiber.tag) {\n          case ClassComponent:\n            {\n              if (typeof nextType === 'function') {\n                needsCompareFamilies = true;\n              }\n\n              break;\n            }\n\n          case FunctionComponent:\n            {\n              if (typeof nextType === 'function') {\n                needsCompareFamilies = true;\n              } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n                // We don't know the inner type yet.\n                // We're going to assume that the lazy inner type is stable,\n                // and so it is sufficient to avoid reconciling it away.\n                // We're not going to unwrap or actually use the new lazy type.\n                needsCompareFamilies = true;\n              }\n\n              break;\n            }\n\n          case ForwardRef:\n            {\n              if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {\n                needsCompareFamilies = true;\n              } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n                needsCompareFamilies = true;\n              }\n\n              break;\n            }\n\n          case MemoComponent:\n          case SimpleMemoComponent:\n            {\n              if ($$typeofNextType === REACT_MEMO_TYPE) {\n                // TODO: if it was but can no longer be simple,\n                // we shouldn't set this.\n                needsCompareFamilies = true;\n              } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n                needsCompareFamilies = true;\n              }\n\n              break;\n            }\n\n          default:\n            return false;\n        } // Check if both types have a family and it's the same one.\n\n\n        if (needsCompareFamilies) {\n          // Note: memo() and forwardRef() we'll compare outer rather than inner type.\n          // This means both of them need to be registered to preserve state.\n          // If we unwrapped and compared the inner types for wrappers instead,\n          // then we would risk falsely saying two separate memo(Foo)\n          // calls are equivalent because they wrap the same Foo function.\n          var prevFamily = resolveFamily(prevType);\n\n          if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {\n            return true;\n          }\n        }\n\n        return false;\n      }\n    }\n\n    function markFailedErrorBoundaryForHotReloading(fiber) {\n      {\n        if (resolveFamily === null) {\n          // Hot reloading is disabled.\n          return;\n        }\n\n        if (typeof WeakSet !== 'function') {\n          return;\n        }\n\n        if (failedBoundaries === null) {\n          failedBoundaries = new WeakSet();\n        }\n\n        failedBoundaries.add(fiber);\n      }\n    }\n\n    var scheduleRefresh = function (root, update) {\n      {\n        if (resolveFamily === null) {\n          // Hot reloading is disabled.\n          return;\n        }\n\n        var staleFamilies = update.staleFamilies,\n            updatedFamilies = update.updatedFamilies;\n        flushPassiveEffects();\n        flushSync(function () {\n          scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);\n        });\n      }\n    };\n\n    var scheduleRoot = function (root, element) {\n      {\n        if (root.context !== emptyContextObject) {\n          // Super edge case: root has a legacy _renderSubtree context\n          // but we don't know the parentComponent so we can't pass it.\n          // Just ignore. We'll delete this with _renderSubtree code path later.\n          return;\n        }\n\n        flushPassiveEffects();\n        flushSync(function () {\n          updateContainer(element, root, null, null);\n        });\n      }\n    };\n\n    function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {\n      {\n        var alternate = fiber.alternate,\n            child = fiber.child,\n            sibling = fiber.sibling,\n            tag = fiber.tag,\n            type = fiber.type;\n        var candidateType = null;\n\n        switch (tag) {\n          case FunctionComponent:\n          case SimpleMemoComponent:\n          case ClassComponent:\n            candidateType = type;\n            break;\n\n          case ForwardRef:\n            candidateType = type.render;\n            break;\n        }\n\n        if (resolveFamily === null) {\n          throw new Error('Expected resolveFamily to be set during hot reload.');\n        }\n\n        var needsRender = false;\n        var needsRemount = false;\n\n        if (candidateType !== null) {\n          var family = resolveFamily(candidateType);\n\n          if (family !== undefined) {\n            if (staleFamilies.has(family)) {\n              needsRemount = true;\n            } else if (updatedFamilies.has(family)) {\n              if (tag === ClassComponent) {\n                needsRemount = true;\n              } else {\n                needsRender = true;\n              }\n            }\n          }\n        }\n\n        if (failedBoundaries !== null) {\n          if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {\n            needsRemount = true;\n          }\n        }\n\n        if (needsRemount) {\n          fiber._debugNeedsRemount = true;\n        }\n\n        if (needsRemount || needsRender) {\n          scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n        }\n\n        if (child !== null && !needsRemount) {\n          scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);\n        }\n\n        if (sibling !== null) {\n          scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);\n        }\n      }\n    }\n\n    var findHostInstancesForRefresh = function (root, families) {\n      {\n        var hostInstances = new Set();\n        var types = new Set(families.map(function (family) {\n          return family.current;\n        }));\n        findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);\n        return hostInstances;\n      }\n    };\n\n    function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {\n      {\n        var child = fiber.child,\n            sibling = fiber.sibling,\n            tag = fiber.tag,\n            type = fiber.type;\n        var candidateType = null;\n\n        switch (tag) {\n          case FunctionComponent:\n          case SimpleMemoComponent:\n          case ClassComponent:\n            candidateType = type;\n            break;\n\n          case ForwardRef:\n            candidateType = type.render;\n            break;\n        }\n\n        var didMatch = false;\n\n        if (candidateType !== null) {\n          if (types.has(candidateType)) {\n            didMatch = true;\n          }\n        }\n\n        if (didMatch) {\n          // We have a match. This only drills down to the closest host components.\n          // There's no need to search deeper because for the purpose of giving\n          // visual feedback, \"flashing\" outermost parent rectangles is sufficient.\n          findHostInstancesForFiberShallowly(fiber, hostInstances);\n        } else {\n          // If there's no match, maybe there will be one further down in the child tree.\n          if (child !== null) {\n            findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);\n          }\n        }\n\n        if (sibling !== null) {\n          findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);\n        }\n      }\n    }\n\n    function findHostInstancesForFiberShallowly(fiber, hostInstances) {\n      {\n        var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);\n\n        if (foundHostInstances) {\n          return;\n        } // If we didn't find any host children, fallback to closest host parent.\n\n\n        var node = fiber;\n\n        while (true) {\n          switch (node.tag) {\n            case HostComponent:\n              hostInstances.add(node.stateNode);\n              return;\n\n            case HostPortal:\n              hostInstances.add(node.stateNode.containerInfo);\n              return;\n\n            case HostRoot:\n              hostInstances.add(node.stateNode.containerInfo);\n              return;\n          }\n\n          if (node.return === null) {\n            throw new Error('Expected to reach root first.');\n          }\n\n          node = node.return;\n        }\n      }\n    }\n\n    function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {\n      {\n        var node = fiber;\n        var foundHostInstances = false;\n\n        while (true) {\n          if (node.tag === HostComponent) {\n            // We got a match.\n            foundHostInstances = true;\n            hostInstances.add(node.stateNode); // There may still be more, so keep searching.\n          } else if (node.child !== null) {\n            node.child.return = node;\n            node = node.child;\n            continue;\n          }\n\n          if (node === fiber) {\n            return foundHostInstances;\n          }\n\n          while (node.sibling === null) {\n            if (node.return === null || node.return === fiber) {\n              return foundHostInstances;\n            }\n\n            node = node.return;\n          }\n\n          node.sibling.return = node.return;\n          node = node.sibling;\n        }\n      }\n      return false;\n    }\n\n    var hasBadMapPolyfill;\n    {\n      hasBadMapPolyfill = false;\n\n      try {\n        var nonExtensibleObject = Object.preventExtensions({});\n        /* eslint-disable no-new */\n\n        new Map([[nonExtensibleObject, null]]);\n        new Set([nonExtensibleObject]);\n        /* eslint-enable no-new */\n      } catch (e) {\n        // TODO: Consider warning about bad polyfills\n        hasBadMapPolyfill = true;\n      }\n    }\n\n    function FiberNode(tag, pendingProps, key, mode) {\n      // Instance\n      this.tag = tag;\n      this.key = key;\n      this.elementType = null;\n      this.type = null;\n      this.stateNode = null; // Fiber\n\n      this.return = null;\n      this.child = null;\n      this.sibling = null;\n      this.index = 0;\n      this.ref = null;\n      this.pendingProps = pendingProps;\n      this.memoizedProps = null;\n      this.updateQueue = null;\n      this.memoizedState = null;\n      this.dependencies = null;\n      this.mode = mode; // Effects\n\n      this.flags = NoFlags;\n      this.subtreeFlags = NoFlags;\n      this.deletions = null;\n      this.lanes = NoLanes;\n      this.childLanes = NoLanes;\n      this.alternate = null;\n      {\n        // Note: The following is done to avoid a v8 performance cliff.\n        //\n        // Initializing the fields below to smis and later updating them with\n        // double values will cause Fibers to end up having separate shapes.\n        // This behavior/bug has something to do with Object.preventExtension().\n        // Fortunately this only impacts DEV builds.\n        // Unfortunately it makes React unusably slow for some applications.\n        // To work around this, initialize the fields below with doubles.\n        //\n        // Learn more about this here:\n        // https://github.com/facebook/react/issues/14365\n        // https://bugs.chromium.org/p/v8/issues/detail?id=8538\n        this.actualDuration = Number.NaN;\n        this.actualStartTime = Number.NaN;\n        this.selfBaseDuration = Number.NaN;\n        this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.\n        // This won't trigger the performance cliff mentioned above,\n        // and it simplifies other profiler code (including DevTools).\n\n        this.actualDuration = 0;\n        this.actualStartTime = -1;\n        this.selfBaseDuration = 0;\n        this.treeBaseDuration = 0;\n      }\n      {\n        // This isn't directly used but is handy for debugging internals:\n        this._debugSource = null;\n        this._debugOwner = null;\n        this._debugNeedsRemount = false;\n        this._debugHookTypes = null;\n\n        if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {\n          Object.preventExtensions(this);\n        }\n      }\n    } // This is a constructor function, rather than a POJO constructor, still\n    // please ensure we do the following:\n    // 1) Nobody should add any instance methods on this. Instance methods can be\n    //    more difficult to predict when they get optimized and they are almost\n    //    never inlined properly in static compilers.\n    // 2) Nobody should rely on `instanceof Fiber` for type testing. We should\n    //    always know when it is a fiber.\n    // 3) We might want to experiment with using numeric keys since they are easier\n    //    to optimize in a non-JIT environment.\n    // 4) We can easily go from a constructor to a createFiber object literal if that\n    //    is faster.\n    // 5) It should be easy to port this to a C struct and keep a C implementation\n    //    compatible.\n\n\n    var createFiber = function (tag, pendingProps, key, mode) {\n      // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors\n      return new FiberNode(tag, pendingProps, key, mode);\n    };\n\n    function shouldConstruct$1(Component) {\n      var prototype = Component.prototype;\n      return !!(prototype && prototype.isReactComponent);\n    }\n\n    function isSimpleFunctionComponent(type) {\n      return typeof type === 'function' && !shouldConstruct$1(type) && type.defaultProps === undefined;\n    }\n\n    function resolveLazyComponentTag(Component) {\n      if (typeof Component === 'function') {\n        return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;\n      } else if (Component !== undefined && Component !== null) {\n        var $$typeof = Component.$$typeof;\n\n        if ($$typeof === REACT_FORWARD_REF_TYPE) {\n          return ForwardRef;\n        }\n\n        if ($$typeof === REACT_MEMO_TYPE) {\n          return MemoComponent;\n        }\n      }\n\n      return IndeterminateComponent;\n    } // This is used to create an alternate fiber to do work on.\n\n\n    function createWorkInProgress(current, pendingProps) {\n      var workInProgress = current.alternate;\n\n      if (workInProgress === null) {\n        // We use a double buffering pooling technique because we know that we'll\n        // only ever need at most two versions of a tree. We pool the \"other\" unused\n        // node that we're free to reuse. This is lazily created to avoid allocating\n        // extra objects for things that are never updated. It also allow us to\n        // reclaim the extra memory if needed.\n        workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);\n        workInProgress.elementType = current.elementType;\n        workInProgress.type = current.type;\n        workInProgress.stateNode = current.stateNode;\n        {\n          // DEV-only fields\n          workInProgress._debugSource = current._debugSource;\n          workInProgress._debugOwner = current._debugOwner;\n          workInProgress._debugHookTypes = current._debugHookTypes;\n        }\n        workInProgress.alternate = current;\n        current.alternate = workInProgress;\n      } else {\n        workInProgress.pendingProps = pendingProps; // Needed because Blocks store data on type.\n\n        workInProgress.type = current.type; // We already have an alternate.\n        // Reset the effect tag.\n\n        workInProgress.flags = NoFlags; // The effects are no longer valid.\n\n        workInProgress.subtreeFlags = NoFlags;\n        workInProgress.deletions = null;\n        {\n          // We intentionally reset, rather than copy, actualDuration & actualStartTime.\n          // This prevents time from endlessly accumulating in new commits.\n          // This has the downside of resetting values for different priority renders,\n          // But works for yielding (the common case) and should support resuming.\n          workInProgress.actualDuration = 0;\n          workInProgress.actualStartTime = -1;\n        }\n      } // Reset all effects except static ones.\n      // Static effects are not specific to a render.\n\n\n      workInProgress.flags = current.flags & StaticMask;\n      workInProgress.childLanes = current.childLanes;\n      workInProgress.lanes = current.lanes;\n      workInProgress.child = current.child;\n      workInProgress.memoizedProps = current.memoizedProps;\n      workInProgress.memoizedState = current.memoizedState;\n      workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so\n      // it cannot be shared with the current fiber.\n\n      var currentDependencies = current.dependencies;\n      workInProgress.dependencies = currentDependencies === null ? null : {\n        lanes: currentDependencies.lanes,\n        firstContext: currentDependencies.firstContext\n      }; // These will be overridden during the parent's reconciliation\n\n      workInProgress.sibling = current.sibling;\n      workInProgress.index = current.index;\n      workInProgress.ref = current.ref;\n      {\n        workInProgress.selfBaseDuration = current.selfBaseDuration;\n        workInProgress.treeBaseDuration = current.treeBaseDuration;\n      }\n      {\n        workInProgress._debugNeedsRemount = current._debugNeedsRemount;\n\n        switch (workInProgress.tag) {\n          case IndeterminateComponent:\n          case FunctionComponent:\n          case SimpleMemoComponent:\n            workInProgress.type = resolveFunctionForHotReloading(current.type);\n            break;\n\n          case ClassComponent:\n            workInProgress.type = resolveClassForHotReloading(current.type);\n            break;\n\n          case ForwardRef:\n            workInProgress.type = resolveForwardRefForHotReloading(current.type);\n            break;\n        }\n      }\n      return workInProgress;\n    } // Used to reuse a Fiber for a second pass.\n\n\n    function resetWorkInProgress(workInProgress, renderLanes) {\n      // This resets the Fiber to what createFiber or createWorkInProgress would\n      // have set the values to before during the first pass. Ideally this wouldn't\n      // be necessary but unfortunately many code paths reads from the workInProgress\n      // when they should be reading from current and writing to workInProgress.\n      // We assume pendingProps, index, key, ref, return are still untouched to\n      // avoid doing another reconciliation.\n      // Reset the effect flags but keep any Placement tags, since that's something\n      // that child fiber is setting, not the reconciliation.\n      workInProgress.flags &= StaticMask | Placement; // The effects are no longer valid.\n\n      var current = workInProgress.alternate;\n\n      if (current === null) {\n        // Reset to createFiber's initial values.\n        workInProgress.childLanes = NoLanes;\n        workInProgress.lanes = renderLanes;\n        workInProgress.child = null;\n        workInProgress.subtreeFlags = NoFlags;\n        workInProgress.memoizedProps = null;\n        workInProgress.memoizedState = null;\n        workInProgress.updateQueue = null;\n        workInProgress.dependencies = null;\n        workInProgress.stateNode = null;\n        {\n          // Note: We don't reset the actualTime counts. It's useful to accumulate\n          // actual time across multiple render passes.\n          workInProgress.selfBaseDuration = 0;\n          workInProgress.treeBaseDuration = 0;\n        }\n      } else {\n        // Reset to the cloned values that createWorkInProgress would've.\n        workInProgress.childLanes = current.childLanes;\n        workInProgress.lanes = current.lanes;\n        workInProgress.child = current.child;\n        workInProgress.subtreeFlags = NoFlags;\n        workInProgress.deletions = null;\n        workInProgress.memoizedProps = current.memoizedProps;\n        workInProgress.memoizedState = current.memoizedState;\n        workInProgress.updateQueue = current.updateQueue; // Needed because Blocks store data on type.\n\n        workInProgress.type = current.type; // Clone the dependencies object. This is mutated during the render phase, so\n        // it cannot be shared with the current fiber.\n\n        var currentDependencies = current.dependencies;\n        workInProgress.dependencies = currentDependencies === null ? null : {\n          lanes: currentDependencies.lanes,\n          firstContext: currentDependencies.firstContext\n        };\n        {\n          // Note: We don't reset the actualTime counts. It's useful to accumulate\n          // actual time across multiple render passes.\n          workInProgress.selfBaseDuration = current.selfBaseDuration;\n          workInProgress.treeBaseDuration = current.treeBaseDuration;\n        }\n      }\n\n      return workInProgress;\n    }\n\n    function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {\n      var mode;\n\n      if (tag === ConcurrentRoot) {\n        mode = ConcurrentMode;\n\n        if (isStrictMode === true) {\n          mode |= StrictLegacyMode;\n        }\n      } else {\n        mode = NoMode;\n      }\n\n      if (isDevToolsPresent) {\n        // Always collect profile timings when DevTools are present.\n        // This enables DevTools to start capturing timing at any point–\n        // Without some nodes in the tree having empty base times.\n        mode |= ProfileMode;\n      }\n\n      return createFiber(HostRoot, null, null, mode);\n    }\n\n    function createFiberFromTypeAndProps(type, // React$ElementType\n    key, pendingProps, owner, mode, lanes) {\n      var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.\n\n      var resolvedType = type;\n\n      if (typeof type === 'function') {\n        if (shouldConstruct$1(type)) {\n          fiberTag = ClassComponent;\n          {\n            resolvedType = resolveClassForHotReloading(resolvedType);\n          }\n        } else {\n          {\n            resolvedType = resolveFunctionForHotReloading(resolvedType);\n          }\n        }\n      } else if (typeof type === 'string') {\n        fiberTag = HostComponent;\n      } else {\n        getTag: switch (type) {\n          case REACT_FRAGMENT_TYPE:\n            return createFiberFromFragment(pendingProps.children, mode, lanes, key);\n\n          case REACT_STRICT_MODE_TYPE:\n            fiberTag = Mode;\n            mode |= StrictLegacyMode;\n            break;\n\n          case REACT_PROFILER_TYPE:\n            return createFiberFromProfiler(pendingProps, mode, lanes, key);\n\n          case REACT_SUSPENSE_TYPE:\n            return createFiberFromSuspense(pendingProps, mode, lanes, key);\n\n          case REACT_SUSPENSE_LIST_TYPE:\n            return createFiberFromSuspenseList(pendingProps, mode, lanes, key);\n\n          case REACT_OFFSCREEN_TYPE:\n            return createFiberFromOffscreen(pendingProps, mode, lanes, key);\n\n          case REACT_LEGACY_HIDDEN_TYPE: // eslint-disable-next-line no-fallthrough\n\n          case REACT_SCOPE_TYPE: // eslint-disable-next-line no-fallthrough\n\n          case REACT_CACHE_TYPE: // eslint-disable-next-line no-fallthrough\n\n          case REACT_TRACING_MARKER_TYPE: // eslint-disable-next-line no-fallthrough\n\n          case REACT_DEBUG_TRACING_MODE_TYPE: // eslint-disable-next-line no-fallthrough\n\n          default:\n            {\n              if (typeof type === 'object' && type !== null) {\n                switch (type.$$typeof) {\n                  case REACT_PROVIDER_TYPE:\n                    fiberTag = ContextProvider;\n                    break getTag;\n\n                  case REACT_CONTEXT_TYPE:\n                    // This is a consumer\n                    fiberTag = ContextConsumer;\n                    break getTag;\n\n                  case REACT_FORWARD_REF_TYPE:\n                    fiberTag = ForwardRef;\n                    {\n                      resolvedType = resolveForwardRefForHotReloading(resolvedType);\n                    }\n                    break getTag;\n\n                  case REACT_MEMO_TYPE:\n                    fiberTag = MemoComponent;\n                    break getTag;\n\n                  case REACT_LAZY_TYPE:\n                    fiberTag = LazyComponent;\n                    resolvedType = null;\n                    break getTag;\n                }\n              }\n\n              var info = '';\n              {\n                if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n                  info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and \" + 'named imports.';\n                }\n\n                var ownerName = owner ? getComponentNameFromFiber(owner) : null;\n\n                if (ownerName) {\n                  info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n                }\n              }\n              throw new Error('Element type is invalid: expected a string (for built-in ' + 'components) or a class/function (for composite components) ' + (\"but got: \" + (type == null ? type : typeof type) + \".\" + info));\n            }\n        }\n      }\n\n      var fiber = createFiber(fiberTag, pendingProps, key, mode);\n      fiber.elementType = type;\n      fiber.type = resolvedType;\n      fiber.lanes = lanes;\n      {\n        fiber._debugOwner = owner;\n      }\n      return fiber;\n    }\n\n    function createFiberFromElement(element, mode, lanes) {\n      var owner = null;\n      {\n        owner = element._owner;\n      }\n      var type = element.type;\n      var key = element.key;\n      var pendingProps = element.props;\n      var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);\n      {\n        fiber._debugSource = element._source;\n        fiber._debugOwner = element._owner;\n      }\n      return fiber;\n    }\n\n    function createFiberFromFragment(elements, mode, lanes, key) {\n      var fiber = createFiber(Fragment, elements, key, mode);\n      fiber.lanes = lanes;\n      return fiber;\n    }\n\n    function createFiberFromProfiler(pendingProps, mode, lanes, key) {\n      {\n        if (typeof pendingProps.id !== 'string') {\n          error('Profiler must specify an \"id\" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);\n        }\n      }\n      var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);\n      fiber.elementType = REACT_PROFILER_TYPE;\n      fiber.lanes = lanes;\n      {\n        fiber.stateNode = {\n          effectDuration: 0,\n          passiveEffectDuration: 0\n        };\n      }\n      return fiber;\n    }\n\n    function createFiberFromSuspense(pendingProps, mode, lanes, key) {\n      var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);\n      fiber.elementType = REACT_SUSPENSE_TYPE;\n      fiber.lanes = lanes;\n      return fiber;\n    }\n\n    function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {\n      var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);\n      fiber.elementType = REACT_SUSPENSE_LIST_TYPE;\n      fiber.lanes = lanes;\n      return fiber;\n    }\n\n    function createFiberFromOffscreen(pendingProps, mode, lanes, key) {\n      var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);\n      fiber.elementType = REACT_OFFSCREEN_TYPE;\n      fiber.lanes = lanes;\n      var primaryChildInstance = {};\n      fiber.stateNode = primaryChildInstance;\n      return fiber;\n    }\n\n    function createFiberFromText(content, mode, lanes) {\n      var fiber = createFiber(HostText, content, null, mode);\n      fiber.lanes = lanes;\n      return fiber;\n    }\n\n    function createFiberFromPortal(portal, mode, lanes) {\n      var pendingProps = portal.children !== null ? portal.children : [];\n      var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);\n      fiber.lanes = lanes;\n      fiber.stateNode = {\n        containerInfo: portal.containerInfo,\n        pendingChildren: null,\n        // Used by persistent updates\n        implementation: portal.implementation\n      };\n      return fiber;\n    } // Used for stashing WIP properties to replay failed work in DEV.\n\n\n    function FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError) {\n      this.tag = tag;\n      this.containerInfo = containerInfo;\n      this.pendingChildren = null;\n      this.current = null;\n      this.pingCache = null;\n      this.finishedWork = null;\n      this.timeoutHandle = noTimeout;\n      this.context = null;\n      this.pendingContext = null;\n      this.callbackNode = null;\n      this.callbackPriority = NoLane;\n      this.eventTimes = createLaneMap(NoLanes);\n      this.expirationTimes = createLaneMap(NoTimestamp);\n      this.pendingLanes = NoLanes;\n      this.suspendedLanes = NoLanes;\n      this.pingedLanes = NoLanes;\n      this.expiredLanes = NoLanes;\n      this.mutableReadLanes = NoLanes;\n      this.finishedLanes = NoLanes;\n      this.entangledLanes = NoLanes;\n      this.entanglements = createLaneMap(NoLanes);\n      this.identifierPrefix = identifierPrefix;\n      this.onRecoverableError = onRecoverableError;\n      {\n        this.effectDuration = 0;\n        this.passiveEffectDuration = 0;\n      }\n      {\n        switch (tag) {\n          case ConcurrentRoot:\n            this._debugRootType = hydrate ? 'hydrateRoot()' : 'createRoot()';\n            break;\n\n          case LegacyRoot:\n            this._debugRootType = hydrate ? 'hydrate()' : 'render()';\n            break;\n        }\n      }\n    }\n\n    function createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, // TODO: We have several of these arguments that are conceptually part of the\n    // host config, but because they are passed in at runtime, we have to thread\n    // them through the root constructor. Perhaps we should put them all into a\n    // single type, like a DynamicHostConfig that is defined by the renderer.\n    identifierPrefix, onRecoverableError, transitionCallbacks) {\n      var root = new FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError); // stateNode is any.\n\n      var uninitializedFiber = createHostRootFiber(tag, isStrictMode);\n      root.current = uninitializedFiber;\n      uninitializedFiber.stateNode = root;\n      {\n        var _initialState = {\n          element: initialChildren,\n          isDehydrated: hydrate,\n          cache: null,\n          // not enabled yet\n          transitions: null\n        };\n        uninitializedFiber.memoizedState = _initialState;\n      }\n      initializeUpdateQueue(uninitializedFiber);\n      return root;\n    }\n\n    var ReactVersion = '18.0.0-fc46dba67-20220329';\n    var didWarnAboutNestedUpdates;\n    {\n      didWarnAboutNestedUpdates = false;\n    }\n\n    function getContextForSubtree(parentComponent) {\n      if (!parentComponent) {\n        return emptyContextObject;\n      }\n\n      var fiber = get(parentComponent);\n      var parentContext = findCurrentUnmaskedContext(fiber);\n\n      if (fiber.tag === ClassComponent) {\n        var Component = fiber.type;\n\n        if (isContextProvider(Component)) {\n          return processChildContext(fiber, Component, parentContext);\n        }\n      }\n\n      return parentContext;\n    }\n\n    function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {\n      var hydrate = false;\n      var initialChildren = null;\n      return createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);\n    }\n\n    function updateContainer(element, container, parentComponent, callback) {\n      {\n        onScheduleRoot(container, element);\n      }\n      var current$1 = container.current;\n      var eventTime = requestEventTime();\n      var lane = requestUpdateLane(current$1);\n      var context = getContextForSubtree(parentComponent);\n\n      if (container.context === null) {\n        container.context = context;\n      } else {\n        container.pendingContext = context;\n      }\n\n      {\n        if (isRendering && current !== null && !didWarnAboutNestedUpdates) {\n          didWarnAboutNestedUpdates = true;\n          error('Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\\n\\n' + 'Check the render method of %s.', getComponentNameFromFiber(current) || 'Unknown');\n        }\n      }\n      var update = createUpdate(eventTime, lane); // Caution: React DevTools currently depends on this property\n      // being called \"element\".\n\n      update.payload = {\n        element: element\n      };\n      callback = callback === undefined ? null : callback;\n\n      if (callback !== null) {\n        {\n          if (typeof callback !== 'function') {\n            error('render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);\n          }\n        }\n        update.callback = callback;\n      }\n\n      enqueueUpdate(current$1, update);\n      var root = scheduleUpdateOnFiber(current$1, lane, eventTime);\n\n      if (root !== null) {\n        entangleTransitions(root, current$1, lane);\n      }\n\n      return lane;\n    }\n\n    function getPublicRootInstance(container) {\n      var containerFiber = container.current;\n\n      if (!containerFiber.child) {\n        return null;\n      }\n\n      switch (containerFiber.child.tag) {\n        case HostComponent:\n          return getPublicInstance(containerFiber.child.stateNode);\n\n        default:\n          return containerFiber.child.stateNode;\n      }\n    }\n\n    var shouldErrorImpl = function (fiber) {\n      return null;\n    };\n\n    function shouldError(fiber) {\n      return shouldErrorImpl(fiber);\n    }\n\n    var shouldSuspendImpl = function (fiber) {\n      return false;\n    };\n\n    function shouldSuspend(fiber) {\n      return shouldSuspendImpl(fiber);\n    }\n\n    var overrideHookState = null;\n    var overrideHookStateDeletePath = null;\n    var overrideHookStateRenamePath = null;\n    var overrideProps = null;\n    var overridePropsDeletePath = null;\n    var overridePropsRenamePath = null;\n    var scheduleUpdate = null;\n    var setErrorHandler = null;\n    var setSuspenseHandler = null;\n    {\n      var copyWithDeleteImpl = function (obj, path, index) {\n        var key = path[index];\n        var updated = isArray(obj) ? obj.slice() : assign({}, obj);\n\n        if (index + 1 === path.length) {\n          if (isArray(updated)) {\n            updated.splice(key, 1);\n          } else {\n            delete updated[key];\n          }\n\n          return updated;\n        } // $FlowFixMe number or string is fine here\n\n\n        updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);\n        return updated;\n      };\n\n      var copyWithDelete = function (obj, path) {\n        return copyWithDeleteImpl(obj, path, 0);\n      };\n\n      var copyWithRenameImpl = function (obj, oldPath, newPath, index) {\n        var oldKey = oldPath[index];\n        var updated = isArray(obj) ? obj.slice() : assign({}, obj);\n\n        if (index + 1 === oldPath.length) {\n          var newKey = newPath[index]; // $FlowFixMe number or string is fine here\n\n          updated[newKey] = updated[oldKey];\n\n          if (isArray(updated)) {\n            updated.splice(oldKey, 1);\n          } else {\n            delete updated[oldKey];\n          }\n        } else {\n          // $FlowFixMe number or string is fine here\n          updated[oldKey] = copyWithRenameImpl( // $FlowFixMe number or string is fine here\n          obj[oldKey], oldPath, newPath, index + 1);\n        }\n\n        return updated;\n      };\n\n      var copyWithRename = function (obj, oldPath, newPath) {\n        if (oldPath.length !== newPath.length) {\n          warn('copyWithRename() expects paths of the same length');\n          return;\n        } else {\n          for (var i = 0; i < newPath.length - 1; i++) {\n            if (oldPath[i] !== newPath[i]) {\n              warn('copyWithRename() expects paths to be the same except for the deepest key');\n              return;\n            }\n          }\n        }\n\n        return copyWithRenameImpl(obj, oldPath, newPath, 0);\n      };\n\n      var copyWithSetImpl = function (obj, path, index, value) {\n        if (index >= path.length) {\n          return value;\n        }\n\n        var key = path[index];\n        var updated = isArray(obj) ? obj.slice() : assign({}, obj); // $FlowFixMe number or string is fine here\n\n        updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);\n        return updated;\n      };\n\n      var copyWithSet = function (obj, path, value) {\n        return copyWithSetImpl(obj, path, 0, value);\n      };\n\n      var findHook = function (fiber, id) {\n        // For now, the \"id\" of stateful hooks is just the stateful hook index.\n        // This may change in the future with e.g. nested hooks.\n        var currentHook = fiber.memoizedState;\n\n        while (currentHook !== null && id > 0) {\n          currentHook = currentHook.next;\n          id--;\n        }\n\n        return currentHook;\n      }; // Support DevTools editable values for useState and useReducer.\n\n\n      overrideHookState = function (fiber, id, path, value) {\n        var hook = findHook(fiber, id);\n\n        if (hook !== null) {\n          var newState = copyWithSet(hook.memoizedState, path, value);\n          hook.memoizedState = newState;\n          hook.baseState = newState; // We aren't actually adding an update to the queue,\n          // because there is no update we can add for useReducer hooks that won't trigger an error.\n          // (There's no appropriate action type for DevTools overrides.)\n          // As a result though, React will see the scheduled update as a noop and bailout.\n          // Shallow cloning props works as a workaround for now to bypass the bailout check.\n\n          fiber.memoizedProps = assign({}, fiber.memoizedProps);\n          scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n        }\n      };\n\n      overrideHookStateDeletePath = function (fiber, id, path) {\n        var hook = findHook(fiber, id);\n\n        if (hook !== null) {\n          var newState = copyWithDelete(hook.memoizedState, path);\n          hook.memoizedState = newState;\n          hook.baseState = newState; // We aren't actually adding an update to the queue,\n          // because there is no update we can add for useReducer hooks that won't trigger an error.\n          // (There's no appropriate action type for DevTools overrides.)\n          // As a result though, React will see the scheduled update as a noop and bailout.\n          // Shallow cloning props works as a workaround for now to bypass the bailout check.\n\n          fiber.memoizedProps = assign({}, fiber.memoizedProps);\n          scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n        }\n      };\n\n      overrideHookStateRenamePath = function (fiber, id, oldPath, newPath) {\n        var hook = findHook(fiber, id);\n\n        if (hook !== null) {\n          var newState = copyWithRename(hook.memoizedState, oldPath, newPath);\n          hook.memoizedState = newState;\n          hook.baseState = newState; // We aren't actually adding an update to the queue,\n          // because there is no update we can add for useReducer hooks that won't trigger an error.\n          // (There's no appropriate action type for DevTools overrides.)\n          // As a result though, React will see the scheduled update as a noop and bailout.\n          // Shallow cloning props works as a workaround for now to bypass the bailout check.\n\n          fiber.memoizedProps = assign({}, fiber.memoizedProps);\n          scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n        }\n      }; // Support DevTools props for function components, forwardRef, memo, host components, etc.\n\n\n      overrideProps = function (fiber, path, value) {\n        fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);\n\n        if (fiber.alternate) {\n          fiber.alternate.pendingProps = fiber.pendingProps;\n        }\n\n        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n      };\n\n      overridePropsDeletePath = function (fiber, path) {\n        fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);\n\n        if (fiber.alternate) {\n          fiber.alternate.pendingProps = fiber.pendingProps;\n        }\n\n        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n      };\n\n      overridePropsRenamePath = function (fiber, oldPath, newPath) {\n        fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);\n\n        if (fiber.alternate) {\n          fiber.alternate.pendingProps = fiber.pendingProps;\n        }\n\n        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n      };\n\n      scheduleUpdate = function (fiber) {\n        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n      };\n\n      setErrorHandler = function (newShouldErrorImpl) {\n        shouldErrorImpl = newShouldErrorImpl;\n      };\n\n      setSuspenseHandler = function (newShouldSuspendImpl) {\n        shouldSuspendImpl = newShouldSuspendImpl;\n      };\n    }\n\n    function findHostInstanceByFiber(fiber) {\n      var hostFiber = findCurrentHostFiber(fiber);\n\n      if (hostFiber === null) {\n        return null;\n      }\n\n      return hostFiber.stateNode;\n    }\n\n    function emptyFindFiberByHostInstance(instance) {\n      return null;\n    }\n\n    function getCurrentFiberForDevTools() {\n      return current;\n    }\n\n    function injectIntoDevTools(devToolsConfig) {\n      var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;\n      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n      return injectInternals({\n        bundleType: devToolsConfig.bundleType,\n        version: devToolsConfig.version,\n        rendererPackageName: devToolsConfig.rendererPackageName,\n        rendererConfig: devToolsConfig.rendererConfig,\n        overrideHookState: overrideHookState,\n        overrideHookStateDeletePath: overrideHookStateDeletePath,\n        overrideHookStateRenamePath: overrideHookStateRenamePath,\n        overrideProps: overrideProps,\n        overridePropsDeletePath: overridePropsDeletePath,\n        overridePropsRenamePath: overridePropsRenamePath,\n        setErrorHandler: setErrorHandler,\n        setSuspenseHandler: setSuspenseHandler,\n        scheduleUpdate: scheduleUpdate,\n        currentDispatcherRef: ReactCurrentDispatcher,\n        findHostInstanceByFiber: findHostInstanceByFiber,\n        findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,\n        // React Refresh\n        findHostInstancesForRefresh: findHostInstancesForRefresh,\n        scheduleRefresh: scheduleRefresh,\n        scheduleRoot: scheduleRoot,\n        setRefreshHandler: setRefreshHandler,\n        // Enables DevTools to append owner stacks to error messages in DEV mode.\n        getCurrentFiber: getCurrentFiberForDevTools,\n        // Enables DevTools to detect reconciler version rather than renderer version\n        // which may not match for third party renderers.\n        reconcilerVersion: ReactVersion\n      });\n    }\n\n    var act = React.unstable_act; // TODO: Remove from public bundle\n\n    var defaultTestOptions = {\n      createNodeMock: function () {\n        return null;\n      }\n    };\n\n    function toJSON(inst) {\n      if (inst.isHidden) {\n        // Omit timed out children from output entirely. This seems like the least\n        // surprising behavior. We could perhaps add a separate API that includes\n        // them, if it turns out people need it.\n        return null;\n      }\n\n      switch (inst.tag) {\n        case 'TEXT':\n          return inst.text;\n\n        case 'INSTANCE':\n          {\n            /* eslint-disable no-unused-vars */\n            // We don't include the `children` prop in JSON.\n            // Instead, we will include the actual rendered children.\n            var _inst$props = inst.props,\n                children = _inst$props.children,\n                props = _objectWithoutPropertiesLoose(_inst$props, [\"children\"]);\n            /* eslint-enable */\n\n\n            var renderedChildren = null;\n\n            if (inst.children && inst.children.length) {\n              for (var i = 0; i < inst.children.length; i++) {\n                var renderedChild = toJSON(inst.children[i]);\n\n                if (renderedChild !== null) {\n                  if (renderedChildren === null) {\n                    renderedChildren = [renderedChild];\n                  } else {\n                    renderedChildren.push(renderedChild);\n                  }\n                }\n              }\n            }\n\n            var json = {\n              type: inst.type,\n              props: props,\n              children: renderedChildren\n            };\n            Object.defineProperty(json, '$$typeof', {\n              value: Symbol.for('react.test.json')\n            });\n            return json;\n          }\n\n        default:\n          throw new Error(\"Unexpected node type in toJSON: \" + inst.tag);\n      }\n    }\n\n    function childrenToTree(node) {\n      if (!node) {\n        return null;\n      }\n\n      var children = nodeAndSiblingsArray(node);\n\n      if (children.length === 0) {\n        return null;\n      } else if (children.length === 1) {\n        return toTree(children[0]);\n      }\n\n      return flatten(children.map(toTree));\n    }\n\n    function nodeAndSiblingsArray(nodeWithSibling) {\n      var array = [];\n      var node = nodeWithSibling;\n\n      while (node != null) {\n        array.push(node);\n        node = node.sibling;\n      }\n\n      return array;\n    }\n\n    function flatten(arr) {\n      var result = [];\n      var stack = [{\n        i: 0,\n        array: arr\n      }];\n\n      while (stack.length) {\n        var n = stack.pop();\n\n        while (n.i < n.array.length) {\n          var el = n.array[n.i];\n          n.i += 1;\n\n          if (isArray(el)) {\n            stack.push(n);\n            stack.push({\n              i: 0,\n              array: el\n            });\n            break;\n          }\n\n          result.push(el);\n        }\n      }\n\n      return result;\n    }\n\n    function toTree(node) {\n      if (node == null) {\n        return null;\n      }\n\n      switch (node.tag) {\n        case HostRoot:\n          return childrenToTree(node.child);\n\n        case HostPortal:\n          return childrenToTree(node.child);\n\n        case ClassComponent:\n          return {\n            nodeType: 'component',\n            type: node.type,\n            props: assign({}, node.memoizedProps),\n            instance: node.stateNode,\n            rendered: childrenToTree(node.child)\n          };\n\n        case FunctionComponent:\n        case SimpleMemoComponent:\n          return {\n            nodeType: 'component',\n            type: node.type,\n            props: assign({}, node.memoizedProps),\n            instance: null,\n            rendered: childrenToTree(node.child)\n          };\n\n        case HostComponent:\n          {\n            return {\n              nodeType: 'host',\n              type: node.type,\n              props: assign({}, node.memoizedProps),\n              instance: null,\n              // TODO: use createNodeMock here somehow?\n              rendered: flatten(nodeAndSiblingsArray(node.child).map(toTree))\n            };\n          }\n\n        case HostText:\n          return node.stateNode.text;\n\n        case Fragment:\n        case ContextProvider:\n        case ContextConsumer:\n        case Mode:\n        case Profiler:\n        case ForwardRef:\n        case MemoComponent:\n        case IncompleteClassComponent:\n        case ScopeComponent:\n          return childrenToTree(node.child);\n\n        default:\n          throw new Error(\"toTree() does not yet know how to handle nodes with tag=\" + node.tag);\n      }\n    }\n\n    var validWrapperTypes = new Set([FunctionComponent, ClassComponent, HostComponent, ForwardRef, MemoComponent, SimpleMemoComponent, // Normally skipped, but used when there's more than one root child.\n    HostRoot]);\n\n    function getChildren(parent) {\n      var children = [];\n      var startingNode = parent;\n      var node = startingNode;\n\n      if (node.child === null) {\n        return children;\n      }\n\n      node.child.return = node;\n      node = node.child;\n\n      outer: while (true) {\n        var descend = false;\n\n        if (validWrapperTypes.has(node.tag)) {\n          children.push(wrapFiber(node));\n        } else if (node.tag === HostText) {\n          {\n            checkPropStringCoercion(node.memoizedProps, 'memoizedProps');\n          }\n          children.push('' + node.memoizedProps);\n        } else {\n          descend = true;\n        }\n\n        if (descend && node.child !== null) {\n          node.child.return = node;\n          node = node.child;\n          continue;\n        }\n\n        while (node.sibling === null) {\n          if (node.return === startingNode) {\n            break outer;\n          }\n\n          node = node.return;\n        }\n\n        node.sibling.return = node.return;\n        node = node.sibling;\n      }\n\n      return children;\n    }\n\n    var ReactTestInstance = /*#__PURE__*/function () {\n      var _proto = ReactTestInstance.prototype;\n\n      _proto._currentFiber = function _currentFiber() {\n        // Throws if this component has been unmounted.\n        var fiber = findCurrentFiberUsingSlowPath(this._fiber);\n\n        if (fiber === null) {\n          throw new Error(\"Can't read from currently-mounting component. This error is likely \" + 'caused by a bug in React. Please file an issue.');\n        }\n\n        return fiber;\n      };\n\n      function ReactTestInstance(fiber) {\n        if (!validWrapperTypes.has(fiber.tag)) {\n          throw new Error(\"Unexpected object passed to ReactTestInstance constructor (tag: \" + fiber.tag + \"). \" + 'This is probably a bug in React.');\n        }\n\n        this._fiber = fiber;\n      } // Custom search functions\n\n\n      _proto.find = function find(predicate) {\n        return expectOne(this.findAll(predicate, {\n          deep: false\n        }), \"matching custom predicate: \" + predicate.toString());\n      };\n\n      _proto.findByType = function findByType(type) {\n        return expectOne(this.findAllByType(type, {\n          deep: false\n        }), \"with node type: \\\"\" + (getComponentNameFromType(type) || 'Unknown') + \"\\\"\");\n      };\n\n      _proto.findByProps = function findByProps(props) {\n        return expectOne(this.findAllByProps(props, {\n          deep: false\n        }), \"with props: \" + JSON.stringify(props));\n      };\n\n      _proto.findAll = function findAll(predicate) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        return _findAll(this, predicate, options);\n      };\n\n      _proto.findAllByType = function findAllByType(type) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        return _findAll(this, function (node) {\n          return node.type === type;\n        }, options);\n      };\n\n      _proto.findAllByProps = function findAllByProps(props) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        return _findAll(this, function (node) {\n          return node.props && propsMatch(node.props, props);\n        }, options);\n      };\n\n      _createClass(ReactTestInstance, [{\n        key: \"instance\",\n        get: function () {\n          if (this._fiber.tag === HostComponent) {\n            return getPublicInstance(this._fiber.stateNode);\n          } else {\n            return this._fiber.stateNode;\n          }\n        }\n      }, {\n        key: \"type\",\n        get: function () {\n          return this._fiber.type;\n        }\n      }, {\n        key: \"props\",\n        get: function () {\n          return this._currentFiber().memoizedProps;\n        }\n      }, {\n        key: \"parent\",\n        get: function () {\n          var parent = this._fiber.return;\n\n          while (parent !== null) {\n            if (validWrapperTypes.has(parent.tag)) {\n              if (parent.tag === HostRoot) {\n                // Special case: we only \"materialize\" instances for roots\n                // if they have more than a single child. So we'll check that now.\n                if (getChildren(parent).length < 2) {\n                  return null;\n                }\n              }\n\n              return wrapFiber(parent);\n            }\n\n            parent = parent.return;\n          }\n\n          return null;\n        }\n      }, {\n        key: \"children\",\n        get: function () {\n          return getChildren(this._currentFiber());\n        }\n      }]);\n\n      return ReactTestInstance;\n    }();\n\n    function _findAll(root, predicate, options) {\n      var deep = options ? options.deep : true;\n      var results = [];\n\n      if (predicate(root)) {\n        results.push(root);\n\n        if (!deep) {\n          return results;\n        }\n      }\n\n      root.children.forEach(function (child) {\n        if (typeof child === 'string') {\n          return;\n        }\n\n        results.push.apply(results, _findAll(child, predicate, options));\n      });\n      return results;\n    }\n\n    function expectOne(all, message) {\n      if (all.length === 1) {\n        return all[0];\n      }\n\n      var prefix = all.length === 0 ? 'No instances found ' : \"Expected 1 but found \" + all.length + \" instances \";\n      throw new Error(prefix + message);\n    }\n\n    function propsMatch(props, filter) {\n      for (var key in filter) {\n        if (props[key] !== filter[key]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    function onRecoverableError(error$1) {\n      // TODO: Expose onRecoverableError option to userspace\n      // eslint-disable-next-line react-internal/no-production-logging, react-internal/warning-args\n      error(error$1);\n    }\n\n    function create(element, options) {\n      var createNodeMock = defaultTestOptions.createNodeMock;\n      var isConcurrent = false;\n      var isStrictMode = false;\n      var concurrentUpdatesByDefault = null;\n\n      if (typeof options === 'object' && options !== null) {\n        if (typeof options.createNodeMock === 'function') {\n          createNodeMock = options.createNodeMock;\n        }\n\n        if (options.unstable_isConcurrent === true) {\n          isConcurrent = true;\n        }\n\n        if (options.unstable_strictMode === true) {\n          isStrictMode = true;\n        }\n      }\n\n      var container = {\n        children: [],\n        createNodeMock: createNodeMock,\n        tag: 'CONTAINER'\n      };\n      var root = createContainer(container, isConcurrent ? ConcurrentRoot : LegacyRoot, null, isStrictMode, concurrentUpdatesByDefault, '', onRecoverableError);\n\n      if (root == null) {\n        throw new Error('something went wrong');\n      }\n\n      updateContainer(element, root, null, null);\n      var entry = {\n        _Scheduler: Scheduler,\n        root: undefined,\n        // makes flow happy\n        // we define a 'getter' for 'root' below using 'Object.defineProperty'\n        toJSON: function () {\n          if (root == null || root.current == null || container == null) {\n            return null;\n          }\n\n          if (container.children.length === 0) {\n            return null;\n          }\n\n          if (container.children.length === 1) {\n            return toJSON(container.children[0]);\n          }\n\n          if (container.children.length === 2 && container.children[0].isHidden === true && container.children[1].isHidden === false) {\n            // Omit timed out children from output entirely, including the fact that we\n            // temporarily wrap fallback and timed out children in an array.\n            return toJSON(container.children[1]);\n          }\n\n          var renderedChildren = null;\n\n          if (container.children && container.children.length) {\n            for (var i = 0; i < container.children.length; i++) {\n              var renderedChild = toJSON(container.children[i]);\n\n              if (renderedChild !== null) {\n                if (renderedChildren === null) {\n                  renderedChildren = [renderedChild];\n                } else {\n                  renderedChildren.push(renderedChild);\n                }\n              }\n            }\n          }\n\n          return renderedChildren;\n        },\n        toTree: function () {\n          if (root == null || root.current == null) {\n            return null;\n          }\n\n          return toTree(root.current);\n        },\n        update: function (newElement) {\n          if (root == null || root.current == null) {\n            return;\n          }\n\n          updateContainer(newElement, root, null, null);\n        },\n        unmount: function () {\n          if (root == null || root.current == null) {\n            return;\n          }\n\n          updateContainer(null, root, null, null);\n          container = null;\n          root = null;\n        },\n        getInstance: function () {\n          if (root == null || root.current == null) {\n            return null;\n          }\n\n          return getPublicRootInstance(root);\n        },\n        unstable_flushSync: flushSync\n      };\n      Object.defineProperty(entry, 'root', {\n        configurable: true,\n        enumerable: true,\n        get: function () {\n          if (root === null) {\n            throw new Error(\"Can't access .root on unmounted test renderer\");\n          }\n\n          var children = getChildren(root.current);\n\n          if (children.length === 0) {\n            throw new Error(\"Can't access .root on unmounted test renderer\");\n          } else if (children.length === 1) {\n            // Normally, we skip the root and just give you the child.\n            return children[0];\n          } else {\n            // However, we give you the root if there's more than one root child.\n            // We could make this the behavior for all cases but it would be a breaking change.\n            return wrapFiber(root.current);\n          }\n        }\n      });\n      return entry;\n    }\n\n    var fiberToWrapper = new WeakMap();\n\n    function wrapFiber(fiber) {\n      var wrapper = fiberToWrapper.get(fiber);\n\n      if (wrapper === undefined && fiber.alternate !== null) {\n        wrapper = fiberToWrapper.get(fiber.alternate);\n      }\n\n      if (wrapper === undefined) {\n        wrapper = new ReactTestInstance(fiber);\n        fiberToWrapper.set(fiber, wrapper);\n      }\n\n      return wrapper;\n    } // Enable ReactTestRenderer to be used to test DevTools integration.\n\n\n    injectIntoDevTools({\n      findFiberByHostInstance: function () {\n        throw new Error('TestRenderer does not support findFiberByHostInstance()');\n      },\n      bundleType: 1,\n      version: ReactVersion,\n      rendererPackageName: 'react-test-renderer'\n    });\n    exports._Scheduler = Scheduler;\n    exports.act = act;\n    exports.create = create;\n    exports.unstable_batchedUpdates = batchedUpdates;\n  })();\n}","map":{"version":3,"sources":["/home/horberlan/source/npm-package/cyberfuture/node_modules/react-test-renderer/cjs/react-test-renderer.development.js"],"names":["process","env","NODE_ENV","React","require","Scheduler","Scheduler$1","ReactSharedInternals","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","warn","format","_len","arguments","length","args","Array","_key","printWarning","error","_len2","_key2","level","ReactDebugCurrentFrame","stack","getStackAddendum","concat","argsWithFormat","map","item","String","unshift","Function","prototype","apply","call","console","_defineProperties","target","props","i","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","Constructor","protoProps","staticProps","_objectWithoutPropertiesLoose","source","excluded","sourceKeys","keys","indexOf","assign","get","_reactInternals","set","value","enableSchedulingProfiler","enableProfilerTimer","enableProfilerCommitHooks","enableLazyElements","warnAboutStringRefs","enableSuspenseAvoidThisFallback","enableNewReconciler","enableLazyContextPropagation","enableLegacyHidden","FunctionComponent","ClassComponent","IndeterminateComponent","HostRoot","HostPortal","HostComponent","HostText","Fragment","Mode","ContextConsumer","ContextProvider","ForwardRef","Profiler","SuspenseComponent","MemoComponent","SimpleMemoComponent","LazyComponent","IncompleteClassComponent","DehydratedFragment","SuspenseListComponent","ScopeComponent","OffscreenComponent","LegacyHiddenComponent","CacheComponent","TracingMarkerComponent","REACT_ELEMENT_TYPE","Symbol","for","REACT_PORTAL_TYPE","REACT_FRAGMENT_TYPE","REACT_STRICT_MODE_TYPE","REACT_PROFILER_TYPE","REACT_PROVIDER_TYPE","REACT_CONTEXT_TYPE","REACT_FORWARD_REF_TYPE","REACT_SUSPENSE_TYPE","REACT_SUSPENSE_LIST_TYPE","REACT_MEMO_TYPE","REACT_LAZY_TYPE","REACT_SCOPE_TYPE","REACT_DEBUG_TRACING_MODE_TYPE","REACT_OFFSCREEN_TYPE","REACT_LEGACY_HIDDEN_TYPE","REACT_CACHE_TYPE","REACT_TRACING_MARKER_TYPE","MAYBE_ITERATOR_SYMBOL","iterator","FAUX_ITERATOR_SYMBOL","getIteratorFn","maybeIterable","maybeIterator","getWrappedName","outerType","innerType","wrapperName","displayName","functionName","name","getContextName","type","getComponentNameFromType","tag","$$typeof","context","provider","_context","render","outerName","lazyComponent","payload","_payload","init","_init","x","getWrappedName$1","getContextName$1","getComponentNameFromFiber","fiber","NoFlags","PerformedWork","Placement","Update","PlacementAndUpdate","ChildDeletion","ContentReset","Callback","DidCapture","ForceClientRender","Ref","Snapshot","Passive","Hydrating","HydratingAndUpdate","Visibility","StoreConsistency","LifecycleEffectMask","HostEffectMask","Incomplete","ShouldCapture","ForceUpdateForLegacySuspense","Forked","RefStatic","LayoutStatic","PassiveStatic","BeforeMutationMask","MutationMask","LayoutMask","PassiveMask","StaticMask","ReactCurrentOwner","getNearestMountedFiber","node","nearestMounted","alternate","nextNode","flags","return","isFiberMounted","isMounted","component","owner","current","ownerFiber","instance","stateNode","_warnedAboutRefsInRender","assertIsMounted","Error","findCurrentFiberUsingSlowPath","a","b","parentA","parentB","nextParent","child","sibling","didFindChild","_child","findCurrentHostFiber","parent","currentParent","findCurrentHostFiberImpl","match","isArrayImpl","isArray","scheduleCallback","unstable_scheduleCallback","cancelCallback","unstable_cancelCallback","shouldYield","unstable_shouldYield","requestPaint","unstable_requestPaint","now","unstable_now","ImmediatePriority","unstable_ImmediatePriority","UserBlockingPriority","unstable_UserBlockingPriority","NormalPriority","unstable_NormalPriority","IdlePriority","unstable_IdlePriority","disabledDepth","prevLog","prevInfo","prevWarn","prevError","prevGroup","prevGroupCollapsed","prevGroupEnd","disabledLog","__reactDisabledLog","disableLogs","log","info","group","groupCollapsed","groupEnd","defineProperties","reenableLogs","rendererID","injectedHook","hasLoggedError","isDevToolsPresent","__REACT_DEVTOOLS_GLOBAL_HOOK__","injectInternals","internals","hook","isDisabled","supportsFiber","getLaneLabelMap","injectProfilingHooks","inject","err","checkDCE","onScheduleRoot","root","children","onScheduleFiberRoot","onCommitRoot","eventPriority","onCommitFiberRoot","didError","schedulerPriority","DiscreteEventPriority","ContinuousEventPriority","DefaultEventPriority","IdleEventPriority","undefined","onPostCommitRoot","onPostCommitFiberRoot","onCommitUnmount","onCommitFiberUnmount","profilingHooks","markComponentRenderStopped","markComponentErrored","thrownValue","lanes","markComponentSuspended","wakeable","NoMode","ConcurrentMode","ProfileMode","StrictLegacyMode","clz32","Math","clz32Fallback","LN2","asUint","TotalLanes","NoLanes","NoLane","SyncLane","InputContinuousHydrationLane","InputContinuousLane","DefaultHydrationLane","DefaultLane","TransitionHydrationLane","TransitionLanes","TransitionLane1","TransitionLane2","TransitionLane3","TransitionLane4","TransitionLane5","TransitionLane6","TransitionLane7","TransitionLane8","TransitionLane9","TransitionLane10","TransitionLane11","TransitionLane12","TransitionLane13","TransitionLane14","TransitionLane15","TransitionLane16","RetryLanes","RetryLane1","RetryLane2","RetryLane3","RetryLane4","RetryLane5","SomeRetryLane","SelectiveHydrationLane","NonIdleLanes","IdleHydrationLane","IdleLane","OffscreenLane","NoTimestamp","nextTransitionLane","nextRetryLane","getHighestPriorityLanes","getHighestPriorityLane","getNextLanes","wipLanes","pendingLanes","nextLanes","suspendedLanes","pingedLanes","nonIdlePendingLanes","nonIdleUnblockedLanes","nonIdlePingedLanes","unblockedLanes","nextLane","wipLane","entangledLanes","entanglements","index","pickArbitraryLaneIndex","lane","getMostRecentEventTime","eventTimes","mostRecentEventTime","eventTime","computeExpirationTime","currentTime","markStarvedLanesAsExpired","expirationTimes","expirationTime","expiredLanes","getLanesToRetrySynchronouslyOnError","everythingButOffscreen","includesSyncLane","includesNonIdleWork","includesOnlyRetries","includesOnlyTransitions","includesBlockingLane","SyncDefaultLanes","includesExpiredLane","isTransitionLane","claimNextTransitionLane","claimNextRetryLane","pickArbitraryLane","laneToIndex","includesSomeLane","isSubsetOfLanes","subset","mergeLanes","removeLanes","intersectLanes","laneToLanes","createLaneMap","initial","laneMap","push","markRootUpdated","updateLane","markRootSuspended","markRootPinged","markRootFinished","remainingLanes","noLongerPendingLanes","mutableReadLanes","markRootEntangled","rootEntangledLanes","currentUpdatePriority","getCurrentUpdatePriority","setCurrentUpdatePriority","newPriority","higherEventPriority","lowerEventPriority","isHigherEventPriority","lanesToEventPriority","shim","isSuspenseInstancePending","isSuspenseInstanceFallback","hydrateTextInstance","errorHydratingContainer","NO_CONTEXT","UPDATE_SIGNAL","nodeToInstanceMap","WeakMap","freeze","getPublicInstance","inst","createNodeMock","rootContainerInstance","mockNode","appendChild","parentInstance","splice","insertBefore","beforeChild","beforeIndex","removeChild","clearContainer","container","getRootHostContext","getChildHostContext","parentHostContext","prepareForCommit","containerInfo","resetAfterCommit","createInstance","hostContext","internalInstanceHandle","isHidden","appendInitialChild","prepareUpdate","testElement","oldProps","newProps","shouldSetTextContent","createTextInstance","text","getCurrentEventPriority","scheduleTimeout","setTimeout","cancelTimeout","clearTimeout","noTimeout","commitUpdate","updatePayload","commitTextUpdate","textInstance","oldText","newText","resetTextContent","appendChildToContainer","insertInContainerBefore","removeChildFromContainer","hideInstance","hideTextInstance","unhideInstance","unhideTextInstance","preparePortalMount","portalInstance","ReactCurrentDispatcher","prefix","describeBuiltInComponentFrame","ownerFn","trim","reentry","componentFrameCache","PossiblyWeakMap","Map","describeNativeComponentFrame","fn","construct","frame","control","previousPrepareStackTrace","prepareStackTrace","previousDispatcher","Fake","Reflect","sample","sampleLines","split","controlLines","s","c","_frame","replace","includes","syntheticFrame","describeClassComponentFrame","ctor","describeFunctionComponentFrame","shouldConstruct","Component","isReactComponent","describeUnknownElementTypeFrameInDEV","hasOwnProperty","loggedTypeFailures","setCurrentlyValidatingElement","element","_owner","_source","setExtraStackFrame","checkPropTypes","typeSpecs","values","location","componentName","has","bind","typeSpecName","error$1","ex","message","valueStack","fiberStack","createCursor","defaultValue","pop","cursor","warnedAboutMissingGetChildContext","emptyContextObject","contextStackCursor","didPerformWorkStackCursor","previousContext","getUnmaskedContext","workInProgress","didPushOwnContextIfProvider","isContextProvider","cacheContext","unmaskedContext","maskedContext","__reactInternalMemoizedUnmaskedChildContext","__reactInternalMemoizedMaskedChildContext","getMaskedContext","contextTypes","hasContextChanged","childContextTypes","popContext","popTopLevelContextObject","pushTopLevelContextObject","didChange","processChildContext","parentContext","getChildContext","childContext","contextKey","pushContextProvider","memoizedMergedChildContext","__reactInternalMemoizedMergedChildContext","invalidateContextProvider","mergedContext","findCurrentUnmaskedContext","LegacyRoot","ConcurrentRoot","is","y","objectIs","syncQueue","includesLegacySyncCallbacks","isFlushingSyncQueue","scheduleSyncCallback","callback","scheduleLegacySyncCallback","flushSyncCallbacksOnlyInLegacyMode","flushSyncCallbacks","previousUpdatePriority","isSync","queue","slice","isRootDehydrated","currentState","memoizedState","isDehydrated","ReactCurrentBatchConfig","NoTransition","requestCurrentTransition","transition","shallowEqual","objA","objB","keysA","keysB","currentKey","describeFiber","_debugOwner","_debugSource","getStackByFiberInDevAndProd","ReactDebugCurrentFrame$1","isRendering","getCurrentFiberOwnerNameInDevOrNull","getCurrentFiberStackInDev","resetCurrentFiber","getCurrentStack","setCurrentFiber","setIsRendering","rendering","ReactStrictModeWarnings","recordUnsafeLifecycleWarnings","flushPendingUnsafeLifecycleWarnings","recordLegacyContextWarning","flushLegacyContextWarning","discardPendingWarnings","findStrictRoot","maybeStrictRoot","mode","setToSortedString","array","forEach","sort","join","pendingComponentWillMountWarnings","pendingUNSAFE_ComponentWillMountWarnings","pendingComponentWillReceivePropsWarnings","pendingUNSAFE_ComponentWillReceivePropsWarnings","pendingComponentWillUpdateWarnings","pendingUNSAFE_ComponentWillUpdateWarnings","didWarnAboutUnsafeLifecycles","Set","componentWillMount","__suppressDeprecationWarning","UNSAFE_componentWillMount","componentWillReceiveProps","UNSAFE_componentWillReceiveProps","componentWillUpdate","UNSAFE_componentWillUpdate","componentWillMountUniqueNames","add","UNSAFE_componentWillMountUniqueNames","componentWillReceivePropsUniqueNames","UNSAFE_componentWillReceivePropsUniqueNames","componentWillUpdateUniqueNames","UNSAFE_componentWillUpdateUniqueNames","size","sortedNames","_sortedNames","_sortedNames2","_sortedNames3","_sortedNames4","_sortedNames5","pendingLegacyContextWarning","didWarnAboutLegacyContext","strictRoot","warningsForRoot","fiberArray","firstFiber","uniqueNames","typeName","hasToStringTag","toStringTag","constructor","willCoercionThrow","testStringCoercion","e","checkPropStringCoercion","propName","resolveDefaultProps","baseProps","defaultProps","valueCursor","rendererSigil","currentlyRenderingFiber","lastContextDependency","lastFullyObservedContext","isDisallowedContextReadInDEV","resetContextDependencies","enterDisallowedContextReadInDEV","exitDisallowedContextReadInDEV","pushProvider","providerFiber","nextValue","_currentValue2","_currentRenderer2","popProvider","currentValue","scheduleContextWorkOnParentPath","renderLanes","propagationRoot","childLanes","propagateContextChange","propagateContextChange_eager","nextFiber","list","dependencies","dependency","firstContext","update","createUpdate","ForceUpdate","updateQueue","sharedQueue","shared","pending","next","prepareToReadContext","markWorkInProgressReceivedUpdate","readContext","contextItem","memoizedValue","interleavedQueues","pushInterleavedQueue","enqueueInterleavedUpdates","lastInterleavedUpdate","interleaved","firstInterleavedUpdate","lastPendingUpdate","firstPendingUpdate","UpdateState","ReplaceState","CaptureUpdate","hasForceUpdate","didWarnUpdateInsideUpdate","currentlyProcessingQueue","initializeUpdateQueue","baseState","firstBaseUpdate","lastBaseUpdate","effects","cloneUpdateQueue","currentQueue","clone","enqueueUpdate","isInterleavedUpdate","entangleTransitions","queueLanes","newQueueLanes","enqueueCapturedUpdate","capturedUpdate","newFirst","newLast","getStateFromUpdate","prevState","nextProps","nextState","partialState","processUpdateQueue","pendingQueue","currentLastBaseUpdate","newState","newLanes","newBaseState","newFirstBaseUpdate","newLastBaseUpdate","updateEventTime","_clone","_lastPendingUpdate","_firstPendingUpdate","lastInterleaved","markSkippedUpdateLanes","callCallback","resetHasForceUpdateBeforeProcessing","checkHasForceUpdateAfterProcessing","commitUpdateQueue","finishedWork","finishedQueue","effect","fakeInternalInstance","emptyRefsObject","refs","didWarnAboutStateAssignmentForComponent","didWarnAboutUninitializedState","didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate","didWarnAboutLegacyLifecyclesAndDerivedState","didWarnAboutUndefinedDerivedState","warnOnUndefinedDerivedState","warnOnInvalidCallback","didWarnAboutDirectlyAssigningPropsToState","didWarnAboutContextTypeAndContextTypes","didWarnAboutInvalidateContextType","didWarnOnInvalidCallback","callerName","applyDerivedStateFromProps","getDerivedStateFromProps","classComponentUpdater","enqueueSetState","requestEventTime","requestUpdateLane","scheduleUpdateOnFiber","enqueueReplaceState","enqueueForceUpdate","checkShouldComponentUpdate","oldState","nextContext","shouldComponentUpdate","shouldUpdate","isPureReactComponent","checkClassInstance","renderPresent","getInitialState","isReactClassApproved","state","getDefaultProps","propTypes","contextType","componentShouldUpdate","componentDidUnmount","componentDidReceiveProps","componentWillRecieveProps","UNSAFE_componentWillRecieveProps","hasMutatedProps","getSnapshotBeforeUpdate","componentDidUpdate","getDerivedStateFromError","_state","adoptClassInstance","updater","_reactInternalInstance","constructClassInstance","isLegacyContextConsumer","isValid","addendum","foundWillMountName","foundWillReceivePropsName","foundWillUpdateName","_componentName","newApiName","callComponentWillMount","callComponentWillReceiveProps","mountClassInstance","componentDidMount","fiberFlags","resumeMountClassInstance","memoizedProps","oldContext","nextLegacyUnmaskedContext","hasNewLifecycles","_fiberFlags","_fiberFlags2","updateClassInstance","unresolvedOldProps","elementType","unresolvedNewProps","pendingProps","nextUnmaskedContext","forkStack","forkStackIndex","treeForkProvider","treeForkCount","idStack","idStackIndex","treeContextProvider","treeContextId","treeContextOverflow","popTreeContext","isHydrating","prepareToHydrateHostInstance","prepareToHydrateHostTextInstance","popHydrationState","getIsHydrating","didWarnAboutMaps","didWarnAboutGenerators","didWarnAboutStringRefs","ownerHasKeyUseWarning","ownerHasFunctionTypeWarning","warnForMissingKey","returnFiber","_store","validated","coerceRef","mixedRef","ref","_self","resolvedInst","stringRef","_stringRef","throwOnInvalidObjectType","newChild","childString","toString","warnOnFunctionType","ChildReconciler","shouldTrackSideEffects","deleteChild","childToDelete","deletions","deleteRemainingChildren","currentFirstChild","mapRemainingChildren","existingChildren","existingChild","useFiber","createWorkInProgress","placeChild","newFiber","lastPlacedIndex","newIndex","oldIndex","placeSingleChild","updateTextNode","textContent","created","createFiberFromText","existing","updateElement","updateFragment","isCompatibleFamilyForHotReloading","createFiberFromElement","updatePortal","portal","implementation","createFiberFromPortal","fragment","createFiberFromFragment","createChild","_created","_created2","_created3","updateSlot","oldFiber","updateFromMap","newIdx","matchedFiber","_matchedFiber","_matchedFiber2","_matchedFiber3","warnOnInvalidKey","knownKeys","reconcileChildrenArray","newChildren","resultingFirstChild","previousNewFiber","nextOldFiber","_newFiber","_newFiber2","delete","reconcileChildrenIterator","newChildrenIterable","iteratorFn","entries","_newChildren","_step","done","step","_newFiber3","_newFiber4","reconcileSingleTextNode","reconcileSingleElement","_existing","_created4","reconcileSinglePortal","reconcileChildFibers","isUnkeyedTopLevelFragment","mountChildFibers","cloneChildFibers","currentChild","resetChildFibers","resetWorkInProgress","NO_CONTEXT$1","contextStackCursor$1","contextFiberStackCursor","rootInstanceStackCursor","requiredContext","getRootHostContainer","rootInstance","pushHostContainer","nextRootInstance","nextRootContext","popHostContainer","getHostContext","pushHostContext","popHostContext","DefaultSuspenseContext","SubtreeSuspenseContextMask","InvisibleParentSuspenseContext","ForceSuspenseFallback","suspenseStackCursor","hasSuspenseContext","flag","setDefaultShallowSuspenseContext","setShallowSuspenseContext","shallowContext","addSubtreeSuspenseContext","subtreeContext","pushSuspenseContext","newContext","popSuspenseContext","shouldCaptureSuspense","hasInvisibleParent","dehydrated","findFirstSuspended","row","revealOrder","didSuspend","NoFlags$1","HasEffect","Insertion","Layout","Passive$1","workInProgressSources","resetWorkInProgressVersions","mutableSource","_workInProgressVersionSecondary","ReactCurrentDispatcher$1","ReactCurrentBatchConfig$1","didWarnAboutMismatchedHooksForComponent","didWarnUncachedGetSnapshot","currentlyRenderingFiber$1","currentHook","workInProgressHook","didScheduleRenderPhaseUpdate","didScheduleRenderPhaseUpdateDuringThisPass","globalClientIdCounter","RE_RENDER_LIMIT","currentHookNameInDev","hookTypesDev","hookTypesUpdateIndexDev","ignorePreviousDependencies","mountHookTypesDev","hookName","updateHookTypesDev","warnOnHookMismatchInDev","checkDepsAreArrayDev","deps","currentHookName","table","secondColumnStart","oldHookName","newHookName","throwInvalidHookError","areHookInputsEqual","nextDeps","prevDeps","renderWithHooks","secondArg","nextRenderLanes","_debugHookTypes","HooksDispatcherOnUpdateInDEV","HooksDispatcherOnMountWithHookTypesInDEV","HooksDispatcherOnMountInDEV","numberOfReRenders","HooksDispatcherOnRerenderInDEV","ContextOnlyDispatcher","didRenderTooFewHooks","bailoutHooks","resetHooksAfterThrow","isUpdatingOpaqueValueInRenderPhase","mountWorkInProgressHook","baseQueue","updateWorkInProgressHook","nextCurrentHook","nextWorkInProgressHook","newHook","createFunctionComponentUpdateQueue","lastEffect","stores","basicStateReducer","action","mountReducer","reducer","initialArg","initialState","dispatch","lastRenderedReducer","lastRenderedState","dispatchReducerAction","updateReducer","baseFirst","pendingFirst","first","newBaseQueueFirst","newBaseQueueLast","hasEagerState","eagerState","interleavedLane","rerenderReducer","lastRenderPhaseUpdate","firstRenderPhaseUpdate","mountMutableSource","getSnapshot","subscribe","updateMutableSource","mountSyncExternalStore","getServerSnapshot","nextSnapshot","cachedSnapshot","getWorkInProgressRoot","pushStoreConsistencyCheck","mountEffect","subscribeToStore","pushEffect","updateStoreInstance","updateSyncExternalStore","prevSnapshot","snapshotChanged","updateEffect","renderedSnapshot","check","componentUpdateQueue","checkIfSnapshotChanged","forceStoreRerender","handleStoreChange","latestGetSnapshot","prevValue","mountState","dispatchSetState","updateState","rerenderState","create","destroy","firstEffect","mountRef","initialValue","_ref2","updateRef","mountEffectImpl","hookFlags","updateEffectImpl","prevEffect","mountInsertionEffect","updateInsertionEffect","mountLayoutEffect","updateLayoutEffect","imperativeHandleEffect","refCallback","_inst","refObject","_inst2","mountImperativeHandle","effectDeps","updateImperativeHandle","mountDebugValue","formatterFn","updateDebugValue","mountCallback","updateCallback","mountMemo","nextCreate","updateMemo","mountDeferredValue","_mountState","setValue","prevTransition","updateDeferredValue","_updateState","rerenderDeferredValue","_rerenderState","startTransition","setPending","options","previousPriority","currentTransition","_updatedFibers","updatedFibersCount","clear","mountTransition","_mountState2","isPending","start","updateTransition","_updateState2","rerenderTransition","_rerenderState2","getIsUpdatingOpaqueValueInRenderPhaseInDEV","mountId","identifierPrefix","id","globalClientId","updateId","isRenderPhaseUpdate","enqueueRenderPhaseUpdate","enqueueUpdate$1","entangleTransitionUpdate","prevDispatcher","InvalidNestedHooksDispatcherOnUpdateInDEV","useCallback","useContext","useEffect","useImperativeHandle","useInsertionEffect","useLayoutEffect","useMemo","useReducer","useRef","useState","useDebugValue","useDeferredValue","useTransition","useMutableSource","useSyncExternalStore","useId","unstable_isNewReconciler","InvalidNestedHooksDispatcherOnMountInDEV","InvalidNestedHooksDispatcherOnRerenderInDEV","warnInvalidContextAccess","warnInvalidHookAccess","now$1","commitTime","layoutEffectStartTime","profilerStartTime","passiveEffectStartTime","currentUpdateIsNested","nestedUpdateScheduled","isCurrentUpdateNested","markNestedUpdateScheduled","resetNestedUpdateFlag","syncNestedUpdateFlag","getCommitTime","recordCommitTime","startProfilerTimer","actualStartTime","stopProfilerTimerIfRunning","stopProfilerTimerIfRunningAndRecordDelta","overrideBaseTime","elapsedTime","actualDuration","selfBaseDuration","recordLayoutEffectDuration","parentFiber","effectDuration","parentStateNode","recordPassiveEffectDuration","passiveEffectDuration","startLayoutEffectTimer","startPassiveEffectTimer","transferActualDuration","createCapturedValue","showErrorDialog","boundary","errorInfo","logCapturedError","logError","componentStack","_suppressLogging","componentNameMessage","errorBoundaryMessage","errorBoundaryName","combinedMessage","PossiblyWeakMap$1","createRootErrorUpdate","onUncaughtError","createClassErrorUpdate","markFailedErrorBoundaryForHotReloading","componentDidCatch","markLegacyErrorBoundaryAsFailed","attachPingListener","pingCache","threadIDs","ping","pingSuspendedRoot","then","attachRetryListener","suspenseBoundary","wakeables","resetSuspendedComponent","sourceFiber","rootRenderLanes","currentSource","getNearestSuspenseBoundaryToCapture","markSuspenseBoundaryShouldCapture","currentSourceFiber","throwException","renderDidSuspendDelayIfPossible","uncaughtSuspenseError","renderDidError","_errorInfo","isAlreadyFailedLegacyErrorBoundary","_lane","_update","getSuspendedCache","markUpdate","markRef","appendAllChildren","updateHostContainer","updateHostComponent","updateHostText","needsVisibilityToggle","currentHostContext","cutOffTailIfNeeded","renderState","hasRenderedATailFallback","tailMode","tailNode","tail","lastTailNode","_tailNode","_lastTailNode","bubbleProperties","completedWork","didBailout","newChildLanes","subtreeFlags","treeBaseDuration","_treeBaseDuration","_child2","_child3","completeWork","fiberRoot","pendingContext","wasHydrated","_wasHydrated","_rootContainerInstance","_currentHostContext","_wasHydrated2","nextDidTimeout","prevDidTimeout","_prevState","_offscreenFiber","hasInvisibleChildContext","unstable_avoidThisFallback","renderDidSuspend","_primaryChildFragment2","_Component","didSuspendAlready","renderedTail","cannotBeSuspended","renderHasNotSuspendedYet","suspended","newThenables","getRenderTargetTime","_suspended","_newThenables","renderingStartTime","isBackwards","previousSibling","last","suspenseContext","popRenderLanes","_nextState","nextIsHidden","_prevState2","prevIsHidden","subtreeRenderLanes","ReactCurrentOwner$1","didReceiveUpdate","didWarnAboutBadClass","didWarnAboutModulePatternComponent","didWarnAboutContextTypeOnFunctionComponent","didWarnAboutGetDerivedStateOnFunctionComponent","didWarnAboutFunctionRefs","didWarnAboutReassigningProps","didWarnAboutRevealOrder","didWarnAboutTailOptions","reconcileChildren","nextChildren","forceUnmountCurrentAndReconcile","updateForwardRef","innerPropTypes","bailoutOnAlreadyFinishedWork","updateMemoComponent","isSimpleFunctionComponent","compare","resolvedType","resolveFunctionForHotReloading","validateFunctionComponentInDev","updateSimpleMemoComponent","createFiberFromTypeAndProps","_type","_innerPropTypes","hasScheduledUpdateOrContext","checkScheduledUpdateOrContext","prevProps","outerMemoType","outerPropTypes","updateFunctionComponent","updateOffscreenComponent","baseLanes","cachePool","pushRenderLanes","spawnedCachePool","nextBaseLanes","prevBaseLanes","_nextState2","_subtreeRenderLanes","updateMode","updateProfiler","markRef$1","updateClassComponent","shouldError","_instance","tempInstance","hasContext","nextUnitOfWork","finishClassComponent","didCaptureError","pushHostRootContext","updateHostRoot","prevChildren","updateHostComponent$1","updateHostText$1","mountLazyComponent","_current","resolvedTag","resolveLazyComponentTag","resolvedProps","resolveClassForHotReloading","resolveForwardRefForHotReloading","hint","mountIncompleteClassComponent","mountIndeterminateComponent","_componentName2","ownerName","warningKey","debugSource","fileName","lineNumber","_componentName3","_componentName4","SUSPENDED_MARKER","treeContext","retryLane","mountSuspenseOffscreenState","updateSuspenseOffscreenState","prevOffscreenState","shouldRemainOnFallback","suspenseState","getRemainingWorkInPrimaryTree","updateSuspenseComponent","shouldSuspend","showFallback","nextPrimaryChildren","nextFallbackChildren","fallback","fallbackFragment","mountSuspenseFallbackChildren","primaryChildFragment","mountSuspensePrimaryChildren","_nextFallbackChildren2","_nextPrimaryChildren2","_fallbackChildFragment","updateSuspenseFallbackChildren","_primaryChildFragment3","_nextPrimaryChildren3","_primaryChildFragment4","updateSuspensePrimaryChildren","_nextFallbackChildren3","_nextPrimaryChildren4","_fallbackChildFragment2","_primaryChildFragment5","_prevOffscreenState","_nextPrimaryChildren5","_primaryChildFragment6","primaryChildren","primaryChildProps","mountWorkInProgressOffscreenFiber","fallbackChildren","progressedPrimaryFragment","fallbackChildFragment","offscreenProps","createFiberFromOffscreen","updateWorkInProgressOffscreenFiber","currentPrimaryChildFragment","currentFallbackChildFragment","scheduleSuspenseWorkOnFiber","propagateSuspenseContextChange","firstChild","findLastContentRow","lastContentRow","currentRow","validateRevealOrder","toLowerCase","validateTailOptions","validateSuspenseListNestedChild","childSlot","isAnArray","isIterable","validateSuspenseListChildren","childrenIterator","_i","initSuspenseListRenderState","updateSuspenseListComponent","shouldForceFallback","didSuspendBefore","_tail","nextRow","updatePortalComponent","hasWarnedAboutUsingNoValuePropOnContextProvider","updateContextProvider","providerType","newValue","providerPropTypes","oldValue","hasWarnedAboutUsingContextAsConsumer","updateContextConsumer","Consumer","remountFiber","oldWorkInProgress","newWorkInProgress","prevSibling","updateLanes","attemptEarlyBailoutIfNoScheduledUpdate","hasChildWork","primaryChildLanes","_hasChildWork","beginWork","_debugNeedsRemount","unresolvedProps","_unresolvedProps","_resolvedProps","_unresolvedProps2","_resolvedProps2","_type2","_unresolvedProps3","_resolvedProps3","_Component2","_unresolvedProps4","_resolvedProps4","unwindWork","_flags","_flags2","unwindInterruptedWork","interruptedWork","invokeGuardedCallbackProd","func","d","f","funcArgs","onError","invokeGuardedCallbackImpl","window","dispatchEvent","document","createEvent","fakeNode","createElement","invokeGuardedCallbackDev","evt","didCall","windowEvent","event","windowEventDescriptor","getOwnPropertyDescriptor","restoreAfterDispatch","removeEventListener","evtType","didSetError","isCrossOriginError","handleWindowError","colno","lineno","defaultPrevented","inner","addEventListener","initEvent","invokeGuardedCallbackImpl$1","hasError","caughtError","reporter","invokeGuardedCallback","clearCaughtError","didWarnAboutUndefinedSnapshotBeforeUpdate","PossiblyWeakSet","WeakSet","nextEffect","reportUncaughtErrorInDEV","callComponentWillUnmountWithTimer","componentWillUnmount","safelyCallComponentWillUnmount","nearestMountedAncestor","captureCommitPhaseError","safelyDetachRef","retVal","safelyCallDestroy","focusedInstanceHandle","shouldFireAfterActiveInstanceBlur","commitBeforeMutationEffects","commitBeforeMutationEffects_begin","shouldFire","ensureCorrectReturnPointer","commitBeforeMutationEffects_complete","commitBeforeMutationEffectsOnFiber","snapshot","didWarnSet","__reactInternalSnapshotBeforeUpdate","commitHookEffectListUnmount","commitHookEffectListMount","commitPassiveEffectDurations","finishedRoot","_finishedWork$memoize","onPostCommit","phase","outer","commitLayoutEffectOnFiber","committedLanes","_updateQueue","_instance2","_finishedWork$memoize2","onCommit","onRender","enqueuePendingPassiveProfilerEffect","commitAttachRef","hideOrUnhideAllChildren","hostSubtreeRoot","_instance3","instanceToUse","commitDetachRef","currentRef","commitUnmount","_effect","unmountHostComponents","commitNestedUnmounts","detachFiberMutation","detachFiberAfterEffects","hostInstance","getHostParentFiber","isHostParent","getHostSibling","siblings","commitPlacement","before","insertOrAppendPlacementNode","_parent","_before","insertOrAppendPlacementNodeIntoContainer","isHost","currentParentIsValid","currentParentIsContainer","findParent","commitDeletion","commitWork","commitSuspenseCallback","attachSuspenseRetryListeners","retryCache","retry","resolveRetryWakeable","commitResetTextContent","commitMutationEffects","commitMutationEffects_begin","commitMutationEffects_complete","commitMutationEffectsOnFiber","wasHidden","markCommitTimeOfFallback","_newState","_isHidden","_current2","_wasHidden","offscreenBoundary","primaryFlags","_current3","_current4","_current5","commitLayoutEffects","commitLayoutEffects_begin","subtreeRoot","isModernRoot","commitLayoutMountEffects_complete","commitPassiveMountEffects","commitPassiveMountEffects_begin","commitPassiveMountEffects_complete","commitPassiveMountOnFiber","commitPassiveUnmountEffects","commitPassiveUnmountEffects_begin","fiberToDelete","commitPassiveUnmountEffectsInsideOfDeletedTree_begin","previousFiber","detachedChild","detachedSibling","commitPassiveUnmountEffects_complete","commitPassiveUnmountOnFiber","deletedSubtreeRoot","commitPassiveUnmountInsideDeletedTreeOnFiber","commitPassiveUnmountEffectsInsideOfDeletedTree_complete","didWarnWrongReturnPointer","expectedReturnFiber","COMPONENT_TYPE","HAS_PSEUDO_CLASS_TYPE","ROLE_TYPE","TEST_NAME_TYPE","TEXT_TYPE","symbolFor","ReactCurrentActQueue","isLegacyActEnvironment","isReactActEnvironmentGlobal","IS_REACT_ACT_ENVIRONMENT","jestIsDefined","jest","isConcurrentActEnvironment","ceil","ReactCurrentDispatcher$2","ReactCurrentOwner$2","ReactCurrentBatchConfig$2","ReactCurrentActQueue$1","NoContext","BatchedContext","RenderContext","CommitContext","RootInProgress","RootFatalErrored","RootErrored","RootSuspended","RootSuspendedWithDelay","RootCompleted","RootDidNotComplete","executionContext","workInProgressRoot","workInProgressRootRenderLanes","subtreeRenderLanesCursor","workInProgressRootExitStatus","workInProgressRootFatalError","workInProgressRootIncludedLanes","workInProgressRootSkippedLanes","workInProgressRootInterleavedUpdatedLanes","workInProgressRootPingedLanes","workInProgressRootConcurrentErrors","workInProgressRootRecoverableErrors","globalMostRecentFallbackTime","FALLBACK_THROTTLE_MS","workInProgressRootRenderTargetTime","Infinity","RENDER_TIMEOUT_MS","resetRenderTimer","hasUncaughtError","firstUncaughtError","legacyErrorBoundariesThatAlreadyFailed","rootDoesHavePassiveEffects","rootWithPendingPassiveEffects","pendingPassiveEffectsLanes","pendingPassiveProfilerEffects","NESTED_UPDATE_LIMIT","nestedUpdateCount","rootWithNestedUpdates","NESTED_PASSIVE_UPDATE_LIMIT","nestedPassiveUpdateCount","currentEventTime","currentEventTransitionLane","isTransition","eventLane","requestRetryLane","checkForNestedUpdates","markUpdateLaneFromFiberToRoot","warnAboutRenderPhaseUpdatesInDEV","warnIfUpdatesNotWrappedWithActDEV","markRootSuspended$1","ensureRootIsScheduled","isBatchingLegacy","warnAboutUpdateOnNotYetMountedFiberInDEV","existingCallbackNode","callbackNode","cancelCallback$1","callbackPriority","newCallbackPriority","existingCallbackPriority","fakeActCallbackNode","newCallbackNode","didScheduleLegacyUpdate","performSyncWorkOnRoot","scheduleCallback$1","schedulerPriorityLevel","performConcurrentWorkOnRoot","didTimeout","originalCallbackNode","didFlushPassiveEffects","flushPassiveEffects","shouldTimeSlice","exitStatus","renderRootConcurrent","renderRootSync","errorRetryLanes","recoverFromConcurrentError","fatalError","prepareFreshStack","renderWasConcurrent","isRenderConsistentWithExternalStores","_errorRetryLanes","_fatalError","finishedLanes","finishConcurrentRender","errorsFromFirstAttempt","rootWorkInProgress","errorsFromSecondAttempt","queueRecoverableErrors","errors","commitRoot","shouldForceFlushFallbacksInDEV","msUntilTimeout","timeoutHandle","eventTimeMs","timeElapsedMs","_msUntilTimeout","jnd","checks","renderedValue","batchedUpdates","prevExecutionContext","flushSync","handleError","erroredWork","completeUnitOfWork","yetAnotherThrownValue","pushDispatcher","popDispatcher","workLoopSync","performUnitOfWork","workLoopConcurrent","unitOfWork","beginWork$1","_next","siblingFiber","recoverableErrors","previousUpdateLanePriority","commitRootImpl","renderPriorityLevel","flushRenderPhaseStrictModeWarningsInDEV","subtreeHasEffects","rootHasEffect","onRecoverableError","recoverableError","renderPriority","priority","flushPassiveEffectsImpl","profilerEffects","_fiber","prepareToThrowUncaughtError","captureCommitPhaseErrorOnRoot","rootFiber","warnIfSuspenseResolutionNotWrappedWithActDEV","retryTimedOutBoundary","boundaryFiber","timeElapsed","didWarnStateUpdateForNotYetMountedComponent","didWarnAboutUpdateInRender","didWarnAboutUpdateInRenderForAnotherComponent","renderingComponentName","dedupeKey","setStateComponentName","priorityLevel","actQueue","resolveFamily","failedBoundaries","setRefreshHandler","handler","family","currentRender","syntheticType","prevType","nextType","needsCompareFamilies","$$typeofNextType","prevFamily","scheduleRefresh","staleFamilies","updatedFamilies","scheduleFibersWithFamiliesRecursively","scheduleRoot","updateContainer","candidateType","needsRender","needsRemount","findHostInstancesForRefresh","families","hostInstances","types","findHostInstancesForMatchingFibersRecursively","didMatch","findHostInstancesForFiberShallowly","foundHostInstances","findChildHostInstancesForFiberShallowly","hasBadMapPolyfill","nonExtensibleObject","preventExtensions","FiberNode","Number","NaN","createFiber","shouldConstruct$1","currentDependencies","createHostRootFiber","isStrictMode","concurrentUpdatesByDefaultOverride","fiberTag","getTag","createFiberFromProfiler","createFiberFromSuspense","createFiberFromSuspenseList","elements","primaryChildInstance","content","pendingChildren","FiberRootNode","hydrate","_debugRootType","createFiberRoot","initialChildren","hydrationCallbacks","transitionCallbacks","uninitializedFiber","_initialState","cache","transitions","ReactVersion","didWarnAboutNestedUpdates","getContextForSubtree","parentComponent","createContainer","current$1","getPublicRootInstance","containerFiber","shouldErrorImpl","shouldSuspendImpl","overrideHookState","overrideHookStateDeletePath","overrideHookStateRenamePath","overrideProps","overridePropsDeletePath","overridePropsRenamePath","scheduleUpdate","setErrorHandler","setSuspenseHandler","copyWithDeleteImpl","obj","path","updated","copyWithDelete","copyWithRenameImpl","oldPath","newPath","oldKey","newKey","copyWithRename","copyWithSetImpl","copyWithSet","findHook","newShouldErrorImpl","newShouldSuspendImpl","findHostInstanceByFiber","hostFiber","emptyFindFiberByHostInstance","getCurrentFiberForDevTools","injectIntoDevTools","devToolsConfig","findFiberByHostInstance","bundleType","version","rendererPackageName","rendererConfig","currentDispatcherRef","getCurrentFiber","reconcilerVersion","act","unstable_act","defaultTestOptions","toJSON","_inst$props","renderedChildren","renderedChild","json","childrenToTree","nodeAndSiblingsArray","toTree","flatten","nodeWithSibling","arr","result","n","el","nodeType","rendered","validWrapperTypes","getChildren","startingNode","descend","wrapFiber","ReactTestInstance","_proto","_currentFiber","find","predicate","expectOne","findAll","deep","findByType","findAllByType","findByProps","findAllByProps","JSON","stringify","_findAll","propsMatch","results","all","filter","isConcurrent","concurrentUpdatesByDefault","unstable_isConcurrent","unstable_strictMode","entry","_Scheduler","newElement","unmount","getInstance","unstable_flushSync","fiberToWrapper","wrapper","exports","unstable_batchedUpdates"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,GAAC,YAAW;AACd;;AAEA,QAAIC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAnB;;AACA,QAAIC,SAAS,GAAGD,OAAO,CAAC,yBAAD,CAAvB;;AACA,QAAIE,WAAW,GAAGF,OAAO,CAAC,WAAD,CAAzB;;AAEA,QAAIG,oBAAoB,GAAGJ,KAAK,CAACK,kDAAjC,CAPc,CASd;AACA;AACA;AACA;;AAEA,aAASC,IAAT,CAAcC,MAAd,EAAsB;AACpB;AACE;AACE,eAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAArB,EAA6BC,IAAI,GAAG,IAAIC,KAAJ,CAAUJ,IAAI,GAAG,CAAP,GAAWA,IAAI,GAAG,CAAlB,GAAsB,CAAhC,CAApC,EAAwEK,IAAI,GAAG,CAApF,EAAuFA,IAAI,GAAGL,IAA9F,EAAoGK,IAAI,EAAxG,EAA4G;AAC1GF,YAAAA,IAAI,CAACE,IAAI,GAAG,CAAR,CAAJ,GAAiBJ,SAAS,CAACI,IAAD,CAA1B;AACD;;AAEDC,UAAAA,YAAY,CAAC,MAAD,EAASP,MAAT,EAAiBI,IAAjB,CAAZ;AACD;AACF;AACF;;AACD,aAASI,KAAT,CAAeR,MAAf,EAAuB;AACrB;AACE;AACE,eAAK,IAAIS,KAAK,GAAGP,SAAS,CAACC,MAAtB,EAA8BC,IAAI,GAAG,IAAIC,KAAJ,CAAUI,KAAK,GAAG,CAAR,GAAYA,KAAK,GAAG,CAApB,GAAwB,CAAlC,CAArC,EAA2EC,KAAK,GAAG,CAAxF,EAA2FA,KAAK,GAAGD,KAAnG,EAA0GC,KAAK,EAA/G,EAAmH;AACjHN,YAAAA,IAAI,CAACM,KAAK,GAAG,CAAT,CAAJ,GAAkBR,SAAS,CAACQ,KAAD,CAA3B;AACD;;AAEDH,UAAAA,YAAY,CAAC,OAAD,EAAUP,MAAV,EAAkBI,IAAlB,CAAZ;AACD;AACF;AACF;;AAED,aAASG,YAAT,CAAsBI,KAAtB,EAA6BX,MAA7B,EAAqCI,IAArC,EAA2C;AACzC;AACA;AACA;AACE,YAAIQ,sBAAsB,GAAGf,oBAAoB,CAACe,sBAAlD;AACA,YAAIC,KAAK,GAAGD,sBAAsB,CAACE,gBAAvB,EAAZ;;AAEA,YAAID,KAAK,KAAK,EAAd,EAAkB;AAChBb,UAAAA,MAAM,IAAI,IAAV;AACAI,UAAAA,IAAI,GAAGA,IAAI,CAACW,MAAL,CAAY,CAACF,KAAD,CAAZ,CAAP;AACD,SAPH,CAOI;;;AAGF,YAAIG,cAAc,GAAGZ,IAAI,CAACa,GAAL,CAAS,UAAUC,IAAV,EAAgB;AAC5C,iBAAOC,MAAM,CAACD,IAAD,CAAb;AACD,SAFoB,CAArB,CAVF,CAYM;;AAEJF,QAAAA,cAAc,CAACI,OAAf,CAAuB,cAAcpB,MAArC,EAdF,CAcgD;AAC9C;AACA;;AAEAqB,QAAAA,QAAQ,CAACC,SAAT,CAAmBC,KAAnB,CAAyBC,IAAzB,CAA8BC,OAAO,CAACd,KAAD,CAArC,EAA8Cc,OAA9C,EAAuDT,cAAvD;AACD;AACF;;AAED,aAASU,iBAAT,CAA2BC,MAA3B,EAAmCC,KAAnC,EAA0C;AACxC,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACzB,MAA1B,EAAkC0B,CAAC,EAAnC,EAAuC;AACrC,YAAIC,UAAU,GAAGF,KAAK,CAACC,CAAD,CAAtB;AACAC,QAAAA,UAAU,CAACC,UAAX,GAAwBD,UAAU,CAACC,UAAX,IAAyB,KAAjD;AACAD,QAAAA,UAAU,CAACE,YAAX,GAA0B,IAA1B;AACA,YAAI,WAAWF,UAAf,EAA2BA,UAAU,CAACG,QAAX,GAAsB,IAAtB;AAC3BC,QAAAA,MAAM,CAACC,cAAP,CAAsBR,MAAtB,EAA8BG,UAAU,CAACM,GAAzC,EAA8CN,UAA9C;AACD;AACF;;AAED,aAASO,YAAT,CAAsBC,WAAtB,EAAmCC,UAAnC,EAA+CC,WAA/C,EAA4D;AAC1D,UAAID,UAAJ,EAAgBb,iBAAiB,CAACY,WAAW,CAAChB,SAAb,EAAwBiB,UAAxB,CAAjB;AAChB,UAAIC,WAAJ,EAAiBd,iBAAiB,CAACY,WAAD,EAAcE,WAAd,CAAjB;AACjB,aAAOF,WAAP;AACD;;AAED,aAASG,6BAAT,CAAuCC,MAAvC,EAA+CC,QAA/C,EAAyD;AACvD,UAAID,MAAM,IAAI,IAAd,EAAoB,OAAO,EAAP;AACpB,UAAIf,MAAM,GAAG,EAAb;AACA,UAAIiB,UAAU,GAAGV,MAAM,CAACW,IAAP,CAAYH,MAAZ,CAAjB;AACA,UAAIN,GAAJ,EAASP,CAAT;;AAEA,WAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGe,UAAU,CAACzC,MAA3B,EAAmC0B,CAAC,EAApC,EAAwC;AACtCO,QAAAA,GAAG,GAAGQ,UAAU,CAACf,CAAD,CAAhB;AACA,YAAIc,QAAQ,CAACG,OAAT,CAAiBV,GAAjB,KAAyB,CAA7B,EAAgC;AAChCT,QAAAA,MAAM,CAACS,GAAD,CAAN,GAAcM,MAAM,CAACN,GAAD,CAApB;AACD;;AAED,aAAOT,MAAP;AACD;;AAED,QAAIoB,MAAM,GAAGb,MAAM,CAACa,MAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,aAASC,GAAT,CAAaZ,GAAb,EAAkB;AAChB,aAAOA,GAAG,CAACa,eAAX;AACD;;AACD,aAASC,GAAT,CAAad,GAAb,EAAkBe,KAAlB,EAAyB;AACvBf,MAAAA,GAAG,CAACa,eAAJ,GAAsBE,KAAtB;AACD;;AAED,QAAIC,wBAAwB,GAAG,KAA/B;AACA,QAAIC,mBAAmB,GAAG,IAA1B;AACA,QAAIC,yBAAyB,GAAG,IAAhC;AACA,QAAIC,kBAAkB,GAAG,KAAzB;AACA,QAAIC,mBAAmB,GAAG,KAA1B;AACA,QAAIC,+BAA+B,GAAG,KAAtC;AACA,QAAIC,mBAAmB,GAAG,KAA1B;AACA,QAAIC,4BAA4B,GAAG,KAAnC;AACA,QAAIC,kBAAkB,GAAG,KAAzB;AAEA,QAAIC,iBAAiB,GAAG,CAAxB;AACA,QAAIC,cAAc,GAAG,CAArB;AACA,QAAIC,sBAAsB,GAAG,CAA7B,CA3Hc,CA2HkB;;AAEhC,QAAIC,QAAQ,GAAG,CAAf,CA7Hc,CA6HI;;AAElB,QAAIC,UAAU,GAAG,CAAjB,CA/Hc,CA+HM;;AAEpB,QAAIC,aAAa,GAAG,CAApB;AACA,QAAIC,QAAQ,GAAG,CAAf;AACA,QAAIC,QAAQ,GAAG,CAAf;AACA,QAAIC,IAAI,GAAG,CAAX;AACA,QAAIC,eAAe,GAAG,CAAtB;AACA,QAAIC,eAAe,GAAG,EAAtB;AACA,QAAIC,UAAU,GAAG,EAAjB;AACA,QAAIC,QAAQ,GAAG,EAAf;AACA,QAAIC,iBAAiB,GAAG,EAAxB;AACA,QAAIC,aAAa,GAAG,EAApB;AACA,QAAIC,mBAAmB,GAAG,EAA1B;AACA,QAAIC,aAAa,GAAG,EAApB;AACA,QAAIC,wBAAwB,GAAG,EAA/B;AACA,QAAIC,kBAAkB,GAAG,EAAzB;AACA,QAAIC,qBAAqB,GAAG,EAA5B;AACA,QAAIC,cAAc,GAAG,EAArB;AACA,QAAIC,kBAAkB,GAAG,EAAzB;AACA,QAAIC,qBAAqB,GAAG,EAA5B;AACA,QAAIC,cAAc,GAAG,EAArB;AACA,QAAIC,sBAAsB,GAAG,EAA7B,CApJc,CAsJd;AACA;AACA;AACA;;AACA,QAAIC,kBAAkB,GAAGC,MAAM,CAACC,GAAP,CAAW,eAAX,CAAzB;AACA,QAAIC,iBAAiB,GAAGF,MAAM,CAACC,GAAP,CAAW,cAAX,CAAxB;AACA,QAAIE,mBAAmB,GAAGH,MAAM,CAACC,GAAP,CAAW,gBAAX,CAA1B;AACA,QAAIG,sBAAsB,GAAGJ,MAAM,CAACC,GAAP,CAAW,mBAAX,CAA7B;AACA,QAAII,mBAAmB,GAAGL,MAAM,CAACC,GAAP,CAAW,gBAAX,CAA1B;AACA,QAAIK,mBAAmB,GAAGN,MAAM,CAACC,GAAP,CAAW,gBAAX,CAA1B;AACA,QAAIM,kBAAkB,GAAGP,MAAM,CAACC,GAAP,CAAW,eAAX,CAAzB;AACA,QAAIO,sBAAsB,GAAGR,MAAM,CAACC,GAAP,CAAW,mBAAX,CAA7B;AACA,QAAIQ,mBAAmB,GAAGT,MAAM,CAACC,GAAP,CAAW,gBAAX,CAA1B;AACA,QAAIS,wBAAwB,GAAGV,MAAM,CAACC,GAAP,CAAW,qBAAX,CAA/B;AACA,QAAIU,eAAe,GAAGX,MAAM,CAACC,GAAP,CAAW,YAAX,CAAtB;AACA,QAAIW,eAAe,GAAGZ,MAAM,CAACC,GAAP,CAAW,YAAX,CAAtB;AACA,QAAIY,gBAAgB,GAAGb,MAAM,CAACC,GAAP,CAAW,aAAX,CAAvB;AACA,QAAIa,6BAA6B,GAAGd,MAAM,CAACC,GAAP,CAAW,wBAAX,CAApC;AACA,QAAIc,oBAAoB,GAAGf,MAAM,CAACC,GAAP,CAAW,iBAAX,CAA3B;AACA,QAAIe,wBAAwB,GAAGhB,MAAM,CAACC,GAAP,CAAW,qBAAX,CAA/B;AACA,QAAIgB,gBAAgB,GAAGjB,MAAM,CAACC,GAAP,CAAW,aAAX,CAAvB;AACA,QAAIiB,yBAAyB,GAAGlB,MAAM,CAACC,GAAP,CAAW,sBAAX,CAAhC;AACA,QAAIkB,qBAAqB,GAAGnB,MAAM,CAACoB,QAAnC;AACA,QAAIC,oBAAoB,GAAG,YAA3B;;AACA,aAASC,aAAT,CAAuBC,aAAvB,EAAsC;AACpC,UAAIA,aAAa,KAAK,IAAlB,IAA0B,OAAOA,aAAP,KAAyB,QAAvD,EAAiE;AAC/D,eAAO,IAAP;AACD;;AAED,UAAIC,aAAa,GAAGL,qBAAqB,IAAII,aAAa,CAACJ,qBAAD,CAAtC,IAAiEI,aAAa,CAACF,oBAAD,CAAlG;;AAEA,UAAI,OAAOG,aAAP,KAAyB,UAA7B,EAAyC;AACvC,eAAOA,aAAP;AACD;;AAED,aAAO,IAAP;AACD;;AAED,aAASC,cAAT,CAAwBC,SAAxB,EAAmCC,SAAnC,EAA8CC,WAA9C,EAA2D;AACzD,UAAIC,WAAW,GAAGH,SAAS,CAACG,WAA5B;;AAEA,UAAIA,WAAJ,EAAiB;AACf,eAAOA,WAAP;AACD;;AAED,UAAIC,YAAY,GAAGH,SAAS,CAACE,WAAV,IAAyBF,SAAS,CAACI,IAAnC,IAA2C,EAA9D;AACA,aAAOD,YAAY,KAAK,EAAjB,GAAsBF,WAAW,GAAG,GAAd,GAAoBE,YAApB,GAAmC,GAAzD,GAA+DF,WAAtE;AACD,KArMa,CAqMZ;;;AAGF,aAASI,cAAT,CAAwBC,IAAxB,EAA8B;AAC5B,aAAOA,IAAI,CAACJ,WAAL,IAAoB,SAA3B;AACD,KA1Ma,CA0MZ;;;AAGF,aAASK,wBAAT,CAAkCD,IAAlC,EAAwC;AACtC,UAAIA,IAAI,IAAI,IAAZ,EAAkB;AAChB;AACA,eAAO,IAAP;AACD;;AAED;AACE,YAAI,OAAOA,IAAI,CAACE,GAAZ,KAAoB,QAAxB,EAAkC;AAChClH,UAAAA,KAAK,CAAC,kEAAkE,sDAAnE,CAAL;AACD;AACF;;AAED,UAAI,OAAOgH,IAAP,KAAgB,UAApB,EAAgC;AAC9B,eAAOA,IAAI,CAACJ,WAAL,IAAoBI,IAAI,CAACF,IAAzB,IAAiC,IAAxC;AACD;;AAED,UAAI,OAAOE,IAAP,KAAgB,QAApB,EAA8B;AAC5B,eAAOA,IAAP;AACD;;AAED,cAAQA,IAAR;AACE,aAAK9B,mBAAL;AACE,iBAAO,UAAP;;AAEF,aAAKD,iBAAL;AACE,iBAAO,QAAP;;AAEF,aAAKG,mBAAL;AACE,iBAAO,UAAP;;AAEF,aAAKD,sBAAL;AACE,iBAAO,YAAP;;AAEF,aAAKK,mBAAL;AACE,iBAAO,UAAP;;AAEF,aAAKC,wBAAL;AACE,iBAAO,cAAP;AAjBJ;;AAqBA,UAAI,OAAOuB,IAAP,KAAgB,QAApB,EAA8B;AAC5B,gBAAQA,IAAI,CAACG,QAAb;AACE,eAAK7B,kBAAL;AACE,gBAAI8B,OAAO,GAAGJ,IAAd;AACA,mBAAOD,cAAc,CAACK,OAAD,CAAd,GAA0B,WAAjC;;AAEF,eAAK/B,mBAAL;AACE,gBAAIgC,QAAQ,GAAGL,IAAf;AACA,mBAAOD,cAAc,CAACM,QAAQ,CAACC,QAAV,CAAd,GAAoC,WAA3C;;AAEF,eAAK/B,sBAAL;AACE,mBAAOiB,cAAc,CAACQ,IAAD,EAAOA,IAAI,CAACO,MAAZ,EAAoB,YAApB,CAArB;;AAEF,eAAK7B,eAAL;AACE,gBAAI8B,SAAS,GAAGR,IAAI,CAACJ,WAAL,IAAoB,IAApC;;AAEA,gBAAIY,SAAS,KAAK,IAAlB,EAAwB;AACtB,qBAAOA,SAAP;AACD;;AAED,mBAAOP,wBAAwB,CAACD,IAAI,CAACA,IAAN,CAAxB,IAAuC,MAA9C;;AAEF,eAAKrB,eAAL;AACE;AACE,kBAAI8B,aAAa,GAAGT,IAApB;AACA,kBAAIU,OAAO,GAAGD,aAAa,CAACE,QAA5B;AACA,kBAAIC,IAAI,GAAGH,aAAa,CAACI,KAAzB;;AAEA,kBAAI;AACF,uBAAOZ,wBAAwB,CAACW,IAAI,CAACF,OAAD,CAAL,CAA/B;AACD,eAFD,CAEE,OAAOI,CAAP,EAAU;AACV,uBAAO,IAAP;AACD;AACF;AAEH;AAlCF;AAoCD;;AAED,aAAO,IAAP;AACD;;AAED,aAASC,gBAAT,CAA0BtB,SAA1B,EAAqCC,SAArC,EAAgDC,WAAhD,EAA6D;AAC3D,UAAIE,YAAY,GAAGH,SAAS,CAACE,WAAV,IAAyBF,SAAS,CAACI,IAAnC,IAA2C,EAA9D;AACA,aAAOL,SAAS,CAACG,WAAV,KAA0BC,YAAY,KAAK,EAAjB,GAAsBF,WAAW,GAAG,GAAd,GAAoBE,YAApB,GAAmC,GAAzD,GAA+DF,WAAzF,CAAP;AACD,KAnSa,CAmSZ;;;AAGF,aAASqB,gBAAT,CAA0BhB,IAA1B,EAAgC;AAC9B,aAAOA,IAAI,CAACJ,WAAL,IAAoB,SAA3B;AACD;;AAED,aAASqB,yBAAT,CAAmCC,KAAnC,EAA0C;AACxC,UAAIhB,GAAG,GAAGgB,KAAK,CAAChB,GAAhB;AAAA,UACIF,IAAI,GAAGkB,KAAK,CAAClB,IADjB;;AAGA,cAAQE,GAAR;AACE,aAAKtC,cAAL;AACE,iBAAO,OAAP;;AAEF,aAAKd,eAAL;AACE,cAAIsD,OAAO,GAAGJ,IAAd;AACA,iBAAOgB,gBAAgB,CAACZ,OAAD,CAAhB,GAA4B,WAAnC;;AAEF,aAAKrD,eAAL;AACE,cAAIsD,QAAQ,GAAGL,IAAf;AACA,iBAAOgB,gBAAgB,CAACX,QAAQ,CAACC,QAAV,CAAhB,GAAsC,WAA7C;;AAEF,aAAK/C,kBAAL;AACE,iBAAO,oBAAP;;AAEF,aAAKP,UAAL;AACE,iBAAO+D,gBAAgB,CAACf,IAAD,EAAOA,IAAI,CAACO,MAAZ,EAAoB,YAApB,CAAvB;;AAEF,aAAK3D,QAAL;AACE,iBAAO,UAAP;;AAEF,aAAKF,aAAL;AACE;AACA,iBAAOsD,IAAP;;AAEF,aAAKvD,UAAL;AACE,iBAAO,QAAP;;AAEF,aAAKD,QAAL;AACE,iBAAO,MAAP;;AAEF,aAAKG,QAAL;AACE,iBAAO,MAAP;;AAEF,aAAKU,aAAL;AACE;AACA,iBAAO4C,wBAAwB,CAACD,IAAD,CAA/B;;AAEF,aAAKnD,IAAL;AACE,cAAImD,IAAI,KAAK7B,sBAAb,EAAqC;AACnC;AACA,mBAAO,YAAP;AACD;;AAED,iBAAO,MAAP;;AAEF,aAAKT,kBAAL;AACE,iBAAO,WAAP;;AAEF,aAAKT,QAAL;AACE,iBAAO,UAAP;;AAEF,aAAKQ,cAAL;AACE,iBAAO,OAAP;;AAEF,aAAKP,iBAAL;AACE,iBAAO,UAAP;;AAEF,aAAKM,qBAAL;AACE,iBAAO,cAAP;;AAEF,aAAKK,sBAAL;AACE,iBAAO,eAAP;AACF;;AAEA,aAAKvB,cAAL;AACA,aAAKD,iBAAL;AACA,aAAKiB,wBAAL;AACA,aAAKf,sBAAL;AACA,aAAKY,aAAL;AACA,aAAKC,mBAAL;AACE,cAAI,OAAO4C,IAAP,KAAgB,UAApB,EAAgC;AAC9B,mBAAOA,IAAI,CAACJ,WAAL,IAAoBI,IAAI,CAACF,IAAzB,IAAiC,IAAxC;AACD;;AAED,cAAI,OAAOE,IAAP,KAAgB,QAApB,EAA8B;AAC5B,mBAAOA,IAAP;AACD;;AAED;AA/EJ;;AAmFA,aAAO,IAAP;AACD,KAlYa,CAoYd;;;AACA,QAAImB,OAAO;AACX;AACA,KAFA;AAGA,QAAIC,aAAa;AACjB;AACA,KAFA,CAxYc,CA0YX;;AAEH,QAAIC,SAAS;AACb;AACA,KAFA;AAGA,QAAIC,MAAM;AACV;AACA,KAFA;AAGA,QAAIC,kBAAkB;AACtB;AACAF,IAAAA,SAAS,GAAGC,MAFZ;AAGA,QAAIE,aAAa;AACjB;AACA,MAFA;AAGA,QAAIC,YAAY;AAChB;AACA,MAFA;AAGA,QAAIC,QAAQ;AACZ;AACA,MAFA;AAGA,QAAIC,UAAU;AACd;AACA,OAFA;AAGA,QAAIC,iBAAiB;AACrB;AACA,OAFA;AAGA,QAAIC,GAAG;AACP;AACA,OAFA;AAGA,QAAIC,QAAQ;AACZ;AACA,QAFA;AAGA,QAAIC,OAAO;AACX;AACA,QAFA;AAGA,QAAIC,SAAS;AACb;AACA,QAFA;AAGA,QAAIC,kBAAkB;AACtB;AACAD,IAAAA,SAAS,GAAGV,MAFZ;AAGA,QAAIY,UAAU;AACd;AACA,QAFA;AAGA,QAAIC,gBAAgB;AACpB;AACA,SAFA;AAGA,QAAIC,mBAAmB,GAAGL,OAAO,GAAGT,MAAV,GAAmBI,QAAnB,GAA8BG,GAA9B,GAAoCC,QAApC,GAA+CK,gBAAzE,CAzbc,CAyb6E;;AAE3F,QAAIE,cAAc;AAClB;AACA,SAFA,CA3bc,CA6bP;;AAEP,QAAIC,UAAU;AACd;AACA,SAFA;AAGA,QAAIC,aAAa;AACjB;AACA,SAFA;AAGA,QAAIC,4BAA4B;AAChC;AACA,UAFA;AAGA,QAAIC,MAAM;AACV;AACA,WAFA,CAxcc,CA0cL;AACT;AACA;AACA;AACA;;AAEA,QAAIC,SAAS;AACb;AACA,WAFA;AAGA,QAAIC,YAAY;AAChB;AACA,WAFA;AAGA,QAAIC,aAAa;AACjB;AACA,WAFA,CAtdc,CAwdL;AACT;;AAEA,QAAIC,kBAAkB,GAAG;AACzB;AACAvB,IAAAA,MAAM,GAAGQ,QAAT,GAAsB,CAFtB;AAGA,QAAIgB,YAAY,GAAGzB,SAAS,GAAGC,MAAZ,GAAqBE,aAArB,GAAqCC,YAArC,GAAoDI,GAApD,GAA0DG,SAA1D,GAAsEE,UAAzF;AACA,QAAIa,UAAU,GAAGzB,MAAM,GAAGI,QAAT,GAAoBG,GAApB,GAA0BK,UAA3C,CA/dc,CA+dyC;;AAEvD,QAAIc,WAAW,GAAGjB,OAAO,GAAGP,aAA5B,CAjec,CAie6B;AAC3C;AACA;;AAEA,QAAIyB,UAAU,GAAGN,YAAY,GAAGC,aAAf,GAA+BF,SAAhD;AAEA,QAAIQ,iBAAiB,GAAG7K,oBAAoB,CAAC6K,iBAA7C;;AACA,aAASC,sBAAT,CAAgCjC,KAAhC,EAAuC;AACrC,UAAIkC,IAAI,GAAGlC,KAAX;AACA,UAAImC,cAAc,GAAGnC,KAArB;;AAEA,UAAI,CAACA,KAAK,CAACoC,SAAX,EAAsB;AACpB;AACA;AACA,YAAIC,QAAQ,GAAGH,IAAf;;AAEA,WAAG;AACDA,UAAAA,IAAI,GAAGG,QAAP;;AAEA,cAAI,CAACH,IAAI,CAACI,KAAL,IAAcnC,SAAS,GAAGW,SAA1B,CAAD,MAA2Cb,OAA/C,EAAwD;AACtD;AACA;AACA;AACAkC,YAAAA,cAAc,GAAGD,IAAI,CAACK,MAAtB;AACD;;AAEDF,UAAAA,QAAQ,GAAGH,IAAI,CAACK,MAAhB;AACD,SAXD,QAWSF,QAXT;AAYD,OAjBD,MAiBO;AACL,eAAOH,IAAI,CAACK,MAAZ,EAAoB;AAClBL,UAAAA,IAAI,GAAGA,IAAI,CAACK,MAAZ;AACD;AACF;;AAED,UAAIL,IAAI,CAAClD,GAAL,KAAa1D,QAAjB,EAA2B;AACzB;AACA;AACA,eAAO6G,cAAP;AACD,OA/BoC,CA+BnC;AACF;;;AAGA,aAAO,IAAP;AACD;;AACD,aAASK,cAAT,CAAwBxC,KAAxB,EAA+B;AAC7B,aAAOiC,sBAAsB,CAACjC,KAAD,CAAtB,KAAkCA,KAAzC;AACD;;AACD,aAASyC,SAAT,CAAmBC,SAAnB,EAA8B;AAC5B;AACE,YAAIC,KAAK,GAAGX,iBAAiB,CAACY,OAA9B;;AAEA,YAAID,KAAK,KAAK,IAAV,IAAkBA,KAAK,CAAC3D,GAAN,KAAc5D,cAApC,EAAoD;AAClD,cAAIyH,UAAU,GAAGF,KAAjB;AACA,cAAIG,QAAQ,GAAGD,UAAU,CAACE,SAA1B;;AAEA,cAAI,CAACD,QAAQ,CAACE,wBAAd,EAAwC;AACtClL,YAAAA,KAAK,CAAC,6DAA6D,mEAA7D,GAAmI,oEAAnI,GAA0M,iEAA1M,GAA8Q,6BAA/Q,EAA8SiI,yBAAyB,CAAC8C,UAAD,CAAzB,IAAyC,aAAvV,CAAL;AACD;;AAEDC,UAAAA,QAAQ,CAACE,wBAAT,GAAoC,IAApC;AACD;AACF;AAED,UAAIhD,KAAK,GAAG1F,GAAG,CAACoI,SAAD,CAAf;;AAEA,UAAI,CAAC1C,KAAL,EAAY;AACV,eAAO,KAAP;AACD;;AAED,aAAOiC,sBAAsB,CAACjC,KAAD,CAAtB,KAAkCA,KAAzC;AACD;;AAED,aAASiD,eAAT,CAAyBjD,KAAzB,EAAgC;AAC9B,UAAIiC,sBAAsB,CAACjC,KAAD,CAAtB,KAAkCA,KAAtC,EAA6C;AAC3C,cAAM,IAAIkD,KAAJ,CAAU,gDAAV,CAAN;AACD;AACF;;AAED,aAASC,6BAAT,CAAuCnD,KAAvC,EAA8C;AAC5C,UAAIoC,SAAS,GAAGpC,KAAK,CAACoC,SAAtB;;AAEA,UAAI,CAACA,SAAL,EAAgB;AACd;AACA,YAAID,cAAc,GAAGF,sBAAsB,CAACjC,KAAD,CAA3C;;AAEA,YAAImC,cAAc,KAAK,IAAvB,EAA6B;AAC3B,gBAAM,IAAIe,KAAJ,CAAU,gDAAV,CAAN;AACD;;AAED,YAAIf,cAAc,KAAKnC,KAAvB,EAA8B;AAC5B,iBAAO,IAAP;AACD;;AAED,eAAOA,KAAP;AACD,OAhB2C,CAgB1C;AACF;AACA;;;AAGA,UAAIoD,CAAC,GAAGpD,KAAR;AACA,UAAIqD,CAAC,GAAGjB,SAAR;;AAEA,aAAO,IAAP,EAAa;AACX,YAAIkB,OAAO,GAAGF,CAAC,CAACb,MAAhB;;AAEA,YAAIe,OAAO,KAAK,IAAhB,EAAsB;AACpB;AACA;AACD;;AAED,YAAIC,OAAO,GAAGD,OAAO,CAAClB,SAAtB;;AAEA,YAAImB,OAAO,KAAK,IAAhB,EAAsB;AACpB;AACA;AACA;AACA;AACA,cAAIC,UAAU,GAAGF,OAAO,CAACf,MAAzB;;AAEA,cAAIiB,UAAU,KAAK,IAAnB,EAAyB;AACvBJ,YAAAA,CAAC,GAAGC,CAAC,GAAGG,UAAR;AACA;AACD,WAVmB,CAUlB;;;AAGF;AACD,SAxBU,CAwBT;AACF;AACA;;;AAGA,YAAIF,OAAO,CAACG,KAAR,KAAkBF,OAAO,CAACE,KAA9B,EAAqC;AACnC,cAAIA,KAAK,GAAGH,OAAO,CAACG,KAApB;;AAEA,iBAAOA,KAAP,EAAc;AACZ,gBAAIA,KAAK,KAAKL,CAAd,EAAiB;AACf;AACAH,cAAAA,eAAe,CAACK,OAAD,CAAf;AACA,qBAAOtD,KAAP;AACD;;AAED,gBAAIyD,KAAK,KAAKJ,CAAd,EAAiB;AACf;AACAJ,cAAAA,eAAe,CAACK,OAAD,CAAf;AACA,qBAAOlB,SAAP;AACD;;AAEDqB,YAAAA,KAAK,GAAGA,KAAK,CAACC,OAAd;AACD,WAjBkC,CAiBjC;AACF;;;AAGA,gBAAM,IAAIR,KAAJ,CAAU,gDAAV,CAAN;AACD;;AAED,YAAIE,CAAC,CAACb,MAAF,KAAac,CAAC,CAACd,MAAnB,EAA2B;AACzB;AACA;AACA;AACA;AACAa,UAAAA,CAAC,GAAGE,OAAJ;AACAD,UAAAA,CAAC,GAAGE,OAAJ;AACD,SAPD,MAOO;AACL;AACA;AACA;AACA;AACA;AACA,cAAII,YAAY,GAAG,KAAnB;AACA,cAAIC,MAAM,GAAGN,OAAO,CAACG,KAArB;;AAEA,iBAAOG,MAAP,EAAe;AACb,gBAAIA,MAAM,KAAKR,CAAf,EAAkB;AAChBO,cAAAA,YAAY,GAAG,IAAf;AACAP,cAAAA,CAAC,GAAGE,OAAJ;AACAD,cAAAA,CAAC,GAAGE,OAAJ;AACA;AACD;;AAED,gBAAIK,MAAM,KAAKP,CAAf,EAAkB;AAChBM,cAAAA,YAAY,GAAG,IAAf;AACAN,cAAAA,CAAC,GAAGC,OAAJ;AACAF,cAAAA,CAAC,GAAGG,OAAJ;AACA;AACD;;AAEDK,YAAAA,MAAM,GAAGA,MAAM,CAACF,OAAhB;AACD;;AAED,cAAI,CAACC,YAAL,EAAmB;AACjB;AACAC,YAAAA,MAAM,GAAGL,OAAO,CAACE,KAAjB;;AAEA,mBAAOG,MAAP,EAAe;AACb,kBAAIA,MAAM,KAAKR,CAAf,EAAkB;AAChBO,gBAAAA,YAAY,GAAG,IAAf;AACAP,gBAAAA,CAAC,GAAGG,OAAJ;AACAF,gBAAAA,CAAC,GAAGC,OAAJ;AACA;AACD;;AAED,kBAAIM,MAAM,KAAKP,CAAf,EAAkB;AAChBM,gBAAAA,YAAY,GAAG,IAAf;AACAN,gBAAAA,CAAC,GAAGE,OAAJ;AACAH,gBAAAA,CAAC,GAAGE,OAAJ;AACA;AACD;;AAEDM,cAAAA,MAAM,GAAGA,MAAM,CAACF,OAAhB;AACD;;AAED,gBAAI,CAACC,YAAL,EAAmB;AACjB,oBAAM,IAAIT,KAAJ,CAAU,oEAAoE,+DAA9E,CAAN;AACD;AACF;AACF;;AAED,YAAIE,CAAC,CAAChB,SAAF,KAAgBiB,CAApB,EAAuB;AACrB,gBAAM,IAAIH,KAAJ,CAAU,6DAA6D,sEAAvE,CAAN;AACD;AACF,OA9I2C,CA8I1C;AACF;;;AAGA,UAAIE,CAAC,CAACpE,GAAF,KAAU1D,QAAd,EAAwB;AACtB,cAAM,IAAI4H,KAAJ,CAAU,gDAAV,CAAN;AACD;;AAED,UAAIE,CAAC,CAACL,SAAF,CAAYH,OAAZ,KAAwBQ,CAA5B,EAA+B;AAC7B;AACA,eAAOpD,KAAP;AACD,OAzJ2C,CAyJ1C;;;AAGF,aAAOoC,SAAP;AACD;;AACD,aAASyB,oBAAT,CAA8BC,MAA9B,EAAsC;AACpC,UAAIC,aAAa,GAAGZ,6BAA6B,CAACW,MAAD,CAAjD;AACA,aAAOC,aAAa,KAAK,IAAlB,GAAyBC,wBAAwB,CAACD,aAAD,CAAjD,GAAmE,IAA1E;AACD;;AAED,aAASC,wBAAT,CAAkC9B,IAAlC,EAAwC;AACtC;AACA,UAAIA,IAAI,CAAClD,GAAL,KAAaxD,aAAb,IAA8B0G,IAAI,CAAClD,GAAL,KAAavD,QAA/C,EAAyD;AACvD,eAAOyG,IAAP;AACD;;AAED,UAAIuB,KAAK,GAAGvB,IAAI,CAACuB,KAAjB;;AAEA,aAAOA,KAAK,KAAK,IAAjB,EAAuB;AACrB,YAAIQ,KAAK,GAAGD,wBAAwB,CAACP,KAAD,CAApC;;AAEA,YAAIQ,KAAK,KAAK,IAAd,EAAoB;AAClB,iBAAOA,KAAP;AACD;;AAEDR,QAAAA,KAAK,GAAGA,KAAK,CAACC,OAAd;AACD;;AAED,aAAO,IAAP;AACD;;AAED,QAAIQ,WAAW,GAAGvM,KAAK,CAACwM,OAAxB,CAvuBc,CAuuBmB;;AAEjC,aAASA,OAAT,CAAiBf,CAAjB,EAAoB;AAClB,aAAOc,WAAW,CAACd,CAAD,CAAlB;AACD,KA3uBa,CA6uBd;;;AACA,QAAIgB,gBAAgB,GAAGlN,WAAW,CAACmN,yBAAnC;AACA,QAAIC,cAAc,GAAGpN,WAAW,CAACqN,uBAAjC;AACA,QAAIC,WAAW,GAAGtN,WAAW,CAACuN,oBAA9B;AACA,QAAIC,YAAY,GAAGxN,WAAW,CAACyN,qBAA/B;AACA,QAAIC,GAAG,GAAG1N,WAAW,CAAC2N,YAAtB;AACA,QAAIC,iBAAiB,GAAG5N,WAAW,CAAC6N,0BAApC;AACA,QAAIC,oBAAoB,GAAG9N,WAAW,CAAC+N,6BAAvC;AACA,QAAIC,cAAc,GAAGhO,WAAW,CAACiO,uBAAjC;AACA,QAAIC,YAAY,GAAGlO,WAAW,CAACmO,qBAA/B,CAtvBc,CAwvBd;AACA;AACA;AACA;;AACA,QAAIC,aAAa,GAAG,CAApB;AACA,QAAIC,OAAJ;AACA,QAAIC,QAAJ;AACA,QAAIC,QAAJ;AACA,QAAIC,SAAJ;AACA,QAAIC,SAAJ;AACA,QAAIC,kBAAJ;AACA,QAAIC,YAAJ;;AAEA,aAASC,WAAT,GAAuB,CAAE;;AAEzBA,IAAAA,WAAW,CAACC,kBAAZ,GAAiC,IAAjC;;AACA,aAASC,WAAT,GAAuB;AACrB;AACE,YAAIV,aAAa,KAAK,CAAtB,EAAyB;AACvB;AACAC,UAAAA,OAAO,GAAGxM,OAAO,CAACkN,GAAlB;AACAT,UAAAA,QAAQ,GAAGzM,OAAO,CAACmN,IAAnB;AACAT,UAAAA,QAAQ,GAAG1M,OAAO,CAAC1B,IAAnB;AACAqO,UAAAA,SAAS,GAAG3M,OAAO,CAACjB,KAApB;AACA6N,UAAAA,SAAS,GAAG5M,OAAO,CAACoN,KAApB;AACAP,UAAAA,kBAAkB,GAAG7M,OAAO,CAACqN,cAA7B;AACAP,UAAAA,YAAY,GAAG9M,OAAO,CAACsN,QAAvB,CARuB,CAQU;;AAEjC,cAAInN,KAAK,GAAG;AACVI,YAAAA,YAAY,EAAE,IADJ;AAEVD,YAAAA,UAAU,EAAE,IAFF;AAGVoB,YAAAA,KAAK,EAAEqL,WAHG;AAIVvM,YAAAA,QAAQ,EAAE;AAJA,WAAZ,CAVuB,CAepB;;AAEHC,UAAAA,MAAM,CAAC8M,gBAAP,CAAwBvN,OAAxB,EAAiC;AAC/BmN,YAAAA,IAAI,EAAEhN,KADyB;AAE/B+M,YAAAA,GAAG,EAAE/M,KAF0B;AAG/B7B,YAAAA,IAAI,EAAE6B,KAHyB;AAI/BpB,YAAAA,KAAK,EAAEoB,KAJwB;AAK/BiN,YAAAA,KAAK,EAAEjN,KALwB;AAM/BkN,YAAAA,cAAc,EAAElN,KANe;AAO/BmN,YAAAA,QAAQ,EAAEnN;AAPqB,WAAjC;AASA;AACD;;AAEDoM,QAAAA,aAAa;AACd;AACF;;AACD,aAASiB,YAAT,GAAwB;AACtB;AACEjB,QAAAA,aAAa;;AAEb,YAAIA,aAAa,KAAK,CAAtB,EAAyB;AACvB;AACA,cAAIpM,KAAK,GAAG;AACVI,YAAAA,YAAY,EAAE,IADJ;AAEVD,YAAAA,UAAU,EAAE,IAFF;AAGVE,YAAAA,QAAQ,EAAE;AAHA,WAAZ,CAFuB,CAMpB;;AAEHC,UAAAA,MAAM,CAAC8M,gBAAP,CAAwBvN,OAAxB,EAAiC;AAC/BkN,YAAAA,GAAG,EAAE5L,MAAM,CAAC,EAAD,EAAKnB,KAAL,EAAY;AACrBuB,cAAAA,KAAK,EAAE8K;AADc,aAAZ,CADoB;AAI/BW,YAAAA,IAAI,EAAE7L,MAAM,CAAC,EAAD,EAAKnB,KAAL,EAAY;AACtBuB,cAAAA,KAAK,EAAE+K;AADe,aAAZ,CAJmB;AAO/BnO,YAAAA,IAAI,EAAEgD,MAAM,CAAC,EAAD,EAAKnB,KAAL,EAAY;AACtBuB,cAAAA,KAAK,EAAEgL;AADe,aAAZ,CAPmB;AAU/B3N,YAAAA,KAAK,EAAEuC,MAAM,CAAC,EAAD,EAAKnB,KAAL,EAAY;AACvBuB,cAAAA,KAAK,EAAEiL;AADgB,aAAZ,CAVkB;AAa/BS,YAAAA,KAAK,EAAE9L,MAAM,CAAC,EAAD,EAAKnB,KAAL,EAAY;AACvBuB,cAAAA,KAAK,EAAEkL;AADgB,aAAZ,CAbkB;AAgB/BS,YAAAA,cAAc,EAAE/L,MAAM,CAAC,EAAD,EAAKnB,KAAL,EAAY;AAChCuB,cAAAA,KAAK,EAAEmL;AADyB,aAAZ,CAhBS;AAmB/BS,YAAAA,QAAQ,EAAEhM,MAAM,CAAC,EAAD,EAAKnB,KAAL,EAAY;AAC1BuB,cAAAA,KAAK,EAAEoL;AADmB,aAAZ;AAnBe,WAAjC;AAuBA;AACD;;AAED,YAAIP,aAAa,GAAG,CAApB,EAAuB;AACrBxN,UAAAA,KAAK,CAAC,oCAAoC,+CAArC,CAAL;AACD;AACF;AACF;;AAED,QAAI0O,UAAU,GAAG,IAAjB;AACA,QAAIC,YAAY,GAAG,IAAnB;AACA,QAAIC,cAAc,GAAG,KAArB;AACA,QAAIC,iBAAiB,GAAG,OAAOC,8BAAP,KAA0C,WAAlE;;AACA,aAASC,eAAT,CAAyBC,SAAzB,EAAoC;AAClC,UAAI,OAAOF,8BAAP,KAA0C,WAA9C,EAA2D;AACzD;AACA,eAAO,KAAP;AACD;;AAED,UAAIG,IAAI,GAAGH,8BAAX;;AAEA,UAAIG,IAAI,CAACC,UAAT,EAAqB;AACnB;AACA;AACA;AACA,eAAO,IAAP;AACD;;AAED,UAAI,CAACD,IAAI,CAACE,aAAV,EAAyB;AACvB;AACEnP,UAAAA,KAAK,CAAC,0EAA0E,mEAA1E,GAAgJ,yCAAjJ,CAAL;AACD,SAHsB,CAGrB;;AAGF,eAAO,IAAP;AACD;;AAED,UAAI;AACF,YAAI4C,wBAAJ,EAA8B;AAC5B;AACA;AACA;AACAoM,UAAAA,SAAS,GAAGzM,MAAM,CAAC,EAAD,EAAKyM,SAAL,EAAgB;AAChCI,YAAAA,eAAe,EAAEA,eADe;AAEhCC,YAAAA,oBAAoB,EAAEA;AAFU,WAAhB,CAAlB;AAID;;AAEDX,QAAAA,UAAU,GAAGO,IAAI,CAACK,MAAL,CAAYN,SAAZ,CAAb,CAXE,CAWmC;;AAErCL,QAAAA,YAAY,GAAGM,IAAf;AACD,OAdD,CAcE,OAAOM,GAAP,EAAY;AACZ;AACA;AACEvP,UAAAA,KAAK,CAAC,iDAAD,EAAoDuP,GAApD,CAAL;AACD;AACF;;AAED,UAAIN,IAAI,CAACO,QAAT,EAAmB;AACjB;AACA,eAAO,IAAP;AACD,OAHD,MAGO;AACL;AACA,eAAO,KAAP;AACD;AACF;;AACD,aAASC,cAAT,CAAwBC,IAAxB,EAA8BC,QAA9B,EAAwC;AACtC;AACE,YAAIhB,YAAY,IAAI,OAAOA,YAAY,CAACiB,mBAApB,KAA4C,UAAhE,EAA4E;AAC1E,cAAI;AACFjB,YAAAA,YAAY,CAACiB,mBAAb,CAAiClB,UAAjC,EAA6CgB,IAA7C,EAAmDC,QAAnD;AACD,WAFD,CAEE,OAAOJ,GAAP,EAAY;AACZ,gBAAK,CAACX,cAAN,EAAsB;AACpBA,cAAAA,cAAc,GAAG,IAAjB;AAEA5O,cAAAA,KAAK,CAAC,gDAAD,EAAmDuP,GAAnD,CAAL;AACD;AACF;AACF;AACF;AACF;;AACD,aAASM,YAAT,CAAsBH,IAAtB,EAA4BI,aAA5B,EAA2C;AACzC,UAAInB,YAAY,IAAI,OAAOA,YAAY,CAACoB,iBAApB,KAA0C,UAA9D,EAA0E;AACxE,YAAI;AACF,cAAIC,QAAQ,GAAG,CAACN,IAAI,CAAC5E,OAAL,CAAaN,KAAb,GAAqB7B,UAAtB,MAAsCA,UAArD;;AAEA,cAAI9F,mBAAJ,EAAyB;AACvB,gBAAIoN,iBAAJ;;AAEA,oBAAQH,aAAR;AACE,mBAAKI,qBAAL;AACED,gBAAAA,iBAAiB,GAAGjD,iBAApB;AACA;;AAEF,mBAAKmD,uBAAL;AACEF,gBAAAA,iBAAiB,GAAG/C,oBAApB;AACA;;AAEF,mBAAKkD,oBAAL;AACEH,gBAAAA,iBAAiB,GAAG7C,cAApB;AACA;;AAEF,mBAAKiD,iBAAL;AACEJ,gBAAAA,iBAAiB,GAAG3C,YAApB;AACA;;AAEF;AACE2C,gBAAAA,iBAAiB,GAAG7C,cAApB;AACA;AAnBJ;;AAsBAuB,YAAAA,YAAY,CAACoB,iBAAb,CAA+BrB,UAA/B,EAA2CgB,IAA3C,EAAiDO,iBAAjD,EAAoED,QAApE;AACD,WA1BD,MA0BO;AACLrB,YAAAA,YAAY,CAACoB,iBAAb,CAA+BrB,UAA/B,EAA2CgB,IAA3C,EAAiDY,SAAjD,EAA4DN,QAA5D;AACD;AACF,SAhCD,CAgCE,OAAOT,GAAP,EAAY;AACZ;AACE,gBAAI,CAACX,cAAL,EAAqB;AACnBA,cAAAA,cAAc,GAAG,IAAjB;AAEA5O,cAAAA,KAAK,CAAC,gDAAD,EAAmDuP,GAAnD,CAAL;AACD;AACF;AACF;AACF;AACF;;AACD,aAASgB,gBAAT,CAA0Bb,IAA1B,EAAgC;AAC9B,UAAIf,YAAY,IAAI,OAAOA,YAAY,CAAC6B,qBAApB,KAA8C,UAAlE,EAA8E;AAC5E,YAAI;AACF7B,UAAAA,YAAY,CAAC6B,qBAAb,CAAmC9B,UAAnC,EAA+CgB,IAA/C;AACD,SAFD,CAEE,OAAOH,GAAP,EAAY;AACZ;AACE,gBAAI,CAACX,cAAL,EAAqB;AACnBA,cAAAA,cAAc,GAAG,IAAjB;AAEA5O,cAAAA,KAAK,CAAC,gDAAD,EAAmDuP,GAAnD,CAAL;AACD;AACF;AACF;AACF;AACF;;AACD,aAASkB,eAAT,CAAyBvI,KAAzB,EAAgC;AAC9B,UAAIyG,YAAY,IAAI,OAAOA,YAAY,CAAC+B,oBAApB,KAA6C,UAAjE,EAA6E;AAC3E,YAAI;AACF/B,UAAAA,YAAY,CAAC+B,oBAAb,CAAkChC,UAAlC,EAA8CxG,KAA9C;AACD,SAFD,CAEE,OAAOqH,GAAP,EAAY;AACZ;AACE,gBAAI,CAACX,cAAL,EAAqB;AACnBA,cAAAA,cAAc,GAAG,IAAjB;AAEA5O,cAAAA,KAAK,CAAC,gDAAD,EAAmDuP,GAAnD,CAAL;AACD;AACF;AACF;AACF;AACF;;AAED,aAASF,oBAAT,CAA8BsB,cAA9B,EAA8C,CAC7C;;AAED,aAASvB,eAAT,GAA2B;AACzB;AACE,eAAO,IAAP;AACD;AACF;;AACD,aAASwB,0BAAT,GAAsC,CACrC;;AACD,aAASC,oBAAT,CAA8B3I,KAA9B,EAAqC4I,WAArC,EAAkDC,KAAlD,EAAyD,CACxD;;AACD,aAASC,sBAAT,CAAgC9I,KAAhC,EAAuC+I,QAAvC,EAAiDF,KAAjD,EAAwD,CACvD;;AAED,QAAIG,MAAM;AACV;AACA,KAFA,CAz/Bc,CA2/BX;;AAEH,QAAIC,cAAc;AAClB;AACA,KAFA;AAGA,QAAIC,WAAW;AACf;AACA,KAFA;AAGA,QAAIC,gBAAgB;AACpB;AACA,KAFA,CAngCc,CAugCd;;AACA,QAAIC,KAAK,GAAGC,IAAI,CAACD,KAAL,GAAaC,IAAI,CAACD,KAAlB,GAA0BE,aAAtC,CAxgCc,CAwgCuC;AACrD;AACA;;AAEA,QAAIrD,GAAG,GAAGoD,IAAI,CAACpD,GAAf;AACA,QAAIsD,GAAG,GAAGF,IAAI,CAACE,GAAf;;AAEA,aAASD,aAAT,CAAuB1J,CAAvB,EAA0B;AACxB,UAAI4J,MAAM,GAAG5J,CAAC,KAAK,CAAnB;;AAEA,UAAI4J,MAAM,KAAK,CAAf,EAAkB;AAChB,eAAO,EAAP;AACD;;AAED,aAAO,MAAMvD,GAAG,CAACuD,MAAD,CAAH,GAAcD,GAAd,GAAoB,CAA1B,IAA+B,CAAtC;AACD,KAvhCa,CAyhCd;;;AAEA,QAAIE,UAAU,GAAG,EAAjB;AACA,QAAIC,OAAO;AACX;AACA,KAFA;AAGA,QAAIC,MAAM;AACV;AACA,KAFA;AAGA,QAAIC,QAAQ;AACZ;AACA,KAFA;AAGA,QAAIC,4BAA4B;AAChC;AACA,KAFA;AAGA,QAAIC,mBAAmB;AACvB;AACA,KAFA;AAGA,QAAIC,oBAAoB;AACxB;AACA,KAFA;AAGA,QAAIC,WAAW;AACf;AACA,MAFA;AAGA,QAAIC,uBAAuB;AAC3B;AACA,MAFA;AAGA,QAAIC,eAAe;AACnB;AACA,WAFA;AAGA,QAAIC,eAAe;AACnB;AACA,MAFA;AAGA,QAAIC,eAAe;AACnB;AACA,OAFA;AAGA,QAAIC,eAAe;AACnB;AACA,OAFA;AAGA,QAAIC,eAAe;AACnB;AACA,OAFA;AAGA,QAAIC,eAAe;AACnB;AACA,QAFA;AAGA,QAAIC,eAAe;AACnB;AACA,QAFA;AAGA,QAAIC,eAAe;AACnB;AACA,QAFA;AAGA,QAAIC,eAAe;AACnB;AACA,QAFA;AAGA,QAAIC,eAAe;AACnB;AACA,SAFA;AAGA,QAAIC,gBAAgB;AACpB;AACA,SAFA;AAGA,QAAIC,gBAAgB;AACpB;AACA,SAFA;AAGA,QAAIC,gBAAgB;AACpB;AACA,UAFA;AAGA,QAAIC,gBAAgB;AACpB;AACA,UAFA;AAGA,QAAIC,gBAAgB;AACpB;AACA,UAFA;AAGA,QAAIC,gBAAgB;AACpB;AACA,WAFA;AAGA,QAAIC,gBAAgB;AACpB;AACA,WAFA;AAGA,QAAIC,UAAU;AACd;AACA,aAFA;AAGA,QAAIC,UAAU;AACd;AACA,WAFA;AAGA,QAAIC,UAAU;AACd;AACA,WAFA;AAGA,QAAIC,UAAU;AACd;AACA,YAFA;AAGA,QAAIC,UAAU;AACd;AACA,YAFA;AAGA,QAAIC,UAAU;AACd;AACA,YAFA;AAGA,QAAIC,aAAa,GAAGL,UAApB;AACA,QAAIM,sBAAsB;AAC1B;AACA,aAFA;AAGA,QAAIC,YAAY;AAChB;AACA,aAFA;AAGA,QAAIC,iBAAiB;AACrB;AACA,aAFA;AAGA,QAAIC,QAAQ;AACZ;AACA,aAFA;AAGA,QAAIC,aAAa;AACjB;AACA,cAFA,CAtoCc,CAwoCF;;AACZ,QAAIC,WAAW,GAAG,CAAC,CAAnB;AACA,QAAIC,kBAAkB,GAAG7B,eAAzB;AACA,QAAI8B,aAAa,GAAGb,UAApB;;AAEA,aAASc,uBAAT,CAAiCrD,KAAjC,EAAwC;AACtC,cAAQsD,sBAAsB,CAACtD,KAAD,CAA9B;AACE,aAAKe,QAAL;AACE,iBAAOA,QAAP;;AAEF,aAAKC,4BAAL;AACE,iBAAOA,4BAAP;;AAEF,aAAKC,mBAAL;AACE,iBAAOA,mBAAP;;AAEF,aAAKC,oBAAL;AACE,iBAAOA,oBAAP;;AAEF,aAAKC,WAAL;AACE,iBAAOA,WAAP;;AAEF,aAAKC,uBAAL;AACE,iBAAOA,uBAAP;;AAEF,aAAKE,eAAL;AACA,aAAKC,eAAL;AACA,aAAKC,eAAL;AACA,aAAKC,eAAL;AACA,aAAKC,eAAL;AACA,aAAKC,eAAL;AACA,aAAKC,eAAL;AACA,aAAKC,eAAL;AACA,aAAKC,eAAL;AACA,aAAKC,gBAAL;AACA,aAAKC,gBAAL;AACA,aAAKC,gBAAL;AACA,aAAKC,gBAAL;AACA,aAAKC,gBAAL;AACA,aAAKC,gBAAL;AACA,aAAKC,gBAAL;AACE,iBAAOrC,KAAK,GAAGqB,eAAf;;AAEF,aAAKkB,UAAL;AACA,aAAKC,UAAL;AACA,aAAKC,UAAL;AACA,aAAKC,UAAL;AACA,aAAKC,UAAL;AACE,iBAAO3C,KAAK,GAAGsC,UAAf;;AAEF,aAAKO,sBAAL;AACE,iBAAOA,sBAAP;;AAEF,aAAKE,iBAAL;AACE,iBAAOA,iBAAP;;AAEF,aAAKC,QAAL;AACE,iBAAOA,QAAP;;AAEF,aAAKC,aAAL;AACE,iBAAOA,aAAP;;AAEF;AACE;AACEhU,YAAAA,KAAK,CAAC,2DAAD,CAAL;AACD,WAHH,CAGI;;AAGF,iBAAO+Q,KAAP;AA9DJ;AAgED;;AAED,aAASuD,YAAT,CAAsB5E,IAAtB,EAA4B6E,QAA5B,EAAsC;AACpC;AACA,UAAIC,YAAY,GAAG9E,IAAI,CAAC8E,YAAxB;;AAEA,UAAIA,YAAY,KAAK5C,OAArB,EAA8B;AAC5B,eAAOA,OAAP;AACD;;AAED,UAAI6C,SAAS,GAAG7C,OAAhB;AACA,UAAI8C,cAAc,GAAGhF,IAAI,CAACgF,cAA1B;AACA,UAAIC,WAAW,GAAGjF,IAAI,CAACiF,WAAvB,CAVoC,CAUA;AACpC;;AAEA,UAAIC,mBAAmB,GAAGJ,YAAY,GAAGX,YAAzC;;AAEA,UAAIe,mBAAmB,KAAKhD,OAA5B,EAAqC;AACnC,YAAIiD,qBAAqB,GAAGD,mBAAmB,GAAG,CAACF,cAAnD;;AAEA,YAAIG,qBAAqB,KAAKjD,OAA9B,EAAuC;AACrC6C,UAAAA,SAAS,GAAGL,uBAAuB,CAACS,qBAAD,CAAnC;AACD,SAFD,MAEO;AACL,cAAIC,kBAAkB,GAAGF,mBAAmB,GAAGD,WAA/C;;AAEA,cAAIG,kBAAkB,KAAKlD,OAA3B,EAAoC;AAClC6C,YAAAA,SAAS,GAAGL,uBAAuB,CAACU,kBAAD,CAAnC;AACD;AACF;AACF,OAZD,MAYO;AACL;AACA,YAAIC,cAAc,GAAGP,YAAY,GAAG,CAACE,cAArC;;AAEA,YAAIK,cAAc,KAAKnD,OAAvB,EAAgC;AAC9B6C,UAAAA,SAAS,GAAGL,uBAAuB,CAACW,cAAD,CAAnC;AACD,SAFD,MAEO;AACL,cAAIJ,WAAW,KAAK/C,OAApB,EAA6B;AAC3B6C,YAAAA,SAAS,GAAGL,uBAAuB,CAACO,WAAD,CAAnC;AACD;AACF;AACF;;AAED,UAAIF,SAAS,KAAK7C,OAAlB,EAA2B;AACzB;AACA;AACA,eAAOA,OAAP;AACD,OA5CmC,CA4ClC;AACF;AACA;;;AAGA,UAAI2C,QAAQ,KAAK3C,OAAb,IAAwB2C,QAAQ,KAAKE,SAArC,IAAkD;AACtD;AACA,OAACF,QAAQ,GAAGG,cAAZ,MAAgC9C,OAFhC,EAEyC;AACvC,YAAIoD,QAAQ,GAAGX,sBAAsB,CAACI,SAAD,CAArC;AACA,YAAIQ,OAAO,GAAGZ,sBAAsB,CAACE,QAAD,CAApC;;AAEA,aAAK;AACL;AACAS,QAAAA,QAAQ,IAAIC,OAAZ,IAAuB;AACvB;AACA;AACAD,QAAAA,QAAQ,KAAK9C,WAAb,IAA4B,CAAC+C,OAAO,GAAG7C,eAAX,MAAgCR,OAL5D,EAKqE;AACnE;AACA,iBAAO2C,QAAP;AACD;AACF;;AAED,UAAI,CAACE,SAAS,GAAGzC,mBAAb,MAAsCJ,OAA1C,EAAmD;AACjD;AACA;AACA;AACA;AACA6C,QAAAA,SAAS,IAAID,YAAY,GAAGtC,WAA5B;AACD,OAxEmC,CAwElC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,UAAIgD,cAAc,GAAGxF,IAAI,CAACwF,cAA1B;;AAEA,UAAIA,cAAc,KAAKtD,OAAvB,EAAgC;AAC9B,YAAIuD,aAAa,GAAGzF,IAAI,CAACyF,aAAzB;AACA,YAAIpE,KAAK,GAAG0D,SAAS,GAAGS,cAAxB;;AAEA,eAAOnE,KAAK,GAAG,CAAf,EAAkB;AAChB,cAAIqE,KAAK,GAAGC,sBAAsB,CAACtE,KAAD,CAAlC;AACA,cAAIuE,IAAI,GAAG,KAAKF,KAAhB;AACAX,UAAAA,SAAS,IAAIU,aAAa,CAACC,KAAD,CAA1B;AACArE,UAAAA,KAAK,IAAI,CAACuE,IAAV;AACD;AACF;;AAED,aAAOb,SAAP;AACD;;AACD,aAASc,sBAAT,CAAgC7F,IAAhC,EAAsCqB,KAAtC,EAA6C;AAC3C,UAAIyE,UAAU,GAAG9F,IAAI,CAAC8F,UAAtB;AACA,UAAIC,mBAAmB,GAAGxB,WAA1B;;AAEA,aAAOlD,KAAK,GAAG,CAAf,EAAkB;AAChB,YAAIqE,KAAK,GAAGC,sBAAsB,CAACtE,KAAD,CAAlC;AACA,YAAIuE,IAAI,GAAG,KAAKF,KAAhB;AACA,YAAIM,SAAS,GAAGF,UAAU,CAACJ,KAAD,CAA1B;;AAEA,YAAIM,SAAS,GAAGD,mBAAhB,EAAqC;AACnCA,UAAAA,mBAAmB,GAAGC,SAAtB;AACD;;AAED3E,QAAAA,KAAK,IAAI,CAACuE,IAAV;AACD;;AAED,aAAOG,mBAAP;AACD;;AAED,aAASE,qBAAT,CAA+BL,IAA/B,EAAqCM,WAArC,EAAkD;AAChD,cAAQN,IAAR;AACE,aAAKxD,QAAL;AACA,aAAKC,4BAAL;AACA,aAAKC,mBAAL;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAO4D,WAAW,GAAG,GAArB;;AAEF,aAAK3D,oBAAL;AACA,aAAKC,WAAL;AACA,aAAKC,uBAAL;AACA,aAAKE,eAAL;AACA,aAAKC,eAAL;AACA,aAAKC,eAAL;AACA,aAAKC,eAAL;AACA,aAAKC,eAAL;AACA,aAAKC,eAAL;AACA,aAAKC,eAAL;AACA,aAAKC,eAAL;AACA,aAAKC,eAAL;AACA,aAAKC,gBAAL;AACA,aAAKC,gBAAL;AACA,aAAKC,gBAAL;AACA,aAAKC,gBAAL;AACA,aAAKC,gBAAL;AACA,aAAKC,gBAAL;AACA,aAAKC,gBAAL;AACE,iBAAOwC,WAAW,GAAG,IAArB;;AAEF,aAAKtC,UAAL;AACA,aAAKC,UAAL;AACA,aAAKC,UAAL;AACA,aAAKC,UAAL;AACA,aAAKC,UAAL;AACE;AACA;AACA;AACA;AACA;AACA,iBAAOO,WAAP;;AAEF,aAAKL,sBAAL;AACA,aAAKE,iBAAL;AACA,aAAKC,QAAL;AACA,aAAKC,aAAL;AACE;AACA,iBAAOC,WAAP;;AAEF;AACE;AACEjU,YAAAA,KAAK,CAAC,2DAAD,CAAL;AACD;AAED,iBAAOiU,WAAP;AA5DJ;AA8DD;;AAED,aAAS4B,yBAAT,CAAmCnG,IAAnC,EAAyCkG,WAAzC,EAAsD;AACpD;AACA;AACA;AACA,UAAIpB,YAAY,GAAG9E,IAAI,CAAC8E,YAAxB;AACA,UAAIE,cAAc,GAAGhF,IAAI,CAACgF,cAA1B;AACA,UAAIC,WAAW,GAAGjF,IAAI,CAACiF,WAAvB;AACA,UAAImB,eAAe,GAAGpG,IAAI,CAACoG,eAA3B,CAPoD,CAOR;AAC5C;AACA;;AAEA,UAAI/E,KAAK,GAAGyD,YAAZ;;AAEA,aAAOzD,KAAK,GAAG,CAAf,EAAkB;AAChB,YAAIqE,KAAK,GAAGC,sBAAsB,CAACtE,KAAD,CAAlC;AACA,YAAIuE,IAAI,GAAG,KAAKF,KAAhB;AACA,YAAIW,cAAc,GAAGD,eAAe,CAACV,KAAD,CAApC;;AAEA,YAAIW,cAAc,KAAK9B,WAAvB,EAAoC;AAClC;AACA;AACA;AACA,cAAI,CAACqB,IAAI,GAAGZ,cAAR,MAA4B9C,OAA5B,IAAuC,CAAC0D,IAAI,GAAGX,WAAR,MAAyB/C,OAApE,EAA6E;AAC3E;AACAkE,YAAAA,eAAe,CAACV,KAAD,CAAf,GAAyBO,qBAAqB,CAACL,IAAD,EAAOM,WAAP,CAA9C;AACD;AACF,SARD,MAQO,IAAIG,cAAc,IAAIH,WAAtB,EAAmC;AACxC;AACAlG,UAAAA,IAAI,CAACsG,YAAL,IAAqBV,IAArB;AACD;;AAEDvE,QAAAA,KAAK,IAAI,CAACuE,IAAV;AACD;AACF,KAr7Ca,CAq7CZ;;;AACF,aAASW,mCAAT,CAA6CvG,IAA7C,EAAmD;AACjD,UAAIwG,sBAAsB,GAAGxG,IAAI,CAAC8E,YAAL,GAAoB,CAACR,aAAlD;;AAEA,UAAIkC,sBAAsB,KAAKtE,OAA/B,EAAwC;AACtC,eAAOsE,sBAAP;AACD;;AAED,UAAIA,sBAAsB,GAAGlC,aAA7B,EAA4C;AAC1C,eAAOA,aAAP;AACD;;AAED,aAAOpC,OAAP;AACD;;AACD,aAASuE,gBAAT,CAA0BpF,KAA1B,EAAiC;AAC/B,aAAO,CAACA,KAAK,GAAGe,QAAT,MAAuBF,OAA9B;AACD;;AACD,aAASwE,mBAAT,CAA6BrF,KAA7B,EAAoC;AAClC,aAAO,CAACA,KAAK,GAAG8C,YAAT,MAA2BjC,OAAlC;AACD;;AACD,aAASyE,mBAAT,CAA6BtF,KAA7B,EAAoC;AAClC,aAAO,CAACA,KAAK,GAAGsC,UAAT,MAAyBtC,KAAhC;AACD;;AACD,aAASuF,uBAAT,CAAiCvF,KAAjC,EAAwC;AACtC,aAAO,CAACA,KAAK,GAAGqB,eAAT,MAA8BrB,KAArC;AACD;;AACD,aAASwF,oBAAT,CAA8B7G,IAA9B,EAAoCqB,KAApC,EAA2C;AAEzC,UAAIyF,gBAAgB,GAAGzE,4BAA4B,GAAGC,mBAA/B,GAAqDC,oBAArD,GAA4EC,WAAnG;AACA,aAAO,CAACnB,KAAK,GAAGyF,gBAAT,MAA+B5E,OAAtC;AACD;;AACD,aAAS6E,mBAAT,CAA6B/G,IAA7B,EAAmCqB,KAAnC,EAA0C;AACxC;AACA;AACA,aAAO,CAACA,KAAK,GAAGrB,IAAI,CAACsG,YAAd,MAAgCpE,OAAvC;AACD;;AACD,aAAS8E,gBAAT,CAA0BpB,IAA1B,EAAgC;AAC9B,aAAO,CAACA,IAAI,GAAGlD,eAAR,MAA6B,CAApC;AACD;;AACD,aAASuE,uBAAT,GAAmC;AACjC;AACA;AACA;AACA,UAAIrB,IAAI,GAAGpB,kBAAX;AACAA,MAAAA,kBAAkB,KAAK,CAAvB;;AAEA,UAAI,CAACA,kBAAkB,GAAG9B,eAAtB,MAA2C,CAA/C,EAAkD;AAChD8B,QAAAA,kBAAkB,GAAG7B,eAArB;AACD;;AAED,aAAOiD,IAAP;AACD;;AACD,aAASsB,kBAAT,GAA8B;AAC5B,UAAItB,IAAI,GAAGnB,aAAX;AACAA,MAAAA,aAAa,KAAK,CAAlB;;AAEA,UAAI,CAACA,aAAa,GAAGd,UAAjB,MAAiC,CAArC,EAAwC;AACtCc,QAAAA,aAAa,GAAGb,UAAhB;AACD;;AAED,aAAOgC,IAAP;AACD;;AACD,aAASjB,sBAAT,CAAgCtD,KAAhC,EAAuC;AACrC,aAAOA,KAAK,GAAG,CAACA,KAAhB;AACD;;AACD,aAAS8F,iBAAT,CAA2B9F,KAA3B,EAAkC;AAChC;AACA;AACA;AACA;AACA,aAAOsD,sBAAsB,CAACtD,KAAD,CAA7B;AACD;;AAED,aAASsE,sBAAT,CAAgCtE,KAAhC,EAAuC;AACrC,aAAO,KAAKO,KAAK,CAACP,KAAD,CAAjB;AACD;;AAED,aAAS+F,WAAT,CAAqBxB,IAArB,EAA2B;AACzB,aAAOD,sBAAsB,CAACC,IAAD,CAA7B;AACD;;AAED,aAASyB,gBAAT,CAA0BzL,CAA1B,EAA6BC,CAA7B,EAAgC;AAC9B,aAAO,CAACD,CAAC,GAAGC,CAAL,MAAYqG,OAAnB;AACD;;AACD,aAASoF,eAAT,CAAyBtU,GAAzB,EAA8BuU,MAA9B,EAAsC;AACpC,aAAO,CAACvU,GAAG,GAAGuU,MAAP,MAAmBA,MAA1B;AACD;;AACD,aAASC,UAAT,CAAoB5L,CAApB,EAAuBC,CAAvB,EAA0B;AACxB,aAAOD,CAAC,GAAGC,CAAX;AACD;;AACD,aAAS4L,WAAT,CAAqBzU,GAArB,EAA0BuU,MAA1B,EAAkC;AAChC,aAAOvU,GAAG,GAAG,CAACuU,MAAd;AACD;;AACD,aAASG,cAAT,CAAwB9L,CAAxB,EAA2BC,CAA3B,EAA8B;AAC5B,aAAOD,CAAC,GAAGC,CAAX;AACD,KAphDa,CAohDZ;AACF;;;AAEA,aAAS8L,WAAT,CAAqB/B,IAArB,EAA2B;AACzB,aAAOA,IAAP;AACD;;AACD,aAASgC,aAAT,CAAuBC,OAAvB,EAAgC;AAC9B;AACA;AACA,UAAIC,OAAO,GAAG,EAAd;;AAEA,WAAK,IAAInW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsQ,UAApB,EAAgCtQ,CAAC,EAAjC,EAAqC;AACnCmW,QAAAA,OAAO,CAACC,IAAR,CAAaF,OAAb;AACD;;AAED,aAAOC,OAAP;AACD;;AACD,aAASE,eAAT,CAAyBhI,IAAzB,EAA+BiI,UAA/B,EAA2CjC,SAA3C,EAAsD;AACpDhG,MAAAA,IAAI,CAAC8E,YAAL,IAAqBmD,UAArB,CADoD,CACnB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAIA,UAAU,KAAK5D,QAAnB,EAA6B;AAC3BrE,QAAAA,IAAI,CAACgF,cAAL,GAAsB9C,OAAtB;AACAlC,QAAAA,IAAI,CAACiF,WAAL,GAAmB/C,OAAnB;AACD;;AAED,UAAI4D,UAAU,GAAG9F,IAAI,CAAC8F,UAAtB;AACA,UAAIJ,KAAK,GAAG0B,WAAW,CAACa,UAAD,CAAvB,CApBoD,CAoBf;AACrC;;AAEAnC,MAAAA,UAAU,CAACJ,KAAD,CAAV,GAAoBM,SAApB;AACD;;AACD,aAASkC,iBAAT,CAA2BlI,IAA3B,EAAiCgF,cAAjC,EAAiD;AAC/ChF,MAAAA,IAAI,CAACgF,cAAL,IAAuBA,cAAvB;AACAhF,MAAAA,IAAI,CAACiF,WAAL,IAAoB,CAACD,cAArB,CAF+C,CAEV;;AAErC,UAAIoB,eAAe,GAAGpG,IAAI,CAACoG,eAA3B;AACA,UAAI/E,KAAK,GAAG2D,cAAZ;;AAEA,aAAO3D,KAAK,GAAG,CAAf,EAAkB;AAChB,YAAIqE,KAAK,GAAGC,sBAAsB,CAACtE,KAAD,CAAlC;AACA,YAAIuE,IAAI,GAAG,KAAKF,KAAhB;AACAU,QAAAA,eAAe,CAACV,KAAD,CAAf,GAAyBnB,WAAzB;AACAlD,QAAAA,KAAK,IAAI,CAACuE,IAAV;AACD;AACF;;AACD,aAASuC,cAAT,CAAwBnI,IAAxB,EAA8BiF,WAA9B,EAA2Ce,SAA3C,EAAsD;AACpDhG,MAAAA,IAAI,CAACiF,WAAL,IAAoBjF,IAAI,CAACgF,cAAL,GAAsBC,WAA1C;AACD;;AACD,aAASmD,gBAAT,CAA0BpI,IAA1B,EAAgCqI,cAAhC,EAAgD;AAC9C,UAAIC,oBAAoB,GAAGtI,IAAI,CAAC8E,YAAL,GAAoB,CAACuD,cAAhD;AACArI,MAAAA,IAAI,CAAC8E,YAAL,GAAoBuD,cAApB,CAF8C,CAEV;;AAEpCrI,MAAAA,IAAI,CAACgF,cAAL,GAAsB,CAAtB;AACAhF,MAAAA,IAAI,CAACiF,WAAL,GAAmB,CAAnB;AACAjF,MAAAA,IAAI,CAACsG,YAAL,IAAqB+B,cAArB;AACArI,MAAAA,IAAI,CAACuI,gBAAL,IAAyBF,cAAzB;AACArI,MAAAA,IAAI,CAACwF,cAAL,IAAuB6C,cAAvB;AACA,UAAI5C,aAAa,GAAGzF,IAAI,CAACyF,aAAzB;AACA,UAAIK,UAAU,GAAG9F,IAAI,CAAC8F,UAAtB;AACA,UAAIM,eAAe,GAAGpG,IAAI,CAACoG,eAA3B,CAX8C,CAWF;;AAE5C,UAAI/E,KAAK,GAAGiH,oBAAZ;;AAEA,aAAOjH,KAAK,GAAG,CAAf,EAAkB;AAChB,YAAIqE,KAAK,GAAGC,sBAAsB,CAACtE,KAAD,CAAlC;AACA,YAAIuE,IAAI,GAAG,KAAKF,KAAhB;AACAD,QAAAA,aAAa,CAACC,KAAD,CAAb,GAAuBxD,OAAvB;AACA4D,QAAAA,UAAU,CAACJ,KAAD,CAAV,GAAoBnB,WAApB;AACA6B,QAAAA,eAAe,CAACV,KAAD,CAAf,GAAyBnB,WAAzB;AACAlD,QAAAA,KAAK,IAAI,CAACuE,IAAV;AACD;AACF;;AACD,aAAS4C,iBAAT,CAA2BxI,IAA3B,EAAiCwF,cAAjC,EAAiD;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAIiD,kBAAkB,GAAGzI,IAAI,CAACwF,cAAL,IAAuBA,cAAhD;AACA,UAAIC,aAAa,GAAGzF,IAAI,CAACyF,aAAzB;AACA,UAAIpE,KAAK,GAAGoH,kBAAZ;;AAEA,aAAOpH,KAAP,EAAc;AACZ,YAAIqE,KAAK,GAAGC,sBAAsB,CAACtE,KAAD,CAAlC;AACA,YAAIuE,IAAI,GAAG,KAAKF,KAAhB;;AAEA,aAAK;AACLE,QAAAA,IAAI,GAAGJ,cAAP,GAAwB;AACxBC,QAAAA,aAAa,CAACC,KAAD,CAAb,GAAuBF,cAFvB,EAEuC;AACrCC,UAAAA,aAAa,CAACC,KAAD,CAAb,IAAwBF,cAAxB;AACD;;AAEDnE,QAAAA,KAAK,IAAI,CAACuE,IAAV;AACD;AACF;;AAED,QAAIpF,qBAAqB,GAAG4B,QAA5B;AACA,QAAI3B,uBAAuB,GAAG6B,mBAA9B;AACA,QAAI5B,oBAAoB,GAAG8B,WAA3B;AACA,QAAI7B,iBAAiB,GAAG0D,QAAxB;AACA,QAAIqE,qBAAqB,GAAGvG,MAA5B;;AACA,aAASwG,wBAAT,GAAoC;AAClC,aAAOD,qBAAP;AACD;;AACD,aAASE,wBAAT,CAAkCC,WAAlC,EAA+C;AAC7CH,MAAAA,qBAAqB,GAAGG,WAAxB;AACD;;AACD,aAASC,mBAAT,CAA6BlN,CAA7B,EAAgCC,CAAhC,EAAmC;AACjC,aAAOD,CAAC,KAAK,CAAN,IAAWA,CAAC,GAAGC,CAAf,GAAmBD,CAAnB,GAAuBC,CAA9B;AACD;;AACD,aAASkN,kBAAT,CAA4BnN,CAA5B,EAA+BC,CAA/B,EAAkC;AAChC,aAAOD,CAAC,KAAK,CAAN,IAAWA,CAAC,GAAGC,CAAf,GAAmBD,CAAnB,GAAuBC,CAA9B;AACD;;AACD,aAASmN,qBAAT,CAA+BpN,CAA/B,EAAkCC,CAAlC,EAAqC;AACnC,aAAOD,CAAC,KAAK,CAAN,IAAWA,CAAC,GAAGC,CAAtB;AACD;;AACD,aAASoN,oBAAT,CAA8B5H,KAA9B,EAAqC;AACnC,UAAIuE,IAAI,GAAGjB,sBAAsB,CAACtD,KAAD,CAAjC;;AAEA,UAAI,CAAC2H,qBAAqB,CAACxI,qBAAD,EAAwBoF,IAAxB,CAA1B,EAAyD;AACvD,eAAOpF,qBAAP;AACD;;AAED,UAAI,CAACwI,qBAAqB,CAACvI,uBAAD,EAA0BmF,IAA1B,CAA1B,EAA2D;AACzD,eAAOnF,uBAAP;AACD;;AAED,UAAIiG,mBAAmB,CAACd,IAAD,CAAvB,EAA+B;AAC7B,eAAOlF,oBAAP;AACD;;AAED,aAAOC,iBAAP;AACD,KAzqDa,CA2qDd;AACA;;;AACA,aAASuI,IAAT,GAAgB;AACd,YAAM,IAAIxN,KAAJ,CAAU,sDAAsD,iDAAtD,GAA0G,uBAApH,CAAN;AACD,KA/qDa,CA+qDZ;;;AACF,QAAIyN,yBAAyB,GAAGD,IAAhC;AACA,QAAIE,0BAA0B,GAAGF,IAAjC;AACA,QAAIG,mBAAmB,GAAGH,IAA1B;AACA,QAAII,uBAAuB,GAAGJ,IAA9B;AAEA,QAAIK,UAAU,GAAG,EAAjB;AACA,QAAIC,aAAa,GAAG,EAApB;AACA,QAAIC,iBAAiB,GAAG,IAAIC,OAAJ,EAAxB;AAEA;AACE1X,MAAAA,MAAM,CAAC2X,MAAP,CAAcJ,UAAd;AACAvX,MAAAA,MAAM,CAAC2X,MAAP,CAAcH,aAAd;AACD;;AAED,aAASI,iBAAT,CAA2BC,IAA3B,EAAiC;AAC/B,cAAQA,IAAI,CAACrS,GAAb;AACE,aAAK,UAAL;AACE,cAAIsS,cAAc,GAAGD,IAAI,CAACE,qBAAL,CAA2BD,cAAhD;AACA,cAAIE,QAAQ,GAAGF,cAAc,CAAC;AAC5BxS,YAAAA,IAAI,EAAEuS,IAAI,CAACvS,IADiB;AAE5B5F,YAAAA,KAAK,EAAEmY,IAAI,CAACnY;AAFgB,WAAD,CAA7B;;AAKA,cAAI,OAAOsY,QAAP,KAAoB,QAApB,IAAgCA,QAAQ,KAAK,IAAjD,EAAuD;AACrDP,YAAAA,iBAAiB,CAACzW,GAAlB,CAAsBgX,QAAtB,EAAgCH,IAAhC;AACD;;AAED,iBAAOG,QAAP;;AAEF;AACE,iBAAOH,IAAP;AAfJ;AAiBD;;AACD,aAASI,WAAT,CAAqBC,cAArB,EAAqCjO,KAArC,EAA4C;AAC1C;AACE,YAAI,CAACU,OAAO,CAACuN,cAAc,CAACjK,QAAhB,CAAZ,EAAuC;AACrC3P,UAAAA,KAAK,CAAC,6CAA6C,0FAA7C,GAA0I,2EAA1I,GAAwN,wBAAzN,CAAL;AACD;AACF;AAED,UAAIoV,KAAK,GAAGwE,cAAc,CAACjK,QAAf,CAAwBrN,OAAxB,CAAgCqJ,KAAhC,CAAZ;;AAEA,UAAIyJ,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChBwE,QAAAA,cAAc,CAACjK,QAAf,CAAwBkK,MAAxB,CAA+BzE,KAA/B,EAAsC,CAAtC;AACD;;AAEDwE,MAAAA,cAAc,CAACjK,QAAf,CAAwB8H,IAAxB,CAA6B9L,KAA7B;AACD;;AACD,aAASmO,YAAT,CAAsBF,cAAtB,EAAsCjO,KAAtC,EAA6CoO,WAA7C,EAA0D;AACxD,UAAI3E,KAAK,GAAGwE,cAAc,CAACjK,QAAf,CAAwBrN,OAAxB,CAAgCqJ,KAAhC,CAAZ;;AAEA,UAAIyJ,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChBwE,QAAAA,cAAc,CAACjK,QAAf,CAAwBkK,MAAxB,CAA+BzE,KAA/B,EAAsC,CAAtC;AACD;;AAED,UAAI4E,WAAW,GAAGJ,cAAc,CAACjK,QAAf,CAAwBrN,OAAxB,CAAgCyX,WAAhC,CAAlB;AACAH,MAAAA,cAAc,CAACjK,QAAf,CAAwBkK,MAAxB,CAA+BG,WAA/B,EAA4C,CAA5C,EAA+CrO,KAA/C;AACD;;AACD,aAASsO,WAAT,CAAqBL,cAArB,EAAqCjO,KAArC,EAA4C;AAC1C,UAAIyJ,KAAK,GAAGwE,cAAc,CAACjK,QAAf,CAAwBrN,OAAxB,CAAgCqJ,KAAhC,CAAZ;AACAiO,MAAAA,cAAc,CAACjK,QAAf,CAAwBkK,MAAxB,CAA+BzE,KAA/B,EAAsC,CAAtC;AACD;;AACD,aAAS8E,cAAT,CAAwBC,SAAxB,EAAmC;AACjCA,MAAAA,SAAS,CAACxK,QAAV,CAAmBkK,MAAnB,CAA0B,CAA1B;AACD;;AACD,aAASO,kBAAT,CAA4BX,qBAA5B,EAAmD;AACjD,aAAOR,UAAP;AACD;;AACD,aAASoB,mBAAT,CAA6BC,iBAA7B,EAAgDtT,IAAhD,EAAsDyS,qBAAtD,EAA6E;AAC3E,aAAOR,UAAP;AACD;;AACD,aAASsB,gBAAT,CAA0BC,aAA1B,EAAyC;AACvC;AACA,aAAO,IAAP;AACD;;AACD,aAASC,gBAAT,CAA0BD,aAA1B,EAAyC,CAAC;AACzC;;AACD,aAASE,cAAT,CAAwB1T,IAAxB,EAA8B5F,KAA9B,EAAqCqY,qBAArC,EAA4DkB,WAA5D,EAAyEC,sBAAzE,EAAiG;AAC/F,aAAO;AACL5T,QAAAA,IAAI,EAAEA,IADD;AAEL5F,QAAAA,KAAK,EAAEA,KAFF;AAGLyZ,QAAAA,QAAQ,EAAE,KAHL;AAILlL,QAAAA,QAAQ,EAAE,EAJL;AAKLiL,QAAAA,sBAAsB,EAAEA,sBALnB;AAMLnB,QAAAA,qBAAqB,EAAEA,qBANlB;AAOLvS,QAAAA,GAAG,EAAE;AAPA,OAAP;AASD;;AACD,aAAS4T,kBAAT,CAA4BlB,cAA5B,EAA4CjO,KAA5C,EAAmD;AACjD,UAAIyJ,KAAK,GAAGwE,cAAc,CAACjK,QAAf,CAAwBrN,OAAxB,CAAgCqJ,KAAhC,CAAZ;;AAEA,UAAIyJ,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChBwE,QAAAA,cAAc,CAACjK,QAAf,CAAwBkK,MAAxB,CAA+BzE,KAA/B,EAAsC,CAAtC;AACD;;AAEDwE,MAAAA,cAAc,CAACjK,QAAf,CAAwB8H,IAAxB,CAA6B9L,KAA7B;AACD;;AACD,aAASoP,aAAT,CAAuBC,WAAvB,EAAoChU,IAApC,EAA0CiU,QAA1C,EAAoDC,QAApD,EAA8DzB,qBAA9D,EAAqFkB,WAArF,EAAkG;AAChG,aAAOzB,aAAP;AACD;;AACD,aAASiC,oBAAT,CAA8BnU,IAA9B,EAAoC5F,KAApC,EAA2C;AACzC,aAAO,KAAP;AACD;;AACD,aAASga,kBAAT,CAA4BC,IAA5B,EAAkC5B,qBAAlC,EAAyDkB,WAAzD,EAAsEC,sBAAtE,EAA8F;AAC5F,aAAO;AACLS,QAAAA,IAAI,EAAEA,IADD;AAELR,QAAAA,QAAQ,EAAE,KAFL;AAGL3T,QAAAA,GAAG,EAAE;AAHA,OAAP;AAKD;;AACD,aAASoU,uBAAT,GAAmC;AACjC,aAAOlL,oBAAP;AACD;;AACD,QAAImL,eAAe,GAAGC,UAAtB;AACA,QAAIC,aAAa,GAAGC,YAApB;AACA,QAAIC,SAAS,GAAG,CAAC,CAAjB,CAnyDc,CAmyDM;;AACpB,aAASC,YAAT,CAAsB5Q,QAAtB,EAAgC6Q,aAAhC,EAA+C7U,IAA/C,EAAqDiU,QAArD,EAA+DC,QAA/D,EAAyEN,sBAAzE,EAAiG;AAC/F5P,MAAAA,QAAQ,CAAChE,IAAT,GAAgBA,IAAhB;AACAgE,MAAAA,QAAQ,CAAC5J,KAAT,GAAiB8Z,QAAjB;AACD;;AACD,aAASY,gBAAT,CAA0BC,YAA1B,EAAwCC,OAAxC,EAAiDC,OAAjD,EAA0D;AACxDF,MAAAA,YAAY,CAACV,IAAb,GAAoBY,OAApB;AACD;;AACD,aAASC,gBAAT,CAA0BlB,WAA1B,EAAuC,CAAC;AACvC;;AACD,QAAImB,sBAAsB,GAAGxC,WAA7B;AACA,QAAIyC,uBAAuB,GAAGtC,YAA9B;AACA,QAAIuC,wBAAwB,GAAGpC,WAA/B;;AACA,aAASqC,YAAT,CAAsBtR,QAAtB,EAAgC;AAC9BA,MAAAA,QAAQ,CAAC6P,QAAT,GAAoB,IAApB;AACD;;AACD,aAAS0B,gBAAT,CAA0BR,YAA1B,EAAwC;AACtCA,MAAAA,YAAY,CAAClB,QAAb,GAAwB,IAAxB;AACD;;AACD,aAAS2B,cAAT,CAAwBxR,QAAxB,EAAkC5J,KAAlC,EAAyC;AACvC4J,MAAAA,QAAQ,CAAC6P,QAAT,GAAoB,KAApB;AACD;;AACD,aAAS4B,kBAAT,CAA4BV,YAA5B,EAA0CV,IAA1C,EAAgD;AAC9CU,MAAAA,YAAY,CAAClB,QAAb,GAAwB,KAAxB;AACD;;AACD,aAAS6B,kBAAT,CAA4BC,cAA5B,EAA4C,CAAC;AAC5C;;AAED,QAAIC,sBAAsB,GAAGvd,oBAAoB,CAACud,sBAAlD;AACA,QAAIC,MAAJ;;AACA,aAASC,6BAAT,CAAuChW,IAAvC,EAA6C5E,MAA7C,EAAqD6a,OAArD,EAA8D;AAC5D;AACE,YAAIF,MAAM,KAAKvM,SAAf,EAA0B;AACxB;AACA,cAAI;AACF,kBAAMlF,KAAK,EAAX;AACD,WAFD,CAEE,OAAOtD,CAAP,EAAU;AACV,gBAAIqE,KAAK,GAAGrE,CAAC,CAACzH,KAAF,CAAQ2c,IAAR,GAAe7Q,KAAf,CAAqB,cAArB,CAAZ;AACA0Q,YAAAA,MAAM,GAAG1Q,KAAK,IAAIA,KAAK,CAAC,CAAD,CAAd,IAAqB,EAA9B;AACD;AACF,SATH,CASI;;;AAGF,eAAO,OAAO0Q,MAAP,GAAgB/V,IAAvB;AACD;AACF;;AACD,QAAImW,OAAO,GAAG,KAAd;AACA,QAAIC,mBAAJ;AAEA;AACE,UAAIC,eAAe,GAAG,OAAO/D,OAAP,KAAmB,UAAnB,GAAgCA,OAAhC,GAA0CgE,GAAhE;AACAF,MAAAA,mBAAmB,GAAG,IAAIC,eAAJ,EAAtB;AACD;;AAED,aAASE,4BAAT,CAAsCC,EAAtC,EAA0CC,SAA1C,EAAqD;AACnD;AACA,UAAK,CAACD,EAAD,IAAOL,OAAZ,EAAqB;AACnB,eAAO,EAAP;AACD;;AAED;AACE,YAAIO,KAAK,GAAGN,mBAAmB,CAAC1a,GAApB,CAAwB8a,EAAxB,CAAZ;;AAEA,YAAIE,KAAK,KAAKlN,SAAd,EAAyB;AACvB,iBAAOkN,KAAP;AACD;AACF;AAED,UAAIC,OAAJ;AACAR,MAAAA,OAAO,GAAG,IAAV;AACA,UAAIS,yBAAyB,GAAGtS,KAAK,CAACuS,iBAAtC,CAhBmD,CAgBM;;AAEzDvS,MAAAA,KAAK,CAACuS,iBAAN,GAA0BrN,SAA1B;AACA,UAAIsN,kBAAJ;AAEA;AACEA,QAAAA,kBAAkB,GAAGhB,sBAAsB,CAAC9R,OAA5C,CADF,CACuD;AACrD;;AAEA8R,QAAAA,sBAAsB,CAAC9R,OAAvB,GAAiC,IAAjC;AACAoD,QAAAA,WAAW;AACZ;;AAED,UAAI;AACF;AACA,YAAIqP,SAAJ,EAAe;AACb;AACA,cAAIM,IAAI,GAAG,YAAY;AACrB,kBAAMzS,KAAK,EAAX;AACD,WAFD,CAFa,CAIV;;;AAGH1J,UAAAA,MAAM,CAACC,cAAP,CAAsBkc,IAAI,CAAC/c,SAA3B,EAAsC,OAAtC,EAA+C;AAC7C4B,YAAAA,GAAG,EAAE,YAAY;AACf;AACA;AACA,oBAAM0I,KAAK,EAAX;AACD;AAL4C,WAA/C;;AAQA,cAAI,OAAO0S,OAAP,KAAmB,QAAnB,IAA+BA,OAAO,CAACP,SAA3C,EAAsD;AACpD;AACA;AACA,gBAAI;AACFO,cAAAA,OAAO,CAACP,SAAR,CAAkBM,IAAlB,EAAwB,EAAxB;AACD,aAFD,CAEE,OAAO/V,CAAP,EAAU;AACV2V,cAAAA,OAAO,GAAG3V,CAAV;AACD;;AAEDgW,YAAAA,OAAO,CAACP,SAAR,CAAkBD,EAAlB,EAAsB,EAAtB,EAA0BO,IAA1B;AACD,WAVD,MAUO;AACL,gBAAI;AACFA,cAAAA,IAAI,CAAC7c,IAAL;AACD,aAFD,CAEE,OAAO8G,CAAP,EAAU;AACV2V,cAAAA,OAAO,GAAG3V,CAAV;AACD;;AAEDwV,YAAAA,EAAE,CAACtc,IAAH,CAAQ6c,IAAI,CAAC/c,SAAb;AACD;AACF,SAlCD,MAkCO;AACL,cAAI;AACF,kBAAMsK,KAAK,EAAX;AACD,WAFD,CAEE,OAAOtD,CAAP,EAAU;AACV2V,YAAAA,OAAO,GAAG3V,CAAV;AACD;;AAEDwV,UAAAA,EAAE;AACH;AACF,OA7CD,CA6CE,OAAOS,MAAP,EAAe;AACf;AACA,YAAIA,MAAM,IAAIN,OAAV,IAAqB,OAAOM,MAAM,CAAC1d,KAAd,KAAwB,QAAjD,EAA2D;AACzD;AACA;AACA,cAAI2d,WAAW,GAAGD,MAAM,CAAC1d,KAAP,CAAa4d,KAAb,CAAmB,IAAnB,CAAlB;AACA,cAAIC,YAAY,GAAGT,OAAO,CAACpd,KAAR,CAAc4d,KAAd,CAAoB,IAApB,CAAnB;AACA,cAAIE,CAAC,GAAGH,WAAW,CAACre,MAAZ,GAAqB,CAA7B;AACA,cAAIye,CAAC,GAAGF,YAAY,CAACve,MAAb,GAAsB,CAA9B;;AAEA,iBAAOwe,CAAC,IAAI,CAAL,IAAUC,CAAC,IAAI,CAAf,IAAoBJ,WAAW,CAACG,CAAD,CAAX,KAAmBD,YAAY,CAACE,CAAD,CAA1D,EAA+D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACAA,YAAAA,CAAC;AACF;;AAED,iBAAOD,CAAC,IAAI,CAAL,IAAUC,CAAC,IAAI,CAAtB,EAAyBD,CAAC,IAAIC,CAAC,EAA/B,EAAmC;AACjC;AACA;AACA,gBAAIJ,WAAW,CAACG,CAAD,CAAX,KAAmBD,YAAY,CAACE,CAAD,CAAnC,EAAwC;AACtC;AACA;AACA;AACA;AACA;AACA,kBAAID,CAAC,KAAK,CAAN,IAAWC,CAAC,KAAK,CAArB,EAAwB;AACtB,mBAAG;AACDD,kBAAAA,CAAC;AACDC,kBAAAA,CAAC,GAFA,CAEI;AACL;;AAEA,sBAAIA,CAAC,GAAG,CAAJ,IAASJ,WAAW,CAACG,CAAD,CAAX,KAAmBD,YAAY,CAACE,CAAD,CAA5C,EAAiD;AAC/C;AACA,wBAAIC,MAAM,GAAG,OAAOL,WAAW,CAACG,CAAD,CAAX,CAAeG,OAAf,CAAuB,UAAvB,EAAmC,MAAnC,CAApB,CAF+C,CAEiB;AAChE;AACA;;;AAGA,wBAAIhB,EAAE,CAAC1W,WAAH,IAAkByX,MAAM,CAACE,QAAP,CAAgB,aAAhB,CAAtB,EAAsD;AACpDF,sBAAAA,MAAM,GAAGA,MAAM,CAACC,OAAP,CAAe,aAAf,EAA8BhB,EAAE,CAAC1W,WAAjC,CAAT;AACD;;AAED;AACE,0BAAI,OAAO0W,EAAP,KAAc,UAAlB,EAA8B;AAC5BJ,wBAAAA,mBAAmB,CAACxa,GAApB,CAAwB4a,EAAxB,EAA4Be,MAA5B;AACD;AACF,qBAf8C,CAe7C;;AAGF,2BAAOA,MAAP;AACD;AACF,iBAzBD,QAyBSF,CAAC,IAAI,CAAL,IAAUC,CAAC,IAAI,CAzBxB;AA0BD;;AAED;AACD;AACF;AACF;AACF,OA3GD,SA2GU;AACRnB,QAAAA,OAAO,GAAG,KAAV;AAEA;AACEL,UAAAA,sBAAsB,CAAC9R,OAAvB,GAAiC8S,kBAAjC;AACAnP,UAAAA,YAAY;AACb;AAEDrD,QAAAA,KAAK,CAACuS,iBAAN,GAA0BD,yBAA1B;AACD,OAjJkD,CAiJjD;;;AAGF,UAAI5W,IAAI,GAAGwW,EAAE,GAAGA,EAAE,CAAC1W,WAAH,IAAkB0W,EAAE,CAACxW,IAAxB,GAA+B,EAA5C;AACA,UAAI0X,cAAc,GAAG1X,IAAI,GAAGgW,6BAA6B,CAAChW,IAAD,CAAhC,GAAyC,EAAlE;AAEA;AACE,YAAI,OAAOwW,EAAP,KAAc,UAAlB,EAA8B;AAC5BJ,UAAAA,mBAAmB,CAACxa,GAApB,CAAwB4a,EAAxB,EAA4BkB,cAA5B;AACD;AACF;AAED,aAAOA,cAAP;AACD;;AAED,aAASC,2BAAT,CAAqCC,IAArC,EAA2Cxc,MAA3C,EAAmD6a,OAAnD,EAA4D;AAC1D;AACE,eAAOM,4BAA4B,CAACqB,IAAD,EAAO,IAAP,CAAnC;AACD;AACF;;AACD,aAASC,8BAAT,CAAwCrB,EAAxC,EAA4Cpb,MAA5C,EAAoD6a,OAApD,EAA6D;AAC3D;AACE,eAAOM,4BAA4B,CAACC,EAAD,EAAK,KAAL,CAAnC;AACD;AACF;;AAED,aAASsB,eAAT,CAAyBC,SAAzB,EAAoC;AAClC,UAAI/d,SAAS,GAAG+d,SAAS,CAAC/d,SAA1B;AACA,aAAO,CAAC,EAAEA,SAAS,IAAIA,SAAS,CAACge,gBAAzB,CAAR;AACD;;AAED,aAASC,oCAAT,CAA8C/X,IAA9C,EAAoD9E,MAApD,EAA4D6a,OAA5D,EAAqE;AAEnE,UAAI/V,IAAI,IAAI,IAAZ,EAAkB;AAChB,eAAO,EAAP;AACD;;AAED,UAAI,OAAOA,IAAP,KAAgB,UAApB,EAAgC;AAC9B;AACE,iBAAOqW,4BAA4B,CAACrW,IAAD,EAAO4X,eAAe,CAAC5X,IAAD,CAAtB,CAAnC;AACD;AACF;;AAED,UAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5B,eAAO8V,6BAA6B,CAAC9V,IAAD,CAApC;AACD;;AAED,cAAQA,IAAR;AACE,aAAKxB,mBAAL;AACE,iBAAOsX,6BAA6B,CAAC,UAAD,CAApC;;AAEF,aAAKrX,wBAAL;AACE,iBAAOqX,6BAA6B,CAAC,cAAD,CAApC;AALJ;;AAQA,UAAI,OAAO9V,IAAP,KAAgB,QAApB,EAA8B;AAC5B,gBAAQA,IAAI,CAACG,QAAb;AACE,eAAK5B,sBAAL;AACE,mBAAOoZ,8BAA8B,CAAC3X,IAAI,CAACO,MAAN,CAArC;;AAEF,eAAK7B,eAAL;AACE;AACA,mBAAOqZ,oCAAoC,CAAC/X,IAAI,CAACA,IAAN,EAAY9E,MAAZ,EAAoB6a,OAApB,CAA3C;;AAEF,eAAKpX,eAAL;AACE;AACE,kBAAI8B,aAAa,GAAGT,IAApB;AACA,kBAAIU,OAAO,GAAGD,aAAa,CAACE,QAA5B;AACA,kBAAIC,IAAI,GAAGH,aAAa,CAACI,KAAzB;;AAEA,kBAAI;AACF;AACA,uBAAOkX,oCAAoC,CAACnX,IAAI,CAACF,OAAD,CAAL,EAAgBxF,MAAhB,EAAwB6a,OAAxB,CAA3C;AACD,eAHD,CAGE,OAAOjV,CAAP,EAAU,CAAE;AACf;AAlBL;AAoBD;;AAED,aAAO,EAAP;AACD;;AAED,QAAIkX,cAAc,GAAGtd,MAAM,CAACZ,SAAP,CAAiBke,cAAtC;AAEA,QAAIC,kBAAkB,GAAG,EAAzB;AACA,QAAI7e,sBAAsB,GAAGf,oBAAoB,CAACe,sBAAlD;;AAEA,aAAS8e,6BAAT,CAAuCC,OAAvC,EAAgD;AAC9C;AACE,YAAIA,OAAJ,EAAa;AACX,cAAItU,KAAK,GAAGsU,OAAO,CAACC,MAApB;AACA,cAAI/e,KAAK,GAAG0e,oCAAoC,CAACI,OAAO,CAACnY,IAAT,EAAemY,OAAO,CAACE,OAAvB,EAAgCxU,KAAK,GAAGA,KAAK,CAAC7D,IAAT,GAAgB,IAArD,CAAhD;AACA5G,UAAAA,sBAAsB,CAACkf,kBAAvB,CAA0Cjf,KAA1C;AACD,SAJD,MAIO;AACLD,UAAAA,sBAAsB,CAACkf,kBAAvB,CAA0C,IAA1C;AACD;AACF;AACF;;AAED,aAASC,cAAT,CAAwBC,SAAxB,EAAmCC,MAAnC,EAA2CC,QAA3C,EAAqDC,aAArD,EAAoER,OAApE,EAA6E;AAC3E;AACE;AACA,YAAIS,GAAG,GAAG/e,QAAQ,CAACG,IAAT,CAAc6e,IAAd,CAAmBb,cAAnB,CAAV;;AAEA,aAAK,IAAIc,YAAT,IAAyBN,SAAzB,EAAoC;AAClC,cAAII,GAAG,CAACJ,SAAD,EAAYM,YAAZ,CAAP,EAAkC;AAChC,gBAAIC,OAAO,GAAG,KAAK,CAAnB,CADgC,CACV;AACtB;AACA;;AAEA,gBAAI;AACF;AACA;AACA,kBAAI,OAAOP,SAAS,CAACM,YAAD,CAAhB,KAAmC,UAAvC,EAAmD;AACjD;AACA,oBAAIvQ,GAAG,GAAGnE,KAAK,CAAC,CAACuU,aAAa,IAAI,aAAlB,IAAmC,IAAnC,GAA0CD,QAA1C,GAAqD,SAArD,GAAiEI,YAAjE,GAAgF,gBAAhF,GAAmG,8EAAnG,GAAoL,OAAON,SAAS,CAACM,YAAD,CAApM,GAAqN,IAArN,GAA4N,+FAA7N,CAAf;AACAvQ,gBAAAA,GAAG,CAACzI,IAAJ,GAAW,qBAAX;AACA,sBAAMyI,GAAN;AACD;;AAEDwQ,cAAAA,OAAO,GAAGP,SAAS,CAACM,YAAD,CAAT,CAAwBL,MAAxB,EAAgCK,YAAhC,EAA8CH,aAA9C,EAA6DD,QAA7D,EAAuE,IAAvE,EAA6E,8CAA7E,CAAV;AACD,aAXD,CAWE,OAAOM,EAAP,EAAW;AACXD,cAAAA,OAAO,GAAGC,EAAV;AACD;;AAED,gBAAID,OAAO,IAAI,EAAEA,OAAO,YAAY3U,KAArB,CAAf,EAA4C;AAC1C8T,cAAAA,6BAA6B,CAACC,OAAD,CAA7B;AAEAnf,cAAAA,KAAK,CAAC,iCAAiC,qCAAjC,GAAyE,+DAAzE,GAA2I,iEAA3I,GAA+M,gEAA/M,GAAkR,iCAAnR,EAAsT2f,aAAa,IAAI,aAAvU,EAAsVD,QAAtV,EAAgWI,YAAhW,EAA8W,OAAOC,OAArX,CAAL;AAEAb,cAAAA,6BAA6B,CAAC,IAAD,CAA7B;AACD;;AAED,gBAAIa,OAAO,YAAY3U,KAAnB,IAA4B,EAAE2U,OAAO,CAACE,OAAR,IAAmBhB,kBAArB,CAAhC,EAA0E;AACxE;AACA;AACAA,cAAAA,kBAAkB,CAACc,OAAO,CAACE,OAAT,CAAlB,GAAsC,IAAtC;AACAf,cAAAA,6BAA6B,CAACC,OAAD,CAA7B;AAEAnf,cAAAA,KAAK,CAAC,oBAAD,EAAuB0f,QAAvB,EAAiCK,OAAO,CAACE,OAAzC,CAAL;AAEAf,cAAAA,6BAA6B,CAAC,IAAD,CAA7B;AACD;AACF;AACF;AACF;AACF;;AAED,QAAIgB,UAAU,GAAG,EAAjB;AACA,QAAIC,UAAJ;AAEA;AACEA,MAAAA,UAAU,GAAG,EAAb;AACD;AAED,QAAI/K,KAAK,GAAG,CAAC,CAAb;;AAEA,aAASgL,YAAT,CAAsBC,YAAtB,EAAoC;AAClC,aAAO;AACLvV,QAAAA,OAAO,EAAEuV;AADJ,OAAP;AAGD;;AAED,aAASC,GAAT,CAAaC,MAAb,EAAqBrY,KAArB,EAA4B;AAC1B,UAAIkN,KAAK,GAAG,CAAZ,EAAe;AACb;AACEpV,UAAAA,KAAK,CAAC,iBAAD,CAAL;AACD;AAED;AACD;;AAED;AACE,YAAIkI,KAAK,KAAKiY,UAAU,CAAC/K,KAAD,CAAxB,EAAiC;AAC/BpV,UAAAA,KAAK,CAAC,0BAAD,CAAL;AACD;AACF;AAEDugB,MAAAA,MAAM,CAACzV,OAAP,GAAiBoV,UAAU,CAAC9K,KAAD,CAA3B;AACA8K,MAAAA,UAAU,CAAC9K,KAAD,CAAV,GAAoB,IAApB;AAEA;AACE+K,QAAAA,UAAU,CAAC/K,KAAD,CAAV,GAAoB,IAApB;AACD;AAEDA,MAAAA,KAAK;AACN;;AAED,aAASqC,IAAT,CAAc8I,MAAd,EAAsB5d,KAAtB,EAA6BuF,KAA7B,EAAoC;AAClCkN,MAAAA,KAAK;AACL8K,MAAAA,UAAU,CAAC9K,KAAD,CAAV,GAAoBmL,MAAM,CAACzV,OAA3B;AAEA;AACEqV,QAAAA,UAAU,CAAC/K,KAAD,CAAV,GAAoBlN,KAApB;AACD;AAEDqY,MAAAA,MAAM,CAACzV,OAAP,GAAiBnI,KAAjB;AACD;;AAED,QAAI6d,iCAAJ;AAEA;AACEA,MAAAA,iCAAiC,GAAG,EAApC;AACD;AAED,QAAIC,kBAAkB,GAAG,EAAzB;AAEA;AACE/e,MAAAA,MAAM,CAAC2X,MAAP,CAAcoH,kBAAd;AACD,KA1rEa,CA0rEZ;;AAGF,QAAIC,kBAAkB,GAAGN,YAAY,CAACK,kBAAD,CAArC,CA7rEc,CA6rE6C;;AAE3D,QAAIE,yBAAyB,GAAGP,YAAY,CAAC,KAAD,CAA5C,CA/rEc,CA+rEuC;AACrD;AACA;;AAEA,QAAIQ,eAAe,GAAGH,kBAAtB;;AAEA,aAASI,kBAAT,CAA4BC,cAA5B,EAA4CjC,SAA5C,EAAuDkC,2BAAvD,EAAoF;AAClF;AACE,YAAIA,2BAA2B,IAAIC,iBAAiB,CAACnC,SAAD,CAApD,EAAiE;AAC/D;AACA;AACA;AACA;AACA,iBAAO+B,eAAP;AACD;;AAED,eAAOF,kBAAkB,CAAC5V,OAA1B;AACD;AACF;;AAED,aAASmW,YAAT,CAAsBH,cAAtB,EAAsCI,eAAtC,EAAuDC,aAAvD,EAAsE;AACpE;AACE,YAAInW,QAAQ,GAAG8V,cAAc,CAAC7V,SAA9B;AACAD,QAAAA,QAAQ,CAACoW,2CAAT,GAAuDF,eAAvD;AACAlW,QAAAA,QAAQ,CAACqW,yCAAT,GAAqDF,aAArD;AACD;AACF;;AAED,aAASG,gBAAT,CAA0BR,cAA1B,EAA0CI,eAA1C,EAA2D;AACzD;AACE,YAAIla,IAAI,GAAG8Z,cAAc,CAAC9Z,IAA1B;AACA,YAAIua,YAAY,GAAGva,IAAI,CAACua,YAAxB;;AAEA,YAAI,CAACA,YAAL,EAAmB;AACjB,iBAAOd,kBAAP;AACD,SANH,CAMI;AACF;AACA;;;AAGA,YAAIzV,QAAQ,GAAG8V,cAAc,CAAC7V,SAA9B;;AAEA,YAAID,QAAQ,IAAIA,QAAQ,CAACoW,2CAAT,KAAyDF,eAAzE,EAA0F;AACxF,iBAAOlW,QAAQ,CAACqW,yCAAhB;AACD;;AAED,YAAIja,OAAO,GAAG,EAAd;;AAEA,aAAK,IAAIxF,GAAT,IAAgB2f,YAAhB,EAA8B;AAC5Bna,UAAAA,OAAO,CAACxF,GAAD,CAAP,GAAesf,eAAe,CAACtf,GAAD,CAA9B;AACD;;AAED;AACE,cAAIkF,IAAI,GAAGmB,yBAAyB,CAAC6Y,cAAD,CAAzB,IAA6C,SAAxD;AACAvB,UAAAA,cAAc,CAACgC,YAAD,EAAena,OAAf,EAAwB,SAAxB,EAAmCN,IAAnC,CAAd;AACD,SA1BH,CA0BI;AACF;;AAGA,YAAIkE,QAAJ,EAAc;AACZiW,UAAAA,YAAY,CAACH,cAAD,EAAiBI,eAAjB,EAAkC9Z,OAAlC,CAAZ;AACD;;AAED,eAAOA,OAAP;AACD;AACF;;AAED,aAASoa,iBAAT,GAA6B;AAC3B;AACE,eAAOb,yBAAyB,CAAC7V,OAAjC;AACD;AACF;;AAED,aAASkW,iBAAT,CAA2Bha,IAA3B,EAAiC;AAC/B;AACE,YAAIya,iBAAiB,GAAGza,IAAI,CAACya,iBAA7B;AACA,eAAOA,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,KAAKnR,SAA3D;AACD;AACF;;AAED,aAASoR,UAAT,CAAoBxZ,KAApB,EAA2B;AACzB;AACEoY,QAAAA,GAAG,CAACK,yBAAD,EAA4BzY,KAA5B,CAAH;AACAoY,QAAAA,GAAG,CAACI,kBAAD,EAAqBxY,KAArB,CAAH;AACD;AACF;;AAED,aAASyZ,wBAAT,CAAkCzZ,KAAlC,EAAyC;AACvC;AACEoY,QAAAA,GAAG,CAACK,yBAAD,EAA4BzY,KAA5B,CAAH;AACAoY,QAAAA,GAAG,CAACI,kBAAD,EAAqBxY,KAArB,CAAH;AACD;AACF;;AAED,aAAS0Z,yBAAT,CAAmC1Z,KAAnC,EAA0Cd,OAA1C,EAAmDya,SAAnD,EAA8D;AAC5D;AACE,YAAInB,kBAAkB,CAAC5V,OAAnB,KAA+B2V,kBAAnC,EAAuD;AACrD,gBAAM,IAAIrV,KAAJ,CAAU,wCAAwC,sEAAlD,CAAN;AACD;;AAEDqM,QAAAA,IAAI,CAACiJ,kBAAD,EAAqBtZ,OAArB,EAA8Bc,KAA9B,CAAJ;AACAuP,QAAAA,IAAI,CAACkJ,yBAAD,EAA4BkB,SAA5B,EAAuC3Z,KAAvC,CAAJ;AACD;AACF;;AAED,aAAS4Z,mBAAT,CAA6B5Z,KAA7B,EAAoClB,IAApC,EAA0C+a,aAA1C,EAAyD;AACvD;AACE,YAAI/W,QAAQ,GAAG9C,KAAK,CAAC+C,SAArB;AACA,YAAIwW,iBAAiB,GAAGza,IAAI,CAACya,iBAA7B,CAFF,CAEkD;AAChD;;AAEA,YAAI,OAAOzW,QAAQ,CAACgX,eAAhB,KAAoC,UAAxC,EAAoD;AAClD;AACE,gBAAIrC,aAAa,GAAG1X,yBAAyB,CAACC,KAAD,CAAzB,IAAoC,SAAxD;;AAEA,gBAAI,CAACsY,iCAAiC,CAACb,aAAD,CAAtC,EAAuD;AACrDa,cAAAA,iCAAiC,CAACb,aAAD,CAAjC,GAAmD,IAAnD;AAEA3f,cAAAA,KAAK,CAAC,gFAAgF,2EAAhF,GAA8J,4BAA/J,EAA6L2f,aAA7L,EAA4MA,aAA5M,CAAL;AACD;AACF;AAED,iBAAOoC,aAAP;AACD;;AAED,YAAIE,YAAY,GAAGjX,QAAQ,CAACgX,eAAT,EAAnB;;AAEA,aAAK,IAAIE,UAAT,IAAuBD,YAAvB,EAAqC;AACnC,cAAI,EAAEC,UAAU,IAAIT,iBAAhB,CAAJ,EAAwC;AACtC,kBAAM,IAAIrW,KAAJ,CAAU,CAACnD,yBAAyB,CAACC,KAAD,CAAzB,IAAoC,SAArC,IAAkD,4BAAlD,GAAiFga,UAAjF,GAA8F,yCAAxG,CAAN;AACD;AACF;;AAED;AACE,cAAIpb,IAAI,GAAGmB,yBAAyB,CAACC,KAAD,CAAzB,IAAoC,SAA/C;AACAqX,UAAAA,cAAc,CAACkC,iBAAD,EAAoBQ,YAApB,EAAkC,eAAlC,EAAmDnb,IAAnD,CAAd;AACD;AAED,eAAOvE,MAAM,CAAC,EAAD,EAAKwf,aAAL,EAAoBE,YAApB,CAAb;AACD;AACF;;AAED,aAASE,mBAAT,CAA6BrB,cAA7B,EAA6C;AAC3C;AACE,YAAI9V,QAAQ,GAAG8V,cAAc,CAAC7V,SAA9B,CADF,CAC2C;AACzC;AACA;;AAEA,YAAImX,0BAA0B,GAAGpX,QAAQ,IAAIA,QAAQ,CAACqX,yCAArB,IAAkE5B,kBAAnG,CALF,CAKyH;AACvH;;AAEAG,QAAAA,eAAe,GAAGF,kBAAkB,CAAC5V,OAArC;AACA2M,QAAAA,IAAI,CAACiJ,kBAAD,EAAqB0B,0BAArB,EAAiDtB,cAAjD,CAAJ;AACArJ,QAAAA,IAAI,CAACkJ,yBAAD,EAA4BA,yBAAyB,CAAC7V,OAAtD,EAA+DgW,cAA/D,CAAJ;AACA,eAAO,IAAP;AACD;AACF;;AAED,aAASwB,yBAAT,CAAmCxB,cAAnC,EAAmD9Z,IAAnD,EAAyD6a,SAAzD,EAAoE;AAClE;AACE,YAAI7W,QAAQ,GAAG8V,cAAc,CAAC7V,SAA9B;;AAEA,YAAI,CAACD,QAAL,EAAe;AACb,gBAAM,IAAII,KAAJ,CAAU,iDAAiD,sEAA3D,CAAN;AACD;;AAED,YAAIyW,SAAJ,EAAe;AACb;AACA;AACA;AACA,cAAIU,aAAa,GAAGT,mBAAmB,CAAChB,cAAD,EAAiB9Z,IAAjB,EAAuB4Z,eAAvB,CAAvC;AACA5V,UAAAA,QAAQ,CAACqX,yCAAT,GAAqDE,aAArD,CALa,CAKuD;AACpE;;AAEAjC,UAAAA,GAAG,CAACK,yBAAD,EAA4BG,cAA5B,CAAH;AACAR,UAAAA,GAAG,CAACI,kBAAD,EAAqBI,cAArB,CAAH,CATa,CAS4B;;AAEzCrJ,UAAAA,IAAI,CAACiJ,kBAAD,EAAqB6B,aAArB,EAAoCzB,cAApC,CAAJ;AACArJ,UAAAA,IAAI,CAACkJ,yBAAD,EAA4BkB,SAA5B,EAAuCf,cAAvC,CAAJ;AACD,SAbD,MAaO;AACLR,UAAAA,GAAG,CAACK,yBAAD,EAA4BG,cAA5B,CAAH;AACArJ,UAAAA,IAAI,CAACkJ,yBAAD,EAA4BkB,SAA5B,EAAuCf,cAAvC,CAAJ;AACD;AACF;AACF;;AAED,aAAS0B,0BAAT,CAAoCta,KAApC,EAA2C;AACzC;AACE;AACA;AACA,YAAI,CAACwC,cAAc,CAACxC,KAAD,CAAf,IAA0BA,KAAK,CAAChB,GAAN,KAAc5D,cAA5C,EAA4D;AAC1D,gBAAM,IAAI8H,KAAJ,CAAU,8DAA8D,sEAAxE,CAAN;AACD;;AAED,YAAIhB,IAAI,GAAGlC,KAAX;;AAEA,WAAG;AACD,kBAAQkC,IAAI,CAAClD,GAAb;AACE,iBAAK1D,QAAL;AACE,qBAAO4G,IAAI,CAACa,SAAL,CAAe7D,OAAtB;;AAEF,iBAAK9D,cAAL;AACE;AACE,oBAAIub,SAAS,GAAGzU,IAAI,CAACpD,IAArB;;AAEA,oBAAIga,iBAAiB,CAACnC,SAAD,CAArB,EAAkC;AAChC,yBAAOzU,IAAI,CAACa,SAAL,CAAeoX,yCAAtB;AACD;;AAED;AACD;AAbL;;AAgBAjY,UAAAA,IAAI,GAAGA,IAAI,CAACK,MAAZ;AACD,SAlBD,QAkBSL,IAAI,KAAK,IAlBlB;;AAoBA,cAAM,IAAIgB,KAAJ,CAAU,+CAA+C,sEAAzD,CAAN;AACD;AACF;;AAED,QAAIqX,UAAU,GAAG,CAAjB;AACA,QAAIC,cAAc,GAAG,CAArB;AAEA;AACA;AACA;AACA;;AACA,aAASC,EAAT,CAAY7a,CAAZ,EAAe8a,CAAf,EAAkB;AAChB,aAAO9a,CAAC,KAAK8a,CAAN,KAAY9a,CAAC,KAAK,CAAN,IAAW,IAAIA,CAAJ,KAAU,IAAI8a,CAArC,KAA2C9a,CAAC,KAAKA,CAAN,IAAW8a,CAAC,KAAKA,CAAnE,CAAqE;AAArE;AAED;;AAED,QAAIC,QAAQ,GAAG,OAAOnhB,MAAM,CAACihB,EAAd,KAAqB,UAArB,GAAkCjhB,MAAM,CAACihB,EAAzC,GAA8CA,EAA7D;AAEA,QAAIG,SAAS,GAAG,IAAhB;AACA,QAAIC,2BAA2B,GAAG,KAAlC;AACA,QAAIC,mBAAmB,GAAG,KAA1B;;AACA,aAASC,oBAAT,CAA8BC,QAA9B,EAAwC;AACtC;AACA;AACA,UAAIJ,SAAS,KAAK,IAAlB,EAAwB;AACtBA,QAAAA,SAAS,GAAG,CAACI,QAAD,CAAZ;AACD,OAFD,MAEO;AACL;AACA;AACAJ,QAAAA,SAAS,CAACrL,IAAV,CAAeyL,QAAf;AACD;AACF;;AACD,aAASC,0BAAT,CAAoCD,QAApC,EAA8C;AAC5CH,MAAAA,2BAA2B,GAAG,IAA9B;AACAE,MAAAA,oBAAoB,CAACC,QAAD,CAApB;AACD;;AACD,aAASE,kCAAT,GAA8C;AAC5C;AACA;AACA;AACA;AACA;AACA,UAAIL,2BAAJ,EAAiC;AAC/BM,QAAAA,kBAAkB;AACnB;AACF;;AACD,aAASA,kBAAT,GAA8B;AAC5B,UAAI,CAACL,mBAAD,IAAwBF,SAAS,KAAK,IAA1C,EAAgD;AAC9C;AACAE,QAAAA,mBAAmB,GAAG,IAAtB;AACA,YAAI3hB,CAAC,GAAG,CAAR;AACA,YAAIiiB,sBAAsB,GAAGjL,wBAAwB,EAArD;;AAEA,YAAI;AACF,cAAIkL,MAAM,GAAG,IAAb;AACA,cAAIC,KAAK,GAAGV,SAAZ,CAFE,CAEqB;AACvB;;AAEAxK,UAAAA,wBAAwB,CAACpI,qBAAD,CAAxB;;AAEA,iBAAO7O,CAAC,GAAGmiB,KAAK,CAAC7jB,MAAjB,EAAyB0B,CAAC,EAA1B,EAA8B;AAC5B,gBAAI6hB,QAAQ,GAAGM,KAAK,CAACniB,CAAD,CAApB;;AAEA,eAAG;AACD6hB,cAAAA,QAAQ,GAAGA,QAAQ,CAACK,MAAD,CAAnB;AACD,aAFD,QAESL,QAAQ,KAAK,IAFtB;AAGD;;AAEDJ,UAAAA,SAAS,GAAG,IAAZ;AACAC,UAAAA,2BAA2B,GAAG,KAA9B;AACD,SAjBD,CAiBE,OAAO/iB,KAAP,EAAc;AACd;AACA,cAAI8iB,SAAS,KAAK,IAAlB,EAAwB;AACtBA,YAAAA,SAAS,GAAGA,SAAS,CAACW,KAAV,CAAgBpiB,CAAC,GAAG,CAApB,CAAZ;AACD,WAJa,CAIZ;;;AAGFiL,UAAAA,gBAAgB,CAACU,iBAAD,EAAoBqW,kBAApB,CAAhB;AACA,gBAAMrjB,KAAN;AACD,SA1BD,SA0BU;AACRsY,UAAAA,wBAAwB,CAACgL,sBAAD,CAAxB;AACAN,UAAAA,mBAAmB,GAAG,KAAtB;AACD;AACF;;AAED,aAAO,IAAP;AACD,KA7+Ea,CA++Ed;AACA;AACA;;;AACA,aAASU,gBAAT,CAA0BhU,IAA1B,EAAgC;AAC9B,UAAIiU,YAAY,GAAGjU,IAAI,CAAC5E,OAAL,CAAa8Y,aAAhC;AACA,aAAOD,YAAY,CAACE,YAApB;AACD;;AAED,QAAIC,uBAAuB,GAAGzkB,oBAAoB,CAACykB,uBAAnD;AACA,QAAIC,YAAY,GAAG,IAAnB;;AACA,aAASC,wBAAT,GAAoC;AAClC,aAAOF,uBAAuB,CAACG,UAA/B;AACD;AAED;AACA;AACA;AACA;AACA;;;AAEA,aAASC,YAAT,CAAsBC,IAAtB,EAA4BC,IAA5B,EAAkC;AAChC,UAAIvB,QAAQ,CAACsB,IAAD,EAAOC,IAAP,CAAZ,EAA0B;AACxB,eAAO,IAAP;AACD;;AAED,UAAI,OAAOD,IAAP,KAAgB,QAAhB,IAA4BA,IAAI,KAAK,IAArC,IAA6C,OAAOC,IAAP,KAAgB,QAA7D,IAAyEA,IAAI,KAAK,IAAtF,EAA4F;AAC1F,eAAO,KAAP;AACD;;AAED,UAAIC,KAAK,GAAG3iB,MAAM,CAACW,IAAP,CAAY8hB,IAAZ,CAAZ;AACA,UAAIG,KAAK,GAAG5iB,MAAM,CAACW,IAAP,CAAY+hB,IAAZ,CAAZ;;AAEA,UAAIC,KAAK,CAAC1kB,MAAN,KAAiB2kB,KAAK,CAAC3kB,MAA3B,EAAmC;AACjC,eAAO,KAAP;AACD,OAd+B,CAc9B;;;AAGF,WAAK,IAAI0B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgjB,KAAK,CAAC1kB,MAA1B,EAAkC0B,CAAC,EAAnC,EAAuC;AACrC,YAAIkjB,UAAU,GAAGF,KAAK,CAAChjB,CAAD,CAAtB;;AAEA,YAAI,CAAC2d,cAAc,CAAChe,IAAf,CAAoBojB,IAApB,EAA0BG,UAA1B,CAAD,IAA0C,CAAC1B,QAAQ,CAACsB,IAAI,CAACI,UAAD,CAAL,EAAmBH,IAAI,CAACG,UAAD,CAAvB,CAAvD,EAA6F;AAC3F,iBAAO,KAAP;AACD;AACF;;AAED,aAAO,IAAP;AACD;;AAED,aAASC,aAAT,CAAuBtc,KAAvB,EAA8B;AAC5B,UAAI2C,KAAK,GAAI3C,KAAK,CAACuc,WAAN,GAAoBvc,KAAK,CAACuc,WAAN,CAAkBzd,IAAtC,GAA6C,IAA1D;AACA,UAAI9E,MAAM,GAAIgG,KAAK,CAACwc,YAApB;;AAEA,cAAQxc,KAAK,CAAChB,GAAd;AACE,aAAKxD,aAAL;AACE,iBAAOoZ,6BAA6B,CAAC5U,KAAK,CAAClB,IAAP,CAApC;;AAEF,aAAK3C,aAAL;AACE,iBAAOyY,6BAA6B,CAAC,MAAD,CAApC;;AAEF,aAAK5Y,iBAAL;AACE,iBAAO4Y,6BAA6B,CAAC,UAAD,CAApC;;AAEF,aAAKtY,qBAAL;AACE,iBAAOsY,6BAA6B,CAAC,cAAD,CAApC;;AAEF,aAAKzZ,iBAAL;AACA,aAAKE,sBAAL;AACA,aAAKa,mBAAL;AACE,iBAAOua,8BAA8B,CAACzW,KAAK,CAAClB,IAAP,CAArC;;AAEF,aAAKhD,UAAL;AACE,iBAAO2a,8BAA8B,CAACzW,KAAK,CAAClB,IAAN,CAAWO,MAAZ,CAArC;;AAEF,aAAKjE,cAAL;AACE,iBAAOmb,2BAA2B,CAACvW,KAAK,CAAClB,IAAP,CAAlC;;AAEF;AACE,iBAAO,EAAP;AAzBJ;AA2BD;;AAED,aAAS2d,2BAAT,CAAqC7D,cAArC,EAAqD;AACnD,UAAI;AACF,YAAI1S,IAAI,GAAG,EAAX;AACA,YAAIhE,IAAI,GAAG0W,cAAX;;AAEA,WAAG;AACD1S,UAAAA,IAAI,IAAIoW,aAAa,CAACpa,IAAD,CAArB;AACAA,UAAAA,IAAI,GAAGA,IAAI,CAACK,MAAZ;AACD,SAHD,QAGSL,IAHT;;AAKA,eAAOgE,IAAP;AACD,OAVD,CAUE,OAAOtG,CAAP,EAAU;AACV,eAAO,+BAA+BA,CAAC,CAACmY,OAAjC,GAA2C,IAA3C,GAAkDnY,CAAC,CAACzH,KAA3D;AACD;AACF;;AAED,QAAIukB,wBAAwB,GAAGvlB,oBAAoB,CAACe,sBAApD;AACA,QAAI0K,OAAO,GAAG,IAAd;AACA,QAAI+Z,WAAW,GAAG,KAAlB;;AACA,aAASC,mCAAT,GAA+C;AAC7C;AACE,YAAIha,OAAO,KAAK,IAAhB,EAAsB;AACpB,iBAAO,IAAP;AACD;;AAED,YAAID,KAAK,GAAGC,OAAO,CAAC2Z,WAApB;;AAEA,YAAI5Z,KAAK,KAAK,IAAV,IAAkB,OAAOA,KAAP,KAAiB,WAAvC,EAAoD;AAClD,iBAAO5C,yBAAyB,CAAC4C,KAAD,CAAhC;AACD;AACF;AAED,aAAO,IAAP;AACD;;AAED,aAASka,yBAAT,GAAqC;AACnC;AACE,YAAIja,OAAO,KAAK,IAAhB,EAAsB;AACpB,iBAAO,EAAP;AACD,SAHH,CAGI;AACF;;;AAGA,eAAO6Z,2BAA2B,CAAC7Z,OAAD,CAAlC;AACD;AACF;;AAED,aAASka,iBAAT,GAA6B;AAC3B;AACEJ,QAAAA,wBAAwB,CAACK,eAAzB,GAA2C,IAA3C;AACAna,QAAAA,OAAO,GAAG,IAAV;AACA+Z,QAAAA,WAAW,GAAG,KAAd;AACD;AACF;;AACD,aAASK,eAAT,CAAyBhd,KAAzB,EAAgC;AAC9B;AACE0c,QAAAA,wBAAwB,CAACK,eAAzB,GAA2CF,yBAA3C;AACAja,QAAAA,OAAO,GAAG5C,KAAV;AACA2c,QAAAA,WAAW,GAAG,KAAd;AACD;AACF;;AACD,aAASM,cAAT,CAAwBC,SAAxB,EAAmC;AACjC;AACEP,QAAAA,WAAW,GAAGO,SAAd;AACD;AACF;;AAED,QAAIC,uBAAuB,GAAG;AAC5BC,MAAAA,6BAA6B,EAAE,UAAUpd,KAAV,EAAiB8C,QAAjB,EAA2B,CAAE,CADhC;AAE5Bua,MAAAA,mCAAmC,EAAE,YAAY,CAAE,CAFvB;AAG5BC,MAAAA,0BAA0B,EAAE,UAAUtd,KAAV,EAAiB8C,QAAjB,EAA2B,CAAE,CAH7B;AAI5Bya,MAAAA,yBAAyB,EAAE,YAAY,CAAE,CAJb;AAK5BC,MAAAA,sBAAsB,EAAE,YAAY,CAAE;AALV,KAA9B;AAQA;AACE,UAAIC,cAAc,GAAG,UAAUzd,KAAV,EAAiB;AACpC,YAAI0d,eAAe,GAAG,IAAtB;AACA,YAAIxb,IAAI,GAAGlC,KAAX;;AAEA,eAAOkC,IAAI,KAAK,IAAhB,EAAsB;AACpB,cAAIA,IAAI,CAACyb,IAAL,GAAYxU,gBAAhB,EAAkC;AAChCuU,YAAAA,eAAe,GAAGxb,IAAlB;AACD;;AAEDA,UAAAA,IAAI,GAAGA,IAAI,CAACK,MAAZ;AACD;;AAED,eAAOmb,eAAP;AACD,OAbD;;AAeA,UAAIE,iBAAiB,GAAG,UAAUpjB,GAAV,EAAe;AACrC,YAAIqjB,KAAK,GAAG,EAAZ;AACArjB,QAAAA,GAAG,CAACsjB,OAAJ,CAAY,UAAUrjB,KAAV,EAAiB;AAC3BojB,UAAAA,KAAK,CAACtO,IAAN,CAAW9U,KAAX;AACD,SAFD;AAGA,eAAOojB,KAAK,CAACE,IAAN,GAAaC,IAAb,CAAkB,IAAlB,CAAP;AACD,OAND;;AAQA,UAAIC,iCAAiC,GAAG,EAAxC;AACA,UAAIC,wCAAwC,GAAG,EAA/C;AACA,UAAIC,wCAAwC,GAAG,EAA/C;AACA,UAAIC,+CAA+C,GAAG,EAAtD;AACA,UAAIC,kCAAkC,GAAG,EAAzC;AACA,UAAIC,yCAAyC,GAAG,EAAhD,CA7BF,CA6BsD;;AAEpD,UAAIC,4BAA4B,GAAG,IAAIC,GAAJ,EAAnC;;AAEArB,MAAAA,uBAAuB,CAACC,6BAAxB,GAAwD,UAAUpd,KAAV,EAAiB8C,QAAjB,EAA2B;AACjF;AACA,YAAIyb,4BAA4B,CAAC7G,GAA7B,CAAiC1X,KAAK,CAAClB,IAAvC,CAAJ,EAAkD;AAChD;AACD;;AAED,YAAI,OAAOgE,QAAQ,CAAC2b,kBAAhB,KAAuC,UAAvC,IAAqD;AACzD3b,QAAAA,QAAQ,CAAC2b,kBAAT,CAA4BC,4BAA5B,KAA6D,IAD7D,EACmE;AACjET,UAAAA,iCAAiC,CAAC1O,IAAlC,CAAuCvP,KAAvC;AACD;;AAED,YAAIA,KAAK,CAAC2d,IAAN,GAAaxU,gBAAb,IAAiC,OAAOrG,QAAQ,CAAC6b,yBAAhB,KAA8C,UAAnF,EAA+F;AAC7FT,UAAAA,wCAAwC,CAAC3O,IAAzC,CAA8CvP,KAA9C;AACD;;AAED,YAAI,OAAO8C,QAAQ,CAAC8b,yBAAhB,KAA8C,UAA9C,IAA4D9b,QAAQ,CAAC8b,yBAAT,CAAmCF,4BAAnC,KAAoE,IAApI,EAA0I;AACxIP,UAAAA,wCAAwC,CAAC5O,IAAzC,CAA8CvP,KAA9C;AACD;;AAED,YAAIA,KAAK,CAAC2d,IAAN,GAAaxU,gBAAb,IAAiC,OAAOrG,QAAQ,CAAC+b,gCAAhB,KAAqD,UAA1F,EAAsG;AACpGT,UAAAA,+CAA+C,CAAC7O,IAAhD,CAAqDvP,KAArD;AACD;;AAED,YAAI,OAAO8C,QAAQ,CAACgc,mBAAhB,KAAwC,UAAxC,IAAsDhc,QAAQ,CAACgc,mBAAT,CAA6BJ,4BAA7B,KAA8D,IAAxH,EAA8H;AAC5HL,UAAAA,kCAAkC,CAAC9O,IAAnC,CAAwCvP,KAAxC;AACD;;AAED,YAAIA,KAAK,CAAC2d,IAAN,GAAaxU,gBAAb,IAAiC,OAAOrG,QAAQ,CAACic,0BAAhB,KAA+C,UAApF,EAAgG;AAC9FT,UAAAA,yCAAyC,CAAC/O,IAA1C,CAA+CvP,KAA/C;AACD;AACF,OA9BD;;AAgCAmd,MAAAA,uBAAuB,CAACE,mCAAxB,GAA8D,YAAY;AACxE;AACA,YAAI2B,6BAA6B,GAAG,IAAIR,GAAJ,EAApC;;AAEA,YAAIP,iCAAiC,CAACxmB,MAAlC,GAA2C,CAA/C,EAAkD;AAChDwmB,UAAAA,iCAAiC,CAACH,OAAlC,CAA0C,UAAU9d,KAAV,EAAiB;AACzDgf,YAAAA,6BAA6B,CAACC,GAA9B,CAAkClf,yBAAyB,CAACC,KAAD,CAAzB,IAAoC,WAAtE;AACAue,YAAAA,4BAA4B,CAACU,GAA7B,CAAiCjf,KAAK,CAAClB,IAAvC;AACD,WAHD;AAIAmf,UAAAA,iCAAiC,GAAG,EAApC;AACD;;AAED,YAAIiB,oCAAoC,GAAG,IAAIV,GAAJ,EAA3C;;AAEA,YAAIN,wCAAwC,CAACzmB,MAAzC,GAAkD,CAAtD,EAAyD;AACvDymB,UAAAA,wCAAwC,CAACJ,OAAzC,CAAiD,UAAU9d,KAAV,EAAiB;AAChEkf,YAAAA,oCAAoC,CAACD,GAArC,CAAyClf,yBAAyB,CAACC,KAAD,CAAzB,IAAoC,WAA7E;AACAue,YAAAA,4BAA4B,CAACU,GAA7B,CAAiCjf,KAAK,CAAClB,IAAvC;AACD,WAHD;AAIAof,UAAAA,wCAAwC,GAAG,EAA3C;AACD;;AAED,YAAIiB,oCAAoC,GAAG,IAAIX,GAAJ,EAA3C;;AAEA,YAAIL,wCAAwC,CAAC1mB,MAAzC,GAAkD,CAAtD,EAAyD;AACvD0mB,UAAAA,wCAAwC,CAACL,OAAzC,CAAiD,UAAU9d,KAAV,EAAiB;AAChEmf,YAAAA,oCAAoC,CAACF,GAArC,CAAyClf,yBAAyB,CAACC,KAAD,CAAzB,IAAoC,WAA7E;AACAue,YAAAA,4BAA4B,CAACU,GAA7B,CAAiCjf,KAAK,CAAClB,IAAvC;AACD,WAHD;AAIAqf,UAAAA,wCAAwC,GAAG,EAA3C;AACD;;AAED,YAAIiB,2CAA2C,GAAG,IAAIZ,GAAJ,EAAlD;;AAEA,YAAIJ,+CAA+C,CAAC3mB,MAAhD,GAAyD,CAA7D,EAAgE;AAC9D2mB,UAAAA,+CAA+C,CAACN,OAAhD,CAAwD,UAAU9d,KAAV,EAAiB;AACvEof,YAAAA,2CAA2C,CAACH,GAA5C,CAAgDlf,yBAAyB,CAACC,KAAD,CAAzB,IAAoC,WAApF;AACAue,YAAAA,4BAA4B,CAACU,GAA7B,CAAiCjf,KAAK,CAAClB,IAAvC;AACD,WAHD;AAIAsf,UAAAA,+CAA+C,GAAG,EAAlD;AACD;;AAED,YAAIiB,8BAA8B,GAAG,IAAIb,GAAJ,EAArC;;AAEA,YAAIH,kCAAkC,CAAC5mB,MAAnC,GAA4C,CAAhD,EAAmD;AACjD4mB,UAAAA,kCAAkC,CAACP,OAAnC,CAA2C,UAAU9d,KAAV,EAAiB;AAC1Dqf,YAAAA,8BAA8B,CAACJ,GAA/B,CAAmClf,yBAAyB,CAACC,KAAD,CAAzB,IAAoC,WAAvE;AACAue,YAAAA,4BAA4B,CAACU,GAA7B,CAAiCjf,KAAK,CAAClB,IAAvC;AACD,WAHD;AAIAuf,UAAAA,kCAAkC,GAAG,EAArC;AACD;;AAED,YAAIiB,qCAAqC,GAAG,IAAId,GAAJ,EAA5C;;AAEA,YAAIF,yCAAyC,CAAC7mB,MAA1C,GAAmD,CAAvD,EAA0D;AACxD6mB,UAAAA,yCAAyC,CAACR,OAA1C,CAAkD,UAAU9d,KAAV,EAAiB;AACjEsf,YAAAA,qCAAqC,CAACL,GAAtC,CAA0Clf,yBAAyB,CAACC,KAAD,CAAzB,IAAoC,WAA9E;AACAue,YAAAA,4BAA4B,CAACU,GAA7B,CAAiCjf,KAAK,CAAClB,IAAvC;AACD,WAHD;AAIAwf,UAAAA,yCAAyC,GAAG,EAA5C;AACD,SA5DuE,CA4DtE;AACF;;;AAGA,YAAIY,oCAAoC,CAACK,IAArC,GAA4C,CAAhD,EAAmD;AACjD,cAAIC,WAAW,GAAG5B,iBAAiB,CAACsB,oCAAD,CAAnC;AAEApnB,UAAAA,KAAK,CAAC,2GAA2G,2EAA3G,GAAyL,iGAAzL,GAA6R,8CAA9R,EAA8U0nB,WAA9U,CAAL;AACD;;AAED,YAAIJ,2CAA2C,CAACG,IAA5C,GAAmD,CAAvD,EAA0D;AACxD,cAAIE,YAAY,GAAG7B,iBAAiB,CAACwB,2CAAD,CAApC;;AAEAtnB,UAAAA,KAAK,CAAC,8EAA8E,sCAA9E,GAAuH,2EAAvH,GAAqM,oEAArM,GAA4Q,oDAA5Q,GAAmU,iEAAnU,GAAuY,0FAAvY,GAAoe,8CAAre,EAAqhB2nB,YAArhB,CAAL;AACD;;AAED,YAAIH,qCAAqC,CAACC,IAAtC,GAA6C,CAAjD,EAAoD;AAClD,cAAIG,aAAa,GAAG9B,iBAAiB,CAAC0B,qCAAD,CAArC;;AAEAxnB,UAAAA,KAAK,CAAC,wEAAwE,sCAAxE,GAAiH,2EAAjH,GAA+L,oEAA/L,GAAsQ,8CAAvQ,EAAuT4nB,aAAvT,CAAL;AACD;;AAED,YAAIV,6BAA6B,CAACO,IAA9B,GAAqC,CAAzC,EAA4C;AAC1C,cAAII,aAAa,GAAG/B,iBAAiB,CAACoB,6BAAD,CAArC;;AAEA3nB,UAAAA,IAAI,CAAC,0EAA0E,2EAA1E,GAAwJ,iGAAxJ,GAA4P,uEAA5P,GAAsU,mFAAtU,GAA4Z,sEAA5Z,GAAqe,+EAAre,GAAujB,8CAAxjB,EAAwmBsoB,aAAxmB,CAAJ;AACD;;AAED,YAAIR,oCAAoC,CAACI,IAArC,GAA4C,CAAhD,EAAmD;AACjD,cAAIK,aAAa,GAAGhC,iBAAiB,CAACuB,oCAAD,CAArC;;AAEA9nB,UAAAA,IAAI,CAAC,iFAAiF,2EAAjF,GAA+J,oEAA/J,GAAsO,kEAAtO,GAA2S,mDAA3S,GAAiW,0FAAjW,GAA8b,qFAA9b,GAAshB,mFAAthB,GAA4mB,sEAA5mB,GAAqrB,+EAArrB,GAAuwB,8CAAxwB,EAAwzBuoB,aAAxzB,CAAJ;AACD;;AAED,YAAIP,8BAA8B,CAACE,IAA/B,GAAsC,CAA1C,EAA6C;AAC3C,cAAIM,aAAa,GAAGjC,iBAAiB,CAACyB,8BAAD,CAArC;;AAEAhoB,UAAAA,IAAI,CAAC,2EAA2E,2EAA3E,GAAyJ,oEAAzJ,GAAgO,yEAAhO,GAA4S,mFAA5S,GAAkY,sEAAlY,GAA2c,+EAA3c,GAA6hB,8CAA9hB,EAA8kBwoB,aAA9kB,CAAJ;AACD;AACF,OAnGD;;AAqGA,UAAIC,2BAA2B,GAAG,IAAI5K,GAAJ,EAAlC,CAtKF,CAsK+C;;AAE7C,UAAI6K,yBAAyB,GAAG,IAAIvB,GAAJ,EAAhC;;AAEArB,MAAAA,uBAAuB,CAACG,0BAAxB,GAAqD,UAAUtd,KAAV,EAAiB8C,QAAjB,EAA2B;AAC9E,YAAIkd,UAAU,GAAGvC,cAAc,CAACzd,KAAD,CAA/B;;AAEA,YAAIggB,UAAU,KAAK,IAAnB,EAAyB;AACvBloB,UAAAA,KAAK,CAAC,oEAAoE,sEAArE,CAAL;AAEA;AACD,SAP6E,CAO5E;;;AAGF,YAAIioB,yBAAyB,CAACrI,GAA1B,CAA8B1X,KAAK,CAAClB,IAApC,CAAJ,EAA+C;AAC7C;AACD;;AAED,YAAImhB,eAAe,GAAGH,2BAA2B,CAACxlB,GAA5B,CAAgC0lB,UAAhC,CAAtB;;AAEA,YAAIhgB,KAAK,CAAClB,IAAN,CAAWua,YAAX,IAA2B,IAA3B,IAAmCrZ,KAAK,CAAClB,IAAN,CAAWya,iBAAX,IAAgC,IAAnE,IAA2EzW,QAAQ,KAAK,IAAb,IAAqB,OAAOA,QAAQ,CAACgX,eAAhB,KAAoC,UAAxI,EAAoJ;AAClJ,cAAImG,eAAe,KAAK7X,SAAxB,EAAmC;AACjC6X,YAAAA,eAAe,GAAG,EAAlB;AACAH,YAAAA,2BAA2B,CAACtlB,GAA5B,CAAgCwlB,UAAhC,EAA4CC,eAA5C;AACD;;AAEDA,UAAAA,eAAe,CAAC1Q,IAAhB,CAAqBvP,KAArB;AACD;AACF,OAxBD;;AA0BAmd,MAAAA,uBAAuB,CAACI,yBAAxB,GAAoD,YAAY;AAC9DuC,QAAAA,2BAA2B,CAAChC,OAA5B,CAAoC,UAAUoC,UAAV,EAAsBF,UAAtB,EAAkC;AACpE,cAAIE,UAAU,CAACzoB,MAAX,KAAsB,CAA1B,EAA6B;AAC3B;AACD;;AAED,cAAI0oB,UAAU,GAAGD,UAAU,CAAC,CAAD,CAA3B;AACA,cAAIE,WAAW,GAAG,IAAI5B,GAAJ,EAAlB;AACA0B,UAAAA,UAAU,CAACpC,OAAX,CAAmB,UAAU9d,KAAV,EAAiB;AAClCogB,YAAAA,WAAW,CAACnB,GAAZ,CAAgBlf,yBAAyB,CAACC,KAAD,CAAzB,IAAoC,WAApD;AACA+f,YAAAA,yBAAyB,CAACd,GAA1B,CAA8Bjf,KAAK,CAAClB,IAApC;AACD,WAHD;AAIA,cAAI0gB,WAAW,GAAG5B,iBAAiB,CAACwC,WAAD,CAAnC;;AAEA,cAAI;AACFpD,YAAAA,eAAe,CAACmD,UAAD,CAAf;AAEAroB,YAAAA,KAAK,CAAC,oEAAoE,2EAApE,GAAkJ,6CAAlJ,GAAkM,gDAAlM,GAAqP,iFAAtP,EAAyU0nB,WAAzU,CAAL;AACD,WAJD,SAIU;AACR1C,YAAAA,iBAAiB;AAClB;AACF,SApBD;AAqBD,OAtBD;;AAwBAK,MAAAA,uBAAuB,CAACK,sBAAxB,GAAiD,YAAY;AAC3DS,QAAAA,iCAAiC,GAAG,EAApC;AACAC,QAAAA,wCAAwC,GAAG,EAA3C;AACAC,QAAAA,wCAAwC,GAAG,EAA3C;AACAC,QAAAA,+CAA+C,GAAG,EAAlD;AACAC,QAAAA,kCAAkC,GAAG,EAArC;AACAC,QAAAA,yCAAyC,GAAG,EAA5C;AACAwB,QAAAA,2BAA2B,GAAG,IAAI5K,GAAJ,EAA9B;AACD,OARD;AASD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,aAASmL,QAAT,CAAkB5lB,KAAlB,EAAyB;AACvB;AACE;AACA,YAAI6lB,cAAc,GAAG,OAAOzjB,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAAC0jB,WAA5D;AACA,YAAIzhB,IAAI,GAAGwhB,cAAc,IAAI7lB,KAAK,CAACoC,MAAM,CAAC0jB,WAAR,CAAvB,IAA+C9lB,KAAK,CAAC+lB,WAAN,CAAkB5hB,IAAjE,IAAyE,QAApF;AACA,eAAOE,IAAP;AACD;AACF,KAn4Fa,CAm4FZ;;;AAGF,aAAS2hB,iBAAT,CAA2BhmB,KAA3B,EAAkC;AAChC;AACE,YAAI;AACFimB,UAAAA,kBAAkB,CAACjmB,KAAD,CAAlB;AACA,iBAAO,KAAP;AACD,SAHD,CAGE,OAAOkmB,CAAP,EAAU;AACV,iBAAO,IAAP;AACD;AACF;AACF;;AAED,aAASD,kBAAT,CAA4BjmB,KAA5B,EAAmC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAO,KAAKA,KAAZ;AACD;;AACD,aAASmmB,uBAAT,CAAiCnmB,KAAjC,EAAwComB,QAAxC,EAAkD;AAChD;AACE,YAAIJ,iBAAiB,CAAChmB,KAAD,CAArB,EAA8B;AAC5B3C,UAAAA,KAAK,CAAC,sDAAsD,sEAAvD,EAA+H+oB,QAA/H,EAAyIR,QAAQ,CAAC5lB,KAAD,CAAjJ,CAAL;AAEA,iBAAOimB,kBAAkB,CAACjmB,KAAD,CAAzB,CAH4B,CAGM;AACnC;AACF;AACF;;AAED,aAASqmB,mBAAT,CAA6BnK,SAA7B,EAAwCoK,SAAxC,EAAmD;AACjD,UAAIpK,SAAS,IAAIA,SAAS,CAACqK,YAA3B,EAAyC;AACvC;AACA,YAAI9nB,KAAK,GAAGmB,MAAM,CAAC,EAAD,EAAK0mB,SAAL,CAAlB;AACA,YAAIC,YAAY,GAAGrK,SAAS,CAACqK,YAA7B;;AAEA,aAAK,IAAIH,QAAT,IAAqBG,YAArB,EAAmC;AACjC,cAAI9nB,KAAK,CAAC2nB,QAAD,CAAL,KAAoBzY,SAAxB,EAAmC;AACjClP,YAAAA,KAAK,CAAC2nB,QAAD,CAAL,GAAkBG,YAAY,CAACH,QAAD,CAA9B;AACD;AACF;;AAED,eAAO3nB,KAAP;AACD;;AAED,aAAO6nB,SAAP;AACD;;AAED,QAAIE,WAAW,GAAG/I,YAAY,CAAC,IAAD,CAA9B;AACA,QAAIgJ,aAAJ;AAEA;AACE;AACAA,MAAAA,aAAa,GAAG,EAAhB;AACD;AAED,QAAIC,uBAAuB,GAAG,IAA9B;AACA,QAAIC,qBAAqB,GAAG,IAA5B;AACA,QAAIC,wBAAwB,GAAG,IAA/B;AACA,QAAIC,4BAA4B,GAAG,KAAnC;;AACA,aAASC,wBAAT,GAAoC;AAClC;AACA;AACAJ,MAAAA,uBAAuB,GAAG,IAA1B;AACAC,MAAAA,qBAAqB,GAAG,IAAxB;AACAC,MAAAA,wBAAwB,GAAG,IAA3B;AAEA;AACEC,QAAAA,4BAA4B,GAAG,KAA/B;AACD;AACF;;AACD,aAASE,+BAAT,GAA2C;AACzC;AACEF,QAAAA,4BAA4B,GAAG,IAA/B;AACD;AACF;;AACD,aAASG,8BAAT,GAA0C;AACxC;AACEH,QAAAA,4BAA4B,GAAG,KAA/B;AACD;AACF;;AACD,aAASI,YAAT,CAAsBC,aAAtB,EAAqCziB,OAArC,EAA8C0iB,SAA9C,EAAyD;AACvD;AACErS,QAAAA,IAAI,CAAC0R,WAAD,EAAc/hB,OAAO,CAAC2iB,cAAtB,EAAsCF,aAAtC,CAAJ;AACAziB,QAAAA,OAAO,CAAC2iB,cAAR,GAAyBD,SAAzB;AAEA;AACE,cAAI1iB,OAAO,CAAC4iB,iBAAR,KAA8B1Z,SAA9B,IAA2ClJ,OAAO,CAAC4iB,iBAAR,KAA8B,IAAzE,IAAiF5iB,OAAO,CAAC4iB,iBAAR,KAA8BZ,aAAnH,EAAkI;AAChIppB,YAAAA,KAAK,CAAC,4DAA4D,uDAA7D,CAAL;AACD;;AAEDoH,UAAAA,OAAO,CAAC4iB,iBAAR,GAA4BZ,aAA5B;AACD;AACF;AACF;;AACD,aAASa,WAAT,CAAqB7iB,OAArB,EAA8ByiB,aAA9B,EAA6C;AAC3C,UAAIK,YAAY,GAAGf,WAAW,CAACre,OAA/B;AACAwV,MAAAA,GAAG,CAAC6I,WAAD,EAAcU,aAAd,CAAH;AAEA;AACE;AACEziB,UAAAA,OAAO,CAAC2iB,cAAR,GAAyBG,YAAzB;AACD;AACF;AACF;;AACD,aAASC,+BAAT,CAAyCne,MAAzC,EAAiDoe,WAAjD,EAA8DC,eAA9D,EAA+E;AAC7E;AACA,UAAIjgB,IAAI,GAAG4B,MAAX;;AAEA,aAAO5B,IAAI,KAAK,IAAhB,EAAsB;AACpB,YAAIE,SAAS,GAAGF,IAAI,CAACE,SAArB;;AAEA,YAAI,CAAC0M,eAAe,CAAC5M,IAAI,CAACkgB,UAAN,EAAkBF,WAAlB,CAApB,EAAoD;AAClDhgB,UAAAA,IAAI,CAACkgB,UAAL,GAAkBpT,UAAU,CAAC9M,IAAI,CAACkgB,UAAN,EAAkBF,WAAlB,CAA5B;;AAEA,cAAI9f,SAAS,KAAK,IAAlB,EAAwB;AACtBA,YAAAA,SAAS,CAACggB,UAAV,GAAuBpT,UAAU,CAAC5M,SAAS,CAACggB,UAAX,EAAuBF,WAAvB,CAAjC;AACD;AACF,SAND,MAMO,IAAI9f,SAAS,KAAK,IAAd,IAAsB,CAAC0M,eAAe,CAAC1M,SAAS,CAACggB,UAAX,EAAuBF,WAAvB,CAA1C,EAA+E;AACpF9f,UAAAA,SAAS,CAACggB,UAAV,GAAuBpT,UAAU,CAAC5M,SAAS,CAACggB,UAAX,EAAuBF,WAAvB,CAAjC;AACD;;AAED,YAAIhgB,IAAI,KAAKigB,eAAb,EAA8B;AAC5B;AACD;;AAEDjgB,QAAAA,IAAI,GAAGA,IAAI,CAACK,MAAZ;AACD;;AAED;AACE,YAAIL,IAAI,KAAKigB,eAAb,EAA8B;AAC5BrqB,UAAAA,KAAK,CAAC,yEAAyE,sEAA1E,CAAL;AACD;AACF;AACF;;AACD,aAASuqB,sBAAT,CAAgCzJ,cAAhC,EAAgD1Z,OAAhD,EAAyDgjB,WAAzD,EAAsE;AACpE;AACEI,QAAAA,4BAA4B,CAAC1J,cAAD,EAAiB1Z,OAAjB,EAA0BgjB,WAA1B,CAA5B;AACD;AACF;;AAED,aAASI,4BAAT,CAAsC1J,cAAtC,EAAsD1Z,OAAtD,EAA+DgjB,WAA/D,EAA4E;AAE1E,UAAIliB,KAAK,GAAG4Y,cAAc,CAACnV,KAA3B;;AAEA,UAAIzD,KAAK,KAAK,IAAd,EAAoB;AAClB;AACAA,QAAAA,KAAK,CAACuC,MAAN,GAAeqW,cAAf;AACD;;AAED,aAAO5Y,KAAK,KAAK,IAAjB,EAAuB;AACrB,YAAIuiB,SAAS,GAAG,KAAK,CAArB,CADqB,CACG;;AAExB,YAAIC,IAAI,GAAGxiB,KAAK,CAACyiB,YAAjB;;AAEA,YAAID,IAAI,KAAK,IAAb,EAAmB;AACjBD,UAAAA,SAAS,GAAGviB,KAAK,CAACyD,KAAlB;AACA,cAAIif,UAAU,GAAGF,IAAI,CAACG,YAAtB;;AAEA,iBAAOD,UAAU,KAAK,IAAtB,EAA4B;AAC1B;AACA,gBAAIA,UAAU,CAACxjB,OAAX,KAAuBA,OAA3B,EAAoC;AAClC;AACA,kBAAIc,KAAK,CAAChB,GAAN,KAAc5D,cAAlB,EAAkC;AAChC;AACA,oBAAIgS,IAAI,GAAGuB,iBAAiB,CAACuT,WAAD,CAA5B;AACA,oBAAIU,MAAM,GAAGC,YAAY,CAAC9W,WAAD,EAAcqB,IAAd,CAAzB;AACAwV,gBAAAA,MAAM,CAAC5jB,GAAP,GAAa8jB,WAAb,CAJgC,CAIN;AAC1B;AACA;AACA;AACA;;AAEA,oBAAIC,WAAW,GAAG/iB,KAAK,CAAC+iB,WAAxB;AAEA,oBAAIA,WAAW,KAAK,IAApB,EAA0B,CAA1B,KAAiC;AAC/B,sBAAIC,WAAW,GAAGD,WAAW,CAACE,MAA9B;AACA,sBAAIC,OAAO,GAAGF,WAAW,CAACE,OAA1B;;AAEA,sBAAIA,OAAO,KAAK,IAAhB,EAAsB;AACpB;AACAN,oBAAAA,MAAM,CAACO,IAAP,GAAcP,MAAd;AACD,mBAHD,MAGO;AACLA,oBAAAA,MAAM,CAACO,IAAP,GAAcD,OAAO,CAACC,IAAtB;AACAD,oBAAAA,OAAO,CAACC,IAAR,GAAeP,MAAf;AACD;;AAEDI,kBAAAA,WAAW,CAACE,OAAZ,GAAsBN,MAAtB;AACD;AACF;;AAED5iB,cAAAA,KAAK,CAAC6I,KAAN,GAAcmG,UAAU,CAAChP,KAAK,CAAC6I,KAAP,EAAcqZ,WAAd,CAAxB;AACA,kBAAI9f,SAAS,GAAGpC,KAAK,CAACoC,SAAtB;;AAEA,kBAAIA,SAAS,KAAK,IAAlB,EAAwB;AACtBA,gBAAAA,SAAS,CAACyG,KAAV,GAAkBmG,UAAU,CAAC5M,SAAS,CAACyG,KAAX,EAAkBqZ,WAAlB,CAA5B;AACD;;AAEDD,cAAAA,+BAA+B,CAACjiB,KAAK,CAACuC,MAAP,EAAe2f,WAAf,EAA4BtJ,cAA5B,CAA/B,CArCkC,CAqC0C;;AAE5E4J,cAAAA,IAAI,CAAC3Z,KAAL,GAAamG,UAAU,CAACwT,IAAI,CAAC3Z,KAAN,EAAaqZ,WAAb,CAAvB,CAvCkC,CAuCgB;AAClD;;AAEA;AACD;;AAEDQ,YAAAA,UAAU,GAAGA,UAAU,CAACS,IAAxB;AACD;AACF,SArDD,MAqDO,IAAInjB,KAAK,CAAChB,GAAN,KAAcnD,eAAlB,EAAmC;AACxC;AACA0mB,UAAAA,SAAS,GAAGviB,KAAK,CAAClB,IAAN,KAAe8Z,cAAc,CAAC9Z,IAA9B,GAAqC,IAArC,GAA4CkB,KAAK,CAACyD,KAA9D;AACD,SAHM,MAGA;AACL;AACA8e,UAAAA,SAAS,GAAGviB,KAAK,CAACyD,KAAlB;AACD;;AAED,YAAI8e,SAAS,KAAK,IAAlB,EAAwB;AACtB;AACAA,UAAAA,SAAS,CAAChgB,MAAV,GAAmBvC,KAAnB;AACD,SAHD,MAGO;AACL;AACAuiB,UAAAA,SAAS,GAAGviB,KAAZ;;AAEA,iBAAOuiB,SAAS,KAAK,IAArB,EAA2B;AACzB,gBAAIA,SAAS,KAAK3J,cAAlB,EAAkC;AAChC;AACA2J,cAAAA,SAAS,GAAG,IAAZ;AACA;AACD;;AAED,gBAAI7e,OAAO,GAAG6e,SAAS,CAAC7e,OAAxB;;AAEA,gBAAIA,OAAO,KAAK,IAAhB,EAAsB;AACpB;AACAA,cAAAA,OAAO,CAACnB,MAAR,GAAiBggB,SAAS,CAAChgB,MAA3B;AACAggB,cAAAA,SAAS,GAAG7e,OAAZ;AACA;AACD,aAdwB,CAcvB;;;AAGF6e,YAAAA,SAAS,GAAGA,SAAS,CAAChgB,MAAtB;AACD;AACF;;AAEDvC,QAAAA,KAAK,GAAGuiB,SAAR;AACD;AACF;;AACD,aAASa,oBAAT,CAA8BxK,cAA9B,EAA8CsJ,WAA9C,EAA2D;AACzDf,MAAAA,uBAAuB,GAAGvI,cAA1B;AACAwI,MAAAA,qBAAqB,GAAG,IAAxB;AACAC,MAAAA,wBAAwB,GAAG,IAA3B;AACA,UAAIoB,YAAY,GAAG7J,cAAc,CAAC6J,YAAlC;;AAEA,UAAIA,YAAY,KAAK,IAArB,EAA2B;AACzB;AACE,cAAIE,YAAY,GAAGF,YAAY,CAACE,YAAhC;;AAEA,cAAIA,YAAY,KAAK,IAArB,EAA2B;AACzB,gBAAI9T,gBAAgB,CAAC4T,YAAY,CAAC5Z,KAAd,EAAqBqZ,WAArB,CAApB,EAAuD;AACrD;AACAmB,cAAAA,gCAAgC;AACjC,aAJwB,CAIvB;;;AAGFZ,YAAAA,YAAY,CAACE,YAAb,GAA4B,IAA5B;AACD;AACF;AACF;AACF;;AACD,aAASW,WAAT,CAAqBpkB,OAArB,EAA8B;AAC5B;AACE;AACA;AACA,YAAIoiB,4BAAJ,EAAkC;AAChCxpB,UAAAA,KAAK,CAAC,wDAAwD,gFAAxD,GAA2I,iFAA3I,GAA+N,8CAAhO,CAAL;AACD;AACF;AAED,UAAI2C,KAAK,GAAIyE,OAAO,CAAC2iB,cAArB;AAEA,UAAIR,wBAAwB,KAAKniB,OAAjC,EAA0C,CAA1C,KAAiD;AAC/C,YAAIqkB,WAAW,GAAG;AAChBrkB,UAAAA,OAAO,EAAEA,OADO;AAEhBskB,UAAAA,aAAa,EAAE/oB,KAFC;AAGhB0oB,UAAAA,IAAI,EAAE;AAHU,SAAlB;;AAMA,YAAI/B,qBAAqB,KAAK,IAA9B,EAAoC;AAClC,cAAID,uBAAuB,KAAK,IAAhC,EAAsC;AACpC,kBAAM,IAAIje,KAAJ,CAAU,wDAAwD,gFAAxD,GAA2I,iFAA3I,GAA+N,8CAAzO,CAAN;AACD,WAHiC,CAGhC;;;AAGFke,UAAAA,qBAAqB,GAAGmC,WAAxB;AACApC,UAAAA,uBAAuB,CAACsB,YAAxB,GAAuC;AACrC5Z,YAAAA,KAAK,EAAEa,OAD8B;AAErCiZ,YAAAA,YAAY,EAAEY;AAFuB,WAAvC;AAID,SAXD,MAWO;AACL;AACAnC,UAAAA,qBAAqB,GAAGA,qBAAqB,CAAC+B,IAAtB,GAA6BI,WAArD;AACD;AACF;AAED,aAAO9oB,KAAP;AACD,KAxsGa,CA0sGd;AACA;AACA;AACA;;;AACA,QAAIgpB,iBAAiB,GAAG,IAAxB;;AACA,aAASC,oBAAT,CAA8BpI,KAA9B,EAAqC;AACnC,UAAImI,iBAAiB,KAAK,IAA1B,EAAgC;AAC9BA,QAAAA,iBAAiB,GAAG,CAACnI,KAAD,CAApB;AACD,OAFD,MAEO;AACLmI,QAAAA,iBAAiB,CAAClU,IAAlB,CAAuB+L,KAAvB;AACD;AACF;;AACD,aAASqI,yBAAT,GAAqC;AACnC;AACA;AACA;AACA;AACA;AACA,UAAIF,iBAAiB,KAAK,IAA1B,EAAgC;AAC9B,aAAK,IAAItqB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsqB,iBAAiB,CAAChsB,MAAtC,EAA8C0B,CAAC,EAA/C,EAAmD;AACjD,cAAImiB,KAAK,GAAGmI,iBAAiB,CAACtqB,CAAD,CAA7B;AACA,cAAIyqB,qBAAqB,GAAGtI,KAAK,CAACuI,WAAlC;;AAEA,cAAID,qBAAqB,KAAK,IAA9B,EAAoC;AAClCtI,YAAAA,KAAK,CAACuI,WAAN,GAAoB,IAApB;AACA,gBAAIC,sBAAsB,GAAGF,qBAAqB,CAACT,IAAnD;AACA,gBAAIY,iBAAiB,GAAGzI,KAAK,CAAC4H,OAA9B;;AAEA,gBAAIa,iBAAiB,KAAK,IAA1B,EAAgC;AAC9B,kBAAIC,kBAAkB,GAAGD,iBAAiB,CAACZ,IAA3C;AACAY,cAAAA,iBAAiB,CAACZ,IAAlB,GAAyBW,sBAAzB;AACAF,cAAAA,qBAAqB,CAACT,IAAtB,GAA6Ba,kBAA7B;AACD;;AAED1I,YAAAA,KAAK,CAAC4H,OAAN,GAAgBU,qBAAhB;AACD;AACF;;AAEDH,QAAAA,iBAAiB,GAAG,IAApB;AACD;AACF;;AAED,QAAIQ,WAAW,GAAG,CAAlB;AACA,QAAIC,YAAY,GAAG,CAAnB;AACA,QAAIpB,WAAW,GAAG,CAAlB;AACA,QAAIqB,aAAa,GAAG,CAApB,CAvvGc,CAuvGS;AACvB;AACA;;AAEA,QAAIC,cAAc,GAAG,KAArB;AACA,QAAIC,yBAAJ;AACA,QAAIC,wBAAJ;AAEA;AACED,MAAAA,yBAAyB,GAAG,KAA5B;AACAC,MAAAA,wBAAwB,GAAG,IAA3B;AACD;;AAED,aAASC,qBAAT,CAA+BvkB,KAA/B,EAAsC;AACpC,UAAIsb,KAAK,GAAG;AACVkJ,QAAAA,SAAS,EAAExkB,KAAK,CAAC0b,aADP;AAEV+I,QAAAA,eAAe,EAAE,IAFP;AAGVC,QAAAA,cAAc,EAAE,IAHN;AAIVzB,QAAAA,MAAM,EAAE;AACNC,UAAAA,OAAO,EAAE,IADH;AAENW,UAAAA,WAAW,EAAE,IAFP;AAGNhb,UAAAA,KAAK,EAAEa;AAHD,SAJE;AASVib,QAAAA,OAAO,EAAE;AATC,OAAZ;AAWA3kB,MAAAA,KAAK,CAAC+iB,WAAN,GAAoBzH,KAApB;AACD;;AACD,aAASsJ,gBAAT,CAA0BhiB,OAA1B,EAAmCgW,cAAnC,EAAmD;AACjD;AACA,UAAI0C,KAAK,GAAG1C,cAAc,CAACmK,WAA3B;AACA,UAAI8B,YAAY,GAAGjiB,OAAO,CAACmgB,WAA3B;;AAEA,UAAIzH,KAAK,KAAKuJ,YAAd,EAA4B;AAC1B,YAAIC,KAAK,GAAG;AACVN,UAAAA,SAAS,EAAEK,YAAY,CAACL,SADd;AAEVC,UAAAA,eAAe,EAAEI,YAAY,CAACJ,eAFpB;AAGVC,UAAAA,cAAc,EAAEG,YAAY,CAACH,cAHnB;AAIVzB,UAAAA,MAAM,EAAE4B,YAAY,CAAC5B,MAJX;AAKV0B,UAAAA,OAAO,EAAEE,YAAY,CAACF;AALZ,SAAZ;AAOA/L,QAAAA,cAAc,CAACmK,WAAf,GAA6B+B,KAA7B;AACD;AACF;;AACD,aAASjC,YAAT,CAAsBrV,SAAtB,EAAiCJ,IAAjC,EAAuC;AACrC,UAAIwV,MAAM,GAAG;AACXpV,QAAAA,SAAS,EAAEA,SADA;AAEXJ,QAAAA,IAAI,EAAEA,IAFK;AAGXpO,QAAAA,GAAG,EAAEilB,WAHM;AAIXzkB,QAAAA,OAAO,EAAE,IAJE;AAKXwb,QAAAA,QAAQ,EAAE,IALC;AAMXmI,QAAAA,IAAI,EAAE;AANK,OAAb;AAQA,aAAOP,MAAP;AACD;;AACD,aAASmC,aAAT,CAAuB/kB,KAAvB,EAA8B4iB,MAA9B,EAAsCxV,IAAtC,EAA4C;AAC1C,UAAI2V,WAAW,GAAG/iB,KAAK,CAAC+iB,WAAxB;;AAEA,UAAIA,WAAW,KAAK,IAApB,EAA0B;AACxB;AACA;AACD;;AAED,UAAIC,WAAW,GAAGD,WAAW,CAACE,MAA9B;;AAEA,UAAI+B,mBAAmB,CAAChlB,KAAD,CAAvB,EAAgC;AAC9B,YAAI6jB,WAAW,GAAGb,WAAW,CAACa,WAA9B;;AAEA,YAAIA,WAAW,KAAK,IAApB,EAA0B;AACxB;AACAjB,UAAAA,MAAM,CAACO,IAAP,GAAcP,MAAd,CAFwB,CAEF;AACtB;;AAEAc,UAAAA,oBAAoB,CAACV,WAAD,CAApB;AACD,SAND,MAMO;AACLJ,UAAAA,MAAM,CAACO,IAAP,GAAcU,WAAW,CAACV,IAA1B;AACAU,UAAAA,WAAW,CAACV,IAAZ,GAAmBP,MAAnB;AACD;;AAEDI,QAAAA,WAAW,CAACa,WAAZ,GAA0BjB,MAA1B;AACD,OAfD,MAeO;AACL,YAAIM,OAAO,GAAGF,WAAW,CAACE,OAA1B;;AAEA,YAAIA,OAAO,KAAK,IAAhB,EAAsB;AACpB;AACAN,UAAAA,MAAM,CAACO,IAAP,GAAcP,MAAd;AACD,SAHD,MAGO;AACLA,UAAAA,MAAM,CAACO,IAAP,GAAcD,OAAO,CAACC,IAAtB;AACAD,UAAAA,OAAO,CAACC,IAAR,GAAeP,MAAf;AACD;;AAEDI,QAAAA,WAAW,CAACE,OAAZ,GAAsBN,MAAtB;AACD;;AAED;AACE,YAAI0B,wBAAwB,KAAKtB,WAA7B,IAA4C,CAACqB,yBAAjD,EAA4E;AAC1EvsB,UAAAA,KAAK,CAAC,sEAAsE,mEAAtE,GAA4I,iEAA5I,GAAgN,WAAjN,CAAL;AAEAusB,UAAAA,yBAAyB,GAAG,IAA5B;AACD;AACF;AACF;;AACD,aAASY,mBAAT,CAA6Bzd,IAA7B,EAAmCxH,KAAnC,EAA0CoN,IAA1C,EAAgD;AAC9C,UAAI2V,WAAW,GAAG/iB,KAAK,CAAC+iB,WAAxB;;AAEA,UAAIA,WAAW,KAAK,IAApB,EAA0B;AACxB;AACA;AACD;;AAED,UAAIC,WAAW,GAAGD,WAAW,CAACE,MAA9B;;AAEA,UAAIzU,gBAAgB,CAACpB,IAAD,CAApB,EAA4B;AAC1B,YAAI8X,UAAU,GAAGlC,WAAW,CAACna,KAA7B,CAD0B,CACU;AACpC;AACA;AACA;AACA;;AAEAqc,QAAAA,UAAU,GAAGhW,cAAc,CAACgW,UAAD,EAAa1d,IAAI,CAAC8E,YAAlB,CAA3B,CAP0B,CAOkC;;AAE5D,YAAI6Y,aAAa,GAAGnW,UAAU,CAACkW,UAAD,EAAa9X,IAAb,CAA9B;AACA4V,QAAAA,WAAW,CAACna,KAAZ,GAAoBsc,aAApB,CAV0B,CAUS;AACnC;AACA;;AAEAnV,QAAAA,iBAAiB,CAACxI,IAAD,EAAO2d,aAAP,CAAjB;AACD;AACF;;AACD,aAASC,qBAAT,CAA+BxM,cAA/B,EAA+CyM,cAA/C,EAA+D;AAC7D;AACA;AACA;AACA,UAAI/J,KAAK,GAAG1C,cAAc,CAACmK,WAA3B,CAJ6D,CAIrB;;AAExC,UAAIngB,OAAO,GAAGgW,cAAc,CAACxW,SAA7B;;AAEA,UAAIQ,OAAO,KAAK,IAAhB,EAAsB;AACpB,YAAIiiB,YAAY,GAAGjiB,OAAO,CAACmgB,WAA3B;;AAEA,YAAIzH,KAAK,KAAKuJ,YAAd,EAA4B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,cAAIS,QAAQ,GAAG,IAAf;AACA,cAAIC,OAAO,GAAG,IAAd;AACA,cAAId,eAAe,GAAGnJ,KAAK,CAACmJ,eAA5B;;AAEA,cAAIA,eAAe,KAAK,IAAxB,EAA8B;AAC5B;AACA,gBAAI7B,MAAM,GAAG6B,eAAb;;AAEA,eAAG;AACD,kBAAIK,KAAK,GAAG;AACVtX,gBAAAA,SAAS,EAAEoV,MAAM,CAACpV,SADR;AAEVJ,gBAAAA,IAAI,EAAEwV,MAAM,CAACxV,IAFH;AAGVpO,gBAAAA,GAAG,EAAE4jB,MAAM,CAAC5jB,GAHF;AAIVQ,gBAAAA,OAAO,EAAEojB,MAAM,CAACpjB,OAJN;AAKVwb,gBAAAA,QAAQ,EAAE4H,MAAM,CAAC5H,QALP;AAMVmI,gBAAAA,IAAI,EAAE;AANI,eAAZ;;AASA,kBAAIoC,OAAO,KAAK,IAAhB,EAAsB;AACpBD,gBAAAA,QAAQ,GAAGC,OAAO,GAAGT,KAArB;AACD,eAFD,MAEO;AACLS,gBAAAA,OAAO,CAACpC,IAAR,GAAe2B,KAAf;AACAS,gBAAAA,OAAO,GAAGT,KAAV;AACD;;AAEDlC,cAAAA,MAAM,GAAGA,MAAM,CAACO,IAAhB;AACD,aAlBD,QAkBSP,MAAM,KAAK,IAlBpB,EAJ4B,CAsBD;;;AAG3B,gBAAI2C,OAAO,KAAK,IAAhB,EAAsB;AACpBD,cAAAA,QAAQ,GAAGC,OAAO,GAAGF,cAArB;AACD,aAFD,MAEO;AACLE,cAAAA,OAAO,CAACpC,IAAR,GAAekC,cAAf;AACAE,cAAAA,OAAO,GAAGF,cAAV;AACD;AACF,WA/BD,MA+BO;AACL;AACAC,YAAAA,QAAQ,GAAGC,OAAO,GAAGF,cAArB;AACD;;AAED/J,UAAAA,KAAK,GAAG;AACNkJ,YAAAA,SAAS,EAAEK,YAAY,CAACL,SADlB;AAENC,YAAAA,eAAe,EAAEa,QAFX;AAGNZ,YAAAA,cAAc,EAAEa,OAHV;AAINtC,YAAAA,MAAM,EAAE4B,YAAY,CAAC5B,MAJf;AAKN0B,YAAAA,OAAO,EAAEE,YAAY,CAACF;AALhB,WAAR;AAOA/L,UAAAA,cAAc,CAACmK,WAAf,GAA6BzH,KAA7B;AACA;AACD;AACF,OApE4D,CAoE3D;;;AAGF,UAAIoJ,cAAc,GAAGpJ,KAAK,CAACoJ,cAA3B;;AAEA,UAAIA,cAAc,KAAK,IAAvB,EAA6B;AAC3BpJ,QAAAA,KAAK,CAACmJ,eAAN,GAAwBY,cAAxB;AACD,OAFD,MAEO;AACLX,QAAAA,cAAc,CAACvB,IAAf,GAAsBkC,cAAtB;AACD;;AAED/J,MAAAA,KAAK,CAACoJ,cAAN,GAAuBW,cAAvB;AACD;;AAED,aAASG,kBAAT,CAA4B5M,cAA5B,EAA4C0C,KAA5C,EAAmDsH,MAAnD,EAA2D6C,SAA3D,EAAsEC,SAAtE,EAAiF5iB,QAAjF,EAA2F;AACzF,cAAQ8f,MAAM,CAAC5jB,GAAf;AACE,aAAKklB,YAAL;AACE;AACE,gBAAI1kB,OAAO,GAAGojB,MAAM,CAACpjB,OAArB;;AAEA,gBAAI,OAAOA,OAAP,KAAmB,UAAvB,EAAmC;AACjC;AACA;AACEgiB,gBAAAA,+BAA+B;AAChC;AAED,kBAAImE,SAAS,GAAGnmB,OAAO,CAAC1G,IAAR,CAAagK,QAAb,EAAuB2iB,SAAvB,EAAkCC,SAAlC,CAAhB;AAEA;AAEEjE,gBAAAA,8BAA8B;AAC/B;AAED,qBAAOkE,SAAP;AACD,aAjBH,CAiBI;;;AAGF,mBAAOnmB,OAAP;AACD;;AAEH,aAAK2kB,aAAL;AACE;AACEvL,YAAAA,cAAc,CAACtW,KAAf,GAAuBsW,cAAc,CAACtW,KAAf,GAAuB,CAACjB,aAAxB,GAAwCZ,UAA/D;AACD;AACH;;AAEA,aAAKwjB,WAAL;AACE;AACE,gBAAIxkB,QAAQ,GAAGmjB,MAAM,CAACpjB,OAAtB;AACA,gBAAIomB,YAAJ;;AAEA,gBAAI,OAAOnmB,QAAP,KAAoB,UAAxB,EAAoC;AAClC;AACA;AACE+hB,gBAAAA,+BAA+B;AAChC;AAEDoE,cAAAA,YAAY,GAAGnmB,QAAQ,CAAC3G,IAAT,CAAcgK,QAAd,EAAwB2iB,SAAxB,EAAmCC,SAAnC,CAAf;AAEA;AAEEjE,gBAAAA,8BAA8B;AAC/B;AACF,aAZD,MAYO;AACL;AACAmE,cAAAA,YAAY,GAAGnmB,QAAf;AACD;;AAED,gBAAImmB,YAAY,KAAK,IAAjB,IAAyBA,YAAY,KAAKxd,SAA9C,EAAyD;AACvD;AACA,qBAAOqd,SAAP;AACD,aAxBH,CAwBI;;;AAGF,mBAAOprB,MAAM,CAAC,EAAD,EAAKorB,SAAL,EAAgBG,YAAhB,CAAb;AACD;;AAEH,aAAK9C,WAAL;AACE;AACEsB,YAAAA,cAAc,GAAG,IAAjB;AACA,mBAAOqB,SAAP;AACD;AAlEL;;AAqEA,aAAOA,SAAP;AACD;;AAED,aAASI,kBAAT,CAA4BjN,cAA5B,EAA4C1f,KAA5C,EAAmD4J,QAAnD,EAA6Dof,WAA7D,EAA0E;AACxE;AACA,UAAI5G,KAAK,GAAG1C,cAAc,CAACmK,WAA3B;AACAqB,MAAAA,cAAc,GAAG,KAAjB;AAEA;AACEE,QAAAA,wBAAwB,GAAGhJ,KAAK,CAAC2H,MAAjC;AACD;AAED,UAAIwB,eAAe,GAAGnJ,KAAK,CAACmJ,eAA5B;AACA,UAAIC,cAAc,GAAGpJ,KAAK,CAACoJ,cAA3B,CAVwE,CAU7B;;AAE3C,UAAIoB,YAAY,GAAGxK,KAAK,CAAC2H,MAAN,CAAaC,OAAhC;;AAEA,UAAI4C,YAAY,KAAK,IAArB,EAA2B;AACzBxK,QAAAA,KAAK,CAAC2H,MAAN,CAAaC,OAAb,GAAuB,IAAvB,CADyB,CACI;AAC7B;;AAEA,YAAIa,iBAAiB,GAAG+B,YAAxB;AACA,YAAI9B,kBAAkB,GAAGD,iBAAiB,CAACZ,IAA3C;AACAY,QAAAA,iBAAiB,CAACZ,IAAlB,GAAyB,IAAzB,CANyB,CAMM;;AAE/B,YAAIuB,cAAc,KAAK,IAAvB,EAA6B;AAC3BD,UAAAA,eAAe,GAAGT,kBAAlB;AACD,SAFD,MAEO;AACLU,UAAAA,cAAc,CAACvB,IAAf,GAAsBa,kBAAtB;AACD;;AAEDU,QAAAA,cAAc,GAAGX,iBAAjB,CAdyB,CAcW;AACpC;AACA;AACA;AACA;;AAEA,YAAInhB,OAAO,GAAGgW,cAAc,CAACxW,SAA7B;;AAEA,YAAIQ,OAAO,KAAK,IAAhB,EAAsB;AACpB;AACA,cAAIiiB,YAAY,GAAGjiB,OAAO,CAACmgB,WAA3B;AACA,cAAIgD,qBAAqB,GAAGlB,YAAY,CAACH,cAAzC;;AAEA,cAAIqB,qBAAqB,KAAKrB,cAA9B,EAA8C;AAC5C,gBAAIqB,qBAAqB,KAAK,IAA9B,EAAoC;AAClClB,cAAAA,YAAY,CAACJ,eAAb,GAA+BT,kBAA/B;AACD,aAFD,MAEO;AACL+B,cAAAA,qBAAqB,CAAC5C,IAAtB,GAA6Ba,kBAA7B;AACD;;AAEDa,YAAAA,YAAY,CAACH,cAAb,GAA8BX,iBAA9B;AACD;AACF;AACF,OAnDuE,CAmDtE;;;AAGF,UAAIU,eAAe,KAAK,IAAxB,EAA8B;AAC5B;AACA,YAAIuB,QAAQ,GAAG1K,KAAK,CAACkJ,SAArB,CAF4B,CAEI;AAChC;;AAEA,YAAIyB,QAAQ,GAAGvc,OAAf;AACA,YAAIwc,YAAY,GAAG,IAAnB;AACA,YAAIC,kBAAkB,GAAG,IAAzB;AACA,YAAIC,iBAAiB,GAAG,IAAxB;AACA,YAAIxD,MAAM,GAAG6B,eAAb;;AAEA,WAAG;AACD,cAAIhV,UAAU,GAAGmT,MAAM,CAACxV,IAAxB;AACA,cAAIiZ,eAAe,GAAGzD,MAAM,CAACpV,SAA7B;;AAEA,cAAI,CAACsB,eAAe,CAACoT,WAAD,EAAczS,UAAd,CAApB,EAA+C;AAC7C;AACA;AACA;AACA,gBAAIqV,KAAK,GAAG;AACVtX,cAAAA,SAAS,EAAE6Y,eADD;AAEVjZ,cAAAA,IAAI,EAAEqC,UAFI;AAGVzQ,cAAAA,GAAG,EAAE4jB,MAAM,CAAC5jB,GAHF;AAIVQ,cAAAA,OAAO,EAAEojB,MAAM,CAACpjB,OAJN;AAKVwb,cAAAA,QAAQ,EAAE4H,MAAM,CAAC5H,QALP;AAMVmI,cAAAA,IAAI,EAAE;AANI,aAAZ;;AASA,gBAAIiD,iBAAiB,KAAK,IAA1B,EAAgC;AAC9BD,cAAAA,kBAAkB,GAAGC,iBAAiB,GAAGtB,KAAzC;AACAoB,cAAAA,YAAY,GAAGF,QAAf;AACD,aAHD,MAGO;AACLI,cAAAA,iBAAiB,GAAGA,iBAAiB,CAACjD,IAAlB,GAAyB2B,KAA7C;AACD,aAlB4C,CAkB3C;;;AAGFmB,YAAAA,QAAQ,GAAGjX,UAAU,CAACiX,QAAD,EAAWxW,UAAX,CAArB;AACD,WAtBD,MAsBO;AACL;AACA,gBAAI2W,iBAAiB,KAAK,IAA1B,EAAgC;AAC9B,kBAAIE,MAAM,GAAG;AACX9Y,gBAAAA,SAAS,EAAE6Y,eADA;AAEX;AACA;AACA;AACAjZ,gBAAAA,IAAI,EAAEzD,MALK;AAMX3K,gBAAAA,GAAG,EAAE4jB,MAAM,CAAC5jB,GAND;AAOXQ,gBAAAA,OAAO,EAAEojB,MAAM,CAACpjB,OAPL;AAQXwb,gBAAAA,QAAQ,EAAE4H,MAAM,CAAC5H,QARN;AASXmI,gBAAAA,IAAI,EAAE;AATK,eAAb;AAWAiD,cAAAA,iBAAiB,GAAGA,iBAAiB,CAACjD,IAAlB,GAAyBmD,MAA7C;AACD,aAfI,CAeH;;;AAGFN,YAAAA,QAAQ,GAAGR,kBAAkB,CAAC5M,cAAD,EAAiB0C,KAAjB,EAAwBsH,MAAxB,EAAgCoD,QAAhC,EAA0C9sB,KAA1C,EAAiD4J,QAAjD,CAA7B;AACA,gBAAIkY,QAAQ,GAAG4H,MAAM,CAAC5H,QAAtB;;AAEA,gBAAIA,QAAQ,KAAK,IAAb,IAAqB;AACzB;AACA4H,YAAAA,MAAM,CAACxV,IAAP,KAAgBzD,MAFhB,EAEwB;AACtBiP,cAAAA,cAAc,CAACtW,KAAf,IAAwB9B,QAAxB;AACA,kBAAImkB,OAAO,GAAGrJ,KAAK,CAACqJ,OAApB;;AAEA,kBAAIA,OAAO,KAAK,IAAhB,EAAsB;AACpBrJ,gBAAAA,KAAK,CAACqJ,OAAN,GAAgB,CAAC/B,MAAD,CAAhB;AACD,eAFD,MAEO;AACL+B,gBAAAA,OAAO,CAACpV,IAAR,CAAaqT,MAAb;AACD;AACF;AACF;;AAEDA,UAAAA,MAAM,GAAGA,MAAM,CAACO,IAAhB;;AAEA,cAAIP,MAAM,KAAK,IAAf,EAAqB;AACnBkD,YAAAA,YAAY,GAAGxK,KAAK,CAAC2H,MAAN,CAAaC,OAA5B;;AAEA,gBAAI4C,YAAY,KAAK,IAArB,EAA2B;AACzB;AACD,aAFD,MAEO;AACL;AACA;AACA,kBAAIS,kBAAkB,GAAGT,YAAzB,CAHK,CAGkC;AACvC;;AAEA,kBAAIU,mBAAmB,GAAGD,kBAAkB,CAACpD,IAA7C;AACAoD,cAAAA,kBAAkB,CAACpD,IAAnB,GAA0B,IAA1B;AACAP,cAAAA,MAAM,GAAG4D,mBAAT;AACAlL,cAAAA,KAAK,CAACoJ,cAAN,GAAuB6B,kBAAvB;AACAjL,cAAAA,KAAK,CAAC2H,MAAN,CAAaC,OAAb,GAAuB,IAAvB;AACD;AACF;AACF,SAjFD,QAiFS,IAjFT;;AAmFA,YAAIkD,iBAAiB,KAAK,IAA1B,EAAgC;AAC9BF,UAAAA,YAAY,GAAGF,QAAf;AACD;;AAED1K,QAAAA,KAAK,CAACkJ,SAAN,GAAkB0B,YAAlB;AACA5K,QAAAA,KAAK,CAACmJ,eAAN,GAAwB0B,kBAAxB;AACA7K,QAAAA,KAAK,CAACoJ,cAAN,GAAuB0B,iBAAvB,CApG4B,CAoGc;AAC1C;AACA;;AAEA,YAAIK,eAAe,GAAGnL,KAAK,CAAC2H,MAAN,CAAaY,WAAnC;;AAEA,YAAI4C,eAAe,KAAK,IAAxB,EAA8B;AAC5B,cAAI5C,WAAW,GAAG4C,eAAlB;;AAEA,aAAG;AACDR,YAAAA,QAAQ,GAAGjX,UAAU,CAACiX,QAAD,EAAWpC,WAAW,CAACzW,IAAvB,CAArB;AACAyW,YAAAA,WAAW,GAAGA,WAAW,CAACV,IAA1B;AACD,WAHD,QAGSU,WAAW,KAAK4C,eAHzB;AAID,SAPD,MAOO,IAAIhC,eAAe,KAAK,IAAxB,EAA8B;AACnC;AACA;AACAnJ,UAAAA,KAAK,CAAC2H,MAAN,CAAapa,KAAb,GAAqBa,OAArB;AACD,SArH2B,CAqH1B;AACF;AACA;AACA;AACA;AACA;AACA;;;AAGAgd,QAAAA,sBAAsB,CAACT,QAAD,CAAtB;AACArN,QAAAA,cAAc,CAAC/P,KAAf,GAAuBod,QAAvB;AACArN,QAAAA,cAAc,CAAC8C,aAAf,GAA+BsK,QAA/B;AACD;;AAED;AACE1B,QAAAA,wBAAwB,GAAG,IAA3B;AACD;AACF;;AAED,aAASqC,YAAT,CAAsB3L,QAAtB,EAAgC9b,OAAhC,EAAyC;AACvC,UAAI,OAAO8b,QAAP,KAAoB,UAAxB,EAAoC;AAClC,cAAM,IAAI9X,KAAJ,CAAU,wEAAwE,eAAe8X,QAAvF,CAAV,CAAN;AACD;;AAEDA,MAAAA,QAAQ,CAACliB,IAAT,CAAcoG,OAAd;AACD;;AAED,aAAS0nB,mCAAT,GAA+C;AAC7CxC,MAAAA,cAAc,GAAG,KAAjB;AACD;;AACD,aAASyC,kCAAT,GAA8C;AAC5C,aAAOzC,cAAP;AACD;;AACD,aAAS0C,iBAAT,CAA2BC,YAA3B,EAAyCC,aAAzC,EAAwDlkB,QAAxD,EAAkE;AAChE;AACA,UAAI6hB,OAAO,GAAGqC,aAAa,CAACrC,OAA5B;AACAqC,MAAAA,aAAa,CAACrC,OAAd,GAAwB,IAAxB;;AAEA,UAAIA,OAAO,KAAK,IAAhB,EAAsB;AACpB,aAAK,IAAIxrB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGwrB,OAAO,CAACltB,MAA5B,EAAoC0B,CAAC,EAArC,EAAyC;AACvC,cAAI8tB,MAAM,GAAGtC,OAAO,CAACxrB,CAAD,CAApB;AACA,cAAI6hB,QAAQ,GAAGiM,MAAM,CAACjM,QAAtB;;AAEA,cAAIA,QAAQ,KAAK,IAAjB,EAAuB;AACrBiM,YAAAA,MAAM,CAACjM,QAAP,GAAkB,IAAlB;AACA2L,YAAAA,YAAY,CAAC3L,QAAD,EAAWlY,QAAX,CAAZ;AACD;AACF;AACF;AACF;;AAED,QAAIokB,oBAAoB,GAAG,EAA3B,CAhvHc,CAgvHiB;AAC/B;;AAEA,QAAIC,eAAe,GAAG,IAAIpwB,KAAK,CAAC4f,SAAV,GAAsByQ,IAA5C;AACA,QAAIC,uCAAJ;AACA,QAAIC,8BAAJ;AACA,QAAIC,mDAAJ;AACA,QAAIC,2CAAJ;AACA,QAAIC,iCAAJ;AACA,QAAIC,2BAAJ;AACA,QAAIC,qBAAJ;AACA,QAAIC,yCAAJ;AACA,QAAIC,sCAAJ;AACA,QAAIC,iCAAJ;AAEA;AACET,MAAAA,uCAAuC,GAAG,IAAI7I,GAAJ,EAA1C;AACA8I,MAAAA,8BAA8B,GAAG,IAAI9I,GAAJ,EAAjC;AACA+I,MAAAA,mDAAmD,GAAG,IAAI/I,GAAJ,EAAtD;AACAgJ,MAAAA,2CAA2C,GAAG,IAAIhJ,GAAJ,EAA9C;AACAoJ,MAAAA,yCAAyC,GAAG,IAAIpJ,GAAJ,EAA5C;AACAiJ,MAAAA,iCAAiC,GAAG,IAAIjJ,GAAJ,EAApC;AACAqJ,MAAAA,sCAAsC,GAAG,IAAIrJ,GAAJ,EAAzC;AACAsJ,MAAAA,iCAAiC,GAAG,IAAItJ,GAAJ,EAApC;AACA,UAAIuJ,wBAAwB,GAAG,IAAIvJ,GAAJ,EAA/B;;AAEAmJ,MAAAA,qBAAqB,GAAG,UAAU3M,QAAV,EAAoBgN,UAApB,EAAgC;AACtD,YAAIhN,QAAQ,KAAK,IAAb,IAAqB,OAAOA,QAAP,KAAoB,UAA7C,EAAyD;AACvD;AACD;;AAED,YAAIthB,GAAG,GAAGsuB,UAAU,GAAG,GAAb,GAAmBhN,QAA7B;;AAEA,YAAI,CAAC+M,wBAAwB,CAACrQ,GAAzB,CAA6Bhe,GAA7B,CAAL,EAAwC;AACtCquB,UAAAA,wBAAwB,CAAC9I,GAAzB,CAA6BvlB,GAA7B;AAEA5B,UAAAA,KAAK,CAAC,qEAAqE,iCAAtE,EAAyGkwB,UAAzG,EAAqHhN,QAArH,CAAL;AACD;AACF,OAZD;;AAcA0M,MAAAA,2BAA2B,GAAG,UAAU5oB,IAAV,EAAgB8mB,YAAhB,EAA8B;AAC1D,YAAIA,YAAY,KAAKxd,SAArB,EAAgC;AAC9B,cAAIqP,aAAa,GAAG1Y,wBAAwB,CAACD,IAAD,CAAxB,IAAkC,WAAtD;;AAEA,cAAI,CAAC2oB,iCAAiC,CAAC/P,GAAlC,CAAsCD,aAAtC,CAAL,EAA2D;AACzDgQ,YAAAA,iCAAiC,CAACxI,GAAlC,CAAsCxH,aAAtC;AAEA3f,YAAAA,KAAK,CAAC,qFAAqF,8BAAtF,EAAsH2f,aAAtH,CAAL;AACD;AACF;AACF,OAVD,CAzBF,CAmCK;AACH;AACA;AACA;AACA;;;AAGAje,MAAAA,MAAM,CAACC,cAAP,CAAsBytB,oBAAtB,EAA4C,sBAA5C,EAAoE;AAClE7tB,QAAAA,UAAU,EAAE,KADsD;AAElEoB,QAAAA,KAAK,EAAE,YAAY;AACjB,gBAAM,IAAIyI,KAAJ,CAAU,qEAAqE,qEAArE,GAA6I,+CAA7I,GAA+L,kEAA/L,GAAoQ,oEAApQ,GAA2U,4BAArV,CAAN;AACD;AAJiE,OAApE;AAMA1J,MAAAA,MAAM,CAAC2X,MAAP,CAAc+V,oBAAd;AACD;;AAED,aAASe,0BAAT,CAAoCrP,cAApC,EAAoDpC,IAApD,EAA0D0R,wBAA1D,EAAoFxC,SAApF,EAA+F;AAC7F,UAAID,SAAS,GAAG7M,cAAc,CAAC8C,aAA/B;AACA,UAAIkK,YAAY,GAAGsC,wBAAwB,CAACxC,SAAD,EAAYD,SAAZ,CAA3C;AAEA;AAEEiC,QAAAA,2BAA2B,CAAClR,IAAD,EAAOoP,YAAP,CAA3B;AACD,OAP4F,CAO3F;;AAGF,UAAIlK,aAAa,GAAGkK,YAAY,KAAK,IAAjB,IAAyBA,YAAY,KAAKxd,SAA1C,GAAsDqd,SAAtD,GAAkEprB,MAAM,CAAC,EAAD,EAAKorB,SAAL,EAAgBG,YAAhB,CAA5F;AACAhN,MAAAA,cAAc,CAAC8C,aAAf,GAA+BA,aAA/B,CAX6F,CAW/C;AAC9C;;AAEA,UAAI9C,cAAc,CAAC/P,KAAf,KAAyBa,OAA7B,EAAsC;AACpC;AACA,YAAIqZ,WAAW,GAAGnK,cAAc,CAACmK,WAAjC;AACAA,QAAAA,WAAW,CAACyB,SAAZ,GAAwB9I,aAAxB;AACD;AACF;;AAED,QAAIyM,qBAAqB,GAAG;AAC1B1lB,MAAAA,SAAS,EAAEA,SADe;AAE1B2lB,MAAAA,eAAe,EAAE,UAAU/W,IAAV,EAAgB7R,OAAhB,EAAyBwb,QAAzB,EAAmC;AAClD,YAAIhb,KAAK,GAAG1F,GAAG,CAAC+W,IAAD,CAAf;AACA,YAAI7D,SAAS,GAAG6a,gBAAgB,EAAhC;AACA,YAAIjb,IAAI,GAAGkb,iBAAiB,CAACtoB,KAAD,CAA5B;AACA,YAAI4iB,MAAM,GAAGC,YAAY,CAACrV,SAAD,EAAYJ,IAAZ,CAAzB;AACAwV,QAAAA,MAAM,CAACpjB,OAAP,GAAiBA,OAAjB;;AAEA,YAAIwb,QAAQ,KAAK5S,SAAb,IAA0B4S,QAAQ,KAAK,IAA3C,EAAiD;AAC/C;AACE2M,YAAAA,qBAAqB,CAAC3M,QAAD,EAAW,UAAX,CAArB;AACD;AAED4H,UAAAA,MAAM,CAAC5H,QAAP,GAAkBA,QAAlB;AACD;;AAED+J,QAAAA,aAAa,CAAC/kB,KAAD,EAAQ4iB,MAAR,CAAb;AACA,YAAIpb,IAAI,GAAG+gB,qBAAqB,CAACvoB,KAAD,EAAQoN,IAAR,EAAcI,SAAd,CAAhC;;AAEA,YAAIhG,IAAI,KAAK,IAAb,EAAmB;AACjByd,UAAAA,mBAAmB,CAACzd,IAAD,EAAOxH,KAAP,EAAcoN,IAAd,CAAnB;AACD;AACF,OAvByB;AAwB1Bob,MAAAA,mBAAmB,EAAE,UAAUnX,IAAV,EAAgB7R,OAAhB,EAAyBwb,QAAzB,EAAmC;AACtD,YAAIhb,KAAK,GAAG1F,GAAG,CAAC+W,IAAD,CAAf;AACA,YAAI7D,SAAS,GAAG6a,gBAAgB,EAAhC;AACA,YAAIjb,IAAI,GAAGkb,iBAAiB,CAACtoB,KAAD,CAA5B;AACA,YAAI4iB,MAAM,GAAGC,YAAY,CAACrV,SAAD,EAAYJ,IAAZ,CAAzB;AACAwV,QAAAA,MAAM,CAAC5jB,GAAP,GAAaklB,YAAb;AACAtB,QAAAA,MAAM,CAACpjB,OAAP,GAAiBA,OAAjB;;AAEA,YAAIwb,QAAQ,KAAK5S,SAAb,IAA0B4S,QAAQ,KAAK,IAA3C,EAAiD;AAC/C;AACE2M,YAAAA,qBAAqB,CAAC3M,QAAD,EAAW,cAAX,CAArB;AACD;AAED4H,UAAAA,MAAM,CAAC5H,QAAP,GAAkBA,QAAlB;AACD;;AAED+J,QAAAA,aAAa,CAAC/kB,KAAD,EAAQ4iB,MAAR,CAAb;AACA,YAAIpb,IAAI,GAAG+gB,qBAAqB,CAACvoB,KAAD,EAAQoN,IAAR,EAAcI,SAAd,CAAhC;;AAEA,YAAIhG,IAAI,KAAK,IAAb,EAAmB;AACjByd,UAAAA,mBAAmB,CAACzd,IAAD,EAAOxH,KAAP,EAAcoN,IAAd,CAAnB;AACD;AACF,OA9CyB;AA+C1Bqb,MAAAA,kBAAkB,EAAE,UAAUpX,IAAV,EAAgB2J,QAAhB,EAA0B;AAC5C,YAAIhb,KAAK,GAAG1F,GAAG,CAAC+W,IAAD,CAAf;AACA,YAAI7D,SAAS,GAAG6a,gBAAgB,EAAhC;AACA,YAAIjb,IAAI,GAAGkb,iBAAiB,CAACtoB,KAAD,CAA5B;AACA,YAAI4iB,MAAM,GAAGC,YAAY,CAACrV,SAAD,EAAYJ,IAAZ,CAAzB;AACAwV,QAAAA,MAAM,CAAC5jB,GAAP,GAAa8jB,WAAb;;AAEA,YAAI9H,QAAQ,KAAK5S,SAAb,IAA0B4S,QAAQ,KAAK,IAA3C,EAAiD;AAC/C;AACE2M,YAAAA,qBAAqB,CAAC3M,QAAD,EAAW,aAAX,CAArB;AACD;AAED4H,UAAAA,MAAM,CAAC5H,QAAP,GAAkBA,QAAlB;AACD;;AAED+J,QAAAA,aAAa,CAAC/kB,KAAD,EAAQ4iB,MAAR,CAAb;AACA,YAAIpb,IAAI,GAAG+gB,qBAAqB,CAACvoB,KAAD,EAAQoN,IAAR,EAAcI,SAAd,CAAhC;;AAEA,YAAIhG,IAAI,KAAK,IAAb,EAAmB;AACjByd,UAAAA,mBAAmB,CAACzd,IAAD,EAAOxH,KAAP,EAAcoN,IAAd,CAAnB;AACD;AACF;AApEyB,KAA5B;;AAuEA,aAASsb,0BAAT,CAAoC9P,cAApC,EAAoDpC,IAApD,EAA0DzD,QAA1D,EAAoEC,QAApE,EAA8E2V,QAA9E,EAAwF3C,QAAxF,EAAkG4C,WAAlG,EAA+G;AAC7G,UAAI9lB,QAAQ,GAAG8V,cAAc,CAAC7V,SAA9B;;AAEA,UAAI,OAAOD,QAAQ,CAAC+lB,qBAAhB,KAA0C,UAA9C,EAA0D;AACxD,YAAIC,YAAY,GAAGhmB,QAAQ,CAAC+lB,qBAAT,CAA+B7V,QAA/B,EAAyCgT,QAAzC,EAAmD4C,WAAnD,CAAnB;AAEA;AAEE,cAAIE,YAAY,KAAK1gB,SAArB,EAAgC;AAC9BtQ,YAAAA,KAAK,CAAC,iEAAiE,mDAAlE,EAAuHiH,wBAAwB,CAACyX,IAAD,CAAxB,IAAkC,WAAzJ,CAAL;AACD;AACF;AAED,eAAOsS,YAAP;AACD;;AAED,UAAItS,IAAI,CAAC5d,SAAL,IAAkB4d,IAAI,CAAC5d,SAAL,CAAemwB,oBAArC,EAA2D;AACzD,eAAO,CAAC/M,YAAY,CAACjJ,QAAD,EAAWC,QAAX,CAAb,IAAqC,CAACgJ,YAAY,CAAC2M,QAAD,EAAW3C,QAAX,CAAzD;AACD;;AAED,aAAO,IAAP;AACD;;AAED,aAASgD,kBAAT,CAA4BpQ,cAA5B,EAA4CpC,IAA5C,EAAkDxD,QAAlD,EAA4D;AAC1D,UAAIlQ,QAAQ,GAAG8V,cAAc,CAAC7V,SAA9B;AAEA;AACE,YAAInE,IAAI,GAAGG,wBAAwB,CAACyX,IAAD,CAAxB,IAAkC,WAA7C;AACA,YAAIyS,aAAa,GAAGnmB,QAAQ,CAACzD,MAA7B;;AAEA,YAAI,CAAC4pB,aAAL,EAAoB;AAClB,cAAIzS,IAAI,CAAC5d,SAAL,IAAkB,OAAO4d,IAAI,CAAC5d,SAAL,CAAeyG,MAAtB,KAAiC,UAAvD,EAAmE;AACjEvH,YAAAA,KAAK,CAAC,iEAAiE,uEAAlE,EAA2I8G,IAA3I,CAAL;AACD,WAFD,MAEO;AACL9G,YAAAA,KAAK,CAAC,iEAAiE,sDAAlE,EAA0H8G,IAA1H,CAAL;AACD;AACF;;AAED,YAAIkE,QAAQ,CAAComB,eAAT,IAA4B,CAACpmB,QAAQ,CAAComB,eAAT,CAAyBC,oBAAtD,IAA8E,CAACrmB,QAAQ,CAACsmB,KAA5F,EAAmG;AACjGtxB,UAAAA,KAAK,CAAC,kEAAkE,sEAAlE,GAA2I,kDAA5I,EAAgM8G,IAAhM,CAAL;AACD;;AAED,YAAIkE,QAAQ,CAACumB,eAAT,IAA4B,CAACvmB,QAAQ,CAACumB,eAAT,CAAyBF,oBAA1D,EAAgF;AAC9ErxB,UAAAA,KAAK,CAAC,kEAAkE,sEAAlE,GAA2I,uDAA5I,EAAqM8G,IAArM,CAAL;AACD;;AAED,YAAIkE,QAAQ,CAACwmB,SAAb,EAAwB;AACtBxxB,UAAAA,KAAK,CAAC,uEAAuE,uCAAxE,EAAiH8G,IAAjH,CAAL;AACD;;AAED,YAAIkE,QAAQ,CAACymB,WAAb,EAA0B;AACxBzxB,UAAAA,KAAK,CAAC,yEAAyE,yCAA1E,EAAqH8G,IAArH,CAAL;AACD;;AAED;AACE,cAAIkE,QAAQ,CAACuW,YAAb,EAA2B;AACzBvhB,YAAAA,KAAK,CAAC,0EAA0E,0CAA3E,EAAuH8G,IAAvH,CAAL;AACD;;AAED,cAAI4X,IAAI,CAAC+S,WAAL,IAAoB/S,IAAI,CAAC6C,YAAzB,IAAyC,CAACwO,sCAAsC,CAACnQ,GAAvC,CAA2ClB,IAA3C,CAA9C,EAAgG;AAC9FqR,YAAAA,sCAAsC,CAAC5I,GAAvC,CAA2CzI,IAA3C;AAEA1e,YAAAA,KAAK,CAAC,sEAAsE,mDAAvE,EAA4H8G,IAA5H,CAAL;AACD;AACF;;AAED,YAAI,OAAOkE,QAAQ,CAAC0mB,qBAAhB,KAA0C,UAA9C,EAA0D;AACxD1xB,UAAAA,KAAK,CAAC,4BAA4B,iEAA5B,GAAgG,4DAAhG,GAA+J,6BAAhK,EAA+L8G,IAA/L,CAAL;AACD;;AAED,YAAI4X,IAAI,CAAC5d,SAAL,IAAkB4d,IAAI,CAAC5d,SAAL,CAAemwB,oBAAjC,IAAyD,OAAOjmB,QAAQ,CAAC+lB,qBAAhB,KAA0C,WAAvG,EAAoH;AAClH/wB,UAAAA,KAAK,CAAC,qDAAqD,+EAArD,GAAuI,iEAAxI,EAA2MiH,wBAAwB,CAACyX,IAAD,CAAxB,IAAkC,kBAA7O,CAAL;AACD;;AAED,YAAI,OAAO1T,QAAQ,CAAC2mB,mBAAhB,KAAwC,UAA5C,EAAwD;AACtD3xB,UAAAA,KAAK,CAAC,4BAA4B,gEAA5B,GAA+F,sCAAhG,EAAwI8G,IAAxI,CAAL;AACD;;AAED,YAAI,OAAOkE,QAAQ,CAAC4mB,wBAAhB,KAA6C,UAAjD,EAA6D;AAC3D5xB,UAAAA,KAAK,CAAC,4BAA4B,qEAA5B,GAAoG,kEAApG,GAAyK,iEAAzK,GAA6O,yFAA9O,EAAyU8G,IAAzU,CAAL;AACD;;AAED,YAAI,OAAOkE,QAAQ,CAAC6mB,yBAAhB,KAA8C,UAAlD,EAA8D;AAC5D7xB,UAAAA,KAAK,CAAC,4BAA4B,wEAA7B,EAAuG8G,IAAvG,CAAL;AACD;;AAED,YAAI,OAAOkE,QAAQ,CAAC8mB,gCAAhB,KAAqD,UAAzD,EAAqE;AACnE9xB,UAAAA,KAAK,CAAC,4BAA4B,sFAA7B,EAAqH8G,IAArH,CAAL;AACD;;AAED,YAAIirB,eAAe,GAAG/mB,QAAQ,CAAC5J,KAAT,KAAmB8Z,QAAzC;;AAEA,YAAIlQ,QAAQ,CAAC5J,KAAT,KAAmBkP,SAAnB,IAAgCyhB,eAApC,EAAqD;AACnD/xB,UAAAA,KAAK,CAAC,8DAA8D,iEAA/D,EAAkI8G,IAAlI,EAAwIA,IAAxI,CAAL;AACD;;AAED,YAAIkE,QAAQ,CAACke,YAAb,EAA2B;AACzBlpB,UAAAA,KAAK,CAAC,6FAA6F,2DAA9F,EAA2J8G,IAA3J,EAAiKA,IAAjK,CAAL;AACD;;AAED,YAAI,OAAOkE,QAAQ,CAACgnB,uBAAhB,KAA4C,UAA5C,IAA0D,OAAOhnB,QAAQ,CAACinB,kBAAhB,KAAuC,UAAjG,IAA+G,CAACxC,mDAAmD,CAAC7P,GAApD,CAAwDlB,IAAxD,CAApH,EAAmL;AACjL+Q,UAAAA,mDAAmD,CAACtI,GAApD,CAAwDzI,IAAxD;AAEA1e,UAAAA,KAAK,CAAC,6EAA6E,wDAA9E,EAAwIiH,wBAAwB,CAACyX,IAAD,CAAhK,CAAL;AACD;;AAED,YAAI,OAAO1T,QAAQ,CAAColB,wBAAhB,KAA6C,UAAjD,EAA6D;AAC3DpwB,UAAAA,KAAK,CAAC,qEAAqE,8DAAtE,EAAsI8G,IAAtI,CAAL;AACD;;AAED,YAAI,OAAOkE,QAAQ,CAACknB,wBAAhB,KAA6C,UAAjD,EAA6D;AAC3DlyB,UAAAA,KAAK,CAAC,qEAAqE,8DAAtE,EAAsI8G,IAAtI,CAAL;AACD;;AAED,YAAI,OAAO4X,IAAI,CAACsT,uBAAZ,KAAwC,UAA5C,EAAwD;AACtDhyB,UAAAA,KAAK,CAAC,iEAAiE,iEAAlE,EAAqI8G,IAArI,CAAL;AACD;;AAED,YAAIqrB,MAAM,GAAGnnB,QAAQ,CAACsmB,KAAtB;;AAEA,YAAIa,MAAM,KAAK,OAAOA,MAAP,KAAkB,QAAlB,IAA8B9lB,OAAO,CAAC8lB,MAAD,CAA1C,CAAV,EAA+D;AAC7DnyB,UAAAA,KAAK,CAAC,4CAAD,EAA+C8G,IAA/C,CAAL;AACD;;AAED,YAAI,OAAOkE,QAAQ,CAACgX,eAAhB,KAAoC,UAApC,IAAkD,OAAOtD,IAAI,CAAC+C,iBAAZ,KAAkC,QAAxF,EAAkG;AAChGzhB,UAAAA,KAAK,CAAC,yEAAyE,wBAA1E,EAAoG8G,IAApG,CAAL;AACD;AACF;AACF;;AAED,aAASsrB,kBAAT,CAA4BtR,cAA5B,EAA4C9V,QAA5C,EAAsD;AACpDA,MAAAA,QAAQ,CAACqnB,OAAT,GAAmBhC,qBAAnB;AACAvP,MAAAA,cAAc,CAAC7V,SAAf,GAA2BD,QAA3B,CAFoD,CAEf;;AAErCtI,MAAAA,GAAG,CAACsI,QAAD,EAAW8V,cAAX,CAAH;AAEA;AACE9V,QAAAA,QAAQ,CAACsnB,sBAAT,GAAkClD,oBAAlC;AACD;AACF;;AAED,aAASmD,sBAAT,CAAgCzR,cAAhC,EAAgDpC,IAAhD,EAAsDtd,KAAtD,EAA6D;AAC3D,UAAIoxB,uBAAuB,GAAG,KAA9B;AACA,UAAItR,eAAe,GAAGT,kBAAtB;AACA,UAAIrZ,OAAO,GAAGqZ,kBAAd;AACA,UAAIgR,WAAW,GAAG/S,IAAI,CAAC+S,WAAvB;AAEA;AACE,YAAI,iBAAiB/S,IAArB,EAA2B;AACzB,cAAI+T,OAAO,GAAG;AACdhB,UAAAA,WAAW,KAAK,IAAhB,IAAwBA,WAAW,KAAKnhB,SAAhB,IAA6BmhB,WAAW,CAACtqB,QAAZ,KAAyB7B,kBAAtD,IAA4EmsB,WAAW,CAACnqB,QAAZ,KAAyBgJ,SAD7H,CADyB,CAE+G;;AAExI,cAAI,CAACmiB,OAAD,IAAY,CAACzC,iCAAiC,CAACpQ,GAAlC,CAAsClB,IAAtC,CAAjB,EAA8D;AAC5DsR,YAAAA,iCAAiC,CAAC7I,GAAlC,CAAsCzI,IAAtC;AACA,gBAAIgU,QAAQ,GAAG,EAAf;;AAEA,gBAAIjB,WAAW,KAAKnhB,SAApB,EAA+B;AAC7BoiB,cAAAA,QAAQ,GAAG,uCAAuC,0EAAvC,GAAoH,wDAApH,GAA+K,yDAA1L;AACD,aAFD,MAEO,IAAI,OAAOjB,WAAP,KAAuB,QAA3B,EAAqC;AAC1CiB,cAAAA,QAAQ,GAAG,8BAA8B,OAAOjB,WAArC,GAAmD,GAA9D;AACD,aAFM,MAEA,IAAIA,WAAW,CAACtqB,QAAZ,KAAyB9B,mBAA7B,EAAkD;AACvDqtB,cAAAA,QAAQ,GAAG,0DAAX;AACD,aAFM,MAEA,IAAIjB,WAAW,CAACnqB,QAAZ,KAAyBgJ,SAA7B,EAAwC;AAC7C;AACAoiB,cAAAA,QAAQ,GAAG,0DAAX;AACD,aAHM,MAGA;AACLA,cAAAA,QAAQ,GAAG,iDAAiDhxB,MAAM,CAACW,IAAP,CAAYovB,WAAZ,EAAyBvL,IAAzB,CAA8B,IAA9B,CAAjD,GAAuF,IAAlG;AACD;;AAEDlmB,YAAAA,KAAK,CAAC,wCAAwC,qFAAzC,EAAgIiH,wBAAwB,CAACyX,IAAD,CAAxB,IAAkC,WAAlK,EAA+KgU,QAA/K,CAAL;AACD;AACF;AACF;;AAED,UAAI,OAAOjB,WAAP,KAAuB,QAAvB,IAAmCA,WAAW,KAAK,IAAvD,EAA6D;AAC3DrqB,QAAAA,OAAO,GAAGokB,WAAW,CAACiG,WAAD,CAArB;AACD,OAFD,MAEO;AACLvQ,QAAAA,eAAe,GAAGL,kBAAkB,CAACC,cAAD,EAAiBpC,IAAjB,EAAuB,IAAvB,CAApC;AACA,YAAI6C,YAAY,GAAG7C,IAAI,CAAC6C,YAAxB;AACAiR,QAAAA,uBAAuB,GAAGjR,YAAY,KAAK,IAAjB,IAAyBA,YAAY,KAAKjR,SAApE;AACAlJ,QAAAA,OAAO,GAAGorB,uBAAuB,GAAGlR,gBAAgB,CAACR,cAAD,EAAiBI,eAAjB,CAAnB,GAAuDT,kBAAxF;AACD;;AAED,UAAIzV,QAAQ,GAAG,IAAI0T,IAAJ,CAAStd,KAAT,EAAgBgG,OAAhB,CAAf,CA1C2D,CA0ClB;;AAEzC,UAAIkqB,KAAK,GAAGxQ,cAAc,CAAC8C,aAAf,GAA+B5Y,QAAQ,CAACsmB,KAAT,KAAmB,IAAnB,IAA2BtmB,QAAQ,CAACsmB,KAAT,KAAmBhhB,SAA9C,GAA0DtF,QAAQ,CAACsmB,KAAnE,GAA2E,IAAtH;AACAc,MAAAA,kBAAkB,CAACtR,cAAD,EAAiB9V,QAAjB,CAAlB;AAEA;AACE,YAAI,OAAO0T,IAAI,CAAC0R,wBAAZ,KAAyC,UAAzC,IAAuDkB,KAAK,KAAK,IAArE,EAA2E;AACzE,cAAI3R,aAAa,GAAG1Y,wBAAwB,CAACyX,IAAD,CAAxB,IAAkC,WAAtD;;AAEA,cAAI,CAAC8Q,8BAA8B,CAAC5P,GAA/B,CAAmCD,aAAnC,CAAL,EAAwD;AACtD6P,YAAAA,8BAA8B,CAACrI,GAA/B,CAAmCxH,aAAnC;AAEA3f,YAAAA,KAAK,CAAC,mEAAmE,oEAAnE,GAA0I,kEAA1I,GAA+M,iFAAhN,EAAmS2f,aAAnS,EAAkT3U,QAAQ,CAACsmB,KAAT,KAAmB,IAAnB,GAA0B,MAA1B,GAAmC,WAArV,EAAkW3R,aAAlW,CAAL;AACD;AACF,SATH,CASI;AACF;AACA;;;AAGA,YAAI,OAAOjB,IAAI,CAAC0R,wBAAZ,KAAyC,UAAzC,IAAuD,OAAOplB,QAAQ,CAACgnB,uBAAhB,KAA4C,UAAvG,EAAmH;AACjH,cAAIW,kBAAkB,GAAG,IAAzB;AACA,cAAIC,yBAAyB,GAAG,IAAhC;AACA,cAAIC,mBAAmB,GAAG,IAA1B;;AAEA,cAAI,OAAO7nB,QAAQ,CAAC2b,kBAAhB,KAAuC,UAAvC,IAAqD3b,QAAQ,CAAC2b,kBAAT,CAA4BC,4BAA5B,KAA6D,IAAtH,EAA4H;AAC1H+L,YAAAA,kBAAkB,GAAG,oBAArB;AACD,WAFD,MAEO,IAAI,OAAO3nB,QAAQ,CAAC6b,yBAAhB,KAA8C,UAAlD,EAA8D;AACnE8L,YAAAA,kBAAkB,GAAG,2BAArB;AACD;;AAED,cAAI,OAAO3nB,QAAQ,CAAC8b,yBAAhB,KAA8C,UAA9C,IAA4D9b,QAAQ,CAAC8b,yBAAT,CAAmCF,4BAAnC,KAAoE,IAApI,EAA0I;AACxIgM,YAAAA,yBAAyB,GAAG,2BAA5B;AACD,WAFD,MAEO,IAAI,OAAO5nB,QAAQ,CAAC+b,gCAAhB,KAAqD,UAAzD,EAAqE;AAC1E6L,YAAAA,yBAAyB,GAAG,kCAA5B;AACD;;AAED,cAAI,OAAO5nB,QAAQ,CAACgc,mBAAhB,KAAwC,UAAxC,IAAsDhc,QAAQ,CAACgc,mBAAT,CAA6BJ,4BAA7B,KAA8D,IAAxH,EAA8H;AAC5HiM,YAAAA,mBAAmB,GAAG,qBAAtB;AACD,WAFD,MAEO,IAAI,OAAO7nB,QAAQ,CAACic,0BAAhB,KAA+C,UAAnD,EAA+D;AACpE4L,YAAAA,mBAAmB,GAAG,4BAAtB;AACD;;AAED,cAAIF,kBAAkB,KAAK,IAAvB,IAA+BC,yBAAyB,KAAK,IAA7D,IAAqEC,mBAAmB,KAAK,IAAjG,EAAuG;AACrG,gBAAIC,cAAc,GAAG7rB,wBAAwB,CAACyX,IAAD,CAAxB,IAAkC,WAAvD;;AAEA,gBAAIqU,UAAU,GAAG,OAAOrU,IAAI,CAAC0R,wBAAZ,KAAyC,UAAzC,GAAsD,4BAAtD,GAAqF,2BAAtG;;AAEA,gBAAI,CAACV,2CAA2C,CAAC9P,GAA5C,CAAgDkT,cAAhD,CAAL,EAAsE;AACpEpD,cAAAA,2CAA2C,CAACvI,GAA5C,CAAgD2L,cAAhD;AAEA9yB,cAAAA,KAAK,CAAC,6FAA6F,yEAA7F,GAAyK,+EAAzK,GAA2P,sDAA5P,EAAoT8yB,cAApT,EAAoUC,UAApU,EAAgVJ,kBAAkB,KAAK,IAAvB,GAA8B,SAASA,kBAAvC,GAA4D,EAA5Y,EAAgZC,yBAAyB,KAAK,IAA9B,GAAqC,SAASA,yBAA9C,GAA0E,EAA1d,EAA8dC,mBAAmB,KAAK,IAAxB,GAA+B,SAASA,mBAAxC,GAA8D,EAA5hB,CAAL;AACD;AACF;AACF;AACF,OAhG0D,CAgGzD;AACF;;AAGA,UAAIL,uBAAJ,EAA6B;AAC3BvR,QAAAA,YAAY,CAACH,cAAD,EAAiBI,eAAjB,EAAkC9Z,OAAlC,CAAZ;AACD;;AAED,aAAO4D,QAAP;AACD;;AAED,aAASgoB,sBAAT,CAAgClS,cAAhC,EAAgD9V,QAAhD,EAA0D;AACxD,UAAI6lB,QAAQ,GAAG7lB,QAAQ,CAACsmB,KAAxB;;AAEA,UAAI,OAAOtmB,QAAQ,CAAC2b,kBAAhB,KAAuC,UAA3C,EAAuD;AACrD3b,QAAAA,QAAQ,CAAC2b,kBAAT;AACD;;AAED,UAAI,OAAO3b,QAAQ,CAAC6b,yBAAhB,KAA8C,UAAlD,EAA8D;AAC5D7b,QAAAA,QAAQ,CAAC6b,yBAAT;AACD;;AAED,UAAIgK,QAAQ,KAAK7lB,QAAQ,CAACsmB,KAA1B,EAAiC;AAC/B;AACEtxB,UAAAA,KAAK,CAAC,kEAAkE,0CAAlE,GAA+G,qCAAhH,EAAuJiI,yBAAyB,CAAC6Y,cAAD,CAAzB,IAA6C,WAApM,CAAL;AACD;AAEDuP,QAAAA,qBAAqB,CAACK,mBAAtB,CAA0C1lB,QAA1C,EAAoDA,QAAQ,CAACsmB,KAA7D,EAAoE,IAApE;AACD;AACF;;AAED,aAAS2B,6BAAT,CAAuCnS,cAAvC,EAAuD9V,QAAvD,EAAiEkQ,QAAjE,EAA2E4V,WAA3E,EAAwF;AACtF,UAAID,QAAQ,GAAG7lB,QAAQ,CAACsmB,KAAxB;;AAEA,UAAI,OAAOtmB,QAAQ,CAAC8b,yBAAhB,KAA8C,UAAlD,EAA8D;AAC5D9b,QAAAA,QAAQ,CAAC8b,yBAAT,CAAmC5L,QAAnC,EAA6C4V,WAA7C;AACD;;AAED,UAAI,OAAO9lB,QAAQ,CAAC+b,gCAAhB,KAAqD,UAAzD,EAAqE;AACnE/b,QAAAA,QAAQ,CAAC+b,gCAAT,CAA0C7L,QAA1C,EAAoD4V,WAApD;AACD;;AAED,UAAI9lB,QAAQ,CAACsmB,KAAT,KAAmBT,QAAvB,EAAiC;AAC/B;AACE,cAAIlR,aAAa,GAAG1X,yBAAyB,CAAC6Y,cAAD,CAAzB,IAA6C,WAAjE;;AAEA,cAAI,CAACyO,uCAAuC,CAAC3P,GAAxC,CAA4CD,aAA5C,CAAL,EAAiE;AAC/D4P,YAAAA,uCAAuC,CAACpI,GAAxC,CAA4CxH,aAA5C;AAEA3f,YAAAA,KAAK,CAAC,2DAA2D,wDAA3D,GAAsH,qCAAvH,EAA8J2f,aAA9J,CAAL;AACD;AACF;AAED0Q,QAAAA,qBAAqB,CAACK,mBAAtB,CAA0C1lB,QAA1C,EAAoDA,QAAQ,CAACsmB,KAA7D,EAAoE,IAApE;AACD;AACF,KAlrIa,CAkrIZ;;;AAGF,aAAS4B,kBAAT,CAA4BpS,cAA5B,EAA4CpC,IAA5C,EAAkDxD,QAAlD,EAA4DkP,WAA5D,EAAyE;AACvE;AACE8G,QAAAA,kBAAkB,CAACpQ,cAAD,EAAiBpC,IAAjB,EAAuBxD,QAAvB,CAAlB;AACD;AAED,UAAIlQ,QAAQ,GAAG8V,cAAc,CAAC7V,SAA9B;AACAD,MAAAA,QAAQ,CAAC5J,KAAT,GAAiB8Z,QAAjB;AACAlQ,MAAAA,QAAQ,CAACsmB,KAAT,GAAiBxQ,cAAc,CAAC8C,aAAhC;AACA5Y,MAAAA,QAAQ,CAACskB,IAAT,GAAgBD,eAAhB;AACA5C,MAAAA,qBAAqB,CAAC3L,cAAD,CAArB;AACA,UAAI2Q,WAAW,GAAG/S,IAAI,CAAC+S,WAAvB;;AAEA,UAAI,OAAOA,WAAP,KAAuB,QAAvB,IAAmCA,WAAW,KAAK,IAAvD,EAA6D;AAC3DzmB,QAAAA,QAAQ,CAAC5D,OAAT,GAAmBokB,WAAW,CAACiG,WAAD,CAA9B;AACD,OAFD,MAEO;AACL,YAAIvQ,eAAe,GAAGL,kBAAkB,CAACC,cAAD,EAAiBpC,IAAjB,EAAuB,IAAvB,CAAxC;AACA1T,QAAAA,QAAQ,CAAC5D,OAAT,GAAmBka,gBAAgB,CAACR,cAAD,EAAiBI,eAAjB,CAAnC;AACD;;AAED;AACE,YAAIlW,QAAQ,CAACsmB,KAAT,KAAmBpW,QAAvB,EAAiC;AAC/B,cAAIyE,aAAa,GAAG1Y,wBAAwB,CAACyX,IAAD,CAAxB,IAAkC,WAAtD;;AAEA,cAAI,CAACoR,yCAAyC,CAAClQ,GAA1C,CAA8CD,aAA9C,CAAL,EAAmE;AACjEmQ,YAAAA,yCAAyC,CAAC3I,GAA1C,CAA8CxH,aAA9C;AAEA3f,YAAAA,KAAK,CAAC,iEAAiE,wDAAjE,GAA4H,oDAA7H,EAAmL2f,aAAnL,CAAL;AACD;AACF;;AAED,YAAImB,cAAc,CAAC+E,IAAf,GAAsBxU,gBAA1B,EAA4C;AAC1CgU,UAAAA,uBAAuB,CAACG,0BAAxB,CAAmD1E,cAAnD,EAAmE9V,QAAnE;AACD;;AAED;AACEqa,UAAAA,uBAAuB,CAACC,6BAAxB,CAAsDxE,cAAtD,EAAsE9V,QAAtE;AACD;AACF;AAEDA,MAAAA,QAAQ,CAACsmB,KAAT,GAAiBxQ,cAAc,CAAC8C,aAAhC;AACA,UAAIwM,wBAAwB,GAAG1R,IAAI,CAAC0R,wBAApC;;AAEA,UAAI,OAAOA,wBAAP,KAAoC,UAAxC,EAAoD;AAClDD,QAAAA,0BAA0B,CAACrP,cAAD,EAAiBpC,IAAjB,EAAuB0R,wBAAvB,EAAiDlV,QAAjD,CAA1B;AACAlQ,QAAAA,QAAQ,CAACsmB,KAAT,GAAiBxQ,cAAc,CAAC8C,aAAhC;AACD,OA7CsE,CA6CrE;AACF;;;AAGA,UAAI,OAAOlF,IAAI,CAAC0R,wBAAZ,KAAyC,UAAzC,IAAuD,OAAOplB,QAAQ,CAACgnB,uBAAhB,KAA4C,UAAnG,KAAkH,OAAOhnB,QAAQ,CAAC6b,yBAAhB,KAA8C,UAA9C,IAA4D,OAAO7b,QAAQ,CAAC2b,kBAAhB,KAAuC,UAArN,CAAJ,EAAsO;AACpOqM,QAAAA,sBAAsB,CAAClS,cAAD,EAAiB9V,QAAjB,CAAtB,CADoO,CAClL;AAClD;;AAEA+iB,QAAAA,kBAAkB,CAACjN,cAAD,EAAiB5F,QAAjB,EAA2BlQ,QAA3B,EAAqCof,WAArC,CAAlB;AACApf,QAAAA,QAAQ,CAACsmB,KAAT,GAAiBxQ,cAAc,CAAC8C,aAAhC;AACD;;AAED,UAAI,OAAO5Y,QAAQ,CAACmoB,iBAAhB,KAAsC,UAA1C,EAAsD;AACpD,YAAIC,UAAU,GAAG9qB,MAAjB;AAEAwY,QAAAA,cAAc,CAACtW,KAAf,IAAwB4oB,UAAxB;AACD;AACF;;AAED,aAASC,wBAAT,CAAkCvS,cAAlC,EAAkDpC,IAAlD,EAAwDxD,QAAxD,EAAkEkP,WAAlE,EAA+E;AAC7E,UAAIpf,QAAQ,GAAG8V,cAAc,CAAC7V,SAA9B;AACA,UAAIgQ,QAAQ,GAAG6F,cAAc,CAACwS,aAA9B;AACAtoB,MAAAA,QAAQ,CAAC5J,KAAT,GAAiB6Z,QAAjB;AACA,UAAIsY,UAAU,GAAGvoB,QAAQ,CAAC5D,OAA1B;AACA,UAAIqqB,WAAW,GAAG/S,IAAI,CAAC+S,WAAvB;AACA,UAAIX,WAAW,GAAGrQ,kBAAlB;;AAEA,UAAI,OAAOgR,WAAP,KAAuB,QAAvB,IAAmCA,WAAW,KAAK,IAAvD,EAA6D;AAC3DX,QAAAA,WAAW,GAAGtF,WAAW,CAACiG,WAAD,CAAzB;AACD,OAFD,MAEO;AACL,YAAI+B,yBAAyB,GAAG3S,kBAAkB,CAACC,cAAD,EAAiBpC,IAAjB,EAAuB,IAAvB,CAAlD;AACAoS,QAAAA,WAAW,GAAGxP,gBAAgB,CAACR,cAAD,EAAiB0S,yBAAjB,CAA9B;AACD;;AAED,UAAIpD,wBAAwB,GAAG1R,IAAI,CAAC0R,wBAApC;AACA,UAAIqD,gBAAgB,GAAG,OAAOrD,wBAAP,KAAoC,UAApC,IAAkD,OAAOplB,QAAQ,CAACgnB,uBAAhB,KAA4C,UAArH,CAhB6E,CAgBoD;AACjI;AACA;AACA;AACA;;AAEA,UAAI,CAACyB,gBAAD,KAAsB,OAAOzoB,QAAQ,CAAC+b,gCAAhB,KAAqD,UAArD,IAAmE,OAAO/b,QAAQ,CAAC8b,yBAAhB,KAA8C,UAAvI,CAAJ,EAAwJ;AACtJ,YAAI7L,QAAQ,KAAKC,QAAb,IAAyBqY,UAAU,KAAKzC,WAA5C,EAAyD;AACvDmC,UAAAA,6BAA6B,CAACnS,cAAD,EAAiB9V,QAAjB,EAA2BkQ,QAA3B,EAAqC4V,WAArC,CAA7B;AACD;AACF;;AAEDhC,MAAAA,mCAAmC;AACnC,UAAI+B,QAAQ,GAAG/P,cAAc,CAAC8C,aAA9B;AACA,UAAIsK,QAAQ,GAAGljB,QAAQ,CAACsmB,KAAT,GAAiBT,QAAhC;AACA9C,MAAAA,kBAAkB,CAACjN,cAAD,EAAiB5F,QAAjB,EAA2BlQ,QAA3B,EAAqCof,WAArC,CAAlB;AACA8D,MAAAA,QAAQ,GAAGpN,cAAc,CAAC8C,aAA1B;;AAEA,UAAI3I,QAAQ,KAAKC,QAAb,IAAyB2V,QAAQ,KAAK3C,QAAtC,IAAkD,CAAC1M,iBAAiB,EAApE,IAA0E,CAACuN,kCAAkC,EAAjH,EAAqH;AACnH;AACA;AACA,YAAI,OAAO/jB,QAAQ,CAACmoB,iBAAhB,KAAsC,UAA1C,EAAsD;AACpD,cAAIC,UAAU,GAAG9qB,MAAjB;AAEAwY,UAAAA,cAAc,CAACtW,KAAf,IAAwB4oB,UAAxB;AACD;;AAED,eAAO,KAAP;AACD;;AAED,UAAI,OAAOhD,wBAAP,KAAoC,UAAxC,EAAoD;AAClDD,QAAAA,0BAA0B,CAACrP,cAAD,EAAiBpC,IAAjB,EAAuB0R,wBAAvB,EAAiDlV,QAAjD,CAA1B;AACAgT,QAAAA,QAAQ,GAAGpN,cAAc,CAAC8C,aAA1B;AACD;;AAED,UAAIoN,YAAY,GAAGjC,kCAAkC,MAAM6B,0BAA0B,CAAC9P,cAAD,EAAiBpC,IAAjB,EAAuBzD,QAAvB,EAAiCC,QAAjC,EAA2C2V,QAA3C,EAAqD3C,QAArD,EAA+D4C,WAA/D,CAArF;;AAEA,UAAIE,YAAJ,EAAkB;AAChB;AACA;AACA,YAAI,CAACyC,gBAAD,KAAsB,OAAOzoB,QAAQ,CAAC6b,yBAAhB,KAA8C,UAA9C,IAA4D,OAAO7b,QAAQ,CAAC2b,kBAAhB,KAAuC,UAAzH,CAAJ,EAA0I;AACxI,cAAI,OAAO3b,QAAQ,CAAC2b,kBAAhB,KAAuC,UAA3C,EAAuD;AACrD3b,YAAAA,QAAQ,CAAC2b,kBAAT;AACD;;AAED,cAAI,OAAO3b,QAAQ,CAAC6b,yBAAhB,KAA8C,UAAlD,EAA8D;AAC5D7b,YAAAA,QAAQ,CAAC6b,yBAAT;AACD;AACF;;AAED,YAAI,OAAO7b,QAAQ,CAACmoB,iBAAhB,KAAsC,UAA1C,EAAsD;AACpD,cAAIO,WAAW,GAAGprB,MAAlB;AAEAwY,UAAAA,cAAc,CAACtW,KAAf,IAAwBkpB,WAAxB;AACD;AACF,OAlBD,MAkBO;AACL;AACA;AACA,YAAI,OAAO1oB,QAAQ,CAACmoB,iBAAhB,KAAsC,UAA1C,EAAsD;AACpD,cAAIQ,YAAY,GAAGrrB,MAAnB;AAEAwY,UAAAA,cAAc,CAACtW,KAAf,IAAwBmpB,YAAxB;AACD,SAPI,CAOH;AACF;;;AAGA7S,QAAAA,cAAc,CAACwS,aAAf,GAA+BpY,QAA/B;AACA4F,QAAAA,cAAc,CAAC8C,aAAf,GAA+BsK,QAA/B;AACD,OApF4E,CAoF3E;AACF;;;AAGAljB,MAAAA,QAAQ,CAAC5J,KAAT,GAAiB8Z,QAAjB;AACAlQ,MAAAA,QAAQ,CAACsmB,KAAT,GAAiBpD,QAAjB;AACAljB,MAAAA,QAAQ,CAAC5D,OAAT,GAAmB0pB,WAAnB;AACA,aAAOE,YAAP;AACD,KAj1Ia,CAi1IZ;;;AAGF,aAAS4C,mBAAT,CAA6B9oB,OAA7B,EAAsCgW,cAAtC,EAAsDpC,IAAtD,EAA4DxD,QAA5D,EAAsEkP,WAAtE,EAAmF;AACjF,UAAIpf,QAAQ,GAAG8V,cAAc,CAAC7V,SAA9B;AACA6hB,MAAAA,gBAAgB,CAAChiB,OAAD,EAAUgW,cAAV,CAAhB;AACA,UAAI+S,kBAAkB,GAAG/S,cAAc,CAACwS,aAAxC;AACA,UAAIrY,QAAQ,GAAG6F,cAAc,CAAC9Z,IAAf,KAAwB8Z,cAAc,CAACgT,WAAvC,GAAqDD,kBAArD,GAA0E7K,mBAAmB,CAAClI,cAAc,CAAC9Z,IAAhB,EAAsB6sB,kBAAtB,CAA5G;AACA7oB,MAAAA,QAAQ,CAAC5J,KAAT,GAAiB6Z,QAAjB;AACA,UAAI8Y,kBAAkB,GAAGjT,cAAc,CAACkT,YAAxC;AACA,UAAIT,UAAU,GAAGvoB,QAAQ,CAAC5D,OAA1B;AACA,UAAIqqB,WAAW,GAAG/S,IAAI,CAAC+S,WAAvB;AACA,UAAIX,WAAW,GAAGrQ,kBAAlB;;AAEA,UAAI,OAAOgR,WAAP,KAAuB,QAAvB,IAAmCA,WAAW,KAAK,IAAvD,EAA6D;AAC3DX,QAAAA,WAAW,GAAGtF,WAAW,CAACiG,WAAD,CAAzB;AACD,OAFD,MAEO;AACL,YAAIwC,mBAAmB,GAAGpT,kBAAkB,CAACC,cAAD,EAAiBpC,IAAjB,EAAuB,IAAvB,CAA5C;AACAoS,QAAAA,WAAW,GAAGxP,gBAAgB,CAACR,cAAD,EAAiBmT,mBAAjB,CAA9B;AACD;;AAED,UAAI7D,wBAAwB,GAAG1R,IAAI,CAAC0R,wBAApC;AACA,UAAIqD,gBAAgB,GAAG,OAAOrD,wBAAP,KAAoC,UAApC,IAAkD,OAAOplB,QAAQ,CAACgnB,uBAAhB,KAA4C,UAArH,CAnBiF,CAmBgD;AACjI;AACA;AACA;AACA;;AAEA,UAAI,CAACyB,gBAAD,KAAsB,OAAOzoB,QAAQ,CAAC+b,gCAAhB,KAAqD,UAArD,IAAmE,OAAO/b,QAAQ,CAAC8b,yBAAhB,KAA8C,UAAvI,CAAJ,EAAwJ;AACtJ,YAAI+M,kBAAkB,KAAKE,kBAAvB,IAA6CR,UAAU,KAAKzC,WAAhE,EAA6E;AAC3EmC,UAAAA,6BAA6B,CAACnS,cAAD,EAAiB9V,QAAjB,EAA2BkQ,QAA3B,EAAqC4V,WAArC,CAA7B;AACD;AACF;;AAEDhC,MAAAA,mCAAmC;AACnC,UAAI+B,QAAQ,GAAG/P,cAAc,CAAC8C,aAA9B;AACA,UAAIsK,QAAQ,GAAGljB,QAAQ,CAACsmB,KAAT,GAAiBT,QAAhC;AACA9C,MAAAA,kBAAkB,CAACjN,cAAD,EAAiB5F,QAAjB,EAA2BlQ,QAA3B,EAAqCof,WAArC,CAAlB;AACA8D,MAAAA,QAAQ,GAAGpN,cAAc,CAAC8C,aAA1B;;AAEA,UAAIiQ,kBAAkB,KAAKE,kBAAvB,IAA6ClD,QAAQ,KAAK3C,QAA1D,IAAsE,CAAC1M,iBAAiB,EAAxF,IAA8F,CAACuN,kCAAkC,EAAjI,IAAuI,CAAE5rB,4BAA7I,EAA+K;AAC7K;AACA;AACA,YAAI,OAAO6H,QAAQ,CAACinB,kBAAhB,KAAuC,UAA3C,EAAuD;AACrD,cAAI4B,kBAAkB,KAAK/oB,OAAO,CAACwoB,aAA/B,IAAgDzC,QAAQ,KAAK/lB,OAAO,CAAC8Y,aAAzE,EAAwF;AACtF9C,YAAAA,cAAc,CAACtW,KAAf,IAAwBlC,MAAxB;AACD;AACF;;AAED,YAAI,OAAO0C,QAAQ,CAACgnB,uBAAhB,KAA4C,UAAhD,EAA4D;AAC1D,cAAI6B,kBAAkB,KAAK/oB,OAAO,CAACwoB,aAA/B,IAAgDzC,QAAQ,KAAK/lB,OAAO,CAAC8Y,aAAzE,EAAwF;AACtF9C,YAAAA,cAAc,CAACtW,KAAf,IAAwB1B,QAAxB;AACD;AACF;;AAED,eAAO,KAAP;AACD;;AAED,UAAI,OAAOsnB,wBAAP,KAAoC,UAAxC,EAAoD;AAClDD,QAAAA,0BAA0B,CAACrP,cAAD,EAAiBpC,IAAjB,EAAuB0R,wBAAvB,EAAiDlV,QAAjD,CAA1B;AACAgT,QAAAA,QAAQ,GAAGpN,cAAc,CAAC8C,aAA1B;AACD;;AAED,UAAIoN,YAAY,GAAGjC,kCAAkC,MAAM6B,0BAA0B,CAAC9P,cAAD,EAAiBpC,IAAjB,EAAuBzD,QAAvB,EAAiCC,QAAjC,EAA2C2V,QAA3C,EAAqD3C,QAArD,EAA+D4C,WAA/D,CAAlE,IAAiJ;AACpK;AACA;AACA;AACA3tB,MAAAA,4BAJA;;AAMA,UAAI6tB,YAAJ,EAAkB;AAChB;AACA;AACA,YAAI,CAACyC,gBAAD,KAAsB,OAAOzoB,QAAQ,CAACic,0BAAhB,KAA+C,UAA/C,IAA6D,OAAOjc,QAAQ,CAACgc,mBAAhB,KAAwC,UAA3H,CAAJ,EAA4I;AAC1I,cAAI,OAAOhc,QAAQ,CAACgc,mBAAhB,KAAwC,UAA5C,EAAwD;AACtDhc,YAAAA,QAAQ,CAACgc,mBAAT,CAA6B9L,QAA7B,EAAuCgT,QAAvC,EAAiD4C,WAAjD;AACD;;AAED,cAAI,OAAO9lB,QAAQ,CAACic,0BAAhB,KAA+C,UAAnD,EAA+D;AAC7Djc,YAAAA,QAAQ,CAACic,0BAAT,CAAoC/L,QAApC,EAA8CgT,QAA9C,EAAwD4C,WAAxD;AACD;AACF;;AAED,YAAI,OAAO9lB,QAAQ,CAACinB,kBAAhB,KAAuC,UAA3C,EAAuD;AACrDnR,UAAAA,cAAc,CAACtW,KAAf,IAAwBlC,MAAxB;AACD;;AAED,YAAI,OAAO0C,QAAQ,CAACgnB,uBAAhB,KAA4C,UAAhD,EAA4D;AAC1DlR,UAAAA,cAAc,CAACtW,KAAf,IAAwB1B,QAAxB;AACD;AACF,OApBD,MAoBO;AACL;AACA;AACA,YAAI,OAAOkC,QAAQ,CAACinB,kBAAhB,KAAuC,UAA3C,EAAuD;AACrD,cAAI4B,kBAAkB,KAAK/oB,OAAO,CAACwoB,aAA/B,IAAgDzC,QAAQ,KAAK/lB,OAAO,CAAC8Y,aAAzE,EAAwF;AACtF9C,YAAAA,cAAc,CAACtW,KAAf,IAAwBlC,MAAxB;AACD;AACF;;AAED,YAAI,OAAO0C,QAAQ,CAACgnB,uBAAhB,KAA4C,UAAhD,EAA4D;AAC1D,cAAI6B,kBAAkB,KAAK/oB,OAAO,CAACwoB,aAA/B,IAAgDzC,QAAQ,KAAK/lB,OAAO,CAAC8Y,aAAzE,EAAwF;AACtF9C,YAAAA,cAAc,CAACtW,KAAf,IAAwB1B,QAAxB;AACD;AACF,SAbI,CAaH;AACF;;;AAGAgY,QAAAA,cAAc,CAACwS,aAAf,GAA+BpY,QAA/B;AACA4F,QAAAA,cAAc,CAAC8C,aAAf,GAA+BsK,QAA/B;AACD,OAzGgF,CAyG/E;AACF;;;AAGAljB,MAAAA,QAAQ,CAAC5J,KAAT,GAAiB8Z,QAAjB;AACAlQ,MAAAA,QAAQ,CAACsmB,KAAT,GAAiBpD,QAAjB;AACAljB,MAAAA,QAAQ,CAAC5D,OAAT,GAAmB0pB,WAAnB;AACA,aAAOE,YAAP;AACD,KAr8Ia,CAu8Id;AACA;AACA;AACA;;;AACA,QAAIkD,SAAS,GAAG,EAAhB;AACA,QAAIC,cAAc,GAAG,CAArB;AACA,QAAIC,gBAAgB,GAAG,IAAvB;AACA,QAAIC,aAAa,GAAG,CAApB;AACA,QAAIC,OAAO,GAAG,EAAd;AACA,QAAIC,YAAY,GAAG,CAAnB;AACA,QAAIC,mBAAmB,GAAG,IAA1B;AACA,QAAIC,aAAa,GAAG,CAApB;AACA,QAAIC,mBAAmB,GAAG,EAA1B;;AAEA,aAASC,cAAT,CAAwB7T,cAAxB,EAAwC;AACtC;AACA;AACA;AACA;AACA;AACA,aAAOA,cAAc,KAAKsT,gBAA1B,EAA4C;AAC1CA,QAAAA,gBAAgB,GAAGF,SAAS,CAAC,EAAEC,cAAH,CAA5B;AACAD,QAAAA,SAAS,CAACC,cAAD,CAAT,GAA4B,IAA5B;AACAE,QAAAA,aAAa,GAAGH,SAAS,CAAC,EAAEC,cAAH,CAAzB;AACAD,QAAAA,SAAS,CAACC,cAAD,CAAT,GAA4B,IAA5B;AACD;;AAED,aAAOrT,cAAc,KAAK0T,mBAA1B,EAA+C;AAC7CA,QAAAA,mBAAmB,GAAGF,OAAO,CAAC,EAAEC,YAAH,CAA7B;AACAD,QAAAA,OAAO,CAACC,YAAD,CAAP,GAAwB,IAAxB;AACAG,QAAAA,mBAAmB,GAAGJ,OAAO,CAAC,EAAEC,YAAH,CAA7B;AACAD,QAAAA,OAAO,CAACC,YAAD,CAAP,GAAwB,IAAxB;AACAE,QAAAA,aAAa,GAAGH,OAAO,CAAC,EAAEC,YAAH,CAAvB;AACAD,QAAAA,OAAO,CAACC,YAAD,CAAP,GAAwB,IAAxB;AACD;AACF;;AAED,QAAIK,WAAW,GAAG,KAAlB;;AAEA,aAASC,4BAAT,CAAsC3sB,KAAtC,EAA6CuR,qBAA7C,EAAoEkB,WAApE,EAAiF;AAC/E;AACE,cAAM,IAAIvP,KAAJ,CAAU,iEAAiE,sEAA3E,CAAN;AACD;AACF;;AAED,aAAS0pB,gCAAT,CAA0C5sB,KAA1C,EAAiD;AAC/C;AACE,cAAM,IAAIkD,KAAJ,CAAU,qEAAqE,sEAA/E,CAAN;AACD;AACD,UAAI4lB,YAAY,GAAGjY,mBAAmB,EAAtC;AACD;;AAED,aAASgc,iBAAT,CAA2B7sB,KAA3B,EAAkC;AAChC;AACE,eAAO,KAAP;AACD;AACF;;AAED,aAAS8sB,cAAT,GAA0B;AACxB,aAAOJ,WAAP;AACD;;AAED,QAAIK,gBAAJ;AACA,QAAIC,sBAAJ;AACA,QAAIC,sBAAJ;AACA,QAAIC,qBAAJ;AACA,QAAIC,2BAAJ;;AAEA,QAAIC,iBAAiB,GAAG,UAAU3pB,KAAV,EAAiB4pB,WAAjB,EAA8B,CAAE,CAAxD;;AAEA;AACEN,MAAAA,gBAAgB,GAAG,KAAnB;AACAC,MAAAA,sBAAsB,GAAG,KAAzB;AACAC,MAAAA,sBAAsB,GAAG,EAAzB;AACA;AACF;AACA;AACA;AACA;;AAEEC,MAAAA,qBAAqB,GAAG,EAAxB;AACAC,MAAAA,2BAA2B,GAAG,EAA9B;;AAEAC,MAAAA,iBAAiB,GAAG,UAAU3pB,KAAV,EAAiB4pB,WAAjB,EAA8B;AAChD,YAAI5pB,KAAK,KAAK,IAAV,IAAkB,OAAOA,KAAP,KAAiB,QAAvC,EAAiD;AAC/C;AACD;;AAED,YAAI,CAACA,KAAK,CAAC6pB,MAAP,IAAiB7pB,KAAK,CAAC6pB,MAAN,CAAaC,SAA9B,IAA2C9pB,KAAK,CAAC/J,GAAN,IAAa,IAA5D,EAAkE;AAChE;AACD;;AAED,YAAI,OAAO+J,KAAK,CAAC6pB,MAAb,KAAwB,QAA5B,EAAsC;AACpC,gBAAM,IAAIpqB,KAAJ,CAAU,gEAAgE,sEAA1E,CAAN;AACD;;AAEDO,QAAAA,KAAK,CAAC6pB,MAAN,CAAaC,SAAb,GAAyB,IAAzB;AACA,YAAI9V,aAAa,GAAG1X,yBAAyB,CAACstB,WAAD,CAAzB,IAA0C,WAA9D;;AAEA,YAAIH,qBAAqB,CAACzV,aAAD,CAAzB,EAA0C;AACxC;AACD;;AAEDyV,QAAAA,qBAAqB,CAACzV,aAAD,CAArB,GAAuC,IAAvC;AAEA3f,QAAAA,KAAK,CAAC,+CAA+C,4DAA/C,GAA8G,mBAA/G,CAAL;AACD,OAvBD;AAwBD;;AAED,aAAS01B,SAAT,CAAmBH,WAAnB,EAAgCzqB,OAAhC,EAAyCqU,OAAzC,EAAkD;AAChD,UAAIwW,QAAQ,GAAGxW,OAAO,CAACyW,GAAvB;;AAEA,UAAID,QAAQ,KAAK,IAAb,IAAqB,OAAOA,QAAP,KAAoB,UAAzC,IAAuD,OAAOA,QAAP,KAAoB,QAA/E,EAAyF;AACvF;AACE;AACA;AACA,cAAI,CAACJ,WAAW,CAAC1P,IAAZ,GAAmBxU,gBAAnB,IAAuCrO,mBAAxC,KAAgE;AACpE;AACA;AACA,YAAEmc,OAAO,CAACC,MAAR,IAAkBD,OAAO,CAAC0W,KAA1B,IAAmC1W,OAAO,CAACC,MAAR,CAAenU,SAAf,KAA6BkU,OAAO,CAAC0W,KAA1E,CAHA,EAGkF;AAChF,gBAAIlW,aAAa,GAAG1X,yBAAyB,CAACstB,WAAD,CAAzB,IAA0C,WAA9D;;AAEA,gBAAI,CAACJ,sBAAsB,CAACxV,aAAD,CAA3B,EAA4C;AAC1C;AACE3f,gBAAAA,KAAK,CAAC,mEAAmE,oEAAnE,GAA0I,sDAA1I,GAAmM,2CAAnM,GAAiP,iDAAlP,EAAqS21B,QAArS,CAAL;AACD;AAEDR,cAAAA,sBAAsB,CAACxV,aAAD,CAAtB,GAAwC,IAAxC;AACD;AACF;AACF;;AAED,YAAIR,OAAO,CAACC,MAAZ,EAAoB;AAClB,cAAIvU,KAAK,GAAGsU,OAAO,CAACC,MAApB;AACA,cAAI7F,IAAJ;;AAEA,cAAI1O,KAAJ,EAAW;AACT,gBAAIE,UAAU,GAAGF,KAAjB;;AAEA,gBAAIE,UAAU,CAAC7D,GAAX,KAAmB5D,cAAvB,EAAuC;AACrC,oBAAM,IAAI8H,KAAJ,CAAU,kDAAkD,uCAAlD,GAA4F,2CAA5F,GAA0I,iDAApJ,CAAN;AACD;;AAEDmO,YAAAA,IAAI,GAAGxO,UAAU,CAACE,SAAlB;AACD;;AAED,cAAI,CAACsO,IAAL,EAAW;AACT,kBAAM,IAAInO,KAAJ,CAAU,kCAAkCuqB,QAAlC,GAA6C,qCAA7C,GAAqF,qCAA/F,CAAN;AACD,WAhBiB,CAgBhB;;;AAGF,cAAIG,YAAY,GAAGvc,IAAnB;AAEA;AACEuP,YAAAA,uBAAuB,CAAC6M,QAAD,EAAW,KAAX,CAAvB;AACD;AAED,cAAII,SAAS,GAAG,KAAKJ,QAArB,CAzBkB,CAyBa;;AAE/B,cAAI7qB,OAAO,KAAK,IAAZ,IAAoBA,OAAO,CAAC8qB,GAAR,KAAgB,IAApC,IAA4C,OAAO9qB,OAAO,CAAC8qB,GAAf,KAAuB,UAAnE,IAAiF9qB,OAAO,CAAC8qB,GAAR,CAAYI,UAAZ,KAA2BD,SAAhH,EAA2H;AACzH,mBAAOjrB,OAAO,CAAC8qB,GAAf;AACD;;AAED,cAAIA,GAAG,GAAG,UAAUjzB,KAAV,EAAiB;AACzB,gBAAI2sB,IAAI,GAAGwG,YAAY,CAACxG,IAAxB;;AAEA,gBAAIA,IAAI,KAAKD,eAAb,EAA8B;AAC5B;AACAC,cAAAA,IAAI,GAAGwG,YAAY,CAACxG,IAAb,GAAoB,EAA3B;AACD;;AAED,gBAAI3sB,KAAK,KAAK,IAAd,EAAoB;AAClB,qBAAO2sB,IAAI,CAACyG,SAAD,CAAX;AACD,aAFD,MAEO;AACLzG,cAAAA,IAAI,CAACyG,SAAD,CAAJ,GAAkBpzB,KAAlB;AACD;AACF,WAbD;;AAeAizB,UAAAA,GAAG,CAACI,UAAJ,GAAiBD,SAAjB;AACA,iBAAOH,GAAP;AACD,SAhDD,MAgDO;AACL,cAAI,OAAOD,QAAP,KAAoB,QAAxB,EAAkC;AAChC,kBAAM,IAAIvqB,KAAJ,CAAU,4FAAV,CAAN;AACD;;AAED,cAAI,CAAC+T,OAAO,CAACC,MAAb,EAAqB;AACnB,kBAAM,IAAIhU,KAAJ,CAAU,4CAA4CuqB,QAA5C,GAAuD,sDAAvD,GAAgH,2BAAhH,GAA8I,sDAA9I,GAAuM,qGAAvM,GAA+S,+CAA/S,GAAiW,yEAA3W,CAAN;AACD;AACF;AACF;;AAED,aAAOA,QAAP;AACD;;AAED,aAASM,wBAAT,CAAkCV,WAAlC,EAA+CW,QAA/C,EAAyD;AACvD,UAAIC,WAAW,GAAGz0B,MAAM,CAACZ,SAAP,CAAiBs1B,QAAjB,CAA0Bp1B,IAA1B,CAA+Bk1B,QAA/B,CAAlB;AACA,YAAM,IAAI9qB,KAAJ,CAAU,qDAAqD+qB,WAAW,KAAK,iBAAhB,GAAoC,uBAAuBz0B,MAAM,CAACW,IAAP,CAAY6zB,QAAZ,EAAsBhQ,IAAtB,CAA2B,IAA3B,CAAvB,GAA0D,GAA9F,GAAoGiQ,WAAzJ,IAAwK,KAAxK,GAAgL,gEAAhL,GAAmP,UAA7P,CAAN;AACD;;AAED,aAASE,kBAAT,CAA4Bd,WAA5B,EAAyC;AACvC;AACE,YAAI5V,aAAa,GAAG1X,yBAAyB,CAACstB,WAAD,CAAzB,IAA0C,WAA9D;;AAEA,YAAIF,2BAA2B,CAAC1V,aAAD,CAA/B,EAAgD;AAC9C;AACD;;AAED0V,QAAAA,2BAA2B,CAAC1V,aAAD,CAA3B,GAA6C,IAA7C;AAEA3f,QAAAA,KAAK,CAAC,kEAAkE,+DAAlE,GAAoI,iEAArI,CAAL;AACD;AACF,KA1pJa,CA2pJd;AACA;AACA;;;AAGA,aAASs2B,eAAT,CAAyBC,sBAAzB,EAAiD;AAC/C,eAASC,WAAT,CAAqBjB,WAArB,EAAkCkB,aAAlC,EAAiD;AAC/C,YAAI,CAACF,sBAAL,EAA6B;AAC3B;AACA;AACD;;AAED,YAAIG,SAAS,GAAGnB,WAAW,CAACmB,SAA5B;;AAEA,YAAIA,SAAS,KAAK,IAAlB,EAAwB;AACtBnB,UAAAA,WAAW,CAACmB,SAAZ,GAAwB,CAACD,aAAD,CAAxB;AACAlB,UAAAA,WAAW,CAAC/qB,KAAZ,IAAqBhC,aAArB;AACD,SAHD,MAGO;AACLkuB,UAAAA,SAAS,CAACjf,IAAV,CAAegf,aAAf;AACD;AACF;;AAED,eAASE,uBAAT,CAAiCpB,WAAjC,EAA8CqB,iBAA9C,EAAiE;AAC/D,YAAI,CAACL,sBAAL,EAA6B;AAC3B;AACA,iBAAO,IAAP;AACD,SAJ8D,CAI7D;AACF;;;AAGA,YAAIE,aAAa,GAAGG,iBAApB;;AAEA,eAAOH,aAAa,KAAK,IAAzB,EAA+B;AAC7BD,UAAAA,WAAW,CAACjB,WAAD,EAAckB,aAAd,CAAX;AACAA,UAAAA,aAAa,GAAGA,aAAa,CAAC7qB,OAA9B;AACD;;AAED,eAAO,IAAP;AACD;;AAED,eAASirB,oBAAT,CAA8BtB,WAA9B,EAA2CqB,iBAA3C,EAA8D;AAC5D;AACA;AACA;AACA,YAAIE,gBAAgB,GAAG,IAAI1Z,GAAJ,EAAvB;AACA,YAAI2Z,aAAa,GAAGH,iBAApB;;AAEA,eAAOG,aAAa,KAAK,IAAzB,EAA+B;AAC7B,cAAIA,aAAa,CAACn1B,GAAd,KAAsB,IAA1B,EAAgC;AAC9Bk1B,YAAAA,gBAAgB,CAACp0B,GAAjB,CAAqBq0B,aAAa,CAACn1B,GAAnC,EAAwCm1B,aAAxC;AACD,WAFD,MAEO;AACLD,YAAAA,gBAAgB,CAACp0B,GAAjB,CAAqBq0B,aAAa,CAAC3hB,KAAnC,EAA0C2hB,aAA1C;AACD;;AAEDA,UAAAA,aAAa,GAAGA,aAAa,CAACnrB,OAA9B;AACD;;AAED,eAAOkrB,gBAAP;AACD;;AAED,eAASE,QAAT,CAAkB9uB,KAAlB,EAAyB8rB,YAAzB,EAAuC;AACrC;AACA;AACA,YAAIhH,KAAK,GAAGiK,oBAAoB,CAAC/uB,KAAD,EAAQ8rB,YAAR,CAAhC;AACAhH,QAAAA,KAAK,CAAC5X,KAAN,GAAc,CAAd;AACA4X,QAAAA,KAAK,CAACphB,OAAN,GAAgB,IAAhB;AACA,eAAOohB,KAAP;AACD;;AAED,eAASkK,UAAT,CAAoBC,QAApB,EAA8BC,eAA9B,EAA+CC,QAA/C,EAAyD;AACvDF,QAAAA,QAAQ,CAAC/hB,KAAT,GAAiBiiB,QAAjB;;AAEA,YAAI,CAACd,sBAAL,EAA6B;AAC3B;AACA;AACAY,UAAAA,QAAQ,CAAC3sB,KAAT,IAAkBf,MAAlB;AACA,iBAAO2tB,eAAP;AACD;;AAED,YAAItsB,OAAO,GAAGqsB,QAAQ,CAAC7sB,SAAvB;;AAEA,YAAIQ,OAAO,KAAK,IAAhB,EAAsB;AACpB,cAAIwsB,QAAQ,GAAGxsB,OAAO,CAACsK,KAAvB;;AAEA,cAAIkiB,QAAQ,GAAGF,eAAf,EAAgC;AAC9B;AACAD,YAAAA,QAAQ,CAAC3sB,KAAT,IAAkBnC,SAAlB;AACA,mBAAO+uB,eAAP;AACD,WAJD,MAIO;AACL;AACA,mBAAOE,QAAP;AACD;AACF,SAXD,MAWO;AACL;AACAH,UAAAA,QAAQ,CAAC3sB,KAAT,IAAkBnC,SAAlB;AACA,iBAAO+uB,eAAP;AACD;AACF;;AAED,eAASG,gBAAT,CAA0BJ,QAA1B,EAAoC;AAClC;AACA;AACA,YAAIZ,sBAAsB,IAAIY,QAAQ,CAAC7sB,SAAT,KAAuB,IAArD,EAA2D;AACzD6sB,UAAAA,QAAQ,CAAC3sB,KAAT,IAAkBnC,SAAlB;AACD;;AAED,eAAO8uB,QAAP;AACD;;AAED,eAASK,cAAT,CAAwBjC,WAAxB,EAAqCzqB,OAArC,EAA8C2sB,WAA9C,EAA2D1mB,KAA3D,EAAkE;AAChE,YAAIjG,OAAO,KAAK,IAAZ,IAAoBA,OAAO,CAAC5D,GAAR,KAAgBvD,QAAxC,EAAkD;AAChD;AACA,cAAI+zB,OAAO,GAAGC,mBAAmB,CAACF,WAAD,EAAclC,WAAW,CAAC1P,IAA1B,EAAgC9U,KAAhC,CAAjC;AACA2mB,UAAAA,OAAO,CAACjtB,MAAR,GAAiB8qB,WAAjB;AACA,iBAAOmC,OAAP;AACD,SALD,MAKO;AACL;AACA,cAAIE,QAAQ,GAAGZ,QAAQ,CAAClsB,OAAD,EAAU2sB,WAAV,CAAvB;AACAG,UAAAA,QAAQ,CAACntB,MAAT,GAAkB8qB,WAAlB;AACA,iBAAOqC,QAAP;AACD;AACF;;AAED,eAASC,aAAT,CAAuBtC,WAAvB,EAAoCzqB,OAApC,EAA6CqU,OAA7C,EAAsDpO,KAAtD,EAA6D;AAC3D,YAAI+iB,WAAW,GAAG3U,OAAO,CAACnY,IAA1B;;AAEA,YAAI8sB,WAAW,KAAK5uB,mBAApB,EAAyC;AACvC,iBAAO4yB,cAAc,CAACvC,WAAD,EAAczqB,OAAd,EAAuBqU,OAAO,CAAC/d,KAAR,CAAcuO,QAArC,EAA+CoB,KAA/C,EAAsDoO,OAAO,CAACvd,GAA9D,CAArB;AACD;;AAED,YAAIkJ,OAAO,KAAK,IAAhB,EAAsB;AACpB,cAAIA,OAAO,CAACgpB,WAAR,KAAwBA,WAAxB,IAAyC;AAC5CiE,UAAAA,iCAAiC,CAACjtB,OAAD,EAAUqU,OAAV,CAD9B,IACsD;AAC1D;AACA;AACA;AACApc,UAAAA,kBALA,EAKwB;AACtB;AACA,gBAAI60B,QAAQ,GAAGZ,QAAQ,CAAClsB,OAAD,EAAUqU,OAAO,CAAC/d,KAAlB,CAAvB;AACAw2B,YAAAA,QAAQ,CAAChC,GAAT,GAAeF,SAAS,CAACH,WAAD,EAAczqB,OAAd,EAAuBqU,OAAvB,CAAxB;AACAyY,YAAAA,QAAQ,CAACntB,MAAT,GAAkB8qB,WAAlB;AAEA;AACEqC,cAAAA,QAAQ,CAAClT,YAAT,GAAwBvF,OAAO,CAACE,OAAhC;AACAuY,cAAAA,QAAQ,CAACnT,WAAT,GAAuBtF,OAAO,CAACC,MAA/B;AACD;AAED,mBAAOwY,QAAP;AACD;AACF,SA1B0D,CA0BzD;;;AAGF,YAAIF,OAAO,GAAGM,sBAAsB,CAAC7Y,OAAD,EAAUoW,WAAW,CAAC1P,IAAtB,EAA4B9U,KAA5B,CAApC;AACA2mB,QAAAA,OAAO,CAAC9B,GAAR,GAAcF,SAAS,CAACH,WAAD,EAAczqB,OAAd,EAAuBqU,OAAvB,CAAvB;AACAuY,QAAAA,OAAO,CAACjtB,MAAR,GAAiB8qB,WAAjB;AACA,eAAOmC,OAAP;AACD;;AAED,eAASO,YAAT,CAAsB1C,WAAtB,EAAmCzqB,OAAnC,EAA4CotB,MAA5C,EAAoDnnB,KAApD,EAA2D;AACzD,YAAIjG,OAAO,KAAK,IAAZ,IAAoBA,OAAO,CAAC5D,GAAR,KAAgBzD,UAApC,IAAkDqH,OAAO,CAACG,SAAR,CAAkBuP,aAAlB,KAAoC0d,MAAM,CAAC1d,aAA7F,IAA8G1P,OAAO,CAACG,SAAR,CAAkBktB,cAAlB,KAAqCD,MAAM,CAACC,cAA9J,EAA8K;AAC5K;AACA,cAAIT,OAAO,GAAGU,qBAAqB,CAACF,MAAD,EAAS3C,WAAW,CAAC1P,IAArB,EAA2B9U,KAA3B,CAAnC;AACA2mB,UAAAA,OAAO,CAACjtB,MAAR,GAAiB8qB,WAAjB;AACA,iBAAOmC,OAAP;AACD,SALD,MAKO;AACL;AACA,cAAIE,QAAQ,GAAGZ,QAAQ,CAAClsB,OAAD,EAAUotB,MAAM,CAACvoB,QAAP,IAAmB,EAA7B,CAAvB;AACAioB,UAAAA,QAAQ,CAACntB,MAAT,GAAkB8qB,WAAlB;AACA,iBAAOqC,QAAP;AACD;AACF;;AAED,eAASE,cAAT,CAAwBvC,WAAxB,EAAqCzqB,OAArC,EAA8CutB,QAA9C,EAAwDtnB,KAAxD,EAA+DnP,GAA/D,EAAoE;AAClE,YAAIkJ,OAAO,KAAK,IAAZ,IAAoBA,OAAO,CAAC5D,GAAR,KAAgBtD,QAAxC,EAAkD;AAChD;AACA,cAAI8zB,OAAO,GAAGY,uBAAuB,CAACD,QAAD,EAAW9C,WAAW,CAAC1P,IAAvB,EAA6B9U,KAA7B,EAAoCnP,GAApC,CAArC;AACA81B,UAAAA,OAAO,CAACjtB,MAAR,GAAiB8qB,WAAjB;AACA,iBAAOmC,OAAP;AACD,SALD,MAKO;AACL;AACA,cAAIE,QAAQ,GAAGZ,QAAQ,CAAClsB,OAAD,EAAUutB,QAAV,CAAvB;AACAT,UAAAA,QAAQ,CAACntB,MAAT,GAAkB8qB,WAAlB;AACA,iBAAOqC,QAAP;AACD;AACF;;AAED,eAASW,WAAT,CAAqBhD,WAArB,EAAkCW,QAAlC,EAA4CnlB,KAA5C,EAAmD;AACjD,YAAI,OAAOmlB,QAAP,KAAoB,QAApB,IAAgCA,QAAQ,KAAK,EAA7C,IAAmD,OAAOA,QAAP,KAAoB,QAA3E,EAAqF;AACnF;AACA;AACA;AACA,cAAIwB,OAAO,GAAGC,mBAAmB,CAAC,KAAKzB,QAAN,EAAgBX,WAAW,CAAC1P,IAA5B,EAAkC9U,KAAlC,CAAjC;AACA2mB,UAAAA,OAAO,CAACjtB,MAAR,GAAiB8qB,WAAjB;AACA,iBAAOmC,OAAP;AACD;;AAED,YAAI,OAAOxB,QAAP,KAAoB,QAApB,IAAgCA,QAAQ,KAAK,IAAjD,EAAuD;AACrD,kBAAQA,QAAQ,CAAC/uB,QAAjB;AACE,iBAAKrC,kBAAL;AACE;AACE,oBAAI0zB,QAAQ,GAAGR,sBAAsB,CAAC9B,QAAD,EAAWX,WAAW,CAAC1P,IAAvB,EAA6B9U,KAA7B,CAArC;;AAEAynB,gBAAAA,QAAQ,CAAC5C,GAAT,GAAeF,SAAS,CAACH,WAAD,EAAc,IAAd,EAAoBW,QAApB,CAAxB;AACAsC,gBAAAA,QAAQ,CAAC/tB,MAAT,GAAkB8qB,WAAlB;AACA,uBAAOiD,QAAP;AACD;;AAEH,iBAAKvzB,iBAAL;AACE;AACE,oBAAIwzB,SAAS,GAAGL,qBAAqB,CAAClC,QAAD,EAAWX,WAAW,CAAC1P,IAAvB,EAA6B9U,KAA7B,CAArC;;AAEA0nB,gBAAAA,SAAS,CAAChuB,MAAV,GAAmB8qB,WAAnB;AACA,uBAAOkD,SAAP;AACD;AAhBL;;AAmBA,cAAIpsB,OAAO,CAAC6pB,QAAD,CAAP,IAAqB7vB,aAAa,CAAC6vB,QAAD,CAAtC,EAAkD;AAChD,gBAAIwC,SAAS,GAAGJ,uBAAuB,CAACpC,QAAD,EAAWX,WAAW,CAAC1P,IAAvB,EAA6B9U,KAA7B,EAAoC,IAApC,CAAvC;;AAEA2nB,YAAAA,SAAS,CAACjuB,MAAV,GAAmB8qB,WAAnB;AACA,mBAAOmD,SAAP;AACD;;AAEDzC,UAAAA,wBAAwB,CAACV,WAAD,EAAcW,QAAd,CAAxB;AACD;;AAED;AACE,cAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AAClCG,YAAAA,kBAAkB,CAACd,WAAD,CAAlB;AACD;AACF;AAED,eAAO,IAAP;AACD;;AAED,eAASoD,UAAT,CAAoBpD,WAApB,EAAiCqD,QAAjC,EAA2C1C,QAA3C,EAAqDnlB,KAArD,EAA4D;AAC1D;AACA,YAAInP,GAAG,GAAGg3B,QAAQ,KAAK,IAAb,GAAoBA,QAAQ,CAACh3B,GAA7B,GAAmC,IAA7C;;AAEA,YAAI,OAAOs0B,QAAP,KAAoB,QAApB,IAAgCA,QAAQ,KAAK,EAA7C,IAAmD,OAAOA,QAAP,KAAoB,QAA3E,EAAqF;AACnF;AACA;AACA;AACA,cAAIt0B,GAAG,KAAK,IAAZ,EAAkB;AAChB,mBAAO,IAAP;AACD;;AAED,iBAAO41B,cAAc,CAACjC,WAAD,EAAcqD,QAAd,EAAwB,KAAK1C,QAA7B,EAAuCnlB,KAAvC,CAArB;AACD;;AAED,YAAI,OAAOmlB,QAAP,KAAoB,QAApB,IAAgCA,QAAQ,KAAK,IAAjD,EAAuD;AACrD,kBAAQA,QAAQ,CAAC/uB,QAAjB;AACE,iBAAKrC,kBAAL;AACE;AACE,oBAAIoxB,QAAQ,CAACt0B,GAAT,KAAiBA,GAArB,EAA0B;AACxB,yBAAOi2B,aAAa,CAACtC,WAAD,EAAcqD,QAAd,EAAwB1C,QAAxB,EAAkCnlB,KAAlC,CAApB;AACD,iBAFD,MAEO;AACL,yBAAO,IAAP;AACD;AACF;;AAEH,iBAAK9L,iBAAL;AACE;AACE,oBAAIixB,QAAQ,CAACt0B,GAAT,KAAiBA,GAArB,EAA0B;AACxB,yBAAOq2B,YAAY,CAAC1C,WAAD,EAAcqD,QAAd,EAAwB1C,QAAxB,EAAkCnlB,KAAlC,CAAnB;AACD,iBAFD,MAEO;AACL,yBAAO,IAAP;AACD;AACF;AAjBL;;AAoBA,cAAI1E,OAAO,CAAC6pB,QAAD,CAAP,IAAqB7vB,aAAa,CAAC6vB,QAAD,CAAtC,EAAkD;AAChD,gBAAIt0B,GAAG,KAAK,IAAZ,EAAkB;AAChB,qBAAO,IAAP;AACD;;AAED,mBAAOk2B,cAAc,CAACvC,WAAD,EAAcqD,QAAd,EAAwB1C,QAAxB,EAAkCnlB,KAAlC,EAAyC,IAAzC,CAArB;AACD;;AAEDklB,UAAAA,wBAAwB,CAACV,WAAD,EAAcW,QAAd,CAAxB;AACD;;AAED;AACE,cAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AAClCG,YAAAA,kBAAkB,CAACd,WAAD,CAAlB;AACD;AACF;AAED,eAAO,IAAP;AACD;;AAED,eAASsD,aAAT,CAAuB/B,gBAAvB,EAAyCvB,WAAzC,EAAsDuD,MAAtD,EAA8D5C,QAA9D,EAAwEnlB,KAAxE,EAA+E;AAC7E,YAAI,OAAOmlB,QAAP,KAAoB,QAApB,IAAgCA,QAAQ,KAAK,EAA7C,IAAmD,OAAOA,QAAP,KAAoB,QAA3E,EAAqF;AACnF;AACA;AACA,cAAI6C,YAAY,GAAGjC,gBAAgB,CAACt0B,GAAjB,CAAqBs2B,MAArB,KAAgC,IAAnD;AACA,iBAAOtB,cAAc,CAACjC,WAAD,EAAcwD,YAAd,EAA4B,KAAK7C,QAAjC,EAA2CnlB,KAA3C,CAArB;AACD;;AAED,YAAI,OAAOmlB,QAAP,KAAoB,QAApB,IAAgCA,QAAQ,KAAK,IAAjD,EAAuD;AACrD,kBAAQA,QAAQ,CAAC/uB,QAAjB;AACE,iBAAKrC,kBAAL;AACE;AACE,oBAAIk0B,aAAa,GAAGlC,gBAAgB,CAACt0B,GAAjB,CAAqB0zB,QAAQ,CAACt0B,GAAT,KAAiB,IAAjB,GAAwBk3B,MAAxB,GAAiC5C,QAAQ,CAACt0B,GAA/D,KAAuE,IAA3F;;AAEA,uBAAOi2B,aAAa,CAACtC,WAAD,EAAcyD,aAAd,EAA6B9C,QAA7B,EAAuCnlB,KAAvC,CAApB;AACD;;AAEH,iBAAK9L,iBAAL;AACE;AACE,oBAAIg0B,cAAc,GAAGnC,gBAAgB,CAACt0B,GAAjB,CAAqB0zB,QAAQ,CAACt0B,GAAT,KAAiB,IAAjB,GAAwBk3B,MAAxB,GAAiC5C,QAAQ,CAACt0B,GAA/D,KAAuE,IAA5F;;AAEA,uBAAOq2B,YAAY,CAAC1C,WAAD,EAAc0D,cAAd,EAA8B/C,QAA9B,EAAwCnlB,KAAxC,CAAnB;AACD;AAbL;;AAiBA,cAAI1E,OAAO,CAAC6pB,QAAD,CAAP,IAAqB7vB,aAAa,CAAC6vB,QAAD,CAAtC,EAAkD;AAChD,gBAAIgD,cAAc,GAAGpC,gBAAgB,CAACt0B,GAAjB,CAAqBs2B,MAArB,KAAgC,IAArD;;AAEA,mBAAOhB,cAAc,CAACvC,WAAD,EAAc2D,cAAd,EAA8BhD,QAA9B,EAAwCnlB,KAAxC,EAA+C,IAA/C,CAArB;AACD;;AAEDklB,UAAAA,wBAAwB,CAACV,WAAD,EAAcW,QAAd,CAAxB;AACD;;AAED;AACE,cAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AAClCG,YAAAA,kBAAkB,CAACd,WAAD,CAAlB;AACD;AACF;AAED,eAAO,IAAP;AACD;AACD;AACF;AACA;;;AAGE,eAAS4D,gBAAT,CAA0BxtB,KAA1B,EAAiCytB,SAAjC,EAA4C7D,WAA5C,EAAyD;AACvD;AACE,cAAI,OAAO5pB,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,KAAK,IAA3C,EAAiD;AAC/C,mBAAOytB,SAAP;AACD;;AAED,kBAAQztB,KAAK,CAACxE,QAAd;AACE,iBAAKrC,kBAAL;AACA,iBAAKG,iBAAL;AACEqwB,cAAAA,iBAAiB,CAAC3pB,KAAD,EAAQ4pB,WAAR,CAAjB;AACA,kBAAI3zB,GAAG,GAAG+J,KAAK,CAAC/J,GAAhB;;AAEA,kBAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAC3B;AACD;;AAED,kBAAIw3B,SAAS,KAAK,IAAlB,EAAwB;AACtBA,gBAAAA,SAAS,GAAG,IAAI1S,GAAJ,EAAZ;AACA0S,gBAAAA,SAAS,CAACjS,GAAV,CAAcvlB,GAAd;AACA;AACD;;AAED,kBAAI,CAACw3B,SAAS,CAACxZ,GAAV,CAAche,GAAd,CAAL,EAAyB;AACvBw3B,gBAAAA,SAAS,CAACjS,GAAV,CAAcvlB,GAAd;AACA;AACD;;AAED5B,cAAAA,KAAK,CAAC,uDAAuD,mEAAvD,GAA6H,2DAA7H,GAA2L,8DAA3L,GAA4P,mCAA7P,EAAkS4B,GAAlS,CAAL;AAEA;AAvBJ;AAyBD;AAED,eAAOw3B,SAAP;AACD;;AAED,eAASC,sBAAT,CAAgC9D,WAAhC,EAA6CqB,iBAA7C,EAAgE0C,WAAhE,EAA6EvoB,KAA7E,EAAoF;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE;AACA,cAAIqoB,SAAS,GAAG,IAAhB;;AAEA,eAAK,IAAI/3B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGi4B,WAAW,CAAC35B,MAAhC,EAAwC0B,CAAC,EAAzC,EAA6C;AAC3C,gBAAIsK,KAAK,GAAG2tB,WAAW,CAACj4B,CAAD,CAAvB;AACA+3B,YAAAA,SAAS,GAAGD,gBAAgB,CAACxtB,KAAD,EAAQytB,SAAR,EAAmB7D,WAAnB,CAA5B;AACD;AACF;AAED,YAAIgE,mBAAmB,GAAG,IAA1B;AACA,YAAIC,gBAAgB,GAAG,IAAvB;AACA,YAAIZ,QAAQ,GAAGhC,iBAAf;AACA,YAAIQ,eAAe,GAAG,CAAtB;AACA,YAAI0B,MAAM,GAAG,CAAb;AACA,YAAIW,YAAY,GAAG,IAAnB;;AAEA,eAAOb,QAAQ,KAAK,IAAb,IAAqBE,MAAM,GAAGQ,WAAW,CAAC35B,MAAjD,EAAyDm5B,MAAM,EAA/D,EAAmE;AACjE,cAAIF,QAAQ,CAACxjB,KAAT,GAAiB0jB,MAArB,EAA6B;AAC3BW,YAAAA,YAAY,GAAGb,QAAf;AACAA,YAAAA,QAAQ,GAAG,IAAX;AACD,WAHD,MAGO;AACLa,YAAAA,YAAY,GAAGb,QAAQ,CAAChtB,OAAxB;AACD;;AAED,cAAIurB,QAAQ,GAAGwB,UAAU,CAACpD,WAAD,EAAcqD,QAAd,EAAwBU,WAAW,CAACR,MAAD,CAAnC,EAA6C/nB,KAA7C,CAAzB;;AAEA,cAAIomB,QAAQ,KAAK,IAAjB,EAAuB;AACrB;AACA;AACA;AACA;AACA,gBAAIyB,QAAQ,KAAK,IAAjB,EAAuB;AACrBA,cAAAA,QAAQ,GAAGa,YAAX;AACD;;AAED;AACD;;AAED,cAAIlD,sBAAJ,EAA4B;AAC1B,gBAAIqC,QAAQ,IAAIzB,QAAQ,CAAC7sB,SAAT,KAAuB,IAAvC,EAA6C;AAC3C;AACA;AACAksB,cAAAA,WAAW,CAACjB,WAAD,EAAcqD,QAAd,CAAX;AACD;AACF;;AAEDxB,UAAAA,eAAe,GAAGF,UAAU,CAACC,QAAD,EAAWC,eAAX,EAA4B0B,MAA5B,CAA5B;;AAEA,cAAIU,gBAAgB,KAAK,IAAzB,EAA+B;AAC7B;AACAD,YAAAA,mBAAmB,GAAGpC,QAAtB;AACD,WAHD,MAGO;AACL;AACA;AACA;AACA;AACAqC,YAAAA,gBAAgB,CAAC5tB,OAAjB,GAA2BurB,QAA3B;AACD;;AAEDqC,UAAAA,gBAAgB,GAAGrC,QAAnB;AACAyB,UAAAA,QAAQ,GAAGa,YAAX;AACD;;AAED,YAAIX,MAAM,KAAKQ,WAAW,CAAC35B,MAA3B,EAAmC;AACjC;AACAg3B,UAAAA,uBAAuB,CAACpB,WAAD,EAAcqD,QAAd,CAAvB;AAEA,iBAAOW,mBAAP;AACD;;AAED,YAAIX,QAAQ,KAAK,IAAjB,EAAuB;AACrB;AACA;AACA,iBAAOE,MAAM,GAAGQ,WAAW,CAAC35B,MAA5B,EAAoCm5B,MAAM,EAA1C,EAA8C;AAC5C,gBAAIY,SAAS,GAAGnB,WAAW,CAAChD,WAAD,EAAc+D,WAAW,CAACR,MAAD,CAAzB,EAAmC/nB,KAAnC,CAA3B;;AAEA,gBAAI2oB,SAAS,KAAK,IAAlB,EAAwB;AACtB;AACD;;AAEDtC,YAAAA,eAAe,GAAGF,UAAU,CAACwC,SAAD,EAAYtC,eAAZ,EAA6B0B,MAA7B,CAA5B;;AAEA,gBAAIU,gBAAgB,KAAK,IAAzB,EAA+B;AAC7B;AACAD,cAAAA,mBAAmB,GAAGG,SAAtB;AACD,aAHD,MAGO;AACLF,cAAAA,gBAAgB,CAAC5tB,OAAjB,GAA2B8tB,SAA3B;AACD;;AAEDF,YAAAA,gBAAgB,GAAGE,SAAnB;AACD;;AAED,iBAAOH,mBAAP;AACD,SA9GiF,CA8GhF;;;AAGF,YAAIzC,gBAAgB,GAAGD,oBAAoB,CAACtB,WAAD,EAAcqD,QAAd,CAA3C,CAjHkF,CAiHd;;AAEpE,eAAOE,MAAM,GAAGQ,WAAW,CAAC35B,MAA5B,EAAoCm5B,MAAM,EAA1C,EAA8C;AAC5C,cAAIa,UAAU,GAAGd,aAAa,CAAC/B,gBAAD,EAAmBvB,WAAnB,EAAgCuD,MAAhC,EAAwCQ,WAAW,CAACR,MAAD,CAAnD,EAA6D/nB,KAA7D,CAA9B;;AAEA,cAAI4oB,UAAU,KAAK,IAAnB,EAAyB;AACvB,gBAAIpD,sBAAJ,EAA4B;AAC1B,kBAAIoD,UAAU,CAACrvB,SAAX,KAAyB,IAA7B,EAAmC;AACjC;AACA;AACA;AACA;AACAwsB,gBAAAA,gBAAgB,CAAC8C,MAAjB,CAAwBD,UAAU,CAAC/3B,GAAX,KAAmB,IAAnB,GAA0Bk3B,MAA1B,GAAmCa,UAAU,CAAC/3B,GAAtE;AACD;AACF;;AAEDw1B,YAAAA,eAAe,GAAGF,UAAU,CAACyC,UAAD,EAAavC,eAAb,EAA8B0B,MAA9B,CAA5B;;AAEA,gBAAIU,gBAAgB,KAAK,IAAzB,EAA+B;AAC7BD,cAAAA,mBAAmB,GAAGI,UAAtB;AACD,aAFD,MAEO;AACLH,cAAAA,gBAAgB,CAAC5tB,OAAjB,GAA2B+tB,UAA3B;AACD;;AAEDH,YAAAA,gBAAgB,GAAGG,UAAnB;AACD;AACF;;AAED,YAAIpD,sBAAJ,EAA4B;AAC1B;AACA;AACAO,UAAAA,gBAAgB,CAAC9Q,OAAjB,CAAyB,UAAUra,KAAV,EAAiB;AACxC,mBAAO6qB,WAAW,CAACjB,WAAD,EAAc5pB,KAAd,CAAlB;AACD,WAFD;AAGD;;AAED,eAAO4tB,mBAAP;AACD;;AAED,eAASM,yBAAT,CAAmCtE,WAAnC,EAAgDqB,iBAAhD,EAAmEkD,mBAAnE,EAAwF/oB,KAAxF,EAA+F;AAC7F;AACA;AACA,YAAIgpB,UAAU,GAAG1zB,aAAa,CAACyzB,mBAAD,CAA9B;;AAEA,YAAI,OAAOC,UAAP,KAAsB,UAA1B,EAAsC;AACpC,gBAAM,IAAI3uB,KAAJ,CAAU,2EAA2E,8BAArF,CAAN;AACD;;AAED;AACE;AACA;AACA,cAAI,OAAOrG,MAAP,KAAkB,UAAlB,IAAgC;AACpC+0B,UAAAA,mBAAmB,CAAC/0B,MAAM,CAAC0jB,WAAR,CAAnB,KAA4C,WAD5C,EACyD;AACvD,gBAAI,CAACyM,sBAAL,EAA6B;AAC3Bl1B,cAAAA,KAAK,CAAC,uEAAuE,iEAAvE,GAA2I,4DAA3I,GAA0M,wDAA1M,GAAqQ,+DAAtQ,CAAL;AACD;;AAEDk1B,YAAAA,sBAAsB,GAAG,IAAzB;AACD,WAVH,CAUI;;;AAGF,cAAI4E,mBAAmB,CAACE,OAApB,KAAgCD,UAApC,EAAgD;AAC9C,gBAAI,CAAC9E,gBAAL,EAAuB;AACrBj1B,cAAAA,KAAK,CAAC,8CAA8C,8CAA/C,CAAL;AACD;;AAEDi1B,YAAAA,gBAAgB,GAAG,IAAnB;AACD,WAnBH,CAmBI;AACF;;;AAGA,cAAIgF,YAAY,GAAGF,UAAU,CAAC/4B,IAAX,CAAgB84B,mBAAhB,CAAnB;;AAEA,cAAIG,YAAJ,EAAkB;AAChB,gBAAIb,SAAS,GAAG,IAAhB;;AAEA,gBAAIc,KAAK,GAAGD,YAAY,CAAC5O,IAAb,EAAZ;;AAEA,mBAAO,CAAC6O,KAAK,CAACC,IAAd,EAAoBD,KAAK,GAAGD,YAAY,CAAC5O,IAAb,EAA5B,EAAiD;AAC/C,kBAAI1f,KAAK,GAAGuuB,KAAK,CAACv3B,KAAlB;AACAy2B,cAAAA,SAAS,GAAGD,gBAAgB,CAACxtB,KAAD,EAAQytB,SAAR,EAAmB7D,WAAnB,CAA5B;AACD;AACF;AACF;AAED,YAAI+D,WAAW,GAAGS,UAAU,CAAC/4B,IAAX,CAAgB84B,mBAAhB,CAAlB;;AAEA,YAAIR,WAAW,IAAI,IAAnB,EAAyB;AACvB,gBAAM,IAAIluB,KAAJ,CAAU,0CAAV,CAAN;AACD;;AAED,YAAImuB,mBAAmB,GAAG,IAA1B;AACA,YAAIC,gBAAgB,GAAG,IAAvB;AACA,YAAIZ,QAAQ,GAAGhC,iBAAf;AACA,YAAIQ,eAAe,GAAG,CAAtB;AACA,YAAI0B,MAAM,GAAG,CAAb;AACA,YAAIW,YAAY,GAAG,IAAnB;AACA,YAAIW,IAAI,GAAGd,WAAW,CAACjO,IAAZ,EAAX;;AAEA,eAAOuN,QAAQ,KAAK,IAAb,IAAqB,CAACwB,IAAI,CAACD,IAAlC,EAAwCrB,MAAM,IAAIsB,IAAI,GAAGd,WAAW,CAACjO,IAAZ,EAAzD,EAA6E;AAC3E,cAAIuN,QAAQ,CAACxjB,KAAT,GAAiB0jB,MAArB,EAA6B;AAC3BW,YAAAA,YAAY,GAAGb,QAAf;AACAA,YAAAA,QAAQ,GAAG,IAAX;AACD,WAHD,MAGO;AACLa,YAAAA,YAAY,GAAGb,QAAQ,CAAChtB,OAAxB;AACD;;AAED,cAAIurB,QAAQ,GAAGwB,UAAU,CAACpD,WAAD,EAAcqD,QAAd,EAAwBwB,IAAI,CAACz3B,KAA7B,EAAoCoO,KAApC,CAAzB;;AAEA,cAAIomB,QAAQ,KAAK,IAAjB,EAAuB;AACrB;AACA;AACA;AACA;AACA,gBAAIyB,QAAQ,KAAK,IAAjB,EAAuB;AACrBA,cAAAA,QAAQ,GAAGa,YAAX;AACD;;AAED;AACD;;AAED,cAAIlD,sBAAJ,EAA4B;AAC1B,gBAAIqC,QAAQ,IAAIzB,QAAQ,CAAC7sB,SAAT,KAAuB,IAAvC,EAA6C;AAC3C;AACA;AACAksB,cAAAA,WAAW,CAACjB,WAAD,EAAcqD,QAAd,CAAX;AACD;AACF;;AAEDxB,UAAAA,eAAe,GAAGF,UAAU,CAACC,QAAD,EAAWC,eAAX,EAA4B0B,MAA5B,CAA5B;;AAEA,cAAIU,gBAAgB,KAAK,IAAzB,EAA+B;AAC7B;AACAD,YAAAA,mBAAmB,GAAGpC,QAAtB;AACD,WAHD,MAGO;AACL;AACA;AACA;AACA;AACAqC,YAAAA,gBAAgB,CAAC5tB,OAAjB,GAA2BurB,QAA3B;AACD;;AAEDqC,UAAAA,gBAAgB,GAAGrC,QAAnB;AACAyB,UAAAA,QAAQ,GAAGa,YAAX;AACD;;AAED,YAAIW,IAAI,CAACD,IAAT,EAAe;AACb;AACAxD,UAAAA,uBAAuB,CAACpB,WAAD,EAAcqD,QAAd,CAAvB;AAEA,iBAAOW,mBAAP;AACD;;AAED,YAAIX,QAAQ,KAAK,IAAjB,EAAuB;AACrB;AACA;AACA,iBAAO,CAACwB,IAAI,CAACD,IAAb,EAAmBrB,MAAM,IAAIsB,IAAI,GAAGd,WAAW,CAACjO,IAAZ,EAApC,EAAwD;AACtD,gBAAIgP,UAAU,GAAG9B,WAAW,CAAChD,WAAD,EAAc6E,IAAI,CAACz3B,KAAnB,EAA0BoO,KAA1B,CAA5B;;AAEA,gBAAIspB,UAAU,KAAK,IAAnB,EAAyB;AACvB;AACD;;AAEDjD,YAAAA,eAAe,GAAGF,UAAU,CAACmD,UAAD,EAAajD,eAAb,EAA8B0B,MAA9B,CAA5B;;AAEA,gBAAIU,gBAAgB,KAAK,IAAzB,EAA+B;AAC7B;AACAD,cAAAA,mBAAmB,GAAGc,UAAtB;AACD,aAHD,MAGO;AACLb,cAAAA,gBAAgB,CAAC5tB,OAAjB,GAA2ByuB,UAA3B;AACD;;AAEDb,YAAAA,gBAAgB,GAAGa,UAAnB;AACD;;AAED,iBAAOd,mBAAP;AACD,SAzI4F,CAyI3F;;;AAGF,YAAIzC,gBAAgB,GAAGD,oBAAoB,CAACtB,WAAD,EAAcqD,QAAd,CAA3C,CA5I6F,CA4IzB;;AAEpE,eAAO,CAACwB,IAAI,CAACD,IAAb,EAAmBrB,MAAM,IAAIsB,IAAI,GAAGd,WAAW,CAACjO,IAAZ,EAApC,EAAwD;AACtD,cAAIiP,UAAU,GAAGzB,aAAa,CAAC/B,gBAAD,EAAmBvB,WAAnB,EAAgCuD,MAAhC,EAAwCsB,IAAI,CAACz3B,KAA7C,EAAoDoO,KAApD,CAA9B;;AAEA,cAAIupB,UAAU,KAAK,IAAnB,EAAyB;AACvB,gBAAI/D,sBAAJ,EAA4B;AAC1B,kBAAI+D,UAAU,CAAChwB,SAAX,KAAyB,IAA7B,EAAmC;AACjC;AACA;AACA;AACA;AACAwsB,gBAAAA,gBAAgB,CAAC8C,MAAjB,CAAwBU,UAAU,CAAC14B,GAAX,KAAmB,IAAnB,GAA0Bk3B,MAA1B,GAAmCwB,UAAU,CAAC14B,GAAtE;AACD;AACF;;AAEDw1B,YAAAA,eAAe,GAAGF,UAAU,CAACoD,UAAD,EAAalD,eAAb,EAA8B0B,MAA9B,CAA5B;;AAEA,gBAAIU,gBAAgB,KAAK,IAAzB,EAA+B;AAC7BD,cAAAA,mBAAmB,GAAGe,UAAtB;AACD,aAFD,MAEO;AACLd,cAAAA,gBAAgB,CAAC5tB,OAAjB,GAA2B0uB,UAA3B;AACD;;AAEDd,YAAAA,gBAAgB,GAAGc,UAAnB;AACD;AACF;;AAED,YAAI/D,sBAAJ,EAA4B;AAC1B;AACA;AACAO,UAAAA,gBAAgB,CAAC9Q,OAAjB,CAAyB,UAAUra,KAAV,EAAiB;AACxC,mBAAO6qB,WAAW,CAACjB,WAAD,EAAc5pB,KAAd,CAAlB;AACD,WAFD;AAGD;;AAED,eAAO4tB,mBAAP;AACD;;AAED,eAASgB,uBAAT,CAAiChF,WAAjC,EAA8CqB,iBAA9C,EAAiEa,WAAjE,EAA8E1mB,KAA9E,EAAqF;AACnF;AACA;AACA,YAAI6lB,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,CAAC1vB,GAAlB,KAA0BvD,QAA5D,EAAsE;AACpE;AACA;AACAgzB,UAAAA,uBAAuB,CAACpB,WAAD,EAAcqB,iBAAiB,CAAChrB,OAAhC,CAAvB;AACA,cAAIgsB,QAAQ,GAAGZ,QAAQ,CAACJ,iBAAD,EAAoBa,WAApB,CAAvB;AACAG,UAAAA,QAAQ,CAACntB,MAAT,GAAkB8qB,WAAlB;AACA,iBAAOqC,QAAP;AACD,SAVkF,CAUjF;AACF;;;AAGAjB,QAAAA,uBAAuB,CAACpB,WAAD,EAAcqB,iBAAd,CAAvB;AACA,YAAIc,OAAO,GAAGC,mBAAmB,CAACF,WAAD,EAAclC,WAAW,CAAC1P,IAA1B,EAAgC9U,KAAhC,CAAjC;AACA2mB,QAAAA,OAAO,CAACjtB,MAAR,GAAiB8qB,WAAjB;AACA,eAAOmC,OAAP;AACD;;AAED,eAAS8C,sBAAT,CAAgCjF,WAAhC,EAA6CqB,iBAA7C,EAAgEzX,OAAhE,EAAyEpO,KAAzE,EAAgF;AAC9E,YAAInP,GAAG,GAAGud,OAAO,CAACvd,GAAlB;AACA,YAAI+J,KAAK,GAAGirB,iBAAZ;;AAEA,eAAOjrB,KAAK,KAAK,IAAjB,EAAuB;AACrB;AACA;AACA,cAAIA,KAAK,CAAC/J,GAAN,KAAcA,GAAlB,EAAuB;AACrB,gBAAIkyB,WAAW,GAAG3U,OAAO,CAACnY,IAA1B;;AAEA,gBAAI8sB,WAAW,KAAK5uB,mBAApB,EAAyC;AACvC,kBAAIyG,KAAK,CAACzE,GAAN,KAActD,QAAlB,EAA4B;AAC1B+yB,gBAAAA,uBAAuB,CAACpB,WAAD,EAAc5pB,KAAK,CAACC,OAApB,CAAvB;AACA,oBAAIgsB,QAAQ,GAAGZ,QAAQ,CAACrrB,KAAD,EAAQwT,OAAO,CAAC/d,KAAR,CAAcuO,QAAtB,CAAvB;AACAioB,gBAAAA,QAAQ,CAACntB,MAAT,GAAkB8qB,WAAlB;AAEA;AACEqC,kBAAAA,QAAQ,CAAClT,YAAT,GAAwBvF,OAAO,CAACE,OAAhC;AACAuY,kBAAAA,QAAQ,CAACnT,WAAT,GAAuBtF,OAAO,CAACC,MAA/B;AACD;AAED,uBAAOwY,QAAP;AACD;AACF,aAbD,MAaO;AACL,kBAAIjsB,KAAK,CAACmoB,WAAN,KAAsBA,WAAtB,IAAuC;AAC1CiE,cAAAA,iCAAiC,CAACpsB,KAAD,EAAQwT,OAAR,CAD9B,IACoD;AACxD;AACA;AACA;AACApc,cAAAA,kBALA,EAKwB;AACtB4zB,gBAAAA,uBAAuB,CAACpB,WAAD,EAAc5pB,KAAK,CAACC,OAApB,CAAvB;;AAEA,oBAAI6uB,SAAS,GAAGzD,QAAQ,CAACrrB,KAAD,EAAQwT,OAAO,CAAC/d,KAAhB,CAAxB;;AAEAq5B,gBAAAA,SAAS,CAAC7E,GAAV,GAAgBF,SAAS,CAACH,WAAD,EAAc5pB,KAAd,EAAqBwT,OAArB,CAAzB;AACAsb,gBAAAA,SAAS,CAAChwB,MAAV,GAAmB8qB,WAAnB;AAEA;AACEkF,kBAAAA,SAAS,CAAC/V,YAAV,GAAyBvF,OAAO,CAACE,OAAjC;AACAob,kBAAAA,SAAS,CAAChW,WAAV,GAAwBtF,OAAO,CAACC,MAAhC;AACD;AAED,uBAAOqb,SAAP;AACD;AACF,aArCoB,CAqCnB;;;AAGF9D,YAAAA,uBAAuB,CAACpB,WAAD,EAAc5pB,KAAd,CAAvB;AACA;AACD,WA1CD,MA0CO;AACL6qB,YAAAA,WAAW,CAACjB,WAAD,EAAc5pB,KAAd,CAAX;AACD;;AAEDA,UAAAA,KAAK,GAAGA,KAAK,CAACC,OAAd;AACD;;AAED,YAAIuT,OAAO,CAACnY,IAAR,KAAiB9B,mBAArB,EAA0C;AACxC,cAAIwyB,OAAO,GAAGY,uBAAuB,CAACnZ,OAAO,CAAC/d,KAAR,CAAcuO,QAAf,EAAyB4lB,WAAW,CAAC1P,IAArC,EAA2C9U,KAA3C,EAAkDoO,OAAO,CAACvd,GAA1D,CAArC;AACA81B,UAAAA,OAAO,CAACjtB,MAAR,GAAiB8qB,WAAjB;AACA,iBAAOmC,OAAP;AACD,SAJD,MAIO;AACL,cAAIgD,SAAS,GAAG1C,sBAAsB,CAAC7Y,OAAD,EAAUoW,WAAW,CAAC1P,IAAtB,EAA4B9U,KAA5B,CAAtC;;AAEA2pB,UAAAA,SAAS,CAAC9E,GAAV,GAAgBF,SAAS,CAACH,WAAD,EAAcqB,iBAAd,EAAiCzX,OAAjC,CAAzB;AACAub,UAAAA,SAAS,CAACjwB,MAAV,GAAmB8qB,WAAnB;AACA,iBAAOmF,SAAP;AACD;AACF;;AAED,eAASC,qBAAT,CAA+BpF,WAA/B,EAA4CqB,iBAA5C,EAA+DsB,MAA/D,EAAuEnnB,KAAvE,EAA8E;AAC5E,YAAInP,GAAG,GAAGs2B,MAAM,CAACt2B,GAAjB;AACA,YAAI+J,KAAK,GAAGirB,iBAAZ;;AAEA,eAAOjrB,KAAK,KAAK,IAAjB,EAAuB;AACrB;AACA;AACA,cAAIA,KAAK,CAAC/J,GAAN,KAAcA,GAAlB,EAAuB;AACrB,gBAAI+J,KAAK,CAACzE,GAAN,KAAczD,UAAd,IAA4BkI,KAAK,CAACV,SAAN,CAAgBuP,aAAhB,KAAkC0d,MAAM,CAAC1d,aAArE,IAAsF7O,KAAK,CAACV,SAAN,CAAgBktB,cAAhB,KAAmCD,MAAM,CAACC,cAApI,EAAoJ;AAClJxB,cAAAA,uBAAuB,CAACpB,WAAD,EAAc5pB,KAAK,CAACC,OAApB,CAAvB;AACA,kBAAIgsB,QAAQ,GAAGZ,QAAQ,CAACrrB,KAAD,EAAQusB,MAAM,CAACvoB,QAAP,IAAmB,EAA3B,CAAvB;AACAioB,cAAAA,QAAQ,CAACntB,MAAT,GAAkB8qB,WAAlB;AACA,qBAAOqC,QAAP;AACD,aALD,MAKO;AACLjB,cAAAA,uBAAuB,CAACpB,WAAD,EAAc5pB,KAAd,CAAvB;AACA;AACD;AACF,WAVD,MAUO;AACL6qB,YAAAA,WAAW,CAACjB,WAAD,EAAc5pB,KAAd,CAAX;AACD;;AAEDA,UAAAA,KAAK,GAAGA,KAAK,CAACC,OAAd;AACD;;AAED,YAAI8rB,OAAO,GAAGU,qBAAqB,CAACF,MAAD,EAAS3C,WAAW,CAAC1P,IAArB,EAA2B9U,KAA3B,CAAnC;AACA2mB,QAAAA,OAAO,CAACjtB,MAAR,GAAiB8qB,WAAjB;AACA,eAAOmC,OAAP;AACD,OAjzB8C,CAizB7C;AACF;AACA;;;AAGA,eAASkD,oBAAT,CAA8BrF,WAA9B,EAA2CqB,iBAA3C,EAA8DV,QAA9D,EAAwEnlB,KAAxE,EAA+E;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAI8pB,yBAAyB,GAAG,OAAO3E,QAAP,KAAoB,QAApB,IAAgCA,QAAQ,KAAK,IAA7C,IAAqDA,QAAQ,CAAClvB,IAAT,KAAkB9B,mBAAvE,IAA8FgxB,QAAQ,CAACt0B,GAAT,KAAiB,IAA/I;;AAEA,YAAIi5B,yBAAJ,EAA+B;AAC7B3E,UAAAA,QAAQ,GAAGA,QAAQ,CAAC90B,KAAT,CAAeuO,QAA1B;AACD,SAZ4E,CAY3E;;;AAGF,YAAI,OAAOumB,QAAP,KAAoB,QAApB,IAAgCA,QAAQ,KAAK,IAAjD,EAAuD;AACrD,kBAAQA,QAAQ,CAAC/uB,QAAjB;AACE,iBAAKrC,kBAAL;AACE,qBAAOyyB,gBAAgB,CAACiD,sBAAsB,CAACjF,WAAD,EAAcqB,iBAAd,EAAiCV,QAAjC,EAA2CnlB,KAA3C,CAAvB,CAAvB;;AAEF,iBAAK9L,iBAAL;AACE,qBAAOsyB,gBAAgB,CAACoD,qBAAqB,CAACpF,WAAD,EAAcqB,iBAAd,EAAiCV,QAAjC,EAA2CnlB,KAA3C,CAAtB,CAAvB;AALJ;;AASA,cAAI1E,OAAO,CAAC6pB,QAAD,CAAX,EAAuB;AACrB,mBAAOmD,sBAAsB,CAAC9D,WAAD,EAAcqB,iBAAd,EAAiCV,QAAjC,EAA2CnlB,KAA3C,CAA7B;AACD;;AAED,cAAI1K,aAAa,CAAC6vB,QAAD,CAAjB,EAA6B;AAC3B,mBAAO2D,yBAAyB,CAACtE,WAAD,EAAcqB,iBAAd,EAAiCV,QAAjC,EAA2CnlB,KAA3C,CAAhC;AACD;;AAEDklB,UAAAA,wBAAwB,CAACV,WAAD,EAAcW,QAAd,CAAxB;AACD;;AAED,YAAI,OAAOA,QAAP,KAAoB,QAApB,IAAgCA,QAAQ,KAAK,EAA7C,IAAmD,OAAOA,QAAP,KAAoB,QAA3E,EAAqF;AACnF,iBAAOqB,gBAAgB,CAACgD,uBAAuB,CAAChF,WAAD,EAAcqB,iBAAd,EAAiC,KAAKV,QAAtC,EAAgDnlB,KAAhD,CAAxB,CAAvB;AACD;;AAED;AACE,cAAI,OAAOmlB,QAAP,KAAoB,UAAxB,EAAoC;AAClCG,YAAAA,kBAAkB,CAACd,WAAD,CAAlB;AACD;AACF,SA5C4E,CA4C3E;;AAGF,eAAOoB,uBAAuB,CAACpB,WAAD,EAAcqB,iBAAd,CAA9B;AACD;;AAED,aAAOgE,oBAAP;AACD;;AAED,QAAIA,oBAAoB,GAAGtE,eAAe,CAAC,IAAD,CAA1C;AACA,QAAIwE,gBAAgB,GAAGxE,eAAe,CAAC,KAAD,CAAtC;;AACA,aAASyE,gBAAT,CAA0BjwB,OAA1B,EAAmCgW,cAAnC,EAAmD;AACjD,UAAIhW,OAAO,KAAK,IAAZ,IAAoBgW,cAAc,CAACnV,KAAf,KAAyBb,OAAO,CAACa,KAAzD,EAAgE;AAC9D,cAAM,IAAIP,KAAJ,CAAU,oCAAV,CAAN;AACD;;AAED,UAAI0V,cAAc,CAACnV,KAAf,KAAyB,IAA7B,EAAmC;AACjC;AACD;;AAED,UAAIqvB,YAAY,GAAGla,cAAc,CAACnV,KAAlC;AACA,UAAIuqB,QAAQ,GAAGe,oBAAoB,CAAC+D,YAAD,EAAeA,YAAY,CAAChH,YAA5B,CAAnC;AACAlT,MAAAA,cAAc,CAACnV,KAAf,GAAuBuqB,QAAvB;AACAA,MAAAA,QAAQ,CAACzrB,MAAT,GAAkBqW,cAAlB;;AAEA,aAAOka,YAAY,CAACpvB,OAAb,KAAyB,IAAhC,EAAsC;AACpCovB,QAAAA,YAAY,GAAGA,YAAY,CAACpvB,OAA5B;AACAsqB,QAAAA,QAAQ,GAAGA,QAAQ,CAACtqB,OAAT,GAAmBqrB,oBAAoB,CAAC+D,YAAD,EAAeA,YAAY,CAAChH,YAA5B,CAAlD;AACAkC,QAAAA,QAAQ,CAACzrB,MAAT,GAAkBqW,cAAlB;AACD;;AAEDoV,MAAAA,QAAQ,CAACtqB,OAAT,GAAmB,IAAnB;AACD,KAliLa,CAkiLZ;;;AAEF,aAASqvB,gBAAT,CAA0Bna,cAA1B,EAA0C/P,KAA1C,EAAiD;AAC/C,UAAIpF,KAAK,GAAGmV,cAAc,CAACnV,KAA3B;;AAEA,aAAOA,KAAK,KAAK,IAAjB,EAAuB;AACrBuvB,QAAAA,mBAAmB,CAACvvB,KAAD,EAAQoF,KAAR,CAAnB;AACApF,QAAAA,KAAK,GAAGA,KAAK,CAACC,OAAd;AACD;AACF;;AAED,QAAIuvB,YAAY,GAAG,EAAnB;AACA,QAAIC,oBAAoB,GAAGhb,YAAY,CAAC+a,YAAD,CAAvC;AACA,QAAIE,uBAAuB,GAAGjb,YAAY,CAAC+a,YAAD,CAA1C;AACA,QAAIG,uBAAuB,GAAGlb,YAAY,CAAC+a,YAAD,CAA1C;;AAEA,aAASI,eAAT,CAAyBnd,CAAzB,EAA4B;AAC1B,UAAIA,CAAC,KAAK+c,YAAV,EAAwB;AACtB,cAAM,IAAI/vB,KAAJ,CAAU,0EAA0E,iCAApF,CAAN;AACD;;AAED,aAAOgT,CAAP;AACD;;AAED,aAASod,oBAAT,GAAgC;AAC9B,UAAIC,YAAY,GAAGF,eAAe,CAACD,uBAAuB,CAACxwB,OAAzB,CAAlC;AACA,aAAO2wB,YAAP;AACD;;AAED,aAASC,iBAAT,CAA2BxzB,KAA3B,EAAkCyzB,gBAAlC,EAAoD;AAClD;AACA;AACAlkB,MAAAA,IAAI,CAAC6jB,uBAAD,EAA0BK,gBAA1B,EAA4CzzB,KAA5C,CAAJ,CAHkD,CAGM;AACxD;;AAEAuP,MAAAA,IAAI,CAAC4jB,uBAAD,EAA0BnzB,KAA1B,EAAiCA,KAAjC,CAAJ,CANkD,CAML;AAC7C;AACA;AACA;AACA;;AAEAuP,MAAAA,IAAI,CAAC2jB,oBAAD,EAAuBD,YAAvB,EAAqCjzB,KAArC,CAAJ;AACA,UAAI0zB,eAAe,GAAGxhB,kBAAkB,EAAxC,CAbkD,CAaN;;AAE5CkG,MAAAA,GAAG,CAAC8a,oBAAD,EAAuBlzB,KAAvB,CAAH;AACAuP,MAAAA,IAAI,CAAC2jB,oBAAD,EAAuBQ,eAAvB,EAAwC1zB,KAAxC,CAAJ;AACD;;AAED,aAAS2zB,gBAAT,CAA0B3zB,KAA1B,EAAiC;AAC/BoY,MAAAA,GAAG,CAAC8a,oBAAD,EAAuBlzB,KAAvB,CAAH;AACAoY,MAAAA,GAAG,CAAC+a,uBAAD,EAA0BnzB,KAA1B,CAAH;AACAoY,MAAAA,GAAG,CAACgb,uBAAD,EAA0BpzB,KAA1B,CAAH;AACD;;AAED,aAAS4zB,cAAT,GAA0B;AACxB,UAAI10B,OAAO,GAAGm0B,eAAe,CAACH,oBAAoB,CAACtwB,OAAtB,CAA7B;AACA,aAAO1D,OAAP;AACD;;AAED,aAAS20B,eAAT,CAAyB7zB,KAAzB,EAAgC;AAC9B,UAAIuzB,YAAY,GAAGF,eAAe,CAACD,uBAAuB,CAACxwB,OAAzB,CAAlC;AACA,UAAI1D,OAAO,GAAGm0B,eAAe,CAACH,oBAAoB,CAACtwB,OAAtB,CAA7B;AACA,UAAIgmB,WAAW,GAAGzW,mBAAmB,CAACjT,OAAD,EAAUc,KAAK,CAAClB,IAAhB,CAArC,CAH8B,CAG8B;;AAE5D,UAAII,OAAO,KAAK0pB,WAAhB,EAA6B;AAC3B;AACD,OAP6B,CAO5B;AACF;;;AAGArZ,MAAAA,IAAI,CAAC4jB,uBAAD,EAA0BnzB,KAA1B,EAAiCA,KAAjC,CAAJ;AACAuP,MAAAA,IAAI,CAAC2jB,oBAAD,EAAuBtK,WAAvB,EAAoC5oB,KAApC,CAAJ;AACD;;AAED,aAAS8zB,cAAT,CAAwB9zB,KAAxB,EAA+B;AAC7B;AACA;AACA,UAAImzB,uBAAuB,CAACvwB,OAAxB,KAAoC5C,KAAxC,EAA+C;AAC7C;AACD;;AAEDoY,MAAAA,GAAG,CAAC8a,oBAAD,EAAuBlzB,KAAvB,CAAH;AACAoY,MAAAA,GAAG,CAAC+a,uBAAD,EAA0BnzB,KAA1B,CAAH;AACD;;AAED,QAAI+zB,sBAAsB,GAAG,CAA7B,CAvnLc,CAunLkB;AAChC;AACA;AACA;;AAEA,QAAIC,0BAA0B,GAAG,CAAjC,CA5nLc,CA4nLsB;AACpC;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAIC,8BAA8B,GAAG,CAArC,CApoLc,CAooL0B;AACxC;AACA;;AAEA,QAAIC,qBAAqB,GAAG,CAA5B;AACA,QAAIC,mBAAmB,GAAGjc,YAAY,CAAC6b,sBAAD,CAAtC;;AACA,aAASK,kBAAT,CAA4Bva,aAA5B,EAA2Cwa,IAA3C,EAAiD;AAC/C,aAAO,CAACxa,aAAa,GAAGwa,IAAjB,MAA2B,CAAlC;AACD;;AACD,aAASC,gCAAT,CAA0Cza,aAA1C,EAAyD;AACvD,aAAOA,aAAa,GAAGma,0BAAvB;AACD;;AACD,aAASO,yBAAT,CAAmC1a,aAAnC,EAAkD2a,cAAlD,EAAkE;AAChE,aAAO3a,aAAa,GAAGma,0BAAhB,GAA6CQ,cAApD;AACD;;AACD,aAASC,yBAAT,CAAmC5a,aAAnC,EAAkD6a,cAAlD,EAAkE;AAChE,aAAO7a,aAAa,GAAG6a,cAAvB;AACD;;AACD,aAASC,mBAAT,CAA6B30B,KAA7B,EAAoC40B,UAApC,EAAgD;AAC9CrlB,MAAAA,IAAI,CAAC4kB,mBAAD,EAAsBS,UAAtB,EAAkC50B,KAAlC,CAAJ;AACD;;AACD,aAAS60B,kBAAT,CAA4B70B,KAA5B,EAAmC;AACjCoY,MAAAA,GAAG,CAAC+b,mBAAD,EAAsBn0B,KAAtB,CAAH;AACD;;AAED,aAAS80B,qBAAT,CAA+Blc,cAA/B,EAA+Cmc,kBAA/C,EAAmE;AACjE;AACA;AACA,UAAIpP,SAAS,GAAG/M,cAAc,CAAC8C,aAA/B;;AAEA,UAAIiK,SAAS,KAAK,IAAlB,EAAwB;AACtB,YAAIA,SAAS,CAACqP,UAAV,KAAyB,IAA7B,EAAmC;AACjC;AACA,iBAAO,IAAP;AACD;;AAED,eAAO,KAAP;AACD;;AAED,UAAI97B,KAAK,GAAG0f,cAAc,CAACwS,aAA3B,CAdiE,CAcvB;;AAE1C;AACE,eAAO,IAAP;AACD,OAlBgE,CAkB/D;AACH;;AACD,aAAS6J,kBAAT,CAA4BC,GAA5B,EAAiC;AAC/B,UAAIhzB,IAAI,GAAGgzB,GAAX;;AAEA,aAAOhzB,IAAI,KAAK,IAAhB,EAAsB;AACpB,YAAIA,IAAI,CAAClD,GAAL,KAAahD,iBAAjB,EAAoC;AAClC,cAAIotB,KAAK,GAAGlnB,IAAI,CAACwZ,aAAjB;;AAEA,cAAI0N,KAAK,KAAK,IAAd,EAAoB;AAClB,gBAAI4L,UAAU,GAAG5L,KAAK,CAAC4L,UAAvB;;AAEA,gBAAIA,UAAU,KAAK,IAAf,IAAuBrkB,yBAAyB,EAAhD,IAAsDC,0BAA0B,EAApF,EAAwF;AACtF,qBAAO1O,IAAP;AACD;AACF;AACF,SAVD,MAUO,IAAIA,IAAI,CAAClD,GAAL,KAAa1C,qBAAb,IAAsC;AACjD;AACA4F,QAAAA,IAAI,CAACkpB,aAAL,CAAmB+J,WAAnB,KAAmC/sB,SAF5B,EAEuC;AAC5C,cAAIgtB,UAAU,GAAG,CAAClzB,IAAI,CAACI,KAAL,GAAa7B,UAAd,MAA8BR,OAA/C;;AAEA,cAAIm1B,UAAJ,EAAgB;AACd,mBAAOlzB,IAAP;AACD;AACF,SARM,MAQA,IAAIA,IAAI,CAACuB,KAAL,KAAe,IAAnB,EAAyB;AAC9BvB,UAAAA,IAAI,CAACuB,KAAL,CAAWlB,MAAX,GAAoBL,IAApB;AACAA,UAAAA,IAAI,GAAGA,IAAI,CAACuB,KAAZ;AACA;AACD;;AAED,YAAIvB,IAAI,KAAKgzB,GAAb,EAAkB;AAChB,iBAAO,IAAP;AACD;;AAED,eAAOhzB,IAAI,CAACwB,OAAL,KAAiB,IAAxB,EAA8B;AAC5B,cAAIxB,IAAI,CAACK,MAAL,KAAgB,IAAhB,IAAwBL,IAAI,CAACK,MAAL,KAAgB2yB,GAA5C,EAAiD;AAC/C,mBAAO,IAAP;AACD;;AAEDhzB,UAAAA,IAAI,GAAGA,IAAI,CAACK,MAAZ;AACD;;AAEDL,QAAAA,IAAI,CAACwB,OAAL,CAAanB,MAAb,GAAsBL,IAAI,CAACK,MAA3B;AACAL,QAAAA,IAAI,GAAGA,IAAI,CAACwB,OAAZ;AACD;;AAED,aAAO,IAAP;AACD;;AAED,QAAI2xB,SAAS;AACb;AACA,KAFA,CAhuLc,CAkuLX;;AAEH,QAAIC,SAAS;AACb;AACA,KAFA,CApuLc,CAsuLX;;AAEH,QAAIC,SAAS;AACb;AACA,KAFA;AAGA,QAAIC,MAAM;AACV;AACA,KAFA;AAGA,QAAIC,SAAS;AACb;AACA,KAFA,CA9uLc,CAkvLd;AACA;;AAEA,QAAIC,qBAAqB,GAAG,EAA5B;;AACA,aAASC,2BAAT,GAAuC;AACrC,WAAK,IAAIx8B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGu8B,qBAAqB,CAACj+B,MAA1C,EAAkD0B,CAAC,EAAnD,EAAuD;AACrD,YAAIy8B,aAAa,GAAGF,qBAAqB,CAACv8B,CAAD,CAAzC;AAEA;AACEy8B,UAAAA,aAAa,CAACC,+BAAd,GAAgD,IAAhD;AACD;AACF;;AAEDH,MAAAA,qBAAqB,CAACj+B,MAAtB,GAA+B,CAA/B;AACD;;AAED,QAAIq+B,wBAAwB,GAAG3+B,oBAAoB,CAACud,sBAApD;AAAA,QACIqhB,yBAAyB,GAAG5+B,oBAAoB,CAACykB,uBADrD;AAEA,QAAIoa,uCAAJ;AACA,QAAIC,0BAAJ;AAEA;AACED,MAAAA,uCAAuC,GAAG,IAAIxX,GAAJ,EAA1C;AACD,KAzwLa,CA2wLd;;AACA,QAAI0D,WAAW,GAAGxY,OAAlB,CA5wLc,CA4wLa;AAC3B;;AAEA,QAAIwsB,yBAAyB,GAAG,IAAhC,CA/wLc,CA+wLwB;AACtC;AACA;AACA;;AAEA,QAAIC,WAAW,GAAG,IAAlB;AACA,QAAIC,kBAAkB,GAAG,IAAzB,CArxLc,CAqxLiB;AAC/B;AACA;AACA;;AAEA,QAAIC,4BAA4B,GAAG,KAAnC,CA1xLc,CA0xL4B;AAC1C;AACA;AACA;;AAEA,QAAIC,0CAA0C,GAAG,KAAjD,CA/xLc,CA+xL0C;AACxD;AACA;;AAEA,QAAIC,qBAAqB,GAAG,CAA5B;AACA,QAAIC,eAAe,GAAG,EAAtB,CApyLc,CAoyLY;;AAE1B,QAAIC,oBAAoB,GAAG,IAA3B,CAtyLc,CAsyLmB;AACjC;AACA;;AAEA,QAAIC,YAAY,GAAG,IAAnB;AACA,QAAIC,uBAAuB,GAAG,CAAC,CAA/B,CA3yLc,CA2yLoB;AAClC;AACA;;AAEA,QAAIC,0BAA0B,GAAG,KAAjC;;AAEA,aAASC,iBAAT,GAA6B;AAC3B;AACE,YAAIC,QAAQ,GAAGL,oBAAf;;AAEA,YAAIC,YAAY,KAAK,IAArB,EAA2B;AACzBA,UAAAA,YAAY,GAAG,CAACI,QAAD,CAAf;AACD,SAFD,MAEO;AACLJ,UAAAA,YAAY,CAACnnB,IAAb,CAAkBunB,QAAlB;AACD;AACF;AACF;;AAED,aAASC,kBAAT,GAA8B;AAC5B;AACE,YAAID,QAAQ,GAAGL,oBAAf;;AAEA,YAAIC,YAAY,KAAK,IAArB,EAA2B;AACzBC,UAAAA,uBAAuB;;AAEvB,cAAID,YAAY,CAACC,uBAAD,CAAZ,KAA0CG,QAA9C,EAAwD;AACtDE,YAAAA,uBAAuB,CAACF,QAAD,CAAvB;AACD;AACF;AACF;AACF;;AAED,aAASG,oBAAT,CAA8BC,IAA9B,EAAoC;AAClC;AACE,YAAIA,IAAI,KAAK9uB,SAAT,IAAsB8uB,IAAI,KAAK,IAA/B,IAAuC,CAAC/yB,OAAO,CAAC+yB,IAAD,CAAnD,EAA2D;AACzD;AACA;AACAp/B,UAAAA,KAAK,CAAC,sFAAsF,iDAAvF,EAA0I2+B,oBAA1I,EAAgK,OAAOS,IAAvK,CAAL;AACD;AACF;AACF;;AAED,aAASF,uBAAT,CAAiCG,eAAjC,EAAkD;AAChD;AACE,YAAI1f,aAAa,GAAG1X,yBAAyB,CAACm2B,yBAAD,CAA7C;;AAEA,YAAI,CAACF,uCAAuC,CAACte,GAAxC,CAA4CD,aAA5C,CAAL,EAAiE;AAC/Due,UAAAA,uCAAuC,CAAC/W,GAAxC,CAA4CxH,aAA5C;;AAEA,cAAIif,YAAY,KAAK,IAArB,EAA2B;AACzB,gBAAIU,KAAK,GAAG,EAAZ;AACA,gBAAIC,iBAAiB,GAAG,EAAxB;;AAEA,iBAAK,IAAIl+B,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIw9B,uBAArB,EAA8Cx9B,CAAC,EAA/C,EAAmD;AACjD,kBAAIm+B,WAAW,GAAGZ,YAAY,CAACv9B,CAAD,CAA9B;AACA,kBAAIo+B,WAAW,GAAGp+B,CAAC,KAAKw9B,uBAAN,GAAgCQ,eAAhC,GAAkDG,WAApE;AACA,kBAAIpC,GAAG,GAAG/7B,CAAC,GAAG,CAAJ,GAAQ,IAAR,GAAem+B,WAAzB,CAHiD,CAGX;AACtC;;AAEA,qBAAOpC,GAAG,CAACz9B,MAAJ,GAAa4/B,iBAApB,EAAuC;AACrCnC,gBAAAA,GAAG,IAAI,GAAP;AACD;;AAEDA,cAAAA,GAAG,IAAIqC,WAAW,GAAG,IAArB;AACAH,cAAAA,KAAK,IAAIlC,GAAT;AACD;;AAEDp9B,YAAAA,KAAK,CAAC,qEAAqE,kDAArE,GAA0H,4FAA1H,GAAyN,6CAAzN,GAAyQ,6DAAzQ,GAAyU,IAAzU,GAAgV,6DAAjV,EAAgZ2f,aAAhZ,EAA+Z2f,KAA/Z,CAAL;AACD;AACF;AACF;AACF;;AAED,aAASI,qBAAT,GAAiC;AAC/B,YAAM,IAAIt0B,KAAJ,CAAU,kHAAkH,kCAAlH,GAAuJ,wFAAvJ,GAAkP,+CAAlP,GAAoS,iEAApS,GAAwW,kGAAlX,CAAN;AACD;;AAED,aAASu0B,kBAAT,CAA4BC,QAA5B,EAAsCC,QAAtC,EAAgD;AAC9C;AACE,YAAIf,0BAAJ,EAAgC;AAC9B;AACA,iBAAO,KAAP;AACD;AACF;;AAED,UAAIe,QAAQ,KAAK,IAAjB,EAAuB;AACrB;AACE7/B,UAAAA,KAAK,CAAC,qEAAqE,mEAArE,GAA2I,yCAA5I,EAAuL2+B,oBAAvL,CAAL;AACD;AAED,eAAO,KAAP;AACD;;AAED;AACE;AACA;AACA,YAAIiB,QAAQ,CAACjgC,MAAT,KAAoBkgC,QAAQ,CAAClgC,MAAjC,EAAyC;AACvCK,UAAAA,KAAK,CAAC,uEAAuE,wDAAvE,GAAkI,gBAAlI,GAAqJ,cAAtJ,EAAsK2+B,oBAAtK,EAA4L,MAAMkB,QAAQ,CAAC3Z,IAAT,CAAc,IAAd,CAAN,GAA4B,GAAxN,EAA6N,MAAM0Z,QAAQ,CAAC1Z,IAAT,CAAc,IAAd,CAAN,GAA4B,GAAzP,CAAL;AACD;AACF;;AAED,WAAK,IAAI7kB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGw+B,QAAQ,CAAClgC,MAAb,IAAuB0B,CAAC,GAAGu+B,QAAQ,CAACjgC,MAApD,EAA4D0B,CAAC,EAA7D,EAAiE;AAC/D,YAAIwhB,QAAQ,CAAC+c,QAAQ,CAACv+B,CAAD,CAAT,EAAcw+B,QAAQ,CAACx+B,CAAD,CAAtB,CAAZ,EAAwC;AACtC;AACD;;AAED,eAAO,KAAP;AACD;;AAED,aAAO,IAAP;AACD;;AAED,aAASy+B,eAAT,CAAyBh1B,OAAzB,EAAkCgW,cAAlC,EAAkDjC,SAAlD,EAA6Dzd,KAA7D,EAAoE2+B,SAApE,EAA+EC,eAA/E,EAAgG;AAC9F5V,MAAAA,WAAW,GAAG4V,eAAd;AACA5B,MAAAA,yBAAyB,GAAGtd,cAA5B;AAEA;AACE8d,QAAAA,YAAY,GAAG9zB,OAAO,KAAK,IAAZ,GAAmBA,OAAO,CAACm1B,eAA3B,GAA6C,IAA5D;AACApB,QAAAA,uBAAuB,GAAG,CAAC,CAA3B,CAFF,CAEgC;;AAE9BC,QAAAA,0BAA0B,GAAGh0B,OAAO,KAAK,IAAZ,IAAoBA,OAAO,CAAC9D,IAAR,KAAiB8Z,cAAc,CAAC9Z,IAAjF;AACD;AAED8Z,MAAAA,cAAc,CAAC8C,aAAf,GAA+B,IAA/B;AACA9C,MAAAA,cAAc,CAACmK,WAAf,GAA6B,IAA7B;AACAnK,MAAAA,cAAc,CAAC/P,KAAf,GAAuBa,OAAvB,CAb8F,CAa9D;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACE,YAAI9G,OAAO,KAAK,IAAZ,IAAoBA,OAAO,CAAC8Y,aAAR,KAA0B,IAAlD,EAAwD;AACtDoa,UAAAA,wBAAwB,CAAClzB,OAAzB,GAAmCo1B,4BAAnC;AACD,SAFD,MAEO,IAAItB,YAAY,KAAK,IAArB,EAA2B;AAChC;AACA;AACA;AACA;AACA;AACAZ,UAAAA,wBAAwB,CAAClzB,OAAzB,GAAmCq1B,wCAAnC;AACD,SAPM,MAOA;AACLnC,UAAAA,wBAAwB,CAAClzB,OAAzB,GAAmCs1B,2BAAnC;AACD;AACF;AAED,UAAIzwB,QAAQ,GAAGkP,SAAS,CAACzd,KAAD,EAAQ2+B,SAAR,CAAxB,CAxC8F,CAwClD;;AAE5C,UAAIvB,0CAAJ,EAAgD;AAC9C;AACA;AACA,YAAI6B,iBAAiB,GAAG,CAAxB;;AAEA,WAAG;AACD7B,UAAAA,0CAA0C,GAAG,KAA7C;;AAEA,cAAI6B,iBAAiB,IAAI3B,eAAzB,EAA0C;AACxC,kBAAM,IAAItzB,KAAJ,CAAU,wEAAwE,mBAAlF,CAAN;AACD;;AAEDi1B,UAAAA,iBAAiB,IAAI,CAArB;AAEA;AACE;AACA;AACAvB,YAAAA,0BAA0B,GAAG,KAA7B;AACD,WAbA,CAaC;;AAGFT,UAAAA,WAAW,GAAG,IAAd;AACAC,UAAAA,kBAAkB,GAAG,IAArB;AACAxd,UAAAA,cAAc,CAACmK,WAAf,GAA6B,IAA7B;AAEA;AACE;AACA4T,YAAAA,uBAAuB,GAAG,CAAC,CAA3B;AACD;AAEDb,UAAAA,wBAAwB,CAAClzB,OAAzB,GAAoCw1B,8BAApC;AACA3wB,UAAAA,QAAQ,GAAGkP,SAAS,CAACzd,KAAD,EAAQ2+B,SAAR,CAApB;AACD,SA3BD,QA2BSvB,0CA3BT;AA4BD,OA3E6F,CA2E5F;AACF;;;AAGAR,MAAAA,wBAAwB,CAAClzB,OAAzB,GAAmCy1B,qBAAnC;AAEA;AACEzf,QAAAA,cAAc,CAACmf,eAAf,GAAiCrB,YAAjC;AACD,OAnF6F,CAmF5F;AACF;;AAGA,UAAI4B,oBAAoB,GAAGnC,WAAW,KAAK,IAAhB,IAAwBA,WAAW,CAAChT,IAAZ,KAAqB,IAAxE;AACAjB,MAAAA,WAAW,GAAGxY,OAAd;AACAwsB,MAAAA,yBAAyB,GAAG,IAA5B;AACAC,MAAAA,WAAW,GAAG,IAAd;AACAC,MAAAA,kBAAkB,GAAG,IAArB;AAEA;AACEK,QAAAA,oBAAoB,GAAG,IAAvB;AACAC,QAAAA,YAAY,GAAG,IAAf;AACAC,QAAAA,uBAAuB,GAAG,CAAC,CAA3B,CAHF,CAGgC;AAC9B;AACA;AACA;;AAEA,YAAI/zB,OAAO,KAAK,IAAZ,IAAoB,CAACA,OAAO,CAACN,KAAR,GAAgBP,UAAjB,OAAkC6W,cAAc,CAACtW,KAAf,GAAuBP,UAAzD,CAApB,IAA4F;AAChG;AACA;AACA;AACA;AACA,SAACa,OAAO,CAAC+a,IAAR,GAAe1U,cAAhB,MAAoCD,MALpC,EAK4C;AAC1ClR,UAAAA,KAAK,CAAC,oEAAoE,wBAArE,CAAL;AACD;AACF;AAEDu+B,MAAAA,4BAA4B,GAAG,KAA/B,CA/G8F,CA+GxD;AACtC;;AAEA,UAAIiC,oBAAJ,EAA0B;AACxB,cAAM,IAAIp1B,KAAJ,CAAU,6EAA6E,yBAAvF,CAAN;AACD;;AAED,aAAOuE,QAAP;AACD;;AACD,aAAS8wB,YAAT,CAAsB31B,OAAtB,EAA+BgW,cAA/B,EAA+C/P,KAA/C,EAAsD;AACpD+P,MAAAA,cAAc,CAACmK,WAAf,GAA6BngB,OAAO,CAACmgB,WAArC,CADoD,CACF;AAClD;;AAEA;AACEnK,QAAAA,cAAc,CAACtW,KAAf,IAAwB,EAAEzB,OAAO,GAAGT,MAAZ,CAAxB;AACD;AAEDwC,MAAAA,OAAO,CAACiG,KAAR,GAAgBoG,WAAW,CAACrM,OAAO,CAACiG,KAAT,EAAgBA,KAAhB,CAA3B;AACD;;AACD,aAAS2vB,oBAAT,GAAgC;AAC9B;AACA;AACA1C,MAAAA,wBAAwB,CAAClzB,OAAzB,GAAmCy1B,qBAAnC;;AAEA,UAAIhC,4BAAJ,EAAkC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAItvB,IAAI,GAAGmvB,yBAAyB,CAACxa,aAArC;;AAEA,eAAO3U,IAAI,KAAK,IAAhB,EAAsB;AACpB,cAAIuU,KAAK,GAAGvU,IAAI,CAACuU,KAAjB;;AAEA,cAAIA,KAAK,KAAK,IAAd,EAAoB;AAClBA,YAAAA,KAAK,CAAC4H,OAAN,GAAgB,IAAhB;AACD;;AAEDnc,UAAAA,IAAI,GAAGA,IAAI,CAACoc,IAAZ;AACD;;AAEDkT,QAAAA,4BAA4B,GAAG,KAA/B;AACD;;AAEDnU,MAAAA,WAAW,GAAGxY,OAAd;AACAwsB,MAAAA,yBAAyB,GAAG,IAA5B;AACAC,MAAAA,WAAW,GAAG,IAAd;AACAC,MAAAA,kBAAkB,GAAG,IAArB;AAEA;AACEM,QAAAA,YAAY,GAAG,IAAf;AACAC,QAAAA,uBAAuB,GAAG,CAAC,CAA3B;AACAF,QAAAA,oBAAoB,GAAG,IAAvB;AACAgC,QAAAA,kCAAkC,GAAG,KAArC;AACD;AAEDnC,MAAAA,0CAA0C,GAAG,KAA7C;AACD;;AAED,aAASoC,uBAAT,GAAmC;AACjC,UAAI3xB,IAAI,GAAG;AACT2U,QAAAA,aAAa,EAAE,IADN;AAET8I,QAAAA,SAAS,EAAE,IAFF;AAGTmU,QAAAA,SAAS,EAAE,IAHF;AAITrd,QAAAA,KAAK,EAAE,IAJE;AAKT6H,QAAAA,IAAI,EAAE;AALG,OAAX;;AAQA,UAAIiT,kBAAkB,KAAK,IAA3B,EAAiC;AAC/B;AACAF,QAAAA,yBAAyB,CAACxa,aAA1B,GAA0C0a,kBAAkB,GAAGrvB,IAA/D;AACD,OAHD,MAGO;AACL;AACAqvB,QAAAA,kBAAkB,GAAGA,kBAAkB,CAACjT,IAAnB,GAA0Bpc,IAA/C;AACD;;AAED,aAAOqvB,kBAAP;AACD;;AAED,aAASwC,wBAAT,GAAoC;AAClC;AACA;AACA;AACA;AACA;AACA,UAAIC,eAAJ;;AAEA,UAAI1C,WAAW,KAAK,IAApB,EAA0B;AACxB,YAAIvzB,OAAO,GAAGszB,yBAAyB,CAAC9zB,SAAxC;;AAEA,YAAIQ,OAAO,KAAK,IAAhB,EAAsB;AACpBi2B,UAAAA,eAAe,GAAGj2B,OAAO,CAAC8Y,aAA1B;AACD,SAFD,MAEO;AACLmd,UAAAA,eAAe,GAAG,IAAlB;AACD;AACF,OARD,MAQO;AACLA,QAAAA,eAAe,GAAG1C,WAAW,CAAChT,IAA9B;AACD;;AAED,UAAI2V,sBAAJ;;AAEA,UAAI1C,kBAAkB,KAAK,IAA3B,EAAiC;AAC/B0C,QAAAA,sBAAsB,GAAG5C,yBAAyB,CAACxa,aAAnD;AACD,OAFD,MAEO;AACLod,QAAAA,sBAAsB,GAAG1C,kBAAkB,CAACjT,IAA5C;AACD;;AAED,UAAI2V,sBAAsB,KAAK,IAA/B,EAAqC;AACnC;AACA1C,QAAAA,kBAAkB,GAAG0C,sBAArB;AACAA,QAAAA,sBAAsB,GAAG1C,kBAAkB,CAACjT,IAA5C;AACAgT,QAAAA,WAAW,GAAG0C,eAAd;AACD,OALD,MAKO;AACL;AACA,YAAIA,eAAe,KAAK,IAAxB,EAA8B;AAC5B,gBAAM,IAAI31B,KAAJ,CAAU,sDAAV,CAAN;AACD;;AAEDizB,QAAAA,WAAW,GAAG0C,eAAd;AACA,YAAIE,OAAO,GAAG;AACZrd,UAAAA,aAAa,EAAEya,WAAW,CAACza,aADf;AAEZ8I,UAAAA,SAAS,EAAE2R,WAAW,CAAC3R,SAFX;AAGZmU,UAAAA,SAAS,EAAExC,WAAW,CAACwC,SAHX;AAIZrd,UAAAA,KAAK,EAAE6a,WAAW,CAAC7a,KAJP;AAKZ6H,UAAAA,IAAI,EAAE;AALM,SAAd;;AAQA,YAAIiT,kBAAkB,KAAK,IAA3B,EAAiC;AAC/B;AACAF,UAAAA,yBAAyB,CAACxa,aAA1B,GAA0C0a,kBAAkB,GAAG2C,OAA/D;AACD,SAHD,MAGO;AACL;AACA3C,UAAAA,kBAAkB,GAAGA,kBAAkB,CAACjT,IAAnB,GAA0B4V,OAA/C;AACD;AACF;;AAED,aAAO3C,kBAAP;AACD;;AAED,aAAS4C,kCAAT,GAA8C;AAC5C,aAAO;AACLC,QAAAA,UAAU,EAAE,IADP;AAELC,QAAAA,MAAM,EAAE;AAFH,OAAP;AAID;;AAED,aAASC,iBAAT,CAA2B/P,KAA3B,EAAkCgQ,MAAlC,EAA0C;AACxC;AACA,aAAO,OAAOA,MAAP,KAAkB,UAAlB,GAA+BA,MAAM,CAAChQ,KAAD,CAArC,GAA+CgQ,MAAtD;AACD;;AAED,aAASC,YAAT,CAAsBC,OAAtB,EAA+BC,UAA/B,EAA2C75B,IAA3C,EAAiD;AAC/C,UAAIqH,IAAI,GAAG2xB,uBAAuB,EAAlC;AACA,UAAIc,YAAJ;;AAEA,UAAI95B,IAAI,KAAK0I,SAAb,EAAwB;AACtBoxB,QAAAA,YAAY,GAAG95B,IAAI,CAAC65B,UAAD,CAAnB;AACD,OAFD,MAEO;AACLC,QAAAA,YAAY,GAAGD,UAAf;AACD;;AAEDxyB,MAAAA,IAAI,CAAC2U,aAAL,GAAqB3U,IAAI,CAACyd,SAAL,GAAiBgV,YAAtC;AACA,UAAIle,KAAK,GAAG;AACV4H,QAAAA,OAAO,EAAE,IADC;AAEVW,QAAAA,WAAW,EAAE,IAFH;AAGVhb,QAAAA,KAAK,EAAEa,OAHG;AAIV+vB,QAAAA,QAAQ,EAAE,IAJA;AAKVC,QAAAA,mBAAmB,EAAEJ,OALX;AAMVK,QAAAA,iBAAiB,EAAEH;AANT,OAAZ;AAQAzyB,MAAAA,IAAI,CAACuU,KAAL,GAAaA,KAAb;AACA,UAAIme,QAAQ,GAAGne,KAAK,CAACme,QAAN,GAAiBG,qBAAqB,CAACjiB,IAAtB,CAA2B,IAA3B,EAAiCue,yBAAjC,EAA4D5a,KAA5D,CAAhC;AACA,aAAO,CAACvU,IAAI,CAAC2U,aAAN,EAAqB+d,QAArB,CAAP;AACD;;AAED,aAASI,aAAT,CAAuBP,OAAvB,EAAgCC,UAAhC,EAA4C75B,IAA5C,EAAkD;AAChD,UAAIqH,IAAI,GAAG6xB,wBAAwB,EAAnC;AACA,UAAItd,KAAK,GAAGvU,IAAI,CAACuU,KAAjB;;AAEA,UAAIA,KAAK,KAAK,IAAd,EAAoB;AAClB,cAAM,IAAIpY,KAAJ,CAAU,2EAAV,CAAN;AACD;;AAEDoY,MAAAA,KAAK,CAACoe,mBAAN,GAA4BJ,OAA5B;AACA,UAAI12B,OAAO,GAAGuzB,WAAd,CATgD,CASrB;;AAE3B,UAAIwC,SAAS,GAAG/1B,OAAO,CAAC+1B,SAAxB,CAXgD,CAWb;;AAEnC,UAAI7S,YAAY,GAAGxK,KAAK,CAAC4H,OAAzB;;AAEA,UAAI4C,YAAY,KAAK,IAArB,EAA2B;AACzB;AACA;AACA,YAAI6S,SAAS,KAAK,IAAlB,EAAwB;AACtB;AACA,cAAImB,SAAS,GAAGnB,SAAS,CAACxV,IAA1B;AACA,cAAI4W,YAAY,GAAGjU,YAAY,CAAC3C,IAAhC;AACAwV,UAAAA,SAAS,CAACxV,IAAV,GAAiB4W,YAAjB;AACAjU,UAAAA,YAAY,CAAC3C,IAAb,GAAoB2W,SAApB;AACD;;AAED;AACE,cAAIl3B,OAAO,CAAC+1B,SAAR,KAAsBA,SAA1B,EAAqC;AACnC;AACA;AACA7gC,YAAAA,KAAK,CAAC,oEAAoE,yBAArE,CAAL;AACD;AACF;AAED8K,QAAAA,OAAO,CAAC+1B,SAAR,GAAoBA,SAAS,GAAG7S,YAAhC;AACAxK,QAAAA,KAAK,CAAC4H,OAAN,GAAgB,IAAhB;AACD;;AAED,UAAIyV,SAAS,KAAK,IAAlB,EAAwB;AACtB;AACA,YAAIqB,KAAK,GAAGrB,SAAS,CAACxV,IAAtB;AACA,YAAI6C,QAAQ,GAAGpjB,OAAO,CAAC4hB,SAAvB;AACA,YAAI0B,YAAY,GAAG,IAAnB;AACA,YAAI+T,iBAAiB,GAAG,IAAxB;AACA,YAAIC,gBAAgB,GAAG,IAAvB;AACA,YAAItX,MAAM,GAAGoX,KAAb;;AAEA,WAAG;AACD,cAAIvqB,UAAU,GAAGmT,MAAM,CAACxV,IAAxB;;AAEA,cAAI,CAAC0B,eAAe,CAACoT,WAAD,EAAczS,UAAd,CAApB,EAA+C;AAC7C;AACA;AACA;AACA,gBAAIqV,KAAK,GAAG;AACV1X,cAAAA,IAAI,EAAEqC,UADI;AAEV2pB,cAAAA,MAAM,EAAExW,MAAM,CAACwW,MAFL;AAGVe,cAAAA,aAAa,EAAEvX,MAAM,CAACuX,aAHZ;AAIVC,cAAAA,UAAU,EAAExX,MAAM,CAACwX,UAJT;AAKVjX,cAAAA,IAAI,EAAE;AALI,aAAZ;;AAQA,gBAAI+W,gBAAgB,KAAK,IAAzB,EAA+B;AAC7BD,cAAAA,iBAAiB,GAAGC,gBAAgB,GAAGpV,KAAvC;AACAoB,cAAAA,YAAY,GAAGF,QAAf;AACD,aAHD,MAGO;AACLkU,cAAAA,gBAAgB,GAAGA,gBAAgB,CAAC/W,IAAjB,GAAwB2B,KAA3C;AACD,aAjB4C,CAiB3C;AACF;AACA;;;AAGAoR,YAAAA,yBAAyB,CAACrtB,KAA1B,GAAkCmG,UAAU,CAACknB,yBAAyB,CAACrtB,KAA3B,EAAkC4G,UAAlC,CAA5C;AACAiX,YAAAA,sBAAsB,CAACjX,UAAD,CAAtB;AACD,WAxBD,MAwBO;AACL;AACA,gBAAIyqB,gBAAgB,KAAK,IAAzB,EAA+B;AAC7B,kBAAI5T,MAAM,GAAG;AACX;AACA;AACA;AACAlZ,gBAAAA,IAAI,EAAEzD,MAJK;AAKXyvB,gBAAAA,MAAM,EAAExW,MAAM,CAACwW,MALJ;AAMXe,gBAAAA,aAAa,EAAEvX,MAAM,CAACuX,aANX;AAOXC,gBAAAA,UAAU,EAAExX,MAAM,CAACwX,UAPR;AAQXjX,gBAAAA,IAAI,EAAE;AARK,eAAb;AAUA+W,cAAAA,gBAAgB,GAAGA,gBAAgB,CAAC/W,IAAjB,GAAwBmD,MAA3C;AACD,aAdI,CAcH;;;AAGF,gBAAI1D,MAAM,CAACuX,aAAX,EAA0B;AACxB;AACA;AACAnU,cAAAA,QAAQ,GAAGpD,MAAM,CAACwX,UAAlB;AACD,aAJD,MAIO;AACL,kBAAIhB,MAAM,GAAGxW,MAAM,CAACwW,MAApB;AACApT,cAAAA,QAAQ,GAAGsT,OAAO,CAACtT,QAAD,EAAWoT,MAAX,CAAlB;AACD;AACF;;AAEDxW,UAAAA,MAAM,GAAGA,MAAM,CAACO,IAAhB;AACD,SAvDD,QAuDSP,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAKoX,KAvDvC;;AAyDA,YAAIE,gBAAgB,KAAK,IAAzB,EAA+B;AAC7BhU,UAAAA,YAAY,GAAGF,QAAf;AACD,SAFD,MAEO;AACLkU,UAAAA,gBAAgB,CAAC/W,IAAjB,GAAwB8W,iBAAxB;AACD,SAtEqB,CAsEpB;AACF;;;AAGA,YAAI,CAACtf,QAAQ,CAACqL,QAAD,EAAWjf,IAAI,CAAC2U,aAAhB,CAAb,EAA6C;AAC3C2H,UAAAA,gCAAgC;AACjC;;AAEDtc,QAAAA,IAAI,CAAC2U,aAAL,GAAqBsK,QAArB;AACAjf,QAAAA,IAAI,CAACyd,SAAL,GAAiB0B,YAAjB;AACAnf,QAAAA,IAAI,CAAC4xB,SAAL,GAAiBuB,gBAAjB;AACA5e,QAAAA,KAAK,CAACqe,iBAAN,GAA0B3T,QAA1B;AACD,OAxH+C,CAwH9C;AACF;AACA;;;AAGA,UAAIS,eAAe,GAAGnL,KAAK,CAACuI,WAA5B;;AAEA,UAAI4C,eAAe,KAAK,IAAxB,EAA8B;AAC5B,YAAI5C,WAAW,GAAG4C,eAAlB;;AAEA,WAAG;AACD,cAAI4T,eAAe,GAAGxW,WAAW,CAACzW,IAAlC;AACA8oB,UAAAA,yBAAyB,CAACrtB,KAA1B,GAAkCmG,UAAU,CAACknB,yBAAyB,CAACrtB,KAA3B,EAAkCwxB,eAAlC,CAA5C;AACA3T,UAAAA,sBAAsB,CAAC2T,eAAD,CAAtB;AACAxW,UAAAA,WAAW,GAAGA,WAAW,CAACV,IAA1B;AACD,SALD,QAKSU,WAAW,KAAK4C,eALzB;AAMD,OATD,MASO,IAAIkS,SAAS,KAAK,IAAlB,EAAwB;AAC7B;AACA;AACArd,QAAAA,KAAK,CAACzS,KAAN,GAAca,OAAd;AACD;;AAED,UAAI+vB,QAAQ,GAAGne,KAAK,CAACme,QAArB;AACA,aAAO,CAAC1yB,IAAI,CAAC2U,aAAN,EAAqB+d,QAArB,CAAP;AACD;;AAED,aAASa,eAAT,CAAyBhB,OAAzB,EAAkCC,UAAlC,EAA8C75B,IAA9C,EAAoD;AAClD,UAAIqH,IAAI,GAAG6xB,wBAAwB,EAAnC;AACA,UAAItd,KAAK,GAAGvU,IAAI,CAACuU,KAAjB;;AAEA,UAAIA,KAAK,KAAK,IAAd,EAAoB;AAClB,cAAM,IAAIpY,KAAJ,CAAU,2EAAV,CAAN;AACD;;AAEDoY,MAAAA,KAAK,CAACoe,mBAAN,GAA4BJ,OAA5B,CARkD,CAQb;AACrC;;AAEA,UAAIG,QAAQ,GAAGne,KAAK,CAACme,QAArB;AACA,UAAIc,qBAAqB,GAAGjf,KAAK,CAAC4H,OAAlC;AACA,UAAI8C,QAAQ,GAAGjf,IAAI,CAAC2U,aAApB;;AAEA,UAAI6e,qBAAqB,KAAK,IAA9B,EAAoC;AAClC;AACAjf,QAAAA,KAAK,CAAC4H,OAAN,GAAgB,IAAhB;AACA,YAAIsX,sBAAsB,GAAGD,qBAAqB,CAACpX,IAAnD;AACA,YAAIP,MAAM,GAAG4X,sBAAb;;AAEA,WAAG;AACD;AACA;AACA;AACA,cAAIpB,MAAM,GAAGxW,MAAM,CAACwW,MAApB;AACApT,UAAAA,QAAQ,GAAGsT,OAAO,CAACtT,QAAD,EAAWoT,MAAX,CAAlB;AACAxW,UAAAA,MAAM,GAAGA,MAAM,CAACO,IAAhB;AACD,SAPD,QAOSP,MAAM,KAAK4X,sBAPpB,EANkC,CAaW;AAC7C;;;AAGA,YAAI,CAAC7f,QAAQ,CAACqL,QAAD,EAAWjf,IAAI,CAAC2U,aAAhB,CAAb,EAA6C;AAC3C2H,UAAAA,gCAAgC;AACjC;;AAEDtc,QAAAA,IAAI,CAAC2U,aAAL,GAAqBsK,QAArB,CArBkC,CAqBH;AAC/B;AACA;AACA;;AAEA,YAAIjf,IAAI,CAAC4xB,SAAL,KAAmB,IAAvB,EAA6B;AAC3B5xB,UAAAA,IAAI,CAACyd,SAAL,GAAiBwB,QAAjB;AACD;;AAED1K,QAAAA,KAAK,CAACqe,iBAAN,GAA0B3T,QAA1B;AACD;;AAED,aAAO,CAACA,QAAD,EAAWyT,QAAX,CAAP;AACD;;AAED,aAASgB,kBAAT,CAA4BzgC,MAA5B,EAAoC0gC,WAApC,EAAiDC,SAAjD,EAA4D;AAC1D;AACE,eAAOvyB,SAAP;AACD;AACF;;AAED,aAASwyB,mBAAT,CAA6B5gC,MAA7B,EAAqC0gC,WAArC,EAAkDC,SAAlD,EAA6D;AAC3D;AACE,eAAOvyB,SAAP;AACD;AACF;;AAED,aAASyyB,sBAAT,CAAgCF,SAAhC,EAA2CD,WAA3C,EAAwDI,iBAAxD,EAA2E;AACzE,UAAI96B,KAAK,GAAGk2B,yBAAZ;AACA,UAAInvB,IAAI,GAAG2xB,uBAAuB,EAAlC;AACA,UAAIqC,YAAJ;AAEA;AACEA,QAAAA,YAAY,GAAGL,WAAW,EAA1B;AAEA;AACE,cAAI,CAACzE,0BAAL,EAAiC;AAC/B,gBAAI+E,cAAc,GAAGN,WAAW,EAAhC;;AAEA,gBAAI,CAAC/f,QAAQ,CAACogB,YAAD,EAAeC,cAAf,CAAb,EAA6C;AAC3CljC,cAAAA,KAAK,CAAC,sEAAD,CAAL;AAEAm+B,cAAAA,0BAA0B,GAAG,IAA7B;AACD;AACF;AACF,SAbH,CAaI;AACF;AACA;AACA;AACA;AACA;AACA;;AAGA,YAAIzuB,IAAI,GAAGyzB,qBAAqB,EAAhC;;AAEA,YAAIzzB,IAAI,KAAK,IAAb,EAAmB;AACjB,gBAAM,IAAItE,KAAJ,CAAU,iFAAV,CAAN;AACD;;AAED,YAAI,CAACmL,oBAAoB,CAAC7G,IAAD,EAAO0a,WAAP,CAAzB,EAA8C;AAC5CgZ,UAAAA,yBAAyB,CAACl7B,KAAD,EAAQ06B,WAAR,EAAqBK,YAArB,CAAzB;AACD;AACF,OApCwE,CAoCvE;AACF;AACA;;AAGAh0B,MAAAA,IAAI,CAAC2U,aAAL,GAAqBqf,YAArB;AACA,UAAI1pB,IAAI,GAAG;AACT5W,QAAAA,KAAK,EAAEsgC,YADE;AAETL,QAAAA,WAAW,EAAEA;AAFJ,OAAX;AAIA3zB,MAAAA,IAAI,CAACuU,KAAL,GAAajK,IAAb,CA9CyE,CA8CtD;;AAEnB8pB,MAAAA,WAAW,CAACC,gBAAgB,CAACzjB,IAAjB,CAAsB,IAAtB,EAA4B3X,KAA5B,EAAmCqR,IAAnC,EAAyCspB,SAAzC,CAAD,EAAsD,CAACA,SAAD,CAAtD,CAAX,CAhDyE,CAgDM;AAC/E;AACA;AACA;AACA;AACA;AACA;;AAEA36B,MAAAA,KAAK,CAACsC,KAAN,IAAezB,OAAf;AACAw6B,MAAAA,UAAU,CAAC/F,SAAS,GAAGG,SAAb,EAAwB6F,mBAAmB,CAAC3jB,IAApB,CAAyB,IAAzB,EAA+B3X,KAA/B,EAAsCqR,IAAtC,EAA4C0pB,YAA5C,EAA0DL,WAA1D,CAAxB,EAAgGtyB,SAAhG,EAA2G,IAA3G,CAAV;AACA,aAAO2yB,YAAP;AACD;;AAED,aAASQ,uBAAT,CAAiCZ,SAAjC,EAA4CD,WAA5C,EAAyDI,iBAAzD,EAA4E;AAC1E,UAAI96B,KAAK,GAAGk2B,yBAAZ;AACA,UAAInvB,IAAI,GAAG6xB,wBAAwB,EAAnC,CAF0E,CAEnC;AACvC;AACA;;AAEA,UAAImC,YAAY,GAAGL,WAAW,EAA9B;AAEA;AACE,YAAI,CAACzE,0BAAL,EAAiC;AAC/B,cAAI+E,cAAc,GAAGN,WAAW,EAAhC;;AAEA,cAAI,CAAC/f,QAAQ,CAACogB,YAAD,EAAeC,cAAf,CAAb,EAA6C;AAC3CljC,YAAAA,KAAK,CAAC,sEAAD,CAAL;AAEAm+B,YAAAA,0BAA0B,GAAG,IAA7B;AACD;AACF;AACF;AAED,UAAIuF,YAAY,GAAGz0B,IAAI,CAAC2U,aAAxB;AACA,UAAI+f,eAAe,GAAG,CAAC9gB,QAAQ,CAAC6gB,YAAD,EAAeT,YAAf,CAA/B;;AAEA,UAAIU,eAAJ,EAAqB;AACnB10B,QAAAA,IAAI,CAAC2U,aAAL,GAAqBqf,YAArB;AACA1X,QAAAA,gCAAgC;AACjC;;AAED,UAAIhS,IAAI,GAAGtK,IAAI,CAACuU,KAAhB;AACAogB,MAAAA,YAAY,CAACN,gBAAgB,CAACzjB,IAAjB,CAAsB,IAAtB,EAA4B3X,KAA5B,EAAmCqR,IAAnC,EAAyCspB,SAAzC,CAAD,EAAsD,CAACA,SAAD,CAAtD,CAAZ,CA7B0E,CA6BM;AAChF;AACA;AACA;;AAEA,UAAItpB,IAAI,CAACqpB,WAAL,KAAqBA,WAArB,IAAoCe,eAApC,IAAuD;AAC3D;AACArF,MAAAA,kBAAkB,KAAK,IAAvB,IAA+BA,kBAAkB,CAAC1a,aAAnB,CAAiC1c,GAAjC,GAAuCs2B,SAFtE,EAEiF;AAC/Et1B,QAAAA,KAAK,CAACsC,KAAN,IAAezB,OAAf;AACAw6B,QAAAA,UAAU,CAAC/F,SAAS,GAAGG,SAAb,EAAwB6F,mBAAmB,CAAC3jB,IAApB,CAAyB,IAAzB,EAA+B3X,KAA/B,EAAsCqR,IAAtC,EAA4C0pB,YAA5C,EAA0DL,WAA1D,CAAxB,EAAgGtyB,SAAhG,EAA2G,IAA3G,CAAV,CAF+E,CAE6C;AAC5H;AACA;;AAEA,YAAIZ,IAAI,GAAGyzB,qBAAqB,EAAhC;;AAEA,YAAIzzB,IAAI,KAAK,IAAb,EAAmB;AACjB,gBAAM,IAAItE,KAAJ,CAAU,iFAAV,CAAN;AACD;;AAED,YAAI,CAACmL,oBAAoB,CAAC7G,IAAD,EAAO0a,WAAP,CAAzB,EAA8C;AAC5CgZ,UAAAA,yBAAyB,CAACl7B,KAAD,EAAQ06B,WAAR,EAAqBK,YAArB,CAAzB;AACD;AACF;;AAED,aAAOA,YAAP;AACD;;AAED,aAASG,yBAAT,CAAmCl7B,KAAnC,EAA0C06B,WAA1C,EAAuDiB,gBAAvD,EAAyE;AACvE37B,MAAAA,KAAK,CAACsC,KAAN,IAAerB,gBAAf;AACA,UAAI26B,KAAK,GAAG;AACVlB,QAAAA,WAAW,EAAEA,WADH;AAEVjgC,QAAAA,KAAK,EAAEkhC;AAFG,OAAZ;AAIA,UAAIE,oBAAoB,GAAG3F,yBAAyB,CAACnT,WAArD;;AAEA,UAAI8Y,oBAAoB,KAAK,IAA7B,EAAmC;AACjCA,QAAAA,oBAAoB,GAAG7C,kCAAkC,EAAzD;AACA9C,QAAAA,yBAAyB,CAACnT,WAA1B,GAAwC8Y,oBAAxC;AACAA,QAAAA,oBAAoB,CAAC3C,MAArB,GAA8B,CAAC0C,KAAD,CAA9B;AACD,OAJD,MAIO;AACL,YAAI1C,MAAM,GAAG2C,oBAAoB,CAAC3C,MAAlC;;AAEA,YAAIA,MAAM,KAAK,IAAf,EAAqB;AACnB2C,UAAAA,oBAAoB,CAAC3C,MAArB,GAA8B,CAAC0C,KAAD,CAA9B;AACD,SAFD,MAEO;AACL1C,UAAAA,MAAM,CAAC3pB,IAAP,CAAYqsB,KAAZ;AACD;AACF;AACF;;AAED,aAASN,mBAAT,CAA6Bt7B,KAA7B,EAAoCqR,IAApC,EAA0C0pB,YAA1C,EAAwDL,WAAxD,EAAqE;AACnE;AACArpB,MAAAA,IAAI,CAAC5W,KAAL,GAAasgC,YAAb;AACA1pB,MAAAA,IAAI,CAACqpB,WAAL,GAAmBA,WAAnB,CAHmE,CAGnC;AAChC;AACA;AACA;;AAEA,UAAIoB,sBAAsB,CAACzqB,IAAD,CAA1B,EAAkC;AAChC;AACA0qB,QAAAA,kBAAkB,CAAC/7B,KAAD,CAAlB;AACD;AACF;;AAED,aAASo7B,gBAAT,CAA0Bp7B,KAA1B,EAAiCqR,IAAjC,EAAuCspB,SAAvC,EAAkD;AAChD,UAAIqB,iBAAiB,GAAG,YAAY;AAClC;AACA;AACA,YAAIF,sBAAsB,CAACzqB,IAAD,CAA1B,EAAkC;AAChC;AACA0qB,UAAAA,kBAAkB,CAAC/7B,KAAD,CAAlB;AACD;AACF,OAPD,CADgD,CAQ7C;;;AAGH,aAAO26B,SAAS,CAACqB,iBAAD,CAAhB;AACD;;AAED,aAASF,sBAAT,CAAgCzqB,IAAhC,EAAsC;AACpC,UAAI4qB,iBAAiB,GAAG5qB,IAAI,CAACqpB,WAA7B;AACA,UAAIwB,SAAS,GAAG7qB,IAAI,CAAC5W,KAArB;;AAEA,UAAI;AACF,YAAImnB,SAAS,GAAGqa,iBAAiB,EAAjC;AACA,eAAO,CAACthB,QAAQ,CAACuhB,SAAD,EAAYta,SAAZ,CAAhB;AACD,OAHD,CAGE,OAAO9pB,KAAP,EAAc;AACd,eAAO,IAAP;AACD;AACF;;AAED,aAASikC,kBAAT,CAA4B/7B,KAA5B,EAAmC;AACjCuoB,MAAAA,qBAAqB,CAACvoB,KAAD,EAAQ4J,QAAR,EAAkBmC,WAAlB,CAArB;AACD;;AAED,aAASowB,UAAT,CAAoB3C,YAApB,EAAkC;AAChC,UAAIzyB,IAAI,GAAG2xB,uBAAuB,EAAlC;;AAEA,UAAI,OAAOc,YAAP,KAAwB,UAA5B,EAAwC;AACtC;AACAA,QAAAA,YAAY,GAAGA,YAAY,EAA3B;AACD;;AAEDzyB,MAAAA,IAAI,CAAC2U,aAAL,GAAqB3U,IAAI,CAACyd,SAAL,GAAiBgV,YAAtC;AACA,UAAIle,KAAK,GAAG;AACV4H,QAAAA,OAAO,EAAE,IADC;AAEVW,QAAAA,WAAW,EAAE,IAFH;AAGVhb,QAAAA,KAAK,EAAEa,OAHG;AAIV+vB,QAAAA,QAAQ,EAAE,IAJA;AAKVC,QAAAA,mBAAmB,EAAEP,iBALX;AAMVQ,QAAAA,iBAAiB,EAAEH;AANT,OAAZ;AAQAzyB,MAAAA,IAAI,CAACuU,KAAL,GAAaA,KAAb;AACA,UAAIme,QAAQ,GAAGne,KAAK,CAACme,QAAN,GAAiB2C,gBAAgB,CAACzkB,IAAjB,CAAsB,IAAtB,EAA4Bue,yBAA5B,EAAuD5a,KAAvD,CAAhC;AACA,aAAO,CAACvU,IAAI,CAAC2U,aAAN,EAAqB+d,QAArB,CAAP;AACD;;AAED,aAAS4C,WAAT,CAAqB7C,YAArB,EAAmC;AACjC,aAAOK,aAAa,CAACV,iBAAD,CAApB;AACD;;AAED,aAASmD,aAAT,CAAuB9C,YAAvB,EAAqC;AACnC,aAAOc,eAAe,CAACnB,iBAAD,CAAtB;AACD;;AAED,aAASkC,UAAT,CAAoBr8B,GAApB,EAAyBu9B,MAAzB,EAAiCC,OAAjC,EAA0CtF,IAA1C,EAAgD;AAC9C,UAAIjQ,MAAM,GAAG;AACXjoB,QAAAA,GAAG,EAAEA,GADM;AAEXu9B,QAAAA,MAAM,EAAEA,MAFG;AAGXC,QAAAA,OAAO,EAAEA,OAHE;AAIXtF,QAAAA,IAAI,EAAEA,IAJK;AAKX;AACA/T,QAAAA,IAAI,EAAE;AANK,OAAb;AAQA,UAAI0Y,oBAAoB,GAAG3F,yBAAyB,CAACnT,WAArD;;AAEA,UAAI8Y,oBAAoB,KAAK,IAA7B,EAAmC;AACjCA,QAAAA,oBAAoB,GAAG7C,kCAAkC,EAAzD;AACA9C,QAAAA,yBAAyB,CAACnT,WAA1B,GAAwC8Y,oBAAxC;AACAA,QAAAA,oBAAoB,CAAC5C,UAArB,GAAkChS,MAAM,CAAC9D,IAAP,GAAc8D,MAAhD;AACD,OAJD,MAIO;AACL,YAAIgS,UAAU,GAAG4C,oBAAoB,CAAC5C,UAAtC;;AAEA,YAAIA,UAAU,KAAK,IAAnB,EAAyB;AACvB4C,UAAAA,oBAAoB,CAAC5C,UAArB,GAAkChS,MAAM,CAAC9D,IAAP,GAAc8D,MAAhD;AACD,SAFD,MAEO;AACL,cAAIwV,WAAW,GAAGxD,UAAU,CAAC9V,IAA7B;AACA8V,UAAAA,UAAU,CAAC9V,IAAX,GAAkB8D,MAAlB;AACAA,UAAAA,MAAM,CAAC9D,IAAP,GAAcsZ,WAAd;AACAZ,UAAAA,oBAAoB,CAAC5C,UAArB,GAAkChS,MAAlC;AACD;AACF;;AAED,aAAOA,MAAP;AACD;;AAED,aAASyV,QAAT,CAAkBC,YAAlB,EAAgC;AAC9B,UAAI51B,IAAI,GAAG2xB,uBAAuB,EAAlC;AAEA;AACE,YAAIkE,KAAK,GAAG;AACVh6B,UAAAA,OAAO,EAAE+5B;AADC,SAAZ;AAGA51B,QAAAA,IAAI,CAAC2U,aAAL,GAAqBkhB,KAArB;AACA,eAAOA,KAAP;AACD;AACF;;AAED,aAASC,SAAT,CAAmBF,YAAnB,EAAiC;AAC/B,UAAI51B,IAAI,GAAG6xB,wBAAwB,EAAnC;AACA,aAAO7xB,IAAI,CAAC2U,aAAZ;AACD;;AAED,aAASohB,eAAT,CAAyB5R,UAAzB,EAAqC6R,SAArC,EAAgDR,MAAhD,EAAwDrF,IAAxD,EAA8D;AAC5D,UAAInwB,IAAI,GAAG2xB,uBAAuB,EAAlC;AACA,UAAIhB,QAAQ,GAAGR,IAAI,KAAK9uB,SAAT,GAAqB,IAArB,GAA4B8uB,IAA3C;AACAhB,MAAAA,yBAAyB,CAAC5zB,KAA1B,IAAmC4oB,UAAnC;AACAnkB,MAAAA,IAAI,CAAC2U,aAAL,GAAqB2f,UAAU,CAAC/F,SAAS,GAAGyH,SAAb,EAAwBR,MAAxB,EAAgCn0B,SAAhC,EAA2CsvB,QAA3C,CAA/B;AACD;;AAED,aAASsF,gBAAT,CAA0B9R,UAA1B,EAAsC6R,SAAtC,EAAiDR,MAAjD,EAAyDrF,IAAzD,EAA+D;AAC7D,UAAInwB,IAAI,GAAG6xB,wBAAwB,EAAnC;AACA,UAAIlB,QAAQ,GAAGR,IAAI,KAAK9uB,SAAT,GAAqB,IAArB,GAA4B8uB,IAA3C;AACA,UAAIsF,OAAO,GAAGp0B,SAAd;;AAEA,UAAI+tB,WAAW,KAAK,IAApB,EAA0B;AACxB,YAAI8G,UAAU,GAAG9G,WAAW,CAACza,aAA7B;AACA8gB,QAAAA,OAAO,GAAGS,UAAU,CAACT,OAArB;;AAEA,YAAI9E,QAAQ,KAAK,IAAjB,EAAuB;AACrB,cAAIC,QAAQ,GAAGsF,UAAU,CAAC/F,IAA1B;;AAEA,cAAIO,kBAAkB,CAACC,QAAD,EAAWC,QAAX,CAAtB,EAA4C;AAC1C5wB,YAAAA,IAAI,CAAC2U,aAAL,GAAqB2f,UAAU,CAAC0B,SAAD,EAAYR,MAAZ,EAAoBC,OAApB,EAA6B9E,QAA7B,CAA/B;AACA;AACD;AACF;AACF;;AAEDxB,MAAAA,yBAAyB,CAAC5zB,KAA1B,IAAmC4oB,UAAnC;AACAnkB,MAAAA,IAAI,CAAC2U,aAAL,GAAqB2f,UAAU,CAAC/F,SAAS,GAAGyH,SAAb,EAAwBR,MAAxB,EAAgCC,OAAhC,EAAyC9E,QAAzC,CAA/B;AACD;;AAED,aAASyD,WAAT,CAAqBoB,MAArB,EAA6BrF,IAA7B,EAAmC;AACjC;AACE,eAAO4F,eAAe,CAACj8B,OAAO,GAAGa,aAAX,EAA0B+zB,SAA1B,EAAqC8G,MAArC,EAA6CrF,IAA7C,CAAtB;AACD;AACF;;AAED,aAASwE,YAAT,CAAsBa,MAAtB,EAA8BrF,IAA9B,EAAoC;AAClC,aAAO8F,gBAAgB,CAACn8B,OAAD,EAAU40B,SAAV,EAAqB8G,MAArB,EAA6BrF,IAA7B,CAAvB;AACD;;AAED,aAASgG,oBAAT,CAA8BX,MAA9B,EAAsCrF,IAAtC,EAA4C;AAC1C,aAAO4F,eAAe,CAAC18B,MAAD,EAASm1B,SAAT,EAAoBgH,MAApB,EAA4BrF,IAA5B,CAAtB;AACD;;AAED,aAASiG,qBAAT,CAA+BZ,MAA/B,EAAuCrF,IAAvC,EAA6C;AAC3C,aAAO8F,gBAAgB,CAAC58B,MAAD,EAASm1B,SAAT,EAAoBgH,MAApB,EAA4BrF,IAA5B,CAAvB;AACD;;AAED,aAASkG,iBAAT,CAA2Bb,MAA3B,EAAmCrF,IAAnC,EAAyC;AACvC,UAAIhM,UAAU,GAAG9qB,MAAjB;AAEA,aAAO08B,eAAe,CAAC5R,UAAD,EAAasK,MAAb,EAAqB+G,MAArB,EAA6BrF,IAA7B,CAAtB;AACD;;AAED,aAASmG,kBAAT,CAA4Bd,MAA5B,EAAoCrF,IAApC,EAA0C;AACxC,aAAO8F,gBAAgB,CAAC58B,MAAD,EAASo1B,MAAT,EAAiB+G,MAAjB,EAAyBrF,IAAzB,CAAvB;AACD;;AAED,aAASoG,sBAAT,CAAgCf,MAAhC,EAAwC7O,GAAxC,EAA6C;AAC3C,UAAI,OAAOA,GAAP,KAAe,UAAnB,EAA+B;AAC7B,YAAI6P,WAAW,GAAG7P,GAAlB;;AAEA,YAAI8P,KAAK,GAAGjB,MAAM,EAAlB;;AAEAgB,QAAAA,WAAW,CAACC,KAAD,CAAX;AACA,eAAO,YAAY;AACjBD,UAAAA,WAAW,CAAC,IAAD,CAAX;AACD,SAFD;AAGD,OATD,MASO,IAAI7P,GAAG,KAAK,IAAR,IAAgBA,GAAG,KAAKtlB,SAA5B,EAAuC;AAC5C,YAAIq1B,SAAS,GAAG/P,GAAhB;AAEA;AACE,cAAI,CAAC+P,SAAS,CAAC3mB,cAAV,CAAyB,SAAzB,CAAL,EAA0C;AACxChf,YAAAA,KAAK,CAAC,kEAAkE,iEAAnE,EAAsI,0BAA0B0B,MAAM,CAACW,IAAP,CAAYsjC,SAAZ,EAAuBzf,IAAvB,CAA4B,IAA5B,CAA1B,GAA8D,GAApM,CAAL;AACD;AACF;;AAED,YAAI0f,MAAM,GAAGnB,MAAM,EAAnB;;AAEAkB,QAAAA,SAAS,CAAC76B,OAAV,GAAoB86B,MAApB;AACA,eAAO,YAAY;AACjBD,UAAAA,SAAS,CAAC76B,OAAV,GAAoB,IAApB;AACD,SAFD;AAGD;AACF;;AAED,aAAS+6B,qBAAT,CAA+BjQ,GAA/B,EAAoC6O,MAApC,EAA4CrF,IAA5C,EAAkD;AAChD;AACE,YAAI,OAAOqF,MAAP,KAAkB,UAAtB,EAAkC;AAChCzkC,UAAAA,KAAK,CAAC,qEAAqE,8CAAtE,EAAsHykC,MAAM,KAAK,IAAX,GAAkB,OAAOA,MAAzB,GAAkC,MAAxJ,CAAL;AACD;AACF,OAL+C,CAK9C;;AAGF,UAAIqB,UAAU,GAAG1G,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK9uB,SAA1B,GAAsC8uB,IAAI,CAAC7+B,MAAL,CAAY,CAACq1B,GAAD,CAAZ,CAAtC,GAA2D,IAA5E;AACA,UAAIxC,UAAU,GAAG9qB,MAAjB;AAEA,aAAO08B,eAAe,CAAC5R,UAAD,EAAasK,MAAb,EAAqB8H,sBAAsB,CAAC3lB,IAAvB,CAA4B,IAA5B,EAAkC4kB,MAAlC,EAA0C7O,GAA1C,CAArB,EAAqEkQ,UAArE,CAAtB;AACD;;AAED,aAASC,sBAAT,CAAgCnQ,GAAhC,EAAqC6O,MAArC,EAA6CrF,IAA7C,EAAmD;AACjD;AACE,YAAI,OAAOqF,MAAP,KAAkB,UAAtB,EAAkC;AAChCzkC,UAAAA,KAAK,CAAC,qEAAqE,8CAAtE,EAAsHykC,MAAM,KAAK,IAAX,GAAkB,OAAOA,MAAzB,GAAkC,MAAxJ,CAAL;AACD;AACF,OALgD,CAK/C;;AAGF,UAAIqB,UAAU,GAAG1G,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK9uB,SAA1B,GAAsC8uB,IAAI,CAAC7+B,MAAL,CAAY,CAACq1B,GAAD,CAAZ,CAAtC,GAA2D,IAA5E;AACA,aAAOsP,gBAAgB,CAAC58B,MAAD,EAASo1B,MAAT,EAAiB8H,sBAAsB,CAAC3lB,IAAvB,CAA4B,IAA5B,EAAkC4kB,MAAlC,EAA0C7O,GAA1C,CAAjB,EAAiEkQ,UAAjE,CAAvB;AACD;;AAED,aAASE,eAAT,CAAyBrjC,KAAzB,EAAgCsjC,WAAhC,EAA6C,CAAC;AAC5C;AACA;AACD;;AAED,QAAIC,gBAAgB,GAAGF,eAAvB;;AAEA,aAASG,aAAT,CAAuBjjB,QAAvB,EAAiCkc,IAAjC,EAAuC;AACrC,UAAInwB,IAAI,GAAG2xB,uBAAuB,EAAlC;AACA,UAAIhB,QAAQ,GAAGR,IAAI,KAAK9uB,SAAT,GAAqB,IAArB,GAA4B8uB,IAA3C;AACAnwB,MAAAA,IAAI,CAAC2U,aAAL,GAAqB,CAACV,QAAD,EAAW0c,QAAX,CAArB;AACA,aAAO1c,QAAP;AACD;;AAED,aAASkjB,cAAT,CAAwBljB,QAAxB,EAAkCkc,IAAlC,EAAwC;AACtC,UAAInwB,IAAI,GAAG6xB,wBAAwB,EAAnC;AACA,UAAIlB,QAAQ,GAAGR,IAAI,KAAK9uB,SAAT,GAAqB,IAArB,GAA4B8uB,IAA3C;AACA,UAAIzR,SAAS,GAAG1e,IAAI,CAAC2U,aAArB;;AAEA,UAAI+J,SAAS,KAAK,IAAlB,EAAwB;AACtB,YAAIiS,QAAQ,KAAK,IAAjB,EAAuB;AACrB,cAAIC,QAAQ,GAAGlS,SAAS,CAAC,CAAD,CAAxB;;AAEA,cAAIgS,kBAAkB,CAACC,QAAD,EAAWC,QAAX,CAAtB,EAA4C;AAC1C,mBAAOlS,SAAS,CAAC,CAAD,CAAhB;AACD;AACF;AACF;;AAED1e,MAAAA,IAAI,CAAC2U,aAAL,GAAqB,CAACV,QAAD,EAAW0c,QAAX,CAArB;AACA,aAAO1c,QAAP;AACD;;AAED,aAASmjB,SAAT,CAAmBC,UAAnB,EAA+BlH,IAA/B,EAAqC;AACnC,UAAInwB,IAAI,GAAG2xB,uBAAuB,EAAlC;AACA,UAAIhB,QAAQ,GAAGR,IAAI,KAAK9uB,SAAT,GAAqB,IAArB,GAA4B8uB,IAA3C;AACA,UAAItV,SAAS,GAAGwc,UAAU,EAA1B;AACAr3B,MAAAA,IAAI,CAAC2U,aAAL,GAAqB,CAACkG,SAAD,EAAY8V,QAAZ,CAArB;AACA,aAAO9V,SAAP;AACD;;AAED,aAASyc,UAAT,CAAoBD,UAApB,EAAgClH,IAAhC,EAAsC;AACpC,UAAInwB,IAAI,GAAG6xB,wBAAwB,EAAnC;AACA,UAAIlB,QAAQ,GAAGR,IAAI,KAAK9uB,SAAT,GAAqB,IAArB,GAA4B8uB,IAA3C;AACA,UAAIzR,SAAS,GAAG1e,IAAI,CAAC2U,aAArB;;AAEA,UAAI+J,SAAS,KAAK,IAAlB,EAAwB;AACtB;AACA,YAAIiS,QAAQ,KAAK,IAAjB,EAAuB;AACrB,cAAIC,QAAQ,GAAGlS,SAAS,CAAC,CAAD,CAAxB;;AAEA,cAAIgS,kBAAkB,CAACC,QAAD,EAAWC,QAAX,CAAtB,EAA4C;AAC1C,mBAAOlS,SAAS,CAAC,CAAD,CAAhB;AACD;AACF;AACF;;AAED,UAAI7D,SAAS,GAAGwc,UAAU,EAA1B;AACAr3B,MAAAA,IAAI,CAAC2U,aAAL,GAAqB,CAACkG,SAAD,EAAY8V,QAAZ,CAArB;AACA,aAAO9V,SAAP;AACD;;AAED,aAAS0c,kBAAT,CAA4B7jC,KAA5B,EAAmC;AACjC,UAAI8jC,WAAW,GAAGpC,UAAU,CAAC1hC,KAAD,CAA5B;AAAA,UACIyhC,SAAS,GAAGqC,WAAW,CAAC,CAAD,CAD3B;AAAA,UAEIC,QAAQ,GAAGD,WAAW,CAAC,CAAD,CAF1B;;AAIApD,MAAAA,WAAW,CAAC,YAAY;AACtB,YAAIsD,cAAc,GAAG1I,yBAAyB,CAACha,UAA/C;AACAga,QAAAA,yBAAyB,CAACha,UAA1B,GAAuC,EAAvC;;AAEA,YAAI;AACFyiB,UAAAA,QAAQ,CAAC/jC,KAAD,CAAR;AACD,SAFD,SAEU;AACRs7B,UAAAA,yBAAyB,CAACha,UAA1B,GAAuC0iB,cAAvC;AACD;AACF,OATU,EASR,CAAChkC,KAAD,CATQ,CAAX;AAUA,aAAOyhC,SAAP;AACD;;AAED,aAASwC,mBAAT,CAA6BjkC,KAA7B,EAAoC;AAClC,UAAIkkC,YAAY,GAAGtC,WAAW,EAA9B;AAAA,UACIH,SAAS,GAAGyC,YAAY,CAAC,CAAD,CAD5B;AAAA,UAEIH,QAAQ,GAAGG,YAAY,CAAC,CAAD,CAF3B;;AAIAjD,MAAAA,YAAY,CAAC,YAAY;AACvB,YAAI+C,cAAc,GAAG1I,yBAAyB,CAACha,UAA/C;AACAga,QAAAA,yBAAyB,CAACha,UAA1B,GAAuC,EAAvC;;AAEA,YAAI;AACFyiB,UAAAA,QAAQ,CAAC/jC,KAAD,CAAR;AACD,SAFD,SAEU;AACRs7B,UAAAA,yBAAyB,CAACha,UAA1B,GAAuC0iB,cAAvC;AACD;AACF,OATW,EAST,CAAChkC,KAAD,CATS,CAAZ;AAUA,aAAOyhC,SAAP;AACD;;AAED,aAAS0C,qBAAT,CAA+BnkC,KAA/B,EAAsC;AACpC,UAAIokC,cAAc,GAAGvC,aAAa,EAAlC;AAAA,UACIJ,SAAS,GAAG2C,cAAc,CAAC,CAAD,CAD9B;AAAA,UAEIL,QAAQ,GAAGK,cAAc,CAAC,CAAD,CAF7B;;AAIAnD,MAAAA,YAAY,CAAC,YAAY;AACvB,YAAI+C,cAAc,GAAG1I,yBAAyB,CAACha,UAA/C;AACAga,QAAAA,yBAAyB,CAACha,UAA1B,GAAuC,EAAvC;;AAEA,YAAI;AACFyiB,UAAAA,QAAQ,CAAC/jC,KAAD,CAAR;AACD,SAFD,SAEU;AACRs7B,UAAAA,yBAAyB,CAACha,UAA1B,GAAuC0iB,cAAvC;AACD;AACF,OATW,EAST,CAAChkC,KAAD,CATS,CAAZ;AAUA,aAAOyhC,SAAP;AACD;;AAED,aAAS4C,eAAT,CAAyBC,UAAzB,EAAqC/jB,QAArC,EAA+CgkB,OAA/C,EAAwD;AACtD,UAAIC,gBAAgB,GAAG9uB,wBAAwB,EAA/C;AACAC,MAAAA,wBAAwB,CAACE,mBAAmB,CAAC2uB,gBAAD,EAAmBh3B,uBAAnB,CAApB,CAAxB;AACA82B,MAAAA,UAAU,CAAC,IAAD,CAAV;AACA,UAAIN,cAAc,GAAG1I,yBAAyB,CAACha,UAA/C;AACAga,MAAAA,yBAAyB,CAACha,UAA1B,GAAuC,EAAvC;AACA,UAAImjB,iBAAiB,GAAGnJ,yBAAyB,CAACha,UAAlD;AAEA;AACEga,QAAAA,yBAAyB,CAACha,UAA1B,CAAqCojB,cAArC,GAAsD,IAAI3gB,GAAJ,EAAtD;AACD;;AAED,UAAI;AACFugB,QAAAA,UAAU,CAAC,KAAD,CAAV;AACA/jB,QAAAA,QAAQ;AACT,OAHD,SAGU;AACR5K,QAAAA,wBAAwB,CAAC6uB,gBAAD,CAAxB;AACAlJ,QAAAA,yBAAyB,CAACha,UAA1B,GAAuC0iB,cAAvC;AAEA;AACE,cAAIA,cAAc,KAAK,IAAnB,IAA2BS,iBAAiB,CAACC,cAAjD,EAAiE;AAC/D,gBAAIC,kBAAkB,GAAGF,iBAAiB,CAACC,cAAlB,CAAiC5f,IAA1D;;AAEA,gBAAI6f,kBAAkB,GAAG,EAAzB,EAA6B;AAC3B/nC,cAAAA,IAAI,CAAC,gEAAgE,mFAAhE,GAAsJ,yDAAvJ,CAAJ;AACD;;AAED6nC,YAAAA,iBAAiB,CAACC,cAAlB,CAAiCE,KAAjC;AACD;AACF;AACF;AACF;;AAED,aAASC,eAAT,GAA2B;AACzB,UAAIC,YAAY,GAAGpD,UAAU,CAAC,KAAD,CAA7B;AAAA,UACIqD,SAAS,GAAGD,YAAY,CAAC,CAAD,CAD5B;AAAA,UAEIR,UAAU,GAAGQ,YAAY,CAAC,CAAD,CAF7B,CADyB,CAGS;;;AAGlC,UAAIE,KAAK,GAAGX,eAAe,CAACnnB,IAAhB,CAAqB,IAArB,EAA2BonB,UAA3B,CAAZ;AACA,UAAIh4B,IAAI,GAAG2xB,uBAAuB,EAAlC;AACA3xB,MAAAA,IAAI,CAAC2U,aAAL,GAAqB+jB,KAArB;AACA,aAAO,CAACD,SAAD,EAAYC,KAAZ,CAAP;AACD;;AAED,aAASC,gBAAT,GAA4B;AAC1B,UAAIC,aAAa,GAAGtD,WAAW,EAA/B;AAAA,UACImD,SAAS,GAAGG,aAAa,CAAC,CAAD,CAD7B;;AAGA,UAAI54B,IAAI,GAAG6xB,wBAAwB,EAAnC;AACA,UAAI6G,KAAK,GAAG14B,IAAI,CAAC2U,aAAjB;AACA,aAAO,CAAC8jB,SAAD,EAAYC,KAAZ,CAAP;AACD;;AAED,aAASG,kBAAT,GAA8B;AAC5B,UAAIC,eAAe,GAAGvD,aAAa,EAAnC;AAAA,UACIkD,SAAS,GAAGK,eAAe,CAAC,CAAD,CAD/B;;AAGA,UAAI94B,IAAI,GAAG6xB,wBAAwB,EAAnC;AACA,UAAI6G,KAAK,GAAG14B,IAAI,CAAC2U,aAAjB;AACA,aAAO,CAAC8jB,SAAD,EAAYC,KAAZ,CAAP;AACD;;AAED,QAAIhH,kCAAkC,GAAG,KAAzC;;AACA,aAASqH,0CAAT,GAAsD;AACpD;AACE,eAAOrH,kCAAP;AACD;AACF;;AAED,aAASsH,OAAT,GAAmB;AACjB,UAAIh5B,IAAI,GAAG2xB,uBAAuB,EAAlC;AACA,UAAIlxB,IAAI,GAAGyzB,qBAAqB,EAAhC,CAFiB,CAEmB;AACpC;AACA;AACA;AACA;;AAEA,UAAI+E,gBAAgB,GAAGx4B,IAAI,CAACw4B,gBAA5B;AACA,UAAIC,EAAJ;AAEA;AACE;AACA,YAAIC,cAAc,GAAG3J,qBAAqB,EAA1C;AACA0J,QAAAA,EAAE,GAAG,MAAMD,gBAAN,GAAyB,GAAzB,GAA+BE,cAAc,CAAChS,QAAf,CAAwB,EAAxB,CAA/B,GAA6D,GAAlE;AACD;AAEDnnB,MAAAA,IAAI,CAAC2U,aAAL,GAAqBukB,EAArB;AACA,aAAOA,EAAP;AACD;;AAED,aAASE,QAAT,GAAoB;AAClB,UAAIp5B,IAAI,GAAG6xB,wBAAwB,EAAnC;AACA,UAAIqH,EAAE,GAAGl5B,IAAI,CAAC2U,aAAd;AACA,aAAOukB,EAAP;AACD;;AAED,aAASrG,qBAAT,CAA+B55B,KAA/B,EAAsCsb,KAAtC,EAA6C8d,MAA7C,EAAqD;AACnD;AACE,YAAI,OAAO5hC,SAAS,CAAC,CAAD,CAAhB,KAAwB,UAA5B,EAAwC;AACtCM,UAAAA,KAAK,CAAC,gFAAgF,2DAAhF,GAA8I,+DAA/I,CAAL;AACD;AACF;AAED,UAAIsV,IAAI,GAAGkb,iBAAiB,CAACtoB,KAAD,CAA5B;AACA,UAAI4iB,MAAM,GAAG;AACXxV,QAAAA,IAAI,EAAEA,IADK;AAEXgsB,QAAAA,MAAM,EAAEA,MAFG;AAGXe,QAAAA,aAAa,EAAE,KAHJ;AAIXC,QAAAA,UAAU,EAAE,IAJD;AAKXjX,QAAAA,IAAI,EAAE;AALK,OAAb;;AAQA,UAAIid,mBAAmB,CAACpgC,KAAD,CAAvB,EAAgC;AAC9BqgC,QAAAA,wBAAwB,CAAC/kB,KAAD,EAAQsH,MAAR,CAAxB;AACD,OAFD,MAEO;AACL0d,QAAAA,eAAe,CAACtgC,KAAD,EAAQsb,KAAR,EAAesH,MAAf,CAAf;AACA,YAAIpV,SAAS,GAAG6a,gBAAgB,EAAhC;AACA,YAAI7gB,IAAI,GAAG+gB,qBAAqB,CAACvoB,KAAD,EAAQoN,IAAR,EAAcI,SAAd,CAAhC;;AAEA,YAAIhG,IAAI,KAAK,IAAb,EAAmB;AACjB+4B,UAAAA,wBAAwB,CAAC/4B,IAAD,EAAO8T,KAAP,EAAclO,IAAd,CAAxB;AACD;AACF;AACF;;AAED,aAASgvB,gBAAT,CAA0Bp8B,KAA1B,EAAiCsb,KAAjC,EAAwC8d,MAAxC,EAAgD;AAC9C;AACE,YAAI,OAAO5hC,SAAS,CAAC,CAAD,CAAhB,KAAwB,UAA5B,EAAwC;AACtCM,UAAAA,KAAK,CAAC,gFAAgF,2DAAhF,GAA8I,+DAA/I,CAAL;AACD;AACF;AAED,UAAIsV,IAAI,GAAGkb,iBAAiB,CAACtoB,KAAD,CAA5B;AACA,UAAI4iB,MAAM,GAAG;AACXxV,QAAAA,IAAI,EAAEA,IADK;AAEXgsB,QAAAA,MAAM,EAAEA,MAFG;AAGXe,QAAAA,aAAa,EAAE,KAHJ;AAIXC,QAAAA,UAAU,EAAE,IAJD;AAKXjX,QAAAA,IAAI,EAAE;AALK,OAAb;;AAQA,UAAIid,mBAAmB,CAACpgC,KAAD,CAAvB,EAAgC;AAC9BqgC,QAAAA,wBAAwB,CAAC/kB,KAAD,EAAQsH,MAAR,CAAxB;AACD,OAFD,MAEO;AACL0d,QAAAA,eAAe,CAACtgC,KAAD,EAAQsb,KAAR,EAAesH,MAAf,CAAf;AACA,YAAIxgB,SAAS,GAAGpC,KAAK,CAACoC,SAAtB;;AAEA,YAAIpC,KAAK,CAAC6I,KAAN,KAAgBa,OAAhB,KAA4BtH,SAAS,KAAK,IAAd,IAAsBA,SAAS,CAACyG,KAAV,KAAoBa,OAAtE,CAAJ,EAAoF;AAClF;AACA;AACA;AACA,cAAIgwB,mBAAmB,GAAGpe,KAAK,CAACoe,mBAAhC;;AAEA,cAAIA,mBAAmB,KAAK,IAA5B,EAAkC;AAChC,gBAAI8G,cAAJ;AAEA;AACEA,cAAAA,cAAc,GAAG1K,wBAAwB,CAAClzB,OAA1C;AACAkzB,cAAAA,wBAAwB,CAAClzB,OAAzB,GAAmC69B,yCAAnC;AACD;;AAED,gBAAI;AACF,kBAAIhlB,YAAY,GAAGH,KAAK,CAACqe,iBAAzB;AACA,kBAAIS,UAAU,GAAGV,mBAAmB,CAACje,YAAD,EAAe2d,MAAf,CAApC,CAFE,CAE0D;AAC5D;AACA;AACA;;AAEAxW,cAAAA,MAAM,CAACuX,aAAP,GAAuB,IAAvB;AACAvX,cAAAA,MAAM,CAACwX,UAAP,GAAoBA,UAApB;;AAEA,kBAAIzf,QAAQ,CAACyf,UAAD,EAAa3e,YAAb,CAAZ,EAAwC;AACtC;AACA;AACA;AACA;AACA;AACD;AACF,aAjBD,CAiBE,OAAO3jB,KAAP,EAAc,CAAC;AAChB,aAlBD,SAkBU;AACR;AACEg+B,gBAAAA,wBAAwB,CAAClzB,OAAzB,GAAmC49B,cAAnC;AACD;AACF;AACF;AACF;;AAED,YAAIhzB,SAAS,GAAG6a,gBAAgB,EAAhC;AACA,YAAI7gB,IAAI,GAAG+gB,qBAAqB,CAACvoB,KAAD,EAAQoN,IAAR,EAAcI,SAAd,CAAhC;;AAEA,YAAIhG,IAAI,KAAK,IAAb,EAAmB;AACjB+4B,UAAAA,wBAAwB,CAAC/4B,IAAD,EAAO8T,KAAP,EAAclO,IAAd,CAAxB;AACD;AACF;AACF;;AAED,aAASgzB,mBAAT,CAA6BpgC,KAA7B,EAAoC;AAClC,UAAIoC,SAAS,GAAGpC,KAAK,CAACoC,SAAtB;AACA,aAAOpC,KAAK,KAAKk2B,yBAAV,IAAuC9zB,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK8zB,yBAAlF;AACD;;AAED,aAASmK,wBAAT,CAAkC/kB,KAAlC,EAAyCsH,MAAzC,EAAiD;AAC/C;AACA;AACA;AACA0T,MAAAA,0CAA0C,GAAGD,4BAA4B,GAAG,IAA5E;AACA,UAAInT,OAAO,GAAG5H,KAAK,CAAC4H,OAApB;;AAEA,UAAIA,OAAO,KAAK,IAAhB,EAAsB;AACpB;AACAN,QAAAA,MAAM,CAACO,IAAP,GAAcP,MAAd;AACD,OAHD,MAGO;AACLA,QAAAA,MAAM,CAACO,IAAP,GAAcD,OAAO,CAACC,IAAtB;AACAD,QAAAA,OAAO,CAACC,IAAR,GAAeP,MAAf;AACD;;AAEDtH,MAAAA,KAAK,CAAC4H,OAAN,GAAgBN,MAAhB;AACD;;AAED,aAAS0d,eAAT,CAAyBtgC,KAAzB,EAAgCsb,KAAhC,EAAuCsH,MAAvC,EAA+CxV,IAA/C,EAAqD;AACnD,UAAI4X,mBAAmB,CAAChlB,KAAD,CAAvB,EAAgC;AAC9B,YAAI6jB,WAAW,GAAGvI,KAAK,CAACuI,WAAxB;;AAEA,YAAIA,WAAW,KAAK,IAApB,EAA0B;AACxB;AACAjB,UAAAA,MAAM,CAACO,IAAP,GAAcP,MAAd,CAFwB,CAEF;AACtB;;AAEAc,UAAAA,oBAAoB,CAACpI,KAAD,CAApB;AACD,SAND,MAMO;AACLsH,UAAAA,MAAM,CAACO,IAAP,GAAcU,WAAW,CAACV,IAA1B;AACAU,UAAAA,WAAW,CAACV,IAAZ,GAAmBP,MAAnB;AACD;;AAEDtH,QAAAA,KAAK,CAACuI,WAAN,GAAoBjB,MAApB;AACD,OAfD,MAeO;AACL,YAAIM,OAAO,GAAG5H,KAAK,CAAC4H,OAApB;;AAEA,YAAIA,OAAO,KAAK,IAAhB,EAAsB;AACpB;AACAN,UAAAA,MAAM,CAACO,IAAP,GAAcP,MAAd;AACD,SAHD,MAGO;AACLA,UAAAA,MAAM,CAACO,IAAP,GAAcD,OAAO,CAACC,IAAtB;AACAD,UAAAA,OAAO,CAACC,IAAR,GAAeP,MAAf;AACD;;AAEDtH,QAAAA,KAAK,CAAC4H,OAAN,GAAgBN,MAAhB;AACD;AACF;;AAED,aAAS2d,wBAAT,CAAkC/4B,IAAlC,EAAwC8T,KAAxC,EAA+ClO,IAA/C,EAAqD;AACnD,UAAIoB,gBAAgB,CAACpB,IAAD,CAApB,EAA4B;AAC1B,YAAI8X,UAAU,GAAG5J,KAAK,CAACzS,KAAvB,CAD0B,CACI;AAC9B;AACA;AACA;AACA;;AAEAqc,QAAAA,UAAU,GAAGhW,cAAc,CAACgW,UAAD,EAAa1d,IAAI,CAAC8E,YAAlB,CAA3B,CAP0B,CAOkC;;AAE5D,YAAI6Y,aAAa,GAAGnW,UAAU,CAACkW,UAAD,EAAa9X,IAAb,CAA9B;AACAkO,QAAAA,KAAK,CAACzS,KAAN,GAAcsc,aAAd,CAV0B,CAUG;AAC7B;AACA;;AAEAnV,QAAAA,iBAAiB,CAACxI,IAAD,EAAO2d,aAAP,CAAjB;AACD;AACF;;AAED,QAAIkT,qBAAqB,GAAG;AAC1B/U,MAAAA,WAAW,EAAEA,WADa;AAE1Bod,MAAAA,WAAW,EAAElJ,qBAFa;AAG1BmJ,MAAAA,UAAU,EAAEnJ,qBAHc;AAI1BoJ,MAAAA,SAAS,EAAEpJ,qBAJe;AAK1BqJ,MAAAA,mBAAmB,EAAErJ,qBALK;AAM1BsJ,MAAAA,kBAAkB,EAAEtJ,qBANM;AAO1BuJ,MAAAA,eAAe,EAAEvJ,qBAPS;AAQ1BwJ,MAAAA,OAAO,EAAExJ,qBARiB;AAS1ByJ,MAAAA,UAAU,EAAEzJ,qBATc;AAU1B0J,MAAAA,MAAM,EAAE1J,qBAVkB;AAW1B2J,MAAAA,QAAQ,EAAE3J,qBAXgB;AAY1B4J,MAAAA,aAAa,EAAE5J,qBAZW;AAa1B6J,MAAAA,gBAAgB,EAAE7J,qBAbQ;AAc1B8J,MAAAA,aAAa,EAAE9J,qBAdW;AAe1B+J,MAAAA,gBAAgB,EAAE/J,qBAfQ;AAgB1BgK,MAAAA,oBAAoB,EAAEhK,qBAhBI;AAiB1BiK,MAAAA,KAAK,EAAEjK,qBAjBmB;AAkB1BkK,MAAAA,wBAAwB,EAAE1mC;AAlBA,KAA5B;AAqBA,QAAIk9B,2BAA2B,GAAG,IAAlC;AACA,QAAID,wCAAwC,GAAG,IAA/C;AACA,QAAID,4BAA4B,GAAG,IAAnC;AACA,QAAII,8BAA8B,GAAG,IAArC;AACA,QAAIuJ,wCAAwC,GAAG,IAA/C;AACA,QAAIlB,yCAAyC,GAAG,IAAhD;AACA,QAAImB,2CAA2C,GAAG,IAAlD;AAEA;AACE,UAAIC,wBAAwB,GAAG,YAAY;AACzC/pC,QAAAA,KAAK,CAAC,wDAAwD,gFAAxD,GAA2I,iFAA3I,GAA+N,8CAAhO,CAAL;AACD,OAFD;;AAIA,UAAIgqC,qBAAqB,GAAG,YAAY;AACtChqC,QAAAA,KAAK,CAAC,qFAAqF,mEAArF,GAA2J,4BAA3J,GAA0L,yCAA3L,CAAL;AACD,OAFD;;AAIAogC,MAAAA,2BAA2B,GAAG;AAC5B5U,QAAAA,WAAW,EAAE,UAAUpkB,OAAV,EAAmB;AAC9B,iBAAOokB,WAAW,CAACpkB,OAAD,CAAlB;AACD,SAH2B;AAI5BwhC,QAAAA,WAAW,EAAE,UAAU1lB,QAAV,EAAoBkc,IAApB,EAA0B;AACrCT,UAAAA,oBAAoB,GAAG,aAAvB;AACAI,UAAAA,iBAAiB;AACjBI,UAAAA,oBAAoB,CAACC,IAAD,CAApB;AACA,iBAAO+G,aAAa,CAACjjB,QAAD,EAAWkc,IAAX,CAApB;AACD,SAT2B;AAU5ByJ,QAAAA,UAAU,EAAE,UAAUzhC,OAAV,EAAmB;AAC7Bu3B,UAAAA,oBAAoB,GAAG,YAAvB;AACAI,UAAAA,iBAAiB;AACjB,iBAAOvT,WAAW,CAACpkB,OAAD,CAAlB;AACD,SAd2B;AAe5B0hC,QAAAA,SAAS,EAAE,UAAUrE,MAAV,EAAkBrF,IAAlB,EAAwB;AACjCT,UAAAA,oBAAoB,GAAG,WAAvB;AACAI,UAAAA,iBAAiB;AACjBI,UAAAA,oBAAoB,CAACC,IAAD,CAApB;AACA,iBAAOiE,WAAW,CAACoB,MAAD,EAASrF,IAAT,CAAlB;AACD,SApB2B;AAqB5B2J,QAAAA,mBAAmB,EAAE,UAAUnT,GAAV,EAAe6O,MAAf,EAAuBrF,IAAvB,EAA6B;AAChDT,UAAAA,oBAAoB,GAAG,qBAAvB;AACAI,UAAAA,iBAAiB;AACjBI,UAAAA,oBAAoB,CAACC,IAAD,CAApB;AACA,iBAAOyG,qBAAqB,CAACjQ,GAAD,EAAM6O,MAAN,EAAcrF,IAAd,CAA5B;AACD,SA1B2B;AA2B5B4J,QAAAA,kBAAkB,EAAE,UAAUvE,MAAV,EAAkBrF,IAAlB,EAAwB;AAC1CT,UAAAA,oBAAoB,GAAG,oBAAvB;AACAI,UAAAA,iBAAiB;AACjBI,UAAAA,oBAAoB,CAACC,IAAD,CAApB;AACA,iBAAOgG,oBAAoB,CAACX,MAAD,EAASrF,IAAT,CAA3B;AACD,SAhC2B;AAiC5B6J,QAAAA,eAAe,EAAE,UAAUxE,MAAV,EAAkBrF,IAAlB,EAAwB;AACvCT,UAAAA,oBAAoB,GAAG,iBAAvB;AACAI,UAAAA,iBAAiB;AACjBI,UAAAA,oBAAoB,CAACC,IAAD,CAApB;AACA,iBAAOkG,iBAAiB,CAACb,MAAD,EAASrF,IAAT,CAAxB;AACD,SAtC2B;AAuC5B8J,QAAAA,OAAO,EAAE,UAAUzE,MAAV,EAAkBrF,IAAlB,EAAwB;AAC/BT,UAAAA,oBAAoB,GAAG,SAAvB;AACAI,UAAAA,iBAAiB;AACjBI,UAAAA,oBAAoB,CAACC,IAAD,CAApB;AACA,cAAIsJ,cAAc,GAAG1K,wBAAwB,CAAClzB,OAA9C;AACAkzB,UAAAA,wBAAwB,CAAClzB,OAAzB,GAAmC++B,wCAAnC;;AAEA,cAAI;AACF,mBAAOxD,SAAS,CAAC5B,MAAD,EAASrF,IAAT,CAAhB;AACD,WAFD,SAEU;AACRpB,YAAAA,wBAAwB,CAAClzB,OAAzB,GAAmC49B,cAAnC;AACD;AACF,SAnD2B;AAoD5BS,QAAAA,UAAU,EAAE,UAAU3H,OAAV,EAAmBC,UAAnB,EAA+B75B,IAA/B,EAAqC;AAC/C+2B,UAAAA,oBAAoB,GAAG,YAAvB;AACAI,UAAAA,iBAAiB;AACjB,cAAI2J,cAAc,GAAG1K,wBAAwB,CAAClzB,OAA9C;AACAkzB,UAAAA,wBAAwB,CAAClzB,OAAzB,GAAmC++B,wCAAnC;;AAEA,cAAI;AACF,mBAAOtI,YAAY,CAACC,OAAD,EAAUC,UAAV,EAAsB75B,IAAtB,CAAnB;AACD,WAFD,SAEU;AACRo2B,YAAAA,wBAAwB,CAAClzB,OAAzB,GAAmC49B,cAAnC;AACD;AACF,SA/D2B;AAgE5BU,QAAAA,MAAM,EAAE,UAAUvE,YAAV,EAAwB;AAC9BlG,UAAAA,oBAAoB,GAAG,QAAvB;AACAI,UAAAA,iBAAiB;AACjB,iBAAO6F,QAAQ,CAACC,YAAD,CAAf;AACD,SApE2B;AAqE5BwE,QAAAA,QAAQ,EAAE,UAAU3H,YAAV,EAAwB;AAChC/C,UAAAA,oBAAoB,GAAG,UAAvB;AACAI,UAAAA,iBAAiB;AACjB,cAAI2J,cAAc,GAAG1K,wBAAwB,CAAClzB,OAA9C;AACAkzB,UAAAA,wBAAwB,CAAClzB,OAAzB,GAAmC++B,wCAAnC;;AAEA,cAAI;AACF,mBAAOxF,UAAU,CAAC3C,YAAD,CAAjB;AACD,WAFD,SAEU;AACR1D,YAAAA,wBAAwB,CAAClzB,OAAzB,GAAmC49B,cAAnC;AACD;AACF,SAhF2B;AAiF5BY,QAAAA,aAAa,EAAE,UAAU3mC,KAAV,EAAiBsjC,WAAjB,EAA8B;AAC3CtH,UAAAA,oBAAoB,GAAG,eAAvB;AACAI,UAAAA,iBAAiB;AACjB,iBAAOiH,eAAe,EAAtB;AACD,SArF2B;AAsF5BuD,QAAAA,gBAAgB,EAAE,UAAU5mC,KAAV,EAAiB;AACjCg8B,UAAAA,oBAAoB,GAAG,kBAAvB;AACAI,UAAAA,iBAAiB;AACjB,iBAAOyH,kBAAkB,CAAC7jC,KAAD,CAAzB;AACD,SA1F2B;AA2F5B6mC,QAAAA,aAAa,EAAE,YAAY;AACzB7K,UAAAA,oBAAoB,GAAG,eAAvB;AACAI,UAAAA,iBAAiB;AACjB,iBAAOyI,eAAe,EAAtB;AACD,SA/F2B;AAgG5BiC,QAAAA,gBAAgB,EAAE,UAAUvnC,MAAV,EAAkB0gC,WAAlB,EAA+BC,SAA/B,EAA0C;AAC1DlE,UAAAA,oBAAoB,GAAG,kBAAvB;AACAI,UAAAA,iBAAiB;AACjB,iBAAO4D,kBAAkB,EAAzB;AACD,SApG2B;AAqG5B+G,QAAAA,oBAAoB,EAAE,UAAU7G,SAAV,EAAqBD,WAArB,EAAkCI,iBAAlC,EAAqD;AACzErE,UAAAA,oBAAoB,GAAG,sBAAvB;AACAI,UAAAA,iBAAiB;AACjB,iBAAOgE,sBAAsB,CAACF,SAAD,EAAYD,WAAZ,CAA7B;AACD,SAzG2B;AA0G5B+G,QAAAA,KAAK,EAAE,YAAY;AACjBhL,UAAAA,oBAAoB,GAAG,OAAvB;AACAI,UAAAA,iBAAiB;AACjB,iBAAOkJ,OAAO,EAAd;AACD,SA9G2B;AA+G5B2B,QAAAA,wBAAwB,EAAE1mC;AA/GE,OAA9B;AAkHAi9B,MAAAA,wCAAwC,GAAG;AACzC3U,QAAAA,WAAW,EAAE,UAAUpkB,OAAV,EAAmB;AAC9B,iBAAOokB,WAAW,CAACpkB,OAAD,CAAlB;AACD,SAHwC;AAIzCwhC,QAAAA,WAAW,EAAE,UAAU1lB,QAAV,EAAoBkc,IAApB,EAA0B;AACrCT,UAAAA,oBAAoB,GAAG,aAAvB;AACAM,UAAAA,kBAAkB;AAClB,iBAAOkH,aAAa,CAACjjB,QAAD,EAAWkc,IAAX,CAApB;AACD,SARwC;AASzCyJ,QAAAA,UAAU,EAAE,UAAUzhC,OAAV,EAAmB;AAC7Bu3B,UAAAA,oBAAoB,GAAG,YAAvB;AACAM,UAAAA,kBAAkB;AAClB,iBAAOzT,WAAW,CAACpkB,OAAD,CAAlB;AACD,SAbwC;AAczC0hC,QAAAA,SAAS,EAAE,UAAUrE,MAAV,EAAkBrF,IAAlB,EAAwB;AACjCT,UAAAA,oBAAoB,GAAG,WAAvB;AACAM,UAAAA,kBAAkB;AAClB,iBAAOoE,WAAW,CAACoB,MAAD,EAASrF,IAAT,CAAlB;AACD,SAlBwC;AAmBzC2J,QAAAA,mBAAmB,EAAE,UAAUnT,GAAV,EAAe6O,MAAf,EAAuBrF,IAAvB,EAA6B;AAChDT,UAAAA,oBAAoB,GAAG,qBAAvB;AACAM,UAAAA,kBAAkB;AAClB,iBAAO4G,qBAAqB,CAACjQ,GAAD,EAAM6O,MAAN,EAAcrF,IAAd,CAA5B;AACD,SAvBwC;AAwBzC4J,QAAAA,kBAAkB,EAAE,UAAUvE,MAAV,EAAkBrF,IAAlB,EAAwB;AAC1CT,UAAAA,oBAAoB,GAAG,oBAAvB;AACAM,UAAAA,kBAAkB;AAClB,iBAAOmG,oBAAoB,CAACX,MAAD,EAASrF,IAAT,CAA3B;AACD,SA5BwC;AA6BzC6J,QAAAA,eAAe,EAAE,UAAUxE,MAAV,EAAkBrF,IAAlB,EAAwB;AACvCT,UAAAA,oBAAoB,GAAG,iBAAvB;AACAM,UAAAA,kBAAkB;AAClB,iBAAOqG,iBAAiB,CAACb,MAAD,EAASrF,IAAT,CAAxB;AACD,SAjCwC;AAkCzC8J,QAAAA,OAAO,EAAE,UAAUzE,MAAV,EAAkBrF,IAAlB,EAAwB;AAC/BT,UAAAA,oBAAoB,GAAG,SAAvB;AACAM,UAAAA,kBAAkB;AAClB,cAAIyJ,cAAc,GAAG1K,wBAAwB,CAAClzB,OAA9C;AACAkzB,UAAAA,wBAAwB,CAAClzB,OAAzB,GAAmC++B,wCAAnC;;AAEA,cAAI;AACF,mBAAOxD,SAAS,CAAC5B,MAAD,EAASrF,IAAT,CAAhB;AACD,WAFD,SAEU;AACRpB,YAAAA,wBAAwB,CAAClzB,OAAzB,GAAmC49B,cAAnC;AACD;AACF,SA7CwC;AA8CzCS,QAAAA,UAAU,EAAE,UAAU3H,OAAV,EAAmBC,UAAnB,EAA+B75B,IAA/B,EAAqC;AAC/C+2B,UAAAA,oBAAoB,GAAG,YAAvB;AACAM,UAAAA,kBAAkB;AAClB,cAAIyJ,cAAc,GAAG1K,wBAAwB,CAAClzB,OAA9C;AACAkzB,UAAAA,wBAAwB,CAAClzB,OAAzB,GAAmC++B,wCAAnC;;AAEA,cAAI;AACF,mBAAOtI,YAAY,CAACC,OAAD,EAAUC,UAAV,EAAsB75B,IAAtB,CAAnB;AACD,WAFD,SAEU;AACRo2B,YAAAA,wBAAwB,CAAClzB,OAAzB,GAAmC49B,cAAnC;AACD;AACF,SAzDwC;AA0DzCU,QAAAA,MAAM,EAAE,UAAUvE,YAAV,EAAwB;AAC9BlG,UAAAA,oBAAoB,GAAG,QAAvB;AACAM,UAAAA,kBAAkB;AAClB,iBAAO2F,QAAQ,CAACC,YAAD,CAAf;AACD,SA9DwC;AA+DzCwE,QAAAA,QAAQ,EAAE,UAAU3H,YAAV,EAAwB;AAChC/C,UAAAA,oBAAoB,GAAG,UAAvB;AACAM,UAAAA,kBAAkB;AAClB,cAAIyJ,cAAc,GAAG1K,wBAAwB,CAAClzB,OAA9C;AACAkzB,UAAAA,wBAAwB,CAAClzB,OAAzB,GAAmC++B,wCAAnC;;AAEA,cAAI;AACF,mBAAOxF,UAAU,CAAC3C,YAAD,CAAjB;AACD,WAFD,SAEU;AACR1D,YAAAA,wBAAwB,CAAClzB,OAAzB,GAAmC49B,cAAnC;AACD;AACF,SA1EwC;AA2EzCY,QAAAA,aAAa,EAAE,UAAU3mC,KAAV,EAAiBsjC,WAAjB,EAA8B;AAC3CtH,UAAAA,oBAAoB,GAAG,eAAvB;AACAM,UAAAA,kBAAkB;AAClB,iBAAO+G,eAAe,EAAtB;AACD,SA/EwC;AAgFzCuD,QAAAA,gBAAgB,EAAE,UAAU5mC,KAAV,EAAiB;AACjCg8B,UAAAA,oBAAoB,GAAG,kBAAvB;AACAM,UAAAA,kBAAkB;AAClB,iBAAOuH,kBAAkB,CAAC7jC,KAAD,CAAzB;AACD,SApFwC;AAqFzC6mC,QAAAA,aAAa,EAAE,YAAY;AACzB7K,UAAAA,oBAAoB,GAAG,eAAvB;AACAM,UAAAA,kBAAkB;AAClB,iBAAOuI,eAAe,EAAtB;AACD,SAzFwC;AA0FzCiC,QAAAA,gBAAgB,EAAE,UAAUvnC,MAAV,EAAkB0gC,WAAlB,EAA+BC,SAA/B,EAA0C;AAC1DlE,UAAAA,oBAAoB,GAAG,kBAAvB;AACAM,UAAAA,kBAAkB;AAClB,iBAAO0D,kBAAkB,EAAzB;AACD,SA9FwC;AA+FzC+G,QAAAA,oBAAoB,EAAE,UAAU7G,SAAV,EAAqBD,WAArB,EAAkCI,iBAAlC,EAAqD;AACzErE,UAAAA,oBAAoB,GAAG,sBAAvB;AACAM,UAAAA,kBAAkB;AAClB,iBAAO8D,sBAAsB,CAACF,SAAD,EAAYD,WAAZ,CAA7B;AACD,SAnGwC;AAoGzC+G,QAAAA,KAAK,EAAE,YAAY;AACjBhL,UAAAA,oBAAoB,GAAG,OAAvB;AACAM,UAAAA,kBAAkB;AAClB,iBAAOgJ,OAAO,EAAd;AACD,SAxGwC;AAyGzC2B,QAAAA,wBAAwB,EAAE1mC;AAzGe,OAA3C;AA4GAg9B,MAAAA,4BAA4B,GAAG;AAC7B1U,QAAAA,WAAW,EAAE,UAAUpkB,OAAV,EAAmB;AAC9B,iBAAOokB,WAAW,CAACpkB,OAAD,CAAlB;AACD,SAH4B;AAI7BwhC,QAAAA,WAAW,EAAE,UAAU1lB,QAAV,EAAoBkc,IAApB,EAA0B;AACrCT,UAAAA,oBAAoB,GAAG,aAAvB;AACAM,UAAAA,kBAAkB;AAClB,iBAAOmH,cAAc,CAACljB,QAAD,EAAWkc,IAAX,CAArB;AACD,SAR4B;AAS7ByJ,QAAAA,UAAU,EAAE,UAAUzhC,OAAV,EAAmB;AAC7Bu3B,UAAAA,oBAAoB,GAAG,YAAvB;AACAM,UAAAA,kBAAkB;AAClB,iBAAOzT,WAAW,CAACpkB,OAAD,CAAlB;AACD,SAb4B;AAc7B0hC,QAAAA,SAAS,EAAE,UAAUrE,MAAV,EAAkBrF,IAAlB,EAAwB;AACjCT,UAAAA,oBAAoB,GAAG,WAAvB;AACAM,UAAAA,kBAAkB;AAClB,iBAAO2E,YAAY,CAACa,MAAD,EAASrF,IAAT,CAAnB;AACD,SAlB4B;AAmB7B2J,QAAAA,mBAAmB,EAAE,UAAUnT,GAAV,EAAe6O,MAAf,EAAuBrF,IAAvB,EAA6B;AAChDT,UAAAA,oBAAoB,GAAG,qBAAvB;AACAM,UAAAA,kBAAkB;AAClB,iBAAO8G,sBAAsB,CAACnQ,GAAD,EAAM6O,MAAN,EAAcrF,IAAd,CAA7B;AACD,SAvB4B;AAwB7B4J,QAAAA,kBAAkB,EAAE,UAAUvE,MAAV,EAAkBrF,IAAlB,EAAwB;AAC1CT,UAAAA,oBAAoB,GAAG,oBAAvB;AACAM,UAAAA,kBAAkB;AAClB,iBAAOoG,qBAAqB,CAACZ,MAAD,EAASrF,IAAT,CAA5B;AACD,SA5B4B;AA6B7B6J,QAAAA,eAAe,EAAE,UAAUxE,MAAV,EAAkBrF,IAAlB,EAAwB;AACvCT,UAAAA,oBAAoB,GAAG,iBAAvB;AACAM,UAAAA,kBAAkB;AAClB,iBAAOsG,kBAAkB,CAACd,MAAD,EAASrF,IAAT,CAAzB;AACD,SAjC4B;AAkC7B8J,QAAAA,OAAO,EAAE,UAAUzE,MAAV,EAAkBrF,IAAlB,EAAwB;AAC/BT,UAAAA,oBAAoB,GAAG,SAAvB;AACAM,UAAAA,kBAAkB;AAClB,cAAIyJ,cAAc,GAAG1K,wBAAwB,CAAClzB,OAA9C;AACAkzB,UAAAA,wBAAwB,CAAClzB,OAAzB,GAAmC69B,yCAAnC;;AAEA,cAAI;AACF,mBAAOpC,UAAU,CAAC9B,MAAD,EAASrF,IAAT,CAAjB;AACD,WAFD,SAEU;AACRpB,YAAAA,wBAAwB,CAAClzB,OAAzB,GAAmC49B,cAAnC;AACD;AACF,SA7C4B;AA8C7BS,QAAAA,UAAU,EAAE,UAAU3H,OAAV,EAAmBC,UAAnB,EAA+B75B,IAA/B,EAAqC;AAC/C+2B,UAAAA,oBAAoB,GAAG,YAAvB;AACAM,UAAAA,kBAAkB;AAClB,cAAIyJ,cAAc,GAAG1K,wBAAwB,CAAClzB,OAA9C;AACAkzB,UAAAA,wBAAwB,CAAClzB,OAAzB,GAAmC69B,yCAAnC;;AAEA,cAAI;AACF,mBAAO5G,aAAa,CAACP,OAAD,EAAUC,UAAV,EAAsB75B,IAAtB,CAApB;AACD,WAFD,SAEU;AACRo2B,YAAAA,wBAAwB,CAAClzB,OAAzB,GAAmC49B,cAAnC;AACD;AACF,SAzD4B;AA0D7BU,QAAAA,MAAM,EAAE,UAAUvE,YAAV,EAAwB;AAC9BlG,UAAAA,oBAAoB,GAAG,QAAvB;AACAM,UAAAA,kBAAkB;AAClB,iBAAO8F,SAAS,EAAhB;AACD,SA9D4B;AA+D7BsE,QAAAA,QAAQ,EAAE,UAAU3H,YAAV,EAAwB;AAChC/C,UAAAA,oBAAoB,GAAG,UAAvB;AACAM,UAAAA,kBAAkB;AAClB,cAAIyJ,cAAc,GAAG1K,wBAAwB,CAAClzB,OAA9C;AACAkzB,UAAAA,wBAAwB,CAAClzB,OAAzB,GAAmC69B,yCAAnC;;AAEA,cAAI;AACF,mBAAOpE,WAAW,CAAC7C,YAAD,CAAlB;AACD,WAFD,SAEU;AACR1D,YAAAA,wBAAwB,CAAClzB,OAAzB,GAAmC49B,cAAnC;AACD;AACF,SA1E4B;AA2E7BY,QAAAA,aAAa,EAAE,UAAU3mC,KAAV,EAAiBsjC,WAAjB,EAA8B;AAC3CtH,UAAAA,oBAAoB,GAAG,eAAvB;AACAM,UAAAA,kBAAkB;AAClB,iBAAOiH,gBAAgB,EAAvB;AACD,SA/E4B;AAgF7BqD,QAAAA,gBAAgB,EAAE,UAAU5mC,KAAV,EAAiB;AACjCg8B,UAAAA,oBAAoB,GAAG,kBAAvB;AACAM,UAAAA,kBAAkB;AAClB,iBAAO2H,mBAAmB,CAACjkC,KAAD,CAA1B;AACD,SApF4B;AAqF7B6mC,QAAAA,aAAa,EAAE,YAAY;AACzB7K,UAAAA,oBAAoB,GAAG,eAAvB;AACAM,UAAAA,kBAAkB;AAClB,iBAAO2I,gBAAgB,EAAvB;AACD,SAzF4B;AA0F7B6B,QAAAA,gBAAgB,EAAE,UAAUvnC,MAAV,EAAkB0gC,WAAlB,EAA+BC,SAA/B,EAA0C;AAC1DlE,UAAAA,oBAAoB,GAAG,kBAAvB;AACAM,UAAAA,kBAAkB;AAClB,iBAAO6D,mBAAmB,EAA1B;AACD,SA9F4B;AA+F7B4G,QAAAA,oBAAoB,EAAE,UAAU7G,SAAV,EAAqBD,WAArB,EAAkCI,iBAAlC,EAAqD;AACzErE,UAAAA,oBAAoB,GAAG,sBAAvB;AACAM,UAAAA,kBAAkB;AAClB,iBAAOwE,uBAAuB,CAACZ,SAAD,EAAYD,WAAZ,CAA9B;AACD,SAnG4B;AAoG7B+G,QAAAA,KAAK,EAAE,YAAY;AACjBhL,UAAAA,oBAAoB,GAAG,OAAvB;AACAM,UAAAA,kBAAkB;AAClB,iBAAOoJ,QAAQ,EAAf;AACD,SAxG4B;AAyG7BuB,QAAAA,wBAAwB,EAAE1mC;AAzGG,OAA/B;AA4GAo9B,MAAAA,8BAA8B,GAAG;AAC/B9U,QAAAA,WAAW,EAAE,UAAUpkB,OAAV,EAAmB;AAC9B,iBAAOokB,WAAW,CAACpkB,OAAD,CAAlB;AACD,SAH8B;AAI/BwhC,QAAAA,WAAW,EAAE,UAAU1lB,QAAV,EAAoBkc,IAApB,EAA0B;AACrCT,UAAAA,oBAAoB,GAAG,aAAvB;AACAM,UAAAA,kBAAkB;AAClB,iBAAOmH,cAAc,CAACljB,QAAD,EAAWkc,IAAX,CAArB;AACD,SAR8B;AAS/ByJ,QAAAA,UAAU,EAAE,UAAUzhC,OAAV,EAAmB;AAC7Bu3B,UAAAA,oBAAoB,GAAG,YAAvB;AACAM,UAAAA,kBAAkB;AAClB,iBAAOzT,WAAW,CAACpkB,OAAD,CAAlB;AACD,SAb8B;AAc/B0hC,QAAAA,SAAS,EAAE,UAAUrE,MAAV,EAAkBrF,IAAlB,EAAwB;AACjCT,UAAAA,oBAAoB,GAAG,WAAvB;AACAM,UAAAA,kBAAkB;AAClB,iBAAO2E,YAAY,CAACa,MAAD,EAASrF,IAAT,CAAnB;AACD,SAlB8B;AAmB/B2J,QAAAA,mBAAmB,EAAE,UAAUnT,GAAV,EAAe6O,MAAf,EAAuBrF,IAAvB,EAA6B;AAChDT,UAAAA,oBAAoB,GAAG,qBAAvB;AACAM,UAAAA,kBAAkB;AAClB,iBAAO8G,sBAAsB,CAACnQ,GAAD,EAAM6O,MAAN,EAAcrF,IAAd,CAA7B;AACD,SAvB8B;AAwB/B4J,QAAAA,kBAAkB,EAAE,UAAUvE,MAAV,EAAkBrF,IAAlB,EAAwB;AAC1CT,UAAAA,oBAAoB,GAAG,oBAAvB;AACAM,UAAAA,kBAAkB;AAClB,iBAAOoG,qBAAqB,CAACZ,MAAD,EAASrF,IAAT,CAA5B;AACD,SA5B8B;AA6B/B6J,QAAAA,eAAe,EAAE,UAAUxE,MAAV,EAAkBrF,IAAlB,EAAwB;AACvCT,UAAAA,oBAAoB,GAAG,iBAAvB;AACAM,UAAAA,kBAAkB;AAClB,iBAAOsG,kBAAkB,CAACd,MAAD,EAASrF,IAAT,CAAzB;AACD,SAjC8B;AAkC/B8J,QAAAA,OAAO,EAAE,UAAUzE,MAAV,EAAkBrF,IAAlB,EAAwB;AAC/BT,UAAAA,oBAAoB,GAAG,SAAvB;AACAM,UAAAA,kBAAkB;AAClB,cAAIyJ,cAAc,GAAG1K,wBAAwB,CAAClzB,OAA9C;AACAkzB,UAAAA,wBAAwB,CAAClzB,OAAzB,GAAmCg/B,2CAAnC;;AAEA,cAAI;AACF,mBAAOvD,UAAU,CAAC9B,MAAD,EAASrF,IAAT,CAAjB;AACD,WAFD,SAEU;AACRpB,YAAAA,wBAAwB,CAAClzB,OAAzB,GAAmC49B,cAAnC;AACD;AACF,SA7C8B;AA8C/BS,QAAAA,UAAU,EAAE,UAAU3H,OAAV,EAAmBC,UAAnB,EAA+B75B,IAA/B,EAAqC;AAC/C+2B,UAAAA,oBAAoB,GAAG,YAAvB;AACAM,UAAAA,kBAAkB;AAClB,cAAIyJ,cAAc,GAAG1K,wBAAwB,CAAClzB,OAA9C;AACAkzB,UAAAA,wBAAwB,CAAClzB,OAAzB,GAAmCg/B,2CAAnC;;AAEA,cAAI;AACF,mBAAOtH,eAAe,CAAChB,OAAD,EAAUC,UAAV,EAAsB75B,IAAtB,CAAtB;AACD,WAFD,SAEU;AACRo2B,YAAAA,wBAAwB,CAAClzB,OAAzB,GAAmC49B,cAAnC;AACD;AACF,SAzD8B;AA0D/BU,QAAAA,MAAM,EAAE,UAAUvE,YAAV,EAAwB;AAC9BlG,UAAAA,oBAAoB,GAAG,QAAvB;AACAM,UAAAA,kBAAkB;AAClB,iBAAO8F,SAAS,EAAhB;AACD,SA9D8B;AA+D/BsE,QAAAA,QAAQ,EAAE,UAAU3H,YAAV,EAAwB;AAChC/C,UAAAA,oBAAoB,GAAG,UAAvB;AACAM,UAAAA,kBAAkB;AAClB,cAAIyJ,cAAc,GAAG1K,wBAAwB,CAAClzB,OAA9C;AACAkzB,UAAAA,wBAAwB,CAAClzB,OAAzB,GAAmCg/B,2CAAnC;;AAEA,cAAI;AACF,mBAAOtF,aAAa,CAAC9C,YAAD,CAApB;AACD,WAFD,SAEU;AACR1D,YAAAA,wBAAwB,CAAClzB,OAAzB,GAAmC49B,cAAnC;AACD;AACF,SA1E8B;AA2E/BY,QAAAA,aAAa,EAAE,UAAU3mC,KAAV,EAAiBsjC,WAAjB,EAA8B;AAC3CtH,UAAAA,oBAAoB,GAAG,eAAvB;AACAM,UAAAA,kBAAkB;AAClB,iBAAOiH,gBAAgB,EAAvB;AACD,SA/E8B;AAgF/BqD,QAAAA,gBAAgB,EAAE,UAAU5mC,KAAV,EAAiB;AACjCg8B,UAAAA,oBAAoB,GAAG,kBAAvB;AACAM,UAAAA,kBAAkB;AAClB,iBAAO6H,qBAAqB,CAACnkC,KAAD,CAA5B;AACD,SApF8B;AAqF/B6mC,QAAAA,aAAa,EAAE,YAAY;AACzB7K,UAAAA,oBAAoB,GAAG,eAAvB;AACAM,UAAAA,kBAAkB;AAClB,iBAAO6I,kBAAkB,EAAzB;AACD,SAzF8B;AA0F/B2B,QAAAA,gBAAgB,EAAE,UAAUvnC,MAAV,EAAkB0gC,WAAlB,EAA+BC,SAA/B,EAA0C;AAC1DlE,UAAAA,oBAAoB,GAAG,kBAAvB;AACAM,UAAAA,kBAAkB;AAClB,iBAAO6D,mBAAmB,EAA1B;AACD,SA9F8B;AA+F/B4G,QAAAA,oBAAoB,EAAE,UAAU7G,SAAV,EAAqBD,WAArB,EAAkCI,iBAAlC,EAAqD;AACzErE,UAAAA,oBAAoB,GAAG,sBAAvB;AACAM,UAAAA,kBAAkB;AAClB,iBAAOwE,uBAAuB,CAACZ,SAAD,EAAYD,WAAZ,CAA9B;AACD,SAnG8B;AAoG/B+G,QAAAA,KAAK,EAAE,YAAY;AACjBhL,UAAAA,oBAAoB,GAAG,OAAvB;AACAM,UAAAA,kBAAkB;AAClB,iBAAOoJ,QAAQ,EAAf;AACD,SAxG8B;AAyG/BuB,QAAAA,wBAAwB,EAAE1mC;AAzGK,OAAjC;AA4GA2mC,MAAAA,wCAAwC,GAAG;AACzCre,QAAAA,WAAW,EAAE,UAAUpkB,OAAV,EAAmB;AAC9B2iC,UAAAA,wBAAwB;AACxB,iBAAOve,WAAW,CAACpkB,OAAD,CAAlB;AACD,SAJwC;AAKzCwhC,QAAAA,WAAW,EAAE,UAAU1lB,QAAV,EAAoBkc,IAApB,EAA0B;AACrCT,UAAAA,oBAAoB,GAAG,aAAvB;AACAqL,UAAAA,qBAAqB;AACrBjL,UAAAA,iBAAiB;AACjB,iBAAOoH,aAAa,CAACjjB,QAAD,EAAWkc,IAAX,CAApB;AACD,SAVwC;AAWzCyJ,QAAAA,UAAU,EAAE,UAAUzhC,OAAV,EAAmB;AAC7Bu3B,UAAAA,oBAAoB,GAAG,YAAvB;AACAqL,UAAAA,qBAAqB;AACrBjL,UAAAA,iBAAiB;AACjB,iBAAOvT,WAAW,CAACpkB,OAAD,CAAlB;AACD,SAhBwC;AAiBzC0hC,QAAAA,SAAS,EAAE,UAAUrE,MAAV,EAAkBrF,IAAlB,EAAwB;AACjCT,UAAAA,oBAAoB,GAAG,WAAvB;AACAqL,UAAAA,qBAAqB;AACrBjL,UAAAA,iBAAiB;AACjB,iBAAOsE,WAAW,CAACoB,MAAD,EAASrF,IAAT,CAAlB;AACD,SAtBwC;AAuBzC2J,QAAAA,mBAAmB,EAAE,UAAUnT,GAAV,EAAe6O,MAAf,EAAuBrF,IAAvB,EAA6B;AAChDT,UAAAA,oBAAoB,GAAG,qBAAvB;AACAqL,UAAAA,qBAAqB;AACrBjL,UAAAA,iBAAiB;AACjB,iBAAO8G,qBAAqB,CAACjQ,GAAD,EAAM6O,MAAN,EAAcrF,IAAd,CAA5B;AACD,SA5BwC;AA6BzC4J,QAAAA,kBAAkB,EAAE,UAAUvE,MAAV,EAAkBrF,IAAlB,EAAwB;AAC1CT,UAAAA,oBAAoB,GAAG,oBAAvB;AACAqL,UAAAA,qBAAqB;AACrBjL,UAAAA,iBAAiB;AACjB,iBAAOqG,oBAAoB,CAACX,MAAD,EAASrF,IAAT,CAA3B;AACD,SAlCwC;AAmCzC6J,QAAAA,eAAe,EAAE,UAAUxE,MAAV,EAAkBrF,IAAlB,EAAwB;AACvCT,UAAAA,oBAAoB,GAAG,iBAAvB;AACAqL,UAAAA,qBAAqB;AACrBjL,UAAAA,iBAAiB;AACjB,iBAAOuG,iBAAiB,CAACb,MAAD,EAASrF,IAAT,CAAxB;AACD,SAxCwC;AAyCzC8J,QAAAA,OAAO,EAAE,UAAUzE,MAAV,EAAkBrF,IAAlB,EAAwB;AAC/BT,UAAAA,oBAAoB,GAAG,SAAvB;AACAqL,UAAAA,qBAAqB;AACrBjL,UAAAA,iBAAiB;AACjB,cAAI2J,cAAc,GAAG1K,wBAAwB,CAAClzB,OAA9C;AACAkzB,UAAAA,wBAAwB,CAAClzB,OAAzB,GAAmC++B,wCAAnC;;AAEA,cAAI;AACF,mBAAOxD,SAAS,CAAC5B,MAAD,EAASrF,IAAT,CAAhB;AACD,WAFD,SAEU;AACRpB,YAAAA,wBAAwB,CAAClzB,OAAzB,GAAmC49B,cAAnC;AACD;AACF,SArDwC;AAsDzCS,QAAAA,UAAU,EAAE,UAAU3H,OAAV,EAAmBC,UAAnB,EAA+B75B,IAA/B,EAAqC;AAC/C+2B,UAAAA,oBAAoB,GAAG,YAAvB;AACAqL,UAAAA,qBAAqB;AACrBjL,UAAAA,iBAAiB;AACjB,cAAI2J,cAAc,GAAG1K,wBAAwB,CAAClzB,OAA9C;AACAkzB,UAAAA,wBAAwB,CAAClzB,OAAzB,GAAmC++B,wCAAnC;;AAEA,cAAI;AACF,mBAAOtI,YAAY,CAACC,OAAD,EAAUC,UAAV,EAAsB75B,IAAtB,CAAnB;AACD,WAFD,SAEU;AACRo2B,YAAAA,wBAAwB,CAAClzB,OAAzB,GAAmC49B,cAAnC;AACD;AACF,SAlEwC;AAmEzCU,QAAAA,MAAM,EAAE,UAAUvE,YAAV,EAAwB;AAC9BlG,UAAAA,oBAAoB,GAAG,QAAvB;AACAqL,UAAAA,qBAAqB;AACrBjL,UAAAA,iBAAiB;AACjB,iBAAO6F,QAAQ,CAACC,YAAD,CAAf;AACD,SAxEwC;AAyEzCwE,QAAAA,QAAQ,EAAE,UAAU3H,YAAV,EAAwB;AAChC/C,UAAAA,oBAAoB,GAAG,UAAvB;AACAqL,UAAAA,qBAAqB;AACrBjL,UAAAA,iBAAiB;AACjB,cAAI2J,cAAc,GAAG1K,wBAAwB,CAAClzB,OAA9C;AACAkzB,UAAAA,wBAAwB,CAAClzB,OAAzB,GAAmC++B,wCAAnC;;AAEA,cAAI;AACF,mBAAOxF,UAAU,CAAC3C,YAAD,CAAjB;AACD,WAFD,SAEU;AACR1D,YAAAA,wBAAwB,CAAClzB,OAAzB,GAAmC49B,cAAnC;AACD;AACF,SArFwC;AAsFzCY,QAAAA,aAAa,EAAE,UAAU3mC,KAAV,EAAiBsjC,WAAjB,EAA8B;AAC3CtH,UAAAA,oBAAoB,GAAG,eAAvB;AACAqL,UAAAA,qBAAqB;AACrBjL,UAAAA,iBAAiB;AACjB,iBAAOiH,eAAe,EAAtB;AACD,SA3FwC;AA4FzCuD,QAAAA,gBAAgB,EAAE,UAAU5mC,KAAV,EAAiB;AACjCg8B,UAAAA,oBAAoB,GAAG,kBAAvB;AACAqL,UAAAA,qBAAqB;AACrBjL,UAAAA,iBAAiB;AACjB,iBAAOyH,kBAAkB,CAAC7jC,KAAD,CAAzB;AACD,SAjGwC;AAkGzC6mC,QAAAA,aAAa,EAAE,YAAY;AACzB7K,UAAAA,oBAAoB,GAAG,eAAvB;AACAqL,UAAAA,qBAAqB;AACrBjL,UAAAA,iBAAiB;AACjB,iBAAOyI,eAAe,EAAtB;AACD,SAvGwC;AAwGzCiC,QAAAA,gBAAgB,EAAE,UAAUvnC,MAAV,EAAkB0gC,WAAlB,EAA+BC,SAA/B,EAA0C;AAC1DlE,UAAAA,oBAAoB,GAAG,kBAAvB;AACAqL,UAAAA,qBAAqB;AACrBjL,UAAAA,iBAAiB;AACjB,iBAAO4D,kBAAkB,EAAzB;AACD,SA7GwC;AA8GzC+G,QAAAA,oBAAoB,EAAE,UAAU7G,SAAV,EAAqBD,WAArB,EAAkCI,iBAAlC,EAAqD;AACzErE,UAAAA,oBAAoB,GAAG,sBAAvB;AACAqL,UAAAA,qBAAqB;AACrBjL,UAAAA,iBAAiB;AACjB,iBAAOgE,sBAAsB,CAACF,SAAD,EAAYD,WAAZ,CAA7B;AACD,SAnHwC;AAoHzC+G,QAAAA,KAAK,EAAE,YAAY;AACjBhL,UAAAA,oBAAoB,GAAG,OAAvB;AACAqL,UAAAA,qBAAqB;AACrBjL,UAAAA,iBAAiB;AACjB,iBAAOkJ,OAAO,EAAd;AACD,SAzHwC;AA0HzC2B,QAAAA,wBAAwB,EAAE1mC;AA1He,OAA3C;AA6HAylC,MAAAA,yCAAyC,GAAG;AAC1Cnd,QAAAA,WAAW,EAAE,UAAUpkB,OAAV,EAAmB;AAC9B2iC,UAAAA,wBAAwB;AACxB,iBAAOve,WAAW,CAACpkB,OAAD,CAAlB;AACD,SAJyC;AAK1CwhC,QAAAA,WAAW,EAAE,UAAU1lB,QAAV,EAAoBkc,IAApB,EAA0B;AACrCT,UAAAA,oBAAoB,GAAG,aAAvB;AACAqL,UAAAA,qBAAqB;AACrB/K,UAAAA,kBAAkB;AAClB,iBAAOmH,cAAc,CAACljB,QAAD,EAAWkc,IAAX,CAArB;AACD,SAVyC;AAW1CyJ,QAAAA,UAAU,EAAE,UAAUzhC,OAAV,EAAmB;AAC7Bu3B,UAAAA,oBAAoB,GAAG,YAAvB;AACAqL,UAAAA,qBAAqB;AACrB/K,UAAAA,kBAAkB;AAClB,iBAAOzT,WAAW,CAACpkB,OAAD,CAAlB;AACD,SAhByC;AAiB1C0hC,QAAAA,SAAS,EAAE,UAAUrE,MAAV,EAAkBrF,IAAlB,EAAwB;AACjCT,UAAAA,oBAAoB,GAAG,WAAvB;AACAqL,UAAAA,qBAAqB;AACrB/K,UAAAA,kBAAkB;AAClB,iBAAO2E,YAAY,CAACa,MAAD,EAASrF,IAAT,CAAnB;AACD,SAtByC;AAuB1C2J,QAAAA,mBAAmB,EAAE,UAAUnT,GAAV,EAAe6O,MAAf,EAAuBrF,IAAvB,EAA6B;AAChDT,UAAAA,oBAAoB,GAAG,qBAAvB;AACAqL,UAAAA,qBAAqB;AACrB/K,UAAAA,kBAAkB;AAClB,iBAAO8G,sBAAsB,CAACnQ,GAAD,EAAM6O,MAAN,EAAcrF,IAAd,CAA7B;AACD,SA5ByC;AA6B1C4J,QAAAA,kBAAkB,EAAE,UAAUvE,MAAV,EAAkBrF,IAAlB,EAAwB;AAC1CT,UAAAA,oBAAoB,GAAG,oBAAvB;AACAqL,UAAAA,qBAAqB;AACrB/K,UAAAA,kBAAkB;AAClB,iBAAOoG,qBAAqB,CAACZ,MAAD,EAASrF,IAAT,CAA5B;AACD,SAlCyC;AAmC1C6J,QAAAA,eAAe,EAAE,UAAUxE,MAAV,EAAkBrF,IAAlB,EAAwB;AACvCT,UAAAA,oBAAoB,GAAG,iBAAvB;AACAqL,UAAAA,qBAAqB;AACrB/K,UAAAA,kBAAkB;AAClB,iBAAOsG,kBAAkB,CAACd,MAAD,EAASrF,IAAT,CAAzB;AACD,SAxCyC;AAyC1C8J,QAAAA,OAAO,EAAE,UAAUzE,MAAV,EAAkBrF,IAAlB,EAAwB;AAC/BT,UAAAA,oBAAoB,GAAG,SAAvB;AACAqL,UAAAA,qBAAqB;AACrB/K,UAAAA,kBAAkB;AAClB,cAAIyJ,cAAc,GAAG1K,wBAAwB,CAAClzB,OAA9C;AACAkzB,UAAAA,wBAAwB,CAAClzB,OAAzB,GAAmC69B,yCAAnC;;AAEA,cAAI;AACF,mBAAOpC,UAAU,CAAC9B,MAAD,EAASrF,IAAT,CAAjB;AACD,WAFD,SAEU;AACRpB,YAAAA,wBAAwB,CAAClzB,OAAzB,GAAmC49B,cAAnC;AACD;AACF,SArDyC;AAsD1CS,QAAAA,UAAU,EAAE,UAAU3H,OAAV,EAAmBC,UAAnB,EAA+B75B,IAA/B,EAAqC;AAC/C+2B,UAAAA,oBAAoB,GAAG,YAAvB;AACAqL,UAAAA,qBAAqB;AACrB/K,UAAAA,kBAAkB;AAClB,cAAIyJ,cAAc,GAAG1K,wBAAwB,CAAClzB,OAA9C;AACAkzB,UAAAA,wBAAwB,CAAClzB,OAAzB,GAAmC69B,yCAAnC;;AAEA,cAAI;AACF,mBAAO5G,aAAa,CAACP,OAAD,EAAUC,UAAV,EAAsB75B,IAAtB,CAApB;AACD,WAFD,SAEU;AACRo2B,YAAAA,wBAAwB,CAAClzB,OAAzB,GAAmC49B,cAAnC;AACD;AACF,SAlEyC;AAmE1CU,QAAAA,MAAM,EAAE,UAAUvE,YAAV,EAAwB;AAC9BlG,UAAAA,oBAAoB,GAAG,QAAvB;AACAqL,UAAAA,qBAAqB;AACrB/K,UAAAA,kBAAkB;AAClB,iBAAO8F,SAAS,EAAhB;AACD,SAxEyC;AAyE1CsE,QAAAA,QAAQ,EAAE,UAAU3H,YAAV,EAAwB;AAChC/C,UAAAA,oBAAoB,GAAG,UAAvB;AACAqL,UAAAA,qBAAqB;AACrB/K,UAAAA,kBAAkB;AAClB,cAAIyJ,cAAc,GAAG1K,wBAAwB,CAAClzB,OAA9C;AACAkzB,UAAAA,wBAAwB,CAAClzB,OAAzB,GAAmC69B,yCAAnC;;AAEA,cAAI;AACF,mBAAOpE,WAAW,CAAC7C,YAAD,CAAlB;AACD,WAFD,SAEU;AACR1D,YAAAA,wBAAwB,CAAClzB,OAAzB,GAAmC49B,cAAnC;AACD;AACF,SArFyC;AAsF1CY,QAAAA,aAAa,EAAE,UAAU3mC,KAAV,EAAiBsjC,WAAjB,EAA8B;AAC3CtH,UAAAA,oBAAoB,GAAG,eAAvB;AACAqL,UAAAA,qBAAqB;AACrB/K,UAAAA,kBAAkB;AAClB,iBAAOiH,gBAAgB,EAAvB;AACD,SA3FyC;AA4F1CqD,QAAAA,gBAAgB,EAAE,UAAU5mC,KAAV,EAAiB;AACjCg8B,UAAAA,oBAAoB,GAAG,kBAAvB;AACAqL,UAAAA,qBAAqB;AACrB/K,UAAAA,kBAAkB;AAClB,iBAAO2H,mBAAmB,CAACjkC,KAAD,CAA1B;AACD,SAjGyC;AAkG1C6mC,QAAAA,aAAa,EAAE,YAAY;AACzB7K,UAAAA,oBAAoB,GAAG,eAAvB;AACAqL,UAAAA,qBAAqB;AACrB/K,UAAAA,kBAAkB;AAClB,iBAAO2I,gBAAgB,EAAvB;AACD,SAvGyC;AAwG1C6B,QAAAA,gBAAgB,EAAE,UAAUvnC,MAAV,EAAkB0gC,WAAlB,EAA+BC,SAA/B,EAA0C;AAC1DlE,UAAAA,oBAAoB,GAAG,kBAAvB;AACAqL,UAAAA,qBAAqB;AACrB/K,UAAAA,kBAAkB;AAClB,iBAAO6D,mBAAmB,EAA1B;AACD,SA7GyC;AA8G1C4G,QAAAA,oBAAoB,EAAE,UAAU7G,SAAV,EAAqBD,WAArB,EAAkCI,iBAAlC,EAAqD;AACzErE,UAAAA,oBAAoB,GAAG,sBAAvB;AACAqL,UAAAA,qBAAqB;AACrB/K,UAAAA,kBAAkB;AAClB,iBAAOwE,uBAAuB,CAACZ,SAAD,EAAYD,WAAZ,CAA9B;AACD,SAnHyC;AAoH1C+G,QAAAA,KAAK,EAAE,YAAY;AACjBhL,UAAAA,oBAAoB,GAAG,OAAvB;AACAqL,UAAAA,qBAAqB;AACrB/K,UAAAA,kBAAkB;AAClB,iBAAOoJ,QAAQ,EAAf;AACD,SAzHyC;AA0H1CuB,QAAAA,wBAAwB,EAAE1mC;AA1HgB,OAA5C;AA6HA4mC,MAAAA,2CAA2C,GAAG;AAC5Cte,QAAAA,WAAW,EAAE,UAAUpkB,OAAV,EAAmB;AAC9B2iC,UAAAA,wBAAwB;AACxB,iBAAOve,WAAW,CAACpkB,OAAD,CAAlB;AACD,SAJ2C;AAK5CwhC,QAAAA,WAAW,EAAE,UAAU1lB,QAAV,EAAoBkc,IAApB,EAA0B;AACrCT,UAAAA,oBAAoB,GAAG,aAAvB;AACAqL,UAAAA,qBAAqB;AACrB/K,UAAAA,kBAAkB;AAClB,iBAAOmH,cAAc,CAACljB,QAAD,EAAWkc,IAAX,CAArB;AACD,SAV2C;AAW5CyJ,QAAAA,UAAU,EAAE,UAAUzhC,OAAV,EAAmB;AAC7Bu3B,UAAAA,oBAAoB,GAAG,YAAvB;AACAqL,UAAAA,qBAAqB;AACrB/K,UAAAA,kBAAkB;AAClB,iBAAOzT,WAAW,CAACpkB,OAAD,CAAlB;AACD,SAhB2C;AAiB5C0hC,QAAAA,SAAS,EAAE,UAAUrE,MAAV,EAAkBrF,IAAlB,EAAwB;AACjCT,UAAAA,oBAAoB,GAAG,WAAvB;AACAqL,UAAAA,qBAAqB;AACrB/K,UAAAA,kBAAkB;AAClB,iBAAO2E,YAAY,CAACa,MAAD,EAASrF,IAAT,CAAnB;AACD,SAtB2C;AAuB5C2J,QAAAA,mBAAmB,EAAE,UAAUnT,GAAV,EAAe6O,MAAf,EAAuBrF,IAAvB,EAA6B;AAChDT,UAAAA,oBAAoB,GAAG,qBAAvB;AACAqL,UAAAA,qBAAqB;AACrB/K,UAAAA,kBAAkB;AAClB,iBAAO8G,sBAAsB,CAACnQ,GAAD,EAAM6O,MAAN,EAAcrF,IAAd,CAA7B;AACD,SA5B2C;AA6B5C4J,QAAAA,kBAAkB,EAAE,UAAUvE,MAAV,EAAkBrF,IAAlB,EAAwB;AAC1CT,UAAAA,oBAAoB,GAAG,oBAAvB;AACAqL,UAAAA,qBAAqB;AACrB/K,UAAAA,kBAAkB;AAClB,iBAAOoG,qBAAqB,CAACZ,MAAD,EAASrF,IAAT,CAA5B;AACD,SAlC2C;AAmC5C6J,QAAAA,eAAe,EAAE,UAAUxE,MAAV,EAAkBrF,IAAlB,EAAwB;AACvCT,UAAAA,oBAAoB,GAAG,iBAAvB;AACAqL,UAAAA,qBAAqB;AACrB/K,UAAAA,kBAAkB;AAClB,iBAAOsG,kBAAkB,CAACd,MAAD,EAASrF,IAAT,CAAzB;AACD,SAxC2C;AAyC5C8J,QAAAA,OAAO,EAAE,UAAUzE,MAAV,EAAkBrF,IAAlB,EAAwB;AAC/BT,UAAAA,oBAAoB,GAAG,SAAvB;AACAqL,UAAAA,qBAAqB;AACrB/K,UAAAA,kBAAkB;AAClB,cAAIyJ,cAAc,GAAG1K,wBAAwB,CAAClzB,OAA9C;AACAkzB,UAAAA,wBAAwB,CAAClzB,OAAzB,GAAmC69B,yCAAnC;;AAEA,cAAI;AACF,mBAAOpC,UAAU,CAAC9B,MAAD,EAASrF,IAAT,CAAjB;AACD,WAFD,SAEU;AACRpB,YAAAA,wBAAwB,CAAClzB,OAAzB,GAAmC49B,cAAnC;AACD;AACF,SArD2C;AAsD5CS,QAAAA,UAAU,EAAE,UAAU3H,OAAV,EAAmBC,UAAnB,EAA+B75B,IAA/B,EAAqC;AAC/C+2B,UAAAA,oBAAoB,GAAG,YAAvB;AACAqL,UAAAA,qBAAqB;AACrB/K,UAAAA,kBAAkB;AAClB,cAAIyJ,cAAc,GAAG1K,wBAAwB,CAAClzB,OAA9C;AACAkzB,UAAAA,wBAAwB,CAAClzB,OAAzB,GAAmC69B,yCAAnC;;AAEA,cAAI;AACF,mBAAOnG,eAAe,CAAChB,OAAD,EAAUC,UAAV,EAAsB75B,IAAtB,CAAtB;AACD,WAFD,SAEU;AACRo2B,YAAAA,wBAAwB,CAAClzB,OAAzB,GAAmC49B,cAAnC;AACD;AACF,SAlE2C;AAmE5CU,QAAAA,MAAM,EAAE,UAAUvE,YAAV,EAAwB;AAC9BlG,UAAAA,oBAAoB,GAAG,QAAvB;AACAqL,UAAAA,qBAAqB;AACrB/K,UAAAA,kBAAkB;AAClB,iBAAO8F,SAAS,EAAhB;AACD,SAxE2C;AAyE5CsE,QAAAA,QAAQ,EAAE,UAAU3H,YAAV,EAAwB;AAChC/C,UAAAA,oBAAoB,GAAG,UAAvB;AACAqL,UAAAA,qBAAqB;AACrB/K,UAAAA,kBAAkB;AAClB,cAAIyJ,cAAc,GAAG1K,wBAAwB,CAAClzB,OAA9C;AACAkzB,UAAAA,wBAAwB,CAAClzB,OAAzB,GAAmC69B,yCAAnC;;AAEA,cAAI;AACF,mBAAOnE,aAAa,CAAC9C,YAAD,CAApB;AACD,WAFD,SAEU;AACR1D,YAAAA,wBAAwB,CAAClzB,OAAzB,GAAmC49B,cAAnC;AACD;AACF,SArF2C;AAsF5CY,QAAAA,aAAa,EAAE,UAAU3mC,KAAV,EAAiBsjC,WAAjB,EAA8B;AAC3CtH,UAAAA,oBAAoB,GAAG,eAAvB;AACAqL,UAAAA,qBAAqB;AACrB/K,UAAAA,kBAAkB;AAClB,iBAAOiH,gBAAgB,EAAvB;AACD,SA3F2C;AA4F5CqD,QAAAA,gBAAgB,EAAE,UAAU5mC,KAAV,EAAiB;AACjCg8B,UAAAA,oBAAoB,GAAG,kBAAvB;AACAqL,UAAAA,qBAAqB;AACrB/K,UAAAA,kBAAkB;AAClB,iBAAO6H,qBAAqB,CAACnkC,KAAD,CAA5B;AACD,SAjG2C;AAkG5C6mC,QAAAA,aAAa,EAAE,YAAY;AACzB7K,UAAAA,oBAAoB,GAAG,eAAvB;AACAqL,UAAAA,qBAAqB;AACrB/K,UAAAA,kBAAkB;AAClB,iBAAO6I,kBAAkB,EAAzB;AACD,SAvG2C;AAwG5C2B,QAAAA,gBAAgB,EAAE,UAAUvnC,MAAV,EAAkB0gC,WAAlB,EAA+BC,SAA/B,EAA0C;AAC1DlE,UAAAA,oBAAoB,GAAG,kBAAvB;AACAqL,UAAAA,qBAAqB;AACrB/K,UAAAA,kBAAkB;AAClB,iBAAO6D,mBAAmB,EAA1B;AACD,SA7G2C;AA8G5C4G,QAAAA,oBAAoB,EAAE,UAAU7G,SAAV,EAAqBD,WAArB,EAAkCI,iBAAlC,EAAqD;AACzErE,UAAAA,oBAAoB,GAAG,sBAAvB;AACAqL,UAAAA,qBAAqB;AACrB/K,UAAAA,kBAAkB;AAClB,iBAAOwE,uBAAuB,CAACZ,SAAD,EAAYD,WAAZ,CAA9B;AACD,SAnH2C;AAoH5C+G,QAAAA,KAAK,EAAE,YAAY;AACjBhL,UAAAA,oBAAoB,GAAG,OAAvB;AACAqL,UAAAA,qBAAqB;AACrB/K,UAAAA,kBAAkB;AAClB,iBAAOoJ,QAAQ,EAAf;AACD,SAzH2C;AA0H5CuB,QAAAA,wBAAwB,EAAE1mC;AA1HkB,OAA9C;AA4HD;AAED,QAAI+mC,KAAK,GAAG7qC,WAAW,CAAC2N,YAAxB;AACA,QAAIm9B,UAAU,GAAG,CAAjB;AACA,QAAIC,qBAAqB,GAAG,CAAC,CAA7B;AACA,QAAIC,iBAAiB,GAAG,CAAC,CAAzB;AACA,QAAIC,sBAAsB,GAAG,CAAC,CAA9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAIC,qBAAqB,GAAG,KAA5B;AACA,QAAIC,qBAAqB,GAAG,KAA5B;;AAEA,aAASC,qBAAT,GAAiC;AAC/B,aAAOF,qBAAP;AACD;;AAED,aAASG,yBAAT,GAAqC;AACnC;AACEF,QAAAA,qBAAqB,GAAG,IAAxB;AACD;AACF;;AAED,aAASG,qBAAT,GAAiC;AAC/B;AACEJ,QAAAA,qBAAqB,GAAG,KAAxB;AACAC,QAAAA,qBAAqB,GAAG,KAAxB;AACD;AACF;;AAED,aAASI,oBAAT,GAAgC;AAC9B;AACEL,QAAAA,qBAAqB,GAAGC,qBAAxB;AACAA,QAAAA,qBAAqB,GAAG,KAAxB;AACD;AACF;;AAED,aAASK,aAAT,GAAyB;AACvB,aAAOV,UAAP;AACD;;AAED,aAASW,gBAAT,GAA4B;AAE1BX,MAAAA,UAAU,GAAGD,KAAK,EAAlB;AACD;;AAED,aAASa,kBAAT,CAA4B5iC,KAA5B,EAAmC;AAEjCkiC,MAAAA,iBAAiB,GAAGH,KAAK,EAAzB;;AAEA,UAAI/hC,KAAK,CAAC6iC,eAAN,GAAwB,CAA5B,EAA+B;AAC7B7iC,QAAAA,KAAK,CAAC6iC,eAAN,GAAwBd,KAAK,EAA7B;AACD;AACF;;AAED,aAASe,0BAAT,CAAoC9iC,KAApC,EAA2C;AAEzCkiC,MAAAA,iBAAiB,GAAG,CAAC,CAArB;AACD;;AAED,aAASa,wCAAT,CAAkD/iC,KAAlD,EAAyDgjC,gBAAzD,EAA2E;AAEzE,UAAId,iBAAiB,IAAI,CAAzB,EAA4B;AAC1B,YAAIe,WAAW,GAAGlB,KAAK,KAAKG,iBAA5B;AACAliC,QAAAA,KAAK,CAACkjC,cAAN,IAAwBD,WAAxB;;AAEA,YAAID,gBAAJ,EAAsB;AACpBhjC,UAAAA,KAAK,CAACmjC,gBAAN,GAAyBF,WAAzB;AACD;;AAEDf,QAAAA,iBAAiB,GAAG,CAAC,CAArB;AACD;AACF;;AAED,aAASkB,0BAAT,CAAoCpjC,KAApC,EAA2C;AAEzC,UAAIiiC,qBAAqB,IAAI,CAA7B,EAAgC;AAC9B,YAAIgB,WAAW,GAAGlB,KAAK,KAAKE,qBAA5B;AACAA,QAAAA,qBAAqB,GAAG,CAAC,CAAzB,CAF8B,CAEF;AAC5B;;AAEA,YAAIoB,WAAW,GAAGrjC,KAAK,CAACuC,MAAxB;;AAEA,eAAO8gC,WAAW,KAAK,IAAvB,EAA6B;AAC3B,kBAAQA,WAAW,CAACrkC,GAApB;AACE,iBAAK1D,QAAL;AACE,kBAAIkM,IAAI,GAAG67B,WAAW,CAACtgC,SAAvB;AACAyE,cAAAA,IAAI,CAAC87B,cAAL,IAAuBL,WAAvB;AACA;;AAEF,iBAAKlnC,QAAL;AACE,kBAAIwnC,eAAe,GAAGF,WAAW,CAACtgC,SAAlC;AACAwgC,cAAAA,eAAe,CAACD,cAAhB,IAAkCL,WAAlC;AACA;AATJ;;AAYAI,UAAAA,WAAW,GAAGA,WAAW,CAAC9gC,MAA1B;AACD;AACF;AACF;;AAED,aAASihC,2BAAT,CAAqCxjC,KAArC,EAA4C;AAE1C,UAAImiC,sBAAsB,IAAI,CAA9B,EAAiC;AAC/B,YAAIc,WAAW,GAAGlB,KAAK,KAAKI,sBAA5B;AACAA,QAAAA,sBAAsB,GAAG,CAAC,CAA1B,CAF+B,CAEF;AAC7B;;AAEA,YAAIkB,WAAW,GAAGrjC,KAAK,CAACuC,MAAxB;;AAEA,eAAO8gC,WAAW,KAAK,IAAvB,EAA6B;AAC3B,kBAAQA,WAAW,CAACrkC,GAApB;AACE,iBAAK1D,QAAL;AACE,kBAAIkM,IAAI,GAAG67B,WAAW,CAACtgC,SAAvB;;AAEA,kBAAIyE,IAAI,KAAK,IAAb,EAAmB;AACjBA,gBAAAA,IAAI,CAACi8B,qBAAL,IAA8BR,WAA9B;AACD;;AAED;;AAEF,iBAAKlnC,QAAL;AACE,kBAAIwnC,eAAe,GAAGF,WAAW,CAACtgC,SAAlC;;AAEA,kBAAIwgC,eAAe,KAAK,IAAxB,EAA8B;AAC5B;AACA;AACA;AACAA,gBAAAA,eAAe,CAACE,qBAAhB,IAAyCR,WAAzC;AACD;;AAED;AApBJ;;AAuBAI,UAAAA,WAAW,GAAGA,WAAW,CAAC9gC,MAA1B;AACD;AACF;AACF;;AAED,aAASmhC,sBAAT,GAAkC;AAEhCzB,MAAAA,qBAAqB,GAAGF,KAAK,EAA7B;AACD;;AAED,aAAS4B,uBAAT,GAAmC;AAEjCxB,MAAAA,sBAAsB,GAAGJ,KAAK,EAA9B;AACD;;AAED,aAAS6B,sBAAT,CAAgC5jC,KAAhC,EAAuC;AACrC;AACA;AACA;AACA,UAAIyD,KAAK,GAAGzD,KAAK,CAACyD,KAAlB;;AAEA,aAAOA,KAAP,EAAc;AACZzD,QAAAA,KAAK,CAACkjC,cAAN,IAAwBz/B,KAAK,CAACy/B,cAA9B;AACAz/B,QAAAA,KAAK,GAAGA,KAAK,CAACC,OAAd;AACD;AACF;;AAED,aAASmgC,mBAAT,CAA6BppC,KAA7B,EAAoCT,MAApC,EAA4C;AAC1C;AACA;AACA,aAAO;AACLS,QAAAA,KAAK,EAAEA,KADF;AAELT,QAAAA,MAAM,EAAEA,MAFH;AAGL7B,QAAAA,KAAK,EAAEskB,2BAA2B,CAACziB,MAAD;AAH7B,OAAP;AAKD,KA/oQa,CAipQd;AACA;AACA;;;AACA,aAAS8pC,eAAT,CAAyBC,QAAzB,EAAmCC,SAAnC,EAA8C;AAC5C,aAAO,IAAP;AACD;;AAED,aAASC,gBAAT,CAA0BF,QAA1B,EAAoCC,SAApC,EAA+C;AAC7C,UAAI;AACF,YAAIE,QAAQ,GAAGJ,eAAe,CAACC,QAAD,EAAWC,SAAX,CAA9B,CADE,CACmD;AACrD;;AAEA,YAAIE,QAAQ,KAAK,KAAjB,EAAwB;AACtB;AACD;;AAED,YAAIpsC,KAAK,GAAGksC,SAAS,CAACvpC,KAAtB;;AAEA,YAAI,IAAJ,EAAU;AACR,cAAIT,MAAM,GAAGgqC,SAAS,CAAChqC,MAAvB;AACA,cAAI7B,KAAK,GAAG6rC,SAAS,CAAC7rC,KAAtB;AACA,cAAIgsC,cAAc,GAAGhsC,KAAK,KAAK,IAAV,GAAiBA,KAAjB,GAAyB,EAA9C,CAHQ,CAG0C;AAClD;AACA;;AAEA,cAAIL,KAAK,IAAI,IAAT,IAAiBA,KAAK,CAACssC,gBAA3B,EAA6C;AAC3C,gBAAIL,QAAQ,CAAC/kC,GAAT,KAAiB5D,cAArB,EAAqC;AACnC;AACA;AACA;AACA;AACD,aAN0C,CAMzC;AACF;AACA;AACA;;;AAGArC,YAAAA,OAAO,CAAC,OAAD,CAAP,CAAiBjB,KAAjB,EAZ2C,CAYlB;AACzB;AACA;AACD;;AAED,cAAI2f,aAAa,GAAGzd,MAAM,GAAG+F,yBAAyB,CAAC/F,MAAD,CAA5B,GAAuC,IAAjE;AACA,cAAIqqC,oBAAoB,GAAG5sB,aAAa,GAAG,sCAAsCA,aAAtC,GAAsD,cAAzD,GAA0E,2DAAlH;AACA,cAAI6sB,oBAAJ;;AAEA,cAAIP,QAAQ,CAAC/kC,GAAT,KAAiB1D,QAArB,EAA+B;AAC7BgpC,YAAAA,oBAAoB,GAAG,2FAA2F,uFAAlH;AACD,WAFD,MAEO;AACL,gBAAIC,iBAAiB,GAAGxkC,yBAAyB,CAACgkC,QAAD,CAAzB,IAAuC,WAA/D;AACAO,YAAAA,oBAAoB,GAAG,kEAAkE,4CAA4CC,iBAA5C,GAAgE,GAAlI,CAAvB;AACD;;AAED,cAAIC,eAAe,GAAGH,oBAAoB,GAAG,IAAvB,GAA8BF,cAA9B,GAA+C,MAA/C,IAAyD,KAAKG,oBAA9D,CAAtB,CAnCQ,CAmCmG;AAC3G;AACA;AACA;;AAEAvrC,UAAAA,OAAO,CAAC,OAAD,CAAP,CAAiByrC,eAAjB,EAxCQ,CAwC2B;AACpC,SAzCD,MAyCO;AACL;AACA;AACA;AACAzrC,UAAAA,OAAO,CAAC,OAAD,CAAP,CAAiBjB,KAAjB,EAJK,CAIoB;AAC1B;AACF,OAzDD,CAyDE,OAAO6oB,CAAP,EAAU;AACV;AACA;AACA;AACA;AACArN,QAAAA,UAAU,CAAC,YAAY;AACrB,gBAAMqN,CAAN;AACD,SAFS,CAAV;AAGD;AACF;;AAED,QAAI8jB,iBAAiB,GAAG,OAAOvzB,OAAP,KAAmB,UAAnB,GAAgCA,OAAhC,GAA0CgE,GAAlE;;AAEA,aAASwvB,qBAAT,CAA+B1kC,KAA/B,EAAsCgkC,SAAtC,EAAiD52B,IAAjD,EAAuD;AACrD,UAAIwV,MAAM,GAAGC,YAAY,CAAC9W,WAAD,EAAcqB,IAAd,CAAzB,CADqD,CACP;;AAE9CwV,MAAAA,MAAM,CAAC5jB,GAAP,GAAamlB,aAAb,CAHqD,CAGzB;AAC5B;;AAEAvB,MAAAA,MAAM,CAACpjB,OAAP,GAAiB;AACfyX,QAAAA,OAAO,EAAE;AADM,OAAjB;AAGA,UAAInf,KAAK,GAAGksC,SAAS,CAACvpC,KAAtB;;AAEAmoB,MAAAA,MAAM,CAAC5H,QAAP,GAAkB,YAAY;AAC5B2pB,QAAAA,eAAe,CAAC7sC,KAAD,CAAf;AACAmsC,QAAAA,gBAAgB,CAACjkC,KAAD,EAAQgkC,SAAR,CAAhB;AACD,OAHD;;AAKA,aAAOphB,MAAP;AACD;;AAED,aAASgiB,sBAAT,CAAgC5kC,KAAhC,EAAuCgkC,SAAvC,EAAkD52B,IAAlD,EAAwD;AACtD,UAAIwV,MAAM,GAAGC,YAAY,CAAC9W,WAAD,EAAcqB,IAAd,CAAzB;AACAwV,MAAAA,MAAM,CAAC5jB,GAAP,GAAamlB,aAAb;AACA,UAAI6F,wBAAwB,GAAGhqB,KAAK,CAAClB,IAAN,CAAWkrB,wBAA1C;;AAEA,UAAI,OAAOA,wBAAP,KAAoC,UAAxC,EAAoD;AAClD,YAAInS,OAAO,GAAGmsB,SAAS,CAACvpC,KAAxB;;AAEAmoB,QAAAA,MAAM,CAACpjB,OAAP,GAAiB,YAAY;AAC3B,iBAAOwqB,wBAAwB,CAACnS,OAAD,CAA/B;AACD,SAFD;;AAIA+K,QAAAA,MAAM,CAAC5H,QAAP,GAAkB,YAAY;AAC5B;AACE6pB,YAAAA,sCAAsC,CAAC7kC,KAAD,CAAtC;AACD;AAEDikC,UAAAA,gBAAgB,CAACjkC,KAAD,EAAQgkC,SAAR,CAAhB;AACD,SAND;AAOD;;AAED,UAAI3yB,IAAI,GAAGrR,KAAK,CAAC+C,SAAjB;;AAEA,UAAIsO,IAAI,KAAK,IAAT,IAAiB,OAAOA,IAAI,CAACyzB,iBAAZ,KAAkC,UAAvD,EAAmE;AACjEliB,QAAAA,MAAM,CAAC5H,QAAP,GAAkB,SAASA,QAAT,GAAoB;AACpC;AACE6pB,YAAAA,sCAAsC,CAAC7kC,KAAD,CAAtC;AACD;AAEDikC,UAAAA,gBAAgB,CAACjkC,KAAD,EAAQgkC,SAAR,CAAhB;;AAEA,cAAI,OAAOha,wBAAP,KAAoC,UAAxC,EAAoD;AAClD;AACA;AACA;AACA;AACA;AACA+a,YAAAA,+BAA+B,CAAC,IAAD,CAA/B;AACD;;AAED,cAAIltB,OAAO,GAAGmsB,SAAS,CAACvpC,KAAxB;AACA,cAAItC,KAAK,GAAG6rC,SAAS,CAAC7rC,KAAtB;AACA,eAAK2sC,iBAAL,CAAuBjtB,OAAvB,EAAgC;AAC9BssB,YAAAA,cAAc,EAAEhsC,KAAK,KAAK,IAAV,GAAiBA,KAAjB,GAAyB;AADX,WAAhC;AAIA;AACE,gBAAI,OAAO6xB,wBAAP,KAAoC,UAAxC,EAAoD;AAClD;AACA;AACA;AACA,kBAAI,CAACnb,gBAAgB,CAAC7O,KAAK,CAAC6I,KAAP,EAAce,QAAd,CAArB,EAA8C;AAC5C9R,gBAAAA,KAAK,CAAC,uEAAuE,mFAAxE,EAA6JiI,yBAAyB,CAACC,KAAD,CAAzB,IAAoC,SAAjM,CAAL;AACD;AACF;AACF;AACF,SAhCD;AAiCD;;AAED,aAAO4iB,MAAP;AACD;;AAED,aAASoiB,kBAAT,CAA4Bx9B,IAA5B,EAAkCuB,QAAlC,EAA4CF,KAA5C,EAAmD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAIo8B,SAAS,GAAGz9B,IAAI,CAACy9B,SAArB;AACA,UAAIC,SAAJ;;AAEA,UAAID,SAAS,KAAK,IAAlB,EAAwB;AACtBA,QAAAA,SAAS,GAAGz9B,IAAI,CAACy9B,SAAL,GAAiB,IAAIR,iBAAJ,EAA7B;AACAS,QAAAA,SAAS,GAAG,IAAI1mB,GAAJ,EAAZ;AACAymB,QAAAA,SAAS,CAACzqC,GAAV,CAAcuO,QAAd,EAAwBm8B,SAAxB;AACD,OAJD,MAIO;AACLA,QAAAA,SAAS,GAAGD,SAAS,CAAC3qC,GAAV,CAAcyO,QAAd,CAAZ;;AAEA,YAAIm8B,SAAS,KAAK98B,SAAlB,EAA6B;AAC3B88B,UAAAA,SAAS,GAAG,IAAI1mB,GAAJ,EAAZ;AACAymB,UAAAA,SAAS,CAACzqC,GAAV,CAAcuO,QAAd,EAAwBm8B,SAAxB;AACD;AACF;;AAED,UAAI,CAACA,SAAS,CAACxtB,GAAV,CAAc7O,KAAd,CAAL,EAA2B;AACzB;AACAq8B,QAAAA,SAAS,CAACjmB,GAAV,CAAcpW,KAAd;AACA,YAAIs8B,IAAI,GAAGC,iBAAiB,CAACztB,IAAlB,CAAuB,IAAvB,EAA6BnQ,IAA7B,EAAmCuB,QAAnC,EAA6CF,KAA7C,CAAX;AAEAE,QAAAA,QAAQ,CAACs8B,IAAT,CAAcF,IAAd,EAAoBA,IAApB;AACD;AACF;;AAED,aAASG,mBAAT,CAA6BC,gBAA7B,EAA+C/9B,IAA/C,EAAqDuB,QAArD,EAA+DF,KAA/D,EAAsE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAI28B,SAAS,GAAGD,gBAAgB,CAACxiB,WAAjC;;AAEA,UAAIyiB,SAAS,KAAK,IAAlB,EAAwB;AACtB,YAAIziB,WAAW,GAAG,IAAIvE,GAAJ,EAAlB;AACAuE,QAAAA,WAAW,CAAC9D,GAAZ,CAAgBlW,QAAhB;AACAw8B,QAAAA,gBAAgB,CAACxiB,WAAjB,GAA+BA,WAA/B;AACD,OAJD,MAIO;AACLyiB,QAAAA,SAAS,CAACvmB,GAAV,CAAclW,QAAd;AACD;AACF;;AAED,aAAS08B,uBAAT,CAAiCC,WAAjC,EAA8CC,eAA9C,EAA+D;AAC7D;AAGA,UAAI3mC,GAAG,GAAG0mC,WAAW,CAAC1mC,GAAtB;;AAEA,UAAI,CAAC0mC,WAAW,CAAC/nB,IAAZ,GAAmB1U,cAApB,MAAwCD,MAAxC,KAAmDhK,GAAG,KAAK7D,iBAAR,IAA6B6D,GAAG,KAAKlD,UAArC,IAAmDkD,GAAG,KAAK9C,mBAA9G,CAAJ,EAAwI;AACtI,YAAI0pC,aAAa,GAAGF,WAAW,CAACtjC,SAAhC;;AAEA,YAAIwjC,aAAJ,EAAmB;AACjBF,UAAAA,WAAW,CAAC3iB,WAAZ,GAA0B6iB,aAAa,CAAC7iB,WAAxC;AACA2iB,UAAAA,WAAW,CAAChqB,aAAZ,GAA4BkqB,aAAa,CAAClqB,aAA1C;AACAgqB,UAAAA,WAAW,CAAC78B,KAAZ,GAAoB+8B,aAAa,CAAC/8B,KAAlC;AACD,SAJD,MAIO;AACL68B,UAAAA,WAAW,CAAC3iB,WAAZ,GAA0B,IAA1B;AACA2iB,UAAAA,WAAW,CAAChqB,aAAZ,GAA4B,IAA5B;AACD;AACF;AACF;;AAED,aAASmqB,mCAAT,CAA6CxY,WAA7C,EAA0D;AACxD,UAAInrB,IAAI,GAAGmrB,WAAX;;AAEA,SAAG;AACD,YAAInrB,IAAI,CAAClD,GAAL,KAAahD,iBAAb,IAAkC84B,qBAAqB,CAAC5yB,IAAD,CAA3D,EAAmE;AACjE,iBAAOA,IAAP;AACD,SAHA,CAGC;AACF;;;AAGAA,QAAAA,IAAI,GAAGA,IAAI,CAACK,MAAZ;AACD,OARD,QAQSL,IAAI,KAAK,IARlB;;AAUA,aAAO,IAAP;AACD;;AAED,aAAS4jC,iCAAT,CAA2CP,gBAA3C,EAA6DlY,WAA7D,EAA0EqY,WAA1E,EAAuFl+B,IAAvF,EAA6Fm+B,eAA7F,EAA8G;AAC5G;AACA;AACA,UAAI,CAACJ,gBAAgB,CAAC5nB,IAAjB,GAAwB1U,cAAzB,MAA6CD,MAAjD,EAAyD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,YAAIu8B,gBAAgB,KAAKlY,WAAzB,EAAsC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAkY,UAAAA,gBAAgB,CAACjjC,KAAjB,IAA0BjB,aAA1B;AACD,SAjBD,MAiBO;AACLkkC,UAAAA,gBAAgB,CAACjjC,KAAjB,IAA0B7B,UAA1B;AACAilC,UAAAA,WAAW,CAACpjC,KAAZ,IAAqBhB,4BAArB,CAFK,CAE8C;AACnD;AACA;;AAEAokC,UAAAA,WAAW,CAACpjC,KAAZ,IAAqB,EAAEpB,mBAAmB,GAAGE,UAAxB,CAArB;;AAEA,cAAIskC,WAAW,CAAC1mC,GAAZ,KAAoB5D,cAAxB,EAAwC;AACtC,gBAAI2qC,kBAAkB,GAAGL,WAAW,CAACtjC,SAArC;;AAEA,gBAAI2jC,kBAAkB,KAAK,IAA3B,EAAiC;AAC/B;AACA;AACA;AACAL,cAAAA,WAAW,CAAC1mC,GAAZ,GAAkB5C,wBAAlB;AACD,aALD,MAKO;AACL;AACA;AACA;AACA,kBAAIwmB,MAAM,GAAGC,YAAY,CAAC9W,WAAD,EAAcnC,QAAd,CAAzB;AACAgZ,cAAAA,MAAM,CAAC5jB,GAAP,GAAa8jB,WAAb;AACAiC,cAAAA,aAAa,CAAC2gB,WAAD,EAAc9iB,MAAd,CAAb;AACD;AACF,WAxBI,CAwBH;AACF;;;AAGA8iB,UAAAA,WAAW,CAAC78B,KAAZ,GAAoBmG,UAAU,CAAC02B,WAAW,CAAC78B,KAAb,EAAoBe,QAApB,CAA9B;AACD;;AAED,eAAO27B,gBAAP;AACD,OA3D2G,CA2D1G;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGAA,MAAAA,gBAAgB,CAACjjC,KAAjB,IAA0BjB,aAA1B,CArG4G,CAqGnE;AACzC;;AAEAkkC,MAAAA,gBAAgB,CAAC18B,KAAjB,GAAyB88B,eAAzB;AACA,aAAOJ,gBAAP;AACD;;AAED,aAASS,cAAT,CAAwBx+B,IAAxB,EAA8B6lB,WAA9B,EAA2CqY,WAA3C,EAAwDjrC,KAAxD,EAA+DkrC,eAA/D,EAAgF;AAC9E;AACAD,MAAAA,WAAW,CAACpjC,KAAZ,IAAqBlB,UAArB;;AAEA,UAAI3G,KAAK,KAAK,IAAV,IAAkB,OAAOA,KAAP,KAAiB,QAAnC,IAA+C,OAAOA,KAAK,CAAC4qC,IAAb,KAAsB,UAAzE,EAAqF;AACnF;AACA,YAAIt8B,QAAQ,GAAGtO,KAAf;AACAgrC,QAAAA,uBAAuB,CAACC,WAAD,CAAvB;AAGA,YAAIH,gBAAgB,GAAGM,mCAAmC,CAACxY,WAAD,CAA1D;;AAEA,YAAIkY,gBAAgB,KAAK,IAAzB,EAA+B;AAC7BA,UAAAA,gBAAgB,CAACjjC,KAAjB,IAA0B,CAAC5B,iBAA3B;AACAolC,UAAAA,iCAAiC,CAACP,gBAAD,EAAmBlY,WAAnB,EAAgCqY,WAAhC,EAA6Cl+B,IAA7C,EAAmDm+B,eAAnD,CAAjC,CAF6B,CAEyE;AACtG;;AAEA,cAAIJ,gBAAgB,CAAC5nB,IAAjB,GAAwB1U,cAA5B,EAA4C;AAC1C+7B,YAAAA,kBAAkB,CAACx9B,IAAD,EAAOuB,QAAP,EAAiB48B,eAAjB,CAAlB;AACD;;AAEDL,UAAAA,mBAAmB,CAACC,gBAAD,EAAmB/9B,IAAnB,EAAyBuB,QAAzB,CAAnB;AACA;AACD,SAXD,MAWO;AACL;AACA;AACA,cAAI,CAACkF,gBAAgB,CAAC03B,eAAD,CAArB,EAAwC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACAX,YAAAA,kBAAkB,CAACx9B,IAAD,EAAOuB,QAAP,EAAiB48B,eAAjB,CAAlB;AACAM,YAAAA,+BAA+B;AAC/B;AACD,WAdI,CAcH;AACF;AACA;;;AAGA,cAAIC,qBAAqB,GAAG,IAAIhjC,KAAJ,CAAU,uEAAuE,gEAAvE,GAA0I,8CAA1I,GAA2L,uBAArM,CAA5B,CAnBK,CAmBsP;AAC3P;;AAEAzI,UAAAA,KAAK,GAAGyrC,qBAAR;AACD;AACF,OA/C6E,CA+C5E;AACF;AACA;;;AAGAC,MAAAA,cAAc,CAAC1rC,KAAD,CAAd;AACAA,MAAAA,KAAK,GAAGopC,mBAAmB,CAACppC,KAAD,EAAQirC,WAAR,CAA3B;AACA,UAAI9sB,cAAc,GAAGyU,WAArB;;AAEA,SAAG;AACD,gBAAQzU,cAAc,CAAC5Z,GAAvB;AACE,eAAK1D,QAAL;AACE;AACE,kBAAI8qC,UAAU,GAAG3rC,KAAjB;AACAme,cAAAA,cAAc,CAACtW,KAAf,IAAwBjB,aAAxB;AACA,kBAAI+L,IAAI,GAAGuB,iBAAiB,CAACg3B,eAAD,CAA5B;AACA/sB,cAAAA,cAAc,CAAC/P,KAAf,GAAuBmG,UAAU,CAAC4J,cAAc,CAAC/P,KAAhB,EAAuBuE,IAAvB,CAAjC;AACA,kBAAIwV,MAAM,GAAG8hB,qBAAqB,CAAC9rB,cAAD,EAAiBwtB,UAAjB,EAA6Bh5B,IAA7B,CAAlC;AACAgY,cAAAA,qBAAqB,CAACxM,cAAD,EAAiBgK,MAAjB,CAArB;AACA;AACD;;AAEH,eAAKxnB,cAAL;AACE;AACA,gBAAI4oC,SAAS,GAAGvpC,KAAhB;AACA,gBAAI+b,IAAI,GAAGoC,cAAc,CAAC9Z,IAA1B;AACA,gBAAIgE,QAAQ,GAAG8V,cAAc,CAAC7V,SAA9B;;AAEA,gBAAI,CAAC6V,cAAc,CAACtW,KAAf,GAAuB7B,UAAxB,MAAwCR,OAAxC,KAAoD,OAAOuW,IAAI,CAACwT,wBAAZ,KAAyC,UAAzC,IAAuDlnB,QAAQ,KAAK,IAAb,IAAqB,OAAOA,QAAQ,CAACgiC,iBAAhB,KAAsC,UAA3D,IAAyE,CAACuB,kCAAkC,CAACvjC,QAAD,CAAvN,CAAJ,EAAwO;AACtO8V,cAAAA,cAAc,CAACtW,KAAf,IAAwBjB,aAAxB;;AAEA,kBAAIilC,KAAK,GAAG33B,iBAAiB,CAACg3B,eAAD,CAA7B;;AAEA/sB,cAAAA,cAAc,CAAC/P,KAAf,GAAuBmG,UAAU,CAAC4J,cAAc,CAAC/P,KAAhB,EAAuBy9B,KAAvB,CAAjC,CALsO,CAKtK;;AAEhE,kBAAIC,OAAO,GAAG3B,sBAAsB,CAAChsB,cAAD,EAAiBorB,SAAjB,EAA4BsC,KAA5B,CAApC;;AAEAlhB,cAAAA,qBAAqB,CAACxM,cAAD,EAAiB2tB,OAAjB,CAArB;AACA;AACD;;AAED;AA/BJ;;AAkCA3tB,QAAAA,cAAc,GAAGA,cAAc,CAACrW,MAAhC;AACD,OApCD,QAoCSqW,cAAc,KAAK,IApC5B;AAqCD;;AAED,aAAS4tB,iBAAT,GAA6B;AAC3B;AACE,eAAO,IAAP;AACD,OAH0B,CAGzB;AACH;;AAED,aAASC,UAAT,CAAoB7tB,cAApB,EAAoC;AAClC;AACA;AACAA,MAAAA,cAAc,CAACtW,KAAf,IAAwBlC,MAAxB;AACD;;AAED,aAASsmC,OAAT,CAAiB9tB,cAAjB,EAAiC;AAC/BA,MAAAA,cAAc,CAACtW,KAAf,IAAwB3B,GAAxB;AACD;;AAED,QAAIgmC,iBAAJ;AACA,QAAIC,mBAAJ;AACA,QAAIC,mBAAJ;AACA,QAAIC,cAAJ;AAEA;AACE;AACAH,MAAAA,iBAAiB,GAAG,UAAU7iC,MAAV,EAAkB8U,cAAlB,EAAkCmuB,qBAAlC,EAAyDp0B,QAAzD,EAAmE;AACrF;AACA;AACA,YAAIzQ,IAAI,GAAG0W,cAAc,CAACnV,KAA1B;;AAEA,eAAOvB,IAAI,KAAK,IAAhB,EAAsB;AACpB,cAAIA,IAAI,CAAClD,GAAL,KAAaxD,aAAb,IAA8B0G,IAAI,CAAClD,GAAL,KAAavD,QAA/C,EAAyD;AACvDmX,YAAAA,kBAAkB,CAAC9O,MAAD,EAAS5B,IAAI,CAACa,SAAd,CAAlB;AACD,WAFD,MAEO,IAAIb,IAAI,CAAClD,GAAL,KAAazD,UAAjB,EAA6B,CAA7B,KAAoC,IAAI2G,IAAI,CAACuB,KAAL,KAAe,IAAnB,EAAyB;AAClEvB,YAAAA,IAAI,CAACuB,KAAL,CAAWlB,MAAX,GAAoBL,IAApB;AACAA,YAAAA,IAAI,GAAGA,IAAI,CAACuB,KAAZ;AACA;AACD;;AAED,cAAIvB,IAAI,KAAK0W,cAAb,EAA6B;AAC3B;AACD;;AAED,iBAAO1W,IAAI,CAACwB,OAAL,KAAiB,IAAxB,EAA8B;AAC5B,gBAAIxB,IAAI,CAACK,MAAL,KAAgB,IAAhB,IAAwBL,IAAI,CAACK,MAAL,KAAgBqW,cAA5C,EAA4D;AAC1D;AACD;;AAED1W,YAAAA,IAAI,GAAGA,IAAI,CAACK,MAAZ;AACD;;AAEDL,UAAAA,IAAI,CAACwB,OAAL,CAAanB,MAAb,GAAsBL,IAAI,CAACK,MAA3B;AACAL,UAAAA,IAAI,GAAGA,IAAI,CAACwB,OAAZ;AACD;AACF,OA7BD;;AA+BAkjC,MAAAA,mBAAmB,GAAG,UAAUhkC,OAAV,EAAmBgW,cAAnB,EAAmC,CAAC;AACzD,OADD;;AAGAiuB,MAAAA,mBAAmB,GAAG,UAAUjkC,OAAV,EAAmBgW,cAAnB,EAAmC9Z,IAAnC,EAAyCkU,QAAzC,EAAmDzB,qBAAnD,EAA0E;AAC9F;AACA;AACA,YAAIwB,QAAQ,GAAGnQ,OAAO,CAACwoB,aAAvB;;AAEA,YAAIrY,QAAQ,KAAKC,QAAjB,EAA2B;AACzB;AACA;AACA;AACD,SAT6F,CAS5F;AACF;AACA;AACA;;;AAGA,YAAIlQ,QAAQ,GAAG8V,cAAc,CAAC7V,SAA9B;AACA,YAAIikC,kBAAkB,GAAGpT,cAAc,EAAvC,CAhB8F,CAgBnD;AAC3C;AACA;;AAEA,YAAIjgB,aAAa,GAAGd,aAAa,EAAjC,CApB8F,CAoBzD;;AAErC+F,QAAAA,cAAc,CAACmK,WAAf,GAA6BpP,aAA7B,CAtB8F,CAsBlD;AAC5C;;AAEA,YAAIA,aAAJ,EAAmB;AACjB8yB,UAAAA,UAAU,CAAC7tB,cAAD,CAAV;AACD;AACF,OA5BD;;AA8BAkuB,MAAAA,cAAc,GAAG,UAAUlkC,OAAV,EAAmBgW,cAAnB,EAAmC9E,OAAnC,EAA4CC,OAA5C,EAAqD;AACpE;AACA,YAAID,OAAO,KAAKC,OAAhB,EAAyB;AACvB0yB,UAAAA,UAAU,CAAC7tB,cAAD,CAAV;AACD;AACF,OALD;AAMD;;AAED,aAASquB,kBAAT,CAA4BC,WAA5B,EAAyCC,wBAAzC,EAAmE;AAEjE,cAAQD,WAAW,CAACE,QAApB;AACE,aAAK,QAAL;AACE;AACE;AACA;AACA;AACA;AACA;AACA,gBAAIC,QAAQ,GAAGH,WAAW,CAACI,IAA3B;AACA,gBAAIC,YAAY,GAAG,IAAnB;;AAEA,mBAAOF,QAAQ,KAAK,IAApB,EAA0B;AACxB,kBAAIA,QAAQ,CAACjlC,SAAT,KAAuB,IAA3B,EAAiC;AAC/BmlC,gBAAAA,YAAY,GAAGF,QAAf;AACD;;AAEDA,cAAAA,QAAQ,GAAGA,QAAQ,CAAC3jC,OAApB;AACD,aAfH,CAeI;AACF;;;AAGA,gBAAI6jC,YAAY,KAAK,IAArB,EAA2B;AACzB;AACAL,cAAAA,WAAW,CAACI,IAAZ,GAAmB,IAAnB;AACD,aAHD,MAGO;AACL;AACA;AACAC,cAAAA,YAAY,CAAC7jC,OAAb,GAAuB,IAAvB;AACD;;AAED;AACD;;AAEH,aAAK,WAAL;AACE;AACE;AACA;AACA;AACA;AACA;AACA,gBAAI8jC,SAAS,GAAGN,WAAW,CAACI,IAA5B;AACA,gBAAIG,aAAa,GAAG,IAApB;;AAEA,mBAAOD,SAAS,KAAK,IAArB,EAA2B;AACzB,kBAAIA,SAAS,CAACplC,SAAV,KAAwB,IAA5B,EAAkC;AAChCqlC,gBAAAA,aAAa,GAAGD,SAAhB;AACD;;AAEDA,cAAAA,SAAS,GAAGA,SAAS,CAAC9jC,OAAtB;AACD,aAfH,CAeI;AACF;;;AAGA,gBAAI+jC,aAAa,KAAK,IAAtB,EAA4B;AAC1B;AACA,kBAAI,CAACN,wBAAD,IAA6BD,WAAW,CAACI,IAAZ,KAAqB,IAAtD,EAA4D;AAC1D;AACA;AACAJ,gBAAAA,WAAW,CAACI,IAAZ,CAAiB5jC,OAAjB,GAA2B,IAA3B;AACD,eAJD,MAIO;AACLwjC,gBAAAA,WAAW,CAACI,IAAZ,GAAmB,IAAnB;AACD;AACF,aATD,MASO;AACL;AACA;AACAG,cAAAA,aAAa,CAAC/jC,OAAd,GAAwB,IAAxB;AACD;;AAED;AACD;AArEL;AAuED;;AAED,aAASgkC,gBAAT,CAA0BC,aAA1B,EAAyC;AACvC,UAAIC,UAAU,GAAGD,aAAa,CAACvlC,SAAd,KAA4B,IAA5B,IAAoCulC,aAAa,CAACvlC,SAAd,CAAwBqB,KAAxB,KAAkCkkC,aAAa,CAAClkC,KAArG;AACA,UAAIokC,aAAa,GAAGn+B,OAApB;AACA,UAAIo+B,YAAY,GAAG7nC,OAAnB;;AAEA,UAAI,CAAC2nC,UAAL,EAAiB;AACf;AACA,YAAK,CAACD,aAAa,CAAChqB,IAAd,GAAqBzU,WAAtB,MAAuCF,MAA5C,EAAoD;AAClD;AACA;AACA,cAAIk6B,cAAc,GAAGyE,aAAa,CAACzE,cAAnC;AACA,cAAI6E,gBAAgB,GAAGJ,aAAa,CAACxE,gBAArC;AACA,cAAI1/B,KAAK,GAAGkkC,aAAa,CAAClkC,KAA1B;;AAEA,iBAAOA,KAAK,KAAK,IAAjB,EAAuB;AACrBokC,YAAAA,aAAa,GAAG74B,UAAU,CAAC64B,aAAD,EAAgB74B,UAAU,CAACvL,KAAK,CAACoF,KAAP,EAAcpF,KAAK,CAAC2e,UAApB,CAA1B,CAA1B;AACA0lB,YAAAA,YAAY,IAAIrkC,KAAK,CAACqkC,YAAtB;AACAA,YAAAA,YAAY,IAAIrkC,KAAK,CAACnB,KAAtB,CAHqB,CAGQ;AAC7B;AACA;AACA;AACA;AACA;AACA;;AAEA4gC,YAAAA,cAAc,IAAIz/B,KAAK,CAACy/B,cAAxB;AACA6E,YAAAA,gBAAgB,IAAItkC,KAAK,CAACskC,gBAA1B;AACAtkC,YAAAA,KAAK,GAAGA,KAAK,CAACC,OAAd;AACD;;AAEDikC,UAAAA,aAAa,CAACzE,cAAd,GAA+BA,cAA/B;AACAyE,UAAAA,aAAa,CAACI,gBAAd,GAAiCA,gBAAjC;AACD,SAzBD,MAyBO;AACL,cAAInkC,MAAM,GAAG+jC,aAAa,CAAClkC,KAA3B;;AAEA,iBAAOG,MAAM,KAAK,IAAlB,EAAwB;AACtBikC,YAAAA,aAAa,GAAG74B,UAAU,CAAC64B,aAAD,EAAgB74B,UAAU,CAACpL,MAAM,CAACiF,KAAR,EAAejF,MAAM,CAACwe,UAAtB,CAA1B,CAA1B;AACA0lB,YAAAA,YAAY,IAAIlkC,MAAM,CAACkkC,YAAvB;AACAA,YAAAA,YAAY,IAAIlkC,MAAM,CAACtB,KAAvB,CAHsB,CAGQ;AAC9B;AACA;;AAEAsB,YAAAA,MAAM,CAACrB,MAAP,GAAgBolC,aAAhB;AACA/jC,YAAAA,MAAM,GAAGA,MAAM,CAACF,OAAhB;AACD;AACF;;AAEDikC,QAAAA,aAAa,CAACG,YAAd,IAA8BA,YAA9B;AACD,OA3CD,MA2CO;AACL;AACA,YAAK,CAACH,aAAa,CAAChqB,IAAd,GAAqBzU,WAAtB,MAAuCF,MAA5C,EAAoD;AAClD;AACA;AACA,cAAIg/B,iBAAiB,GAAGL,aAAa,CAACxE,gBAAtC;AACA,cAAI8E,OAAO,GAAGN,aAAa,CAAClkC,KAA5B;;AAEA,iBAAOwkC,OAAO,KAAK,IAAnB,EAAyB;AACvBJ,YAAAA,aAAa,GAAG74B,UAAU,CAAC64B,aAAD,EAAgB74B,UAAU,CAACi5B,OAAO,CAACp/B,KAAT,EAAgBo/B,OAAO,CAAC7lB,UAAxB,CAA1B,CAA1B,CADuB,CACmE;AAC1F;AACA;AACA;;AAEA0lB,YAAAA,YAAY,IAAIG,OAAO,CAACH,YAAR,GAAuB/lC,UAAvC;AACA+lC,YAAAA,YAAY,IAAIG,OAAO,CAAC3lC,KAAR,GAAgBP,UAAhC;AACAimC,YAAAA,iBAAiB,IAAIC,OAAO,CAACF,gBAA7B;AACAE,YAAAA,OAAO,GAAGA,OAAO,CAACvkC,OAAlB;AACD;;AAEDikC,UAAAA,aAAa,CAACI,gBAAd,GAAiCC,iBAAjC;AACD,SAnBD,MAmBO;AACL,cAAIE,OAAO,GAAGP,aAAa,CAAClkC,KAA5B;;AAEA,iBAAOykC,OAAO,KAAK,IAAnB,EAAyB;AACvBL,YAAAA,aAAa,GAAG74B,UAAU,CAAC64B,aAAD,EAAgB74B,UAAU,CAACk5B,OAAO,CAACr/B,KAAT,EAAgBq/B,OAAO,CAAC9lB,UAAxB,CAA1B,CAA1B,CADuB,CACmE;AAC1F;AACA;AACA;;AAEA0lB,YAAAA,YAAY,IAAII,OAAO,CAACJ,YAAR,GAAuB/lC,UAAvC;AACA+lC,YAAAA,YAAY,IAAII,OAAO,CAAC5lC,KAAR,GAAgBP,UAAhC,CAPuB,CAOqB;AAC5C;AACA;;AAEAmmC,YAAAA,OAAO,CAAC3lC,MAAR,GAAiBolC,aAAjB;AACAO,YAAAA,OAAO,GAAGA,OAAO,CAACxkC,OAAlB;AACD;AACF;;AAEDikC,QAAAA,aAAa,CAACG,YAAd,IAA8BA,YAA9B;AACD;;AAEDH,MAAAA,aAAa,CAACvlB,UAAd,GAA2BylB,aAA3B;AACA,aAAOD,UAAP;AACD;;AAED,aAASO,YAAT,CAAsBvlC,OAAtB,EAA+BgW,cAA/B,EAA+CsJ,WAA/C,EAA4D;AAC1D,UAAIlP,QAAQ,GAAG4F,cAAc,CAACkT,YAA9B,CAD0D,CACd;AAC5C;AACA;AACA;;AAEAW,MAAAA,cAAc,CAAC7T,cAAD,CAAd;;AAEA,cAAQA,cAAc,CAAC5Z,GAAvB;AACE,aAAK3D,sBAAL;AACA,aAAKc,aAAL;AACA,aAAKD,mBAAL;AACA,aAAKf,iBAAL;AACA,aAAKW,UAAL;AACA,aAAKJ,QAAL;AACA,aAAKC,IAAL;AACA,aAAKI,QAAL;AACA,aAAKH,eAAL;AACA,aAAKK,aAAL;AACEyrC,UAAAA,gBAAgB,CAAC9uB,cAAD,CAAhB;AACA,iBAAO,IAAP;;AAEF,aAAKxd,cAAL;AACE;AACE,gBAAIub,SAAS,GAAGiC,cAAc,CAAC9Z,IAA/B;;AAEA,gBAAIga,iBAAiB,CAACnC,SAAD,CAArB,EAAkC;AAChC6C,cAAAA,UAAU,CAACZ,cAAD,CAAV;AACD;;AAED8uB,YAAAA,gBAAgB,CAAC9uB,cAAD,CAAhB;AACA,mBAAO,IAAP;AACD;;AAEH,aAAKtd,QAAL;AACE;AACE,gBAAI8sC,SAAS,GAAGxvB,cAAc,CAAC7V,SAA/B;AAEA4wB,YAAAA,gBAAgB,CAAC/a,cAAD,CAAhB;AACAa,YAAAA,wBAAwB,CAACb,cAAD,CAAxB;AACA+c,YAAAA,2BAA2B;;AAE3B,gBAAIyS,SAAS,CAACC,cAAd,EAA8B;AAC5BD,cAAAA,SAAS,CAAClpC,OAAV,GAAoBkpC,SAAS,CAACC,cAA9B;AACAD,cAAAA,SAAS,CAACC,cAAV,GAA2B,IAA3B;AACD;;AAED,gBAAIzlC,OAAO,KAAK,IAAZ,IAAoBA,OAAO,CAACa,KAAR,KAAkB,IAA1C,EAAgD;AAC9C;AACA;AACA,kBAAI6kC,WAAW,GAAGzb,iBAAiB,EAAnC;;AAEA,kBAAIyb,WAAJ,EAAiB;AACf;AACA;AACA7B,gBAAAA,UAAU,CAAC7tB,cAAD,CAAV;AACD,eAJD,MAIO;AACL,oBAAIhW,OAAO,KAAK,IAAhB,EAAsB;AACpB,sBAAI6iB,SAAS,GAAG7iB,OAAO,CAAC8Y,aAAxB;;AAEA,uBAAK;AACL,mBAAC+J,SAAS,CAAC9J,YAAX,IAA2B;AAC3B,mBAAC/C,cAAc,CAACtW,KAAf,GAAuB5B,iBAAxB,MAA+CT,OAF/C,EAEwD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA2Y,oBAAAA,cAAc,CAACtW,KAAf,IAAwB1B,QAAxB,CAPsD,CAOpB;AACnC;AACF;AACF;AACF;;AAEDgmC,YAAAA,mBAAmB,CAAChkC,OAAD,EAAUgW,cAAV,CAAnB;AACA8uB,YAAAA,gBAAgB,CAAC9uB,cAAD,CAAhB;AACA,mBAAO,IAAP;AACD;;AAEH,aAAKpd,aAAL;AACE;AACEs4B,YAAAA,cAAc,CAAClb,cAAD,CAAd;AACA,gBAAIrH,qBAAqB,GAAG+hB,oBAAoB,EAAhD;AACA,gBAAIx0B,IAAI,GAAG8Z,cAAc,CAAC9Z,IAA1B;;AAEA,gBAAI8D,OAAO,KAAK,IAAZ,IAAoBgW,cAAc,CAAC7V,SAAf,IAA4B,IAApD,EAA0D;AACxD8jC,cAAAA,mBAAmB,CAACjkC,OAAD,EAAUgW,cAAV,EAA0B9Z,IAA1B,EAAgCkU,QAAhC,EAA0CzB,qBAA1C,CAAnB;;AAEA,kBAAI3O,OAAO,CAAC8qB,GAAR,KAAgB9U,cAAc,CAAC8U,GAAnC,EAAwC;AACtCgZ,gBAAAA,OAAO,CAAC9tB,cAAD,CAAP;AACD;AACF,aAND,MAMO;AACL,kBAAI,CAAC5F,QAAL,EAAe;AACb,oBAAI4F,cAAc,CAAC7V,SAAf,KAA6B,IAAjC,EAAuC;AACrC,wBAAM,IAAIG,KAAJ,CAAU,iEAAiE,iDAA3E,CAAN;AACD,iBAHY,CAGX;;;AAGFwkC,gBAAAA,gBAAgB,CAAC9uB,cAAD,CAAhB;AACA,uBAAO,IAAP;AACD;;AAED,kBAAIouB,kBAAkB,GAAGpT,cAAc,EAAvC,CAXK,CAWsC;AAC3C;AACA;AACA;;AAEA,kBAAI2U,YAAY,GAAG1b,iBAAiB,EAApC;;AAEA,kBAAI0b,YAAJ,EAAkB;AAChB;AACA;AACA,oBAAI5b,4BAA4B,EAAhC,EAAoC;AAClC;AACA;AACA8Z,kBAAAA,UAAU,CAAC7tB,cAAD,CAAV;AACD;AACF,eARD,MAQO;AACL,oBAAI9V,QAAQ,GAAG0P,cAAc,CAAC1T,IAAD,EAAOkU,QAAP,EAAiBzB,qBAAjB,EAAwCy1B,kBAAxC,EAA4DpuB,cAA5D,CAA7B;AACA+tB,gBAAAA,iBAAiB,CAAC7jC,QAAD,EAAW8V,cAAX,EAA2B,KAA3B,EAAkC,KAAlC,CAAjB;AACAA,gBAAAA,cAAc,CAAC7V,SAAf,GAA2BD,QAA3B,CAHK,CAGgC;AACtC;;AAED,kBAAI8V,cAAc,CAAC8U,GAAf,KAAuB,IAA3B,EAAiC;AAC/B;AACAgZ,gBAAAA,OAAO,CAAC9tB,cAAD,CAAP;AACD;AACF;;AAED8uB,YAAAA,gBAAgB,CAAC9uB,cAAD,CAAhB;AACA,mBAAO,IAAP;AACD;;AAEH,aAAKnd,QAAL;AACE;AACE,gBAAIsY,OAAO,GAAGf,QAAd;;AAEA,gBAAIpQ,OAAO,IAAIgW,cAAc,CAAC7V,SAAf,IAA4B,IAA3C,EAAiD;AAC/C,kBAAI+Q,OAAO,GAAGlR,OAAO,CAACwoB,aAAtB,CAD+C,CACV;AACrC;;AAEA0b,cAAAA,cAAc,CAAClkC,OAAD,EAAUgW,cAAV,EAA0B9E,OAA1B,EAAmCC,OAAnC,CAAd;AACD,aALD,MAKO;AACL,kBAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,oBAAI6E,cAAc,CAAC7V,SAAf,KAA6B,IAAjC,EAAuC;AACrC,wBAAM,IAAIG,KAAJ,CAAU,iEAAiE,iDAA3E,CAAN;AACD,iBAH8B,CAG7B;;AAEH;;AAED,kBAAIslC,sBAAsB,GAAGlV,oBAAoB,EAAjD;;AAEA,kBAAImV,mBAAmB,GAAG7U,cAAc,EAAxC;;AAEA,kBAAI8U,aAAa,GAAG7b,iBAAiB,EAArC;;AAEA,kBAAI6b,aAAJ,EAAmB;AACjB,oBAAI9b,gCAAgC,EAApC,EAAwC;AACtC6Z,kBAAAA,UAAU,CAAC7tB,cAAD,CAAV;AACD;AACF,eAJD,MAIO;AACLA,gBAAAA,cAAc,CAAC7V,SAAf,GAA2BmQ,kBAAkB,CAACa,OAAD,CAA7C;AACD;AACF;;AAED2zB,YAAAA,gBAAgB,CAAC9uB,cAAD,CAAhB;AACA,mBAAO,IAAP;AACD;;AAEH,aAAK5c,iBAAL;AACE;AACE64B,YAAAA,kBAAkB,CAACjc,cAAD,CAAlB;AACA,gBAAI+M,SAAS,GAAG/M,cAAc,CAAC8C,aAA/B;;AAEA,gBAAI,CAAC9C,cAAc,CAACtW,KAAf,GAAuB7B,UAAxB,MAAwCR,OAA5C,EAAqD;AACnD;AACA2Y,cAAAA,cAAc,CAAC/P,KAAf,GAAuBqZ,WAAvB,CAFmD,CAEf;;AAEpC,kBAAK,CAACtJ,cAAc,CAAC+E,IAAf,GAAsBzU,WAAvB,MAAwCF,MAA7C,EAAqD;AACnD46B,gBAAAA,sBAAsB,CAAChrB,cAAD,CAAtB;AACD,eANkD,CAMjD;;;AAGF,qBAAOA,cAAP;AACD;;AAED,gBAAI+vB,cAAc,GAAGhjB,SAAS,KAAK,IAAnC;AACA,gBAAIijB,cAAc,GAAG,KAArB;AAEA,gBAAIhmC,OAAO,KAAK,IAAhB,EAAsB,CAAtB,KAA6B;AAC3B,kBAAIimC,UAAU,GAAGjmC,OAAO,CAAC8Y,aAAzB;AACAktB,cAAAA,cAAc,GAAGC,UAAU,KAAK,IAAhC;AACD,aAtBH,CAuBE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,gBAAIF,cAAc,IAAI,CAACC,cAAvB,EAAuC;AACrC,kBAAIE,eAAe,GAAGlwB,cAAc,CAACnV,KAArC;AACAqlC,cAAAA,eAAe,CAACxmC,KAAhB,IAAyBtB,UAAzB,CAFqC,CAEA;AACrC;AACA;;AAEA,kBAAI,CAAC4X,cAAc,CAAC+E,IAAf,GAAsB1U,cAAvB,MAA2CD,MAA/C,EAAuD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAI+/B,wBAAwB,GAAGnmC,OAAO,KAAK,IAAZ,KAAqBgW,cAAc,CAACwS,aAAf,CAA6B4d,0BAA7B,KAA4D,IAA5D,IAAoE,CAACjuC,+BAA1F,CAA/B;;AAEA,oBAAIguC,wBAAwB,IAAI3U,kBAAkB,CAACD,mBAAmB,CAACvxB,OAArB,EAA8BqxB,8BAA9B,CAAlD,EAAiH;AAC/G;AACA;AACAgV,kBAAAA,gBAAgB;AACjB,iBAJD,MAIO;AACL;AACA;AACAhD,kBAAAA,+BAA+B;AAChC;AACF;AACF;;AAED,gBAAIT,SAAS,GAAG5sB,cAAc,CAACmK,WAA/B;;AAEA,gBAAIyiB,SAAS,KAAK,IAAlB,EAAwB;AACtB;AACA;AACA5sB,cAAAA,cAAc,CAACtW,KAAf,IAAwBlC,MAAxB;AACD;;AAEDsnC,YAAAA,gBAAgB,CAAC9uB,cAAD,CAAhB;AAEA;AACE,kBAAI,CAACA,cAAc,CAAC+E,IAAf,GAAsBzU,WAAvB,MAAwCF,MAA5C,EAAoD;AAClD,oBAAI2/B,cAAJ,EAAoB;AAClB;AACA,sBAAIO,sBAAsB,GAAGtwB,cAAc,CAACnV,KAA5C;;AAEA,sBAAIylC,sBAAsB,KAAK,IAA/B,EAAqC;AACnC;AACAtwB,oBAAAA,cAAc,CAACmvB,gBAAf,IAAmCmB,sBAAsB,CAACnB,gBAA1D;AACD;AACF;AACF;AACF;AAED,mBAAO,IAAP;AACD;;AAEH,aAAKxsC,UAAL;AACEo4B,UAAAA,gBAAgB,CAAC/a,cAAD,CAAhB;AACAguB,UAAAA,mBAAmB,CAAChkC,OAAD,EAAUgW,cAAV,CAAnB;;AAEA,cAAIhW,OAAO,KAAK,IAAhB,EAAsB;AACpB4R,YAAAA,kBAAkB,CAACoE,cAAc,CAAC7V,SAAf,CAAyBuP,aAA1B,CAAlB;AACD;;AAEDo1B,UAAAA,gBAAgB,CAAC9uB,cAAD,CAAhB;AACA,iBAAO,IAAP;;AAEF,aAAK/c,eAAL;AACE;AACA,cAAIqD,OAAO,GAAG0Z,cAAc,CAAC9Z,IAAf,CAAoBM,QAAlC;AACA2iB,UAAAA,WAAW,CAAC7iB,OAAD,EAAU0Z,cAAV,CAAX;AACA8uB,UAAAA,gBAAgB,CAAC9uB,cAAD,CAAhB;AACA,iBAAO,IAAP;;AAEF,aAAKxc,wBAAL;AACE;AACE;AACA;AACA,gBAAI+sC,UAAU,GAAGvwB,cAAc,CAAC9Z,IAAhC;;AAEA,gBAAIga,iBAAiB,CAACqwB,UAAD,CAArB,EAAmC;AACjC3vB,cAAAA,UAAU,CAACZ,cAAD,CAAV;AACD;;AAED8uB,YAAAA,gBAAgB,CAAC9uB,cAAD,CAAhB;AACA,mBAAO,IAAP;AACD;;AAEH,aAAKtc,qBAAL;AACE;AACEu4B,YAAAA,kBAAkB,CAACjc,cAAD,CAAlB;AACA,gBAAIsuB,WAAW,GAAGtuB,cAAc,CAAC8C,aAAjC;;AAEA,gBAAIwrB,WAAW,KAAK,IAApB,EAA0B;AACxB;AACA;AACAQ,cAAAA,gBAAgB,CAAC9uB,cAAD,CAAhB;AACA,qBAAO,IAAP;AACD;;AAED,gBAAIwwB,iBAAiB,GAAG,CAACxwB,cAAc,CAACtW,KAAf,GAAuB7B,UAAxB,MAAwCR,OAAhE;AACA,gBAAIopC,YAAY,GAAGnC,WAAW,CAAChqB,SAA/B;;AAEA,gBAAImsB,YAAY,KAAK,IAArB,EAA2B;AACzB;AACA,kBAAI,CAACD,iBAAL,EAAwB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAIE,iBAAiB,GAAGC,wBAAwB,OAAO3mC,OAAO,KAAK,IAAZ,IAAoB,CAACA,OAAO,CAACN,KAAR,GAAgB7B,UAAjB,MAAiCR,OAA5D,CAAhD;;AAEA,oBAAI,CAACqpC,iBAAL,EAAwB;AACtB,sBAAIpU,GAAG,GAAGtc,cAAc,CAACnV,KAAzB;;AAEA,yBAAOyxB,GAAG,KAAK,IAAf,EAAqB;AACnB,wBAAIsU,SAAS,GAAGvU,kBAAkB,CAACC,GAAD,CAAlC;;AAEA,wBAAIsU,SAAS,KAAK,IAAlB,EAAwB;AACtBJ,sBAAAA,iBAAiB,GAAG,IAApB;AACAxwB,sBAAAA,cAAc,CAACtW,KAAf,IAAwB7B,UAAxB;AACAwmC,sBAAAA,kBAAkB,CAACC,WAAD,EAAc,KAAd,CAAlB,CAHsB,CAGkB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0BAAIuC,YAAY,GAAGD,SAAS,CAACzmB,WAA7B;;AAEA,0BAAI0mB,YAAY,KAAK,IAArB,EAA2B;AACzB7wB,wBAAAA,cAAc,CAACmK,WAAf,GAA6B0mB,YAA7B;AACA7wB,wBAAAA,cAAc,CAACtW,KAAf,IAAwBlC,MAAxB;AACD,uBArBqB,CAqBpB;AACF;AACA;AACA;;;AAGAwY,sBAAAA,cAAc,CAACkvB,YAAf,GAA8B7nC,OAA9B;AACA8yB,sBAAAA,gBAAgB,CAACna,cAAD,EAAiBsJ,WAAjB,CAAhB,CA5BsB,CA4ByB;AAC/C;;AAEAyS,sBAAAA,mBAAmB,CAAC/b,cAAD,EAAiB2b,yBAAyB,CAACJ,mBAAmB,CAACvxB,OAArB,EAA8BsxB,qBAA9B,CAA1C,CAAnB,CA/BsB,CA+B8F;;AAEpH,6BAAOtb,cAAc,CAACnV,KAAtB;AACD;;AAEDyxB,oBAAAA,GAAG,GAAGA,GAAG,CAACxxB,OAAV;AACD;AACF;;AAED,oBAAIwjC,WAAW,CAACI,IAAZ,KAAqB,IAArB,IAA6B1iC,GAAG,KAAK8kC,mBAAmB,EAA5D,EAAgE;AAC9D;AACA;AACA;AACA9wB,kBAAAA,cAAc,CAACtW,KAAf,IAAwB7B,UAAxB;AACA2oC,kBAAAA,iBAAiB,GAAG,IAApB;AACAnC,kBAAAA,kBAAkB,CAACC,WAAD,EAAc,KAAd,CAAlB,CAN8D,CAMtB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAtuB,kBAAAA,cAAc,CAAC/P,KAAf,GAAuB4C,aAAvB;AACD;AACF,eA3ED,MA2EO;AACLw7B,gBAAAA,kBAAkB,CAACC,WAAD,EAAc,KAAd,CAAlB;AACD,eA/EwB,CA+EvB;;AAEH,aAjFD,MAiFO;AACL;AACA,kBAAI,CAACkC,iBAAL,EAAwB;AACtB,oBAAIO,UAAU,GAAG1U,kBAAkB,CAACoU,YAAD,CAAnC;;AAEA,oBAAIM,UAAU,KAAK,IAAnB,EAAyB;AACvB/wB,kBAAAA,cAAc,CAACtW,KAAf,IAAwB7B,UAAxB;AACA2oC,kBAAAA,iBAAiB,GAAG,IAApB,CAFuB,CAEG;AAC1B;;AAEA,sBAAIQ,aAAa,GAAGD,UAAU,CAAC5mB,WAA/B;;AAEA,sBAAI6mB,aAAa,KAAK,IAAtB,EAA4B;AAC1BhxB,oBAAAA,cAAc,CAACmK,WAAf,GAA6B6mB,aAA7B;AACAhxB,oBAAAA,cAAc,CAACtW,KAAf,IAAwBlC,MAAxB;AACD;;AAED6mC,kBAAAA,kBAAkB,CAACC,WAAD,EAAc,IAAd,CAAlB,CAZuB,CAYgB;;AAEvC,sBAAIA,WAAW,CAACI,IAAZ,KAAqB,IAArB,IAA6BJ,WAAW,CAACE,QAAZ,KAAyB,QAAtD,IAAkE,CAACiC,YAAY,CAACjnC,SAAhF,IAA6F,CAAC0qB,cAAc,EAAhH,CAAmH;AAAnH,oBACE;AACE;AACA4a,oBAAAA,gBAAgB,CAAC9uB,cAAD,CAAhB;AACA,2BAAO,IAAP;AACD;AACJ,iBApBD,MAoBO,KAAK;AACZ;AACA;AACAhU,gBAAAA,GAAG,KAAK,CAAR,GAAYsiC,WAAW,CAAC2C,kBAAxB,GAA6CH,mBAAmB,EAAhE,IAAsExnB,WAAW,KAAKpW,aAH/E,EAG8F;AACnG;AACA;AACA;AACA8M,kBAAAA,cAAc,CAACtW,KAAf,IAAwB7B,UAAxB;AACA2oC,kBAAAA,iBAAiB,GAAG,IAApB;AACAnC,kBAAAA,kBAAkB,CAACC,WAAD,EAAc,KAAd,CAAlB,CANmG,CAM3D;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAtuB,kBAAAA,cAAc,CAAC/P,KAAf,GAAuB4C,aAAvB;AACD;AACF;;AAED,kBAAIy7B,WAAW,CAAC4C,WAAhB,EAA6B;AAC3B;AACA;AACA;AACA;AACA;AACAT,gBAAAA,YAAY,CAAC3lC,OAAb,GAAuBkV,cAAc,CAACnV,KAAtC;AACAmV,gBAAAA,cAAc,CAACnV,KAAf,GAAuB4lC,YAAvB;AACD,eARD,MAQO;AACL,oBAAIU,eAAe,GAAG7C,WAAW,CAAC8C,IAAlC;;AAEA,oBAAID,eAAe,KAAK,IAAxB,EAA8B;AAC5BA,kBAAAA,eAAe,CAACrmC,OAAhB,GAA0B2lC,YAA1B;AACD,iBAFD,MAEO;AACLzwB,kBAAAA,cAAc,CAACnV,KAAf,GAAuB4lC,YAAvB;AACD;;AAEDnC,gBAAAA,WAAW,CAAC8C,IAAZ,GAAmBX,YAAnB;AACD;AACF;;AAED,gBAAInC,WAAW,CAACI,IAAZ,KAAqB,IAAzB,EAA+B;AAC7B;AACA;AACA,kBAAInkB,IAAI,GAAG+jB,WAAW,CAACI,IAAvB;AACAJ,cAAAA,WAAW,CAAChqB,SAAZ,GAAwBiG,IAAxB;AACA+jB,cAAAA,WAAW,CAACI,IAAZ,GAAmBnkB,IAAI,CAACzf,OAAxB;AACAwjC,cAAAA,WAAW,CAAC2C,kBAAZ,GAAiCjlC,GAAG,EAApC;AACAue,cAAAA,IAAI,CAACzf,OAAL,GAAe,IAAf,CAP6B,CAOR;AACrB;AACA;;AAEA,kBAAIumC,eAAe,GAAG9V,mBAAmB,CAACvxB,OAA1C;;AAEA,kBAAIwmC,iBAAJ,EAAuB;AACrBa,gBAAAA,eAAe,GAAG1V,yBAAyB,CAAC0V,eAAD,EAAkB/V,qBAAlB,CAA3C;AACD,eAFD,MAEO;AACL+V,gBAAAA,eAAe,GAAG3V,gCAAgC,CAAC2V,eAAD,CAAlD;AACD;;AAEDtV,cAAAA,mBAAmB,CAAC/b,cAAD,EAAiBqxB,eAAjB,CAAnB,CAnB6B,CAmByB;AACtD;;AAEA,qBAAO9mB,IAAP;AACD;;AAEDukB,YAAAA,gBAAgB,CAAC9uB,cAAD,CAAhB;AACA,mBAAO,IAAP;AACD;;AAEH,aAAKrc,cAAL;AACE;AAEE;AACD;;AAEH,aAAKC,kBAAL;AACA,aAAKC,qBAAL;AACE;AACEytC,YAAAA,cAAc,CAACtxB,cAAD,CAAd;AACA,gBAAIuxB,UAAU,GAAGvxB,cAAc,CAAC8C,aAAhC;AACA,gBAAI0uB,YAAY,GAAGD,UAAU,KAAK,IAAlC;;AAEA,gBAAIvnC,OAAO,KAAK,IAAhB,EAAsB;AACpB,kBAAIynC,WAAW,GAAGznC,OAAO,CAAC8Y,aAA1B;AACA,kBAAI4uB,YAAY,GAAGD,WAAW,KAAK,IAAnC;;AAEA,kBAAIC,YAAY,KAAKF,YAAjB,IAAmC;AACvC,eAAClvC,kBADD,EACuB;AACrB0d,gBAAAA,cAAc,CAACtW,KAAf,IAAwBtB,UAAxB;AACD;AACF;;AAED,gBAAI,CAACopC,YAAD,IAAiB,CAACxxB,cAAc,CAAC+E,IAAf,GAAsB1U,cAAvB,MAA2CD,MAAhE,EAAwE;AACtE0+B,cAAAA,gBAAgB,CAAC9uB,cAAD,CAAhB;AACD,aAFD,MAEO;AACL;AACA;AACA,kBAAI/J,gBAAgB,CAAC07B,kBAAD,EAAqBz+B,aAArB,CAApB,EAAyD;AACvD47B,gBAAAA,gBAAgB,CAAC9uB,cAAD,CAAhB;AAEA;AACE;AACA;AACA;AACA,sBAAKA,cAAc,CAACkvB,YAAf,IAA+B3nC,SAAS,GAAGC,MAA3C,CAAL,EAAyD;AACvDwY,oBAAAA,cAAc,CAACtW,KAAf,IAAwBtB,UAAxB;AACD;AACF;AACF;AACF;;AAED,mBAAO,IAAP;AACD;;AAEH,aAAKtE,cAAL;AACE;AAEE,mBAAO,IAAP;AACD;;AAEH,aAAKC,sBAAL;AACE;AAEE,mBAAO,IAAP;AACD;AArhBL;;AAwhBA,YAAM,IAAIuG,KAAJ,CAAU,+BAA+B0V,cAAc,CAAC5Z,GAA9C,GAAoD,6CAApD,GAAoG,8BAA9G,CAAN;AACD;;AAED,QAAIwrC,mBAAmB,GAAGrzC,oBAAoB,CAAC6K,iBAA/C;AACA,QAAIyoC,gBAAgB,GAAG,KAAvB;AACA,QAAIC,oBAAJ;AACA,QAAIC,kCAAJ;AACA,QAAIC,0CAAJ;AACA,QAAIC,8CAAJ;AACA,QAAIC,wBAAJ;AACA,QAAIC,4BAAJ;AACA,QAAIC,uBAAJ;AACA,QAAIC,uBAAJ;AAEA;AACEP,MAAAA,oBAAoB,GAAG,EAAvB;AACAC,MAAAA,kCAAkC,GAAG,EAArC;AACAC,MAAAA,0CAA0C,GAAG,EAA7C;AACAC,MAAAA,8CAA8C,GAAG,EAAjD;AACAC,MAAAA,wBAAwB,GAAG,EAA3B;AACAC,MAAAA,4BAA4B,GAAG,KAA/B;AACAC,MAAAA,uBAAuB,GAAG,EAA1B;AACAC,MAAAA,uBAAuB,GAAG,EAA1B;AACD;;AAED,aAASC,iBAAT,CAA2BtoC,OAA3B,EAAoCgW,cAApC,EAAoDuyB,YAApD,EAAkEjpB,WAAlE,EAA+E;AAC7E,UAAItf,OAAO,KAAK,IAAhB,EAAsB;AACpB;AACA;AACA;AACA;AACAgW,QAAAA,cAAc,CAACnV,KAAf,GAAuBmvB,gBAAgB,CAACha,cAAD,EAAiB,IAAjB,EAAuBuyB,YAAvB,EAAqCjpB,WAArC,CAAvC;AACD,OAND,MAMO;AACL;AACA;AACA;AACA;AACA;AACAtJ,QAAAA,cAAc,CAACnV,KAAf,GAAuBivB,oBAAoB,CAAC9Z,cAAD,EAAiBhW,OAAO,CAACa,KAAzB,EAAgC0nC,YAAhC,EAA8CjpB,WAA9C,CAA3C;AACD;AACF;;AAED,aAASkpB,+BAAT,CAAyCxoC,OAAzC,EAAkDgW,cAAlD,EAAkEuyB,YAAlE,EAAgFjpB,WAAhF,EAA6F;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAtJ,MAAAA,cAAc,CAACnV,KAAf,GAAuBivB,oBAAoB,CAAC9Z,cAAD,EAAiBhW,OAAO,CAACa,KAAzB,EAAgC,IAAhC,EAAsCye,WAAtC,CAA3C,CAT2F,CASI;AAC/F;AACA;AACA;;AAEAtJ,MAAAA,cAAc,CAACnV,KAAf,GAAuBivB,oBAAoB,CAAC9Z,cAAD,EAAiB,IAAjB,EAAuBuyB,YAAvB,EAAqCjpB,WAArC,CAA3C;AACD;;AAED,aAASmpB,gBAAT,CAA0BzoC,OAA1B,EAAmCgW,cAAnC,EAAmDjC,SAAnD,EAA8D+O,SAA9D,EAAyExD,WAAzE,EAAsF;AACpF;AACA;AACA;AACA;AACE,YAAItJ,cAAc,CAAC9Z,IAAf,KAAwB8Z,cAAc,CAACgT,WAA3C,EAAwD;AACtD;AACA;AACA,cAAI0f,cAAc,GAAG30B,SAAS,CAAC2S,SAA/B;;AAEA,cAAIgiB,cAAJ,EAAoB;AAClBj0B,YAAAA,cAAc,CAACi0B,cAAD,EAAiB5lB,SAAjB,EAA4B;AAC1C,kBADc,EACN3mB,wBAAwB,CAAC4X,SAAD,CADlB,CAAd;AAED;AACF;AACF;AAED,UAAItX,MAAM,GAAGsX,SAAS,CAACtX,MAAvB;AACA,UAAIquB,GAAG,GAAG9U,cAAc,CAAC8U,GAAzB,CAlBoF,CAkBtD;;AAE9B,UAAIyd,YAAJ;AACA/nB,MAAAA,oBAAoB,CAACxK,cAAD,EAAiBsJ,WAAjB,CAApB;AAEA;AACEsoB,QAAAA,mBAAmB,CAAC5nC,OAApB,GAA8BgW,cAA9B;AACAqE,QAAAA,cAAc,CAAC,IAAD,CAAd;AACAkuB,QAAAA,YAAY,GAAGvT,eAAe,CAACh1B,OAAD,EAAUgW,cAAV,EAA0BvZ,MAA1B,EAAkCqmB,SAAlC,EAA6CgI,GAA7C,EAAkDxL,WAAlD,CAA9B;AAEAjF,QAAAA,cAAc,CAAC,KAAD,CAAd;AACD;;AAED,UAAIra,OAAO,KAAK,IAAZ,IAAoB,CAAC6nC,gBAAzB,EAA2C;AACzClS,QAAAA,YAAY,CAAC31B,OAAD,EAAUgW,cAAV,EAA0BsJ,WAA1B,CAAZ;AACA,eAAOqpB,4BAA4B,CAAC3oC,OAAD,EAAUgW,cAAV,EAA0BsJ,WAA1B,CAAnC;AACD;;AAGDtJ,MAAAA,cAAc,CAACtW,KAAf,IAAwBpC,aAAxB;AACAgrC,MAAAA,iBAAiB,CAACtoC,OAAD,EAAUgW,cAAV,EAA0BuyB,YAA1B,EAAwCjpB,WAAxC,CAAjB;AACA,aAAOtJ,cAAc,CAACnV,KAAtB;AACD;;AAED,aAAS+nC,mBAAT,CAA6B5oC,OAA7B,EAAsCgW,cAAtC,EAAsDjC,SAAtD,EAAiE+O,SAAjE,EAA4ExD,WAA5E,EAAyF;AACvF,UAAItf,OAAO,KAAK,IAAhB,EAAsB;AACpB,YAAI9D,IAAI,GAAG6X,SAAS,CAAC7X,IAArB;;AAEA,YAAI2sC,yBAAyB,CAAC3sC,IAAD,CAAzB,IAAmC6X,SAAS,CAAC+0B,OAAV,KAAsB,IAAzD,IAAiE;AACrE/0B,QAAAA,SAAS,CAACqK,YAAV,KAA2B5Y,SAD3B,EACsC;AACpC,cAAIujC,YAAY,GAAG7sC,IAAnB;AAEA;AACE6sC,YAAAA,YAAY,GAAGC,8BAA8B,CAAC9sC,IAAD,CAA7C;AACD,WALmC,CAKlC;AACF;AACA;;AAGA8Z,UAAAA,cAAc,CAAC5Z,GAAf,GAAqB9C,mBAArB;AACA0c,UAAAA,cAAc,CAAC9Z,IAAf,GAAsB6sC,YAAtB;AAEA;AACEE,YAAAA,8BAA8B,CAACjzB,cAAD,EAAiB9Z,IAAjB,CAA9B;AACD;AAED,iBAAOgtC,yBAAyB,CAAClpC,OAAD,EAAUgW,cAAV,EAA0B+yB,YAA1B,EAAwCjmB,SAAxC,EAAmDxD,WAAnD,CAAhC;AACD;;AAED;AACE,cAAIopB,cAAc,GAAGxsC,IAAI,CAACwqB,SAA1B;;AAEA,cAAIgiB,cAAJ,EAAoB;AAClB;AACA;AACAj0B,YAAAA,cAAc,CAACi0B,cAAD,EAAiB5lB,SAAjB,EAA4B;AAC1C,kBADc,EACN3mB,wBAAwB,CAACD,IAAD,CADlB,CAAd;AAED;AACF;AAED,YAAI2E,KAAK,GAAGsoC,2BAA2B,CAACp1B,SAAS,CAAC7X,IAAX,EAAiB,IAAjB,EAAuB4mB,SAAvB,EAAkC9M,cAAlC,EAAkDA,cAAc,CAAC+E,IAAjE,EAAuEuE,WAAvE,CAAvC;AACAze,QAAAA,KAAK,CAACiqB,GAAN,GAAY9U,cAAc,CAAC8U,GAA3B;AACAjqB,QAAAA,KAAK,CAAClB,MAAN,GAAeqW,cAAf;AACAA,QAAAA,cAAc,CAACnV,KAAf,GAAuBA,KAAvB;AACA,eAAOA,KAAP;AACD;;AAED;AACE,YAAIuoC,KAAK,GAAGr1B,SAAS,CAAC7X,IAAtB;AACA,YAAImtC,eAAe,GAAGD,KAAK,CAAC1iB,SAA5B;;AAEA,YAAI2iB,eAAJ,EAAqB;AACnB;AACA;AACA50B,UAAAA,cAAc,CAAC40B,eAAD,EAAkBvmB,SAAlB,EAA6B;AAC3C,gBADc,EACN3mB,wBAAwB,CAACitC,KAAD,CADlB,CAAd;AAED;AACF;AAED,UAAIlZ,YAAY,GAAGlwB,OAAO,CAACa,KAA3B,CAvDuF,CAuDrD;;AAElC,UAAIyoC,2BAA2B,GAAGC,6BAA6B,CAACvpC,OAAD,EAAUsf,WAAV,CAA/D;;AAEA,UAAI,CAACgqB,2BAAL,EAAkC;AAChC;AACA;AACA,YAAIE,SAAS,GAAGtZ,YAAY,CAAC1H,aAA7B,CAHgC,CAGY;;AAE5C,YAAIsgB,OAAO,GAAG/0B,SAAS,CAAC+0B,OAAxB;AACAA,QAAAA,OAAO,GAAGA,OAAO,KAAK,IAAZ,GAAmBA,OAAnB,GAA6B1vB,YAAvC;;AAEA,YAAI0vB,OAAO,CAACU,SAAD,EAAY1mB,SAAZ,CAAP,IAAiC9iB,OAAO,CAAC8qB,GAAR,KAAgB9U,cAAc,CAAC8U,GAApE,EAAyE;AACvE,iBAAO6d,4BAA4B,CAAC3oC,OAAD,EAAUgW,cAAV,EAA0BsJ,WAA1B,CAAnC;AACD;AACF,OAtEsF,CAsErF;;;AAGFtJ,MAAAA,cAAc,CAACtW,KAAf,IAAwBpC,aAAxB;AACA,UAAI8tB,QAAQ,GAAGe,oBAAoB,CAAC+D,YAAD,EAAepN,SAAf,CAAnC;AACAsI,MAAAA,QAAQ,CAACN,GAAT,GAAe9U,cAAc,CAAC8U,GAA9B;AACAM,MAAAA,QAAQ,CAACzrB,MAAT,GAAkBqW,cAAlB;AACAA,MAAAA,cAAc,CAACnV,KAAf,GAAuBuqB,QAAvB;AACA,aAAOA,QAAP;AACD;;AAED,aAAS8d,yBAAT,CAAmClpC,OAAnC,EAA4CgW,cAA5C,EAA4DjC,SAA5D,EAAuE+O,SAAvE,EAAkFxD,WAAlF,EAA+F;AAC7F;AACA;AACA;AACA;AACE,YAAItJ,cAAc,CAAC9Z,IAAf,KAAwB8Z,cAAc,CAACgT,WAA3C,EAAwD;AACtD;AACA;AACA,cAAIygB,aAAa,GAAGzzB,cAAc,CAACgT,WAAnC;;AAEA,cAAIygB,aAAa,CAACptC,QAAd,KAA2BxB,eAA/B,EAAgD;AAC9C;AACA;AACA;AACA,gBAAI8B,aAAa,GAAG8sC,aAApB;AACA,gBAAI7sC,OAAO,GAAGD,aAAa,CAACE,QAA5B;AACA,gBAAIC,IAAI,GAAGH,aAAa,CAACI,KAAzB;;AAEA,gBAAI;AACF0sC,cAAAA,aAAa,GAAG3sC,IAAI,CAACF,OAAD,CAApB;AACD,aAFD,CAEE,OAAOI,CAAP,EAAU;AACVysC,cAAAA,aAAa,GAAG,IAAhB;AACD,aAZ6C,CAY5C;;;AAGF,gBAAIC,cAAc,GAAGD,aAAa,IAAIA,aAAa,CAAC/iB,SAApD;;AAEA,gBAAIgjB,cAAJ,EAAoB;AAClBj1B,cAAAA,cAAc,CAACi1B,cAAD,EAAiB5mB,SAAjB,EAA4B;AAC1C,oBADc,EACN3mB,wBAAwB,CAACstC,aAAD,CADlB,CAAd;AAED;AACF;AACF;AACF;;AAED,UAAIzpC,OAAO,KAAK,IAAhB,EAAsB;AACpB,YAAIwpC,SAAS,GAAGxpC,OAAO,CAACwoB,aAAxB;;AAEA,YAAIpP,YAAY,CAACowB,SAAD,EAAY1mB,SAAZ,CAAZ,IAAsC9iB,OAAO,CAAC8qB,GAAR,KAAgB9U,cAAc,CAAC8U,GAArE,IAA8E;AACjF9U,QAAAA,cAAc,CAAC9Z,IAAf,KAAwB8D,OAAO,CAAC9D,IADjC,EACyC;AACvC2rC,UAAAA,gBAAgB,GAAG,KAAnB;;AAEA,cAAI,CAAC0B,6BAA6B,CAACvpC,OAAD,EAAUsf,WAAV,CAAlC,EAA0D;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAtJ,YAAAA,cAAc,CAAC/P,KAAf,GAAuBjG,OAAO,CAACiG,KAA/B;AACA,mBAAO0iC,4BAA4B,CAAC3oC,OAAD,EAAUgW,cAAV,EAA0BsJ,WAA1B,CAAnC;AACD,WAhBD,MAgBO,IAAI,CAACtf,OAAO,CAACN,KAAR,GAAgBhB,4BAAjB,MAAmDrB,OAAvD,EAAgE;AACrE;AACA;AACAwqC,YAAAA,gBAAgB,GAAG,IAAnB;AACD;AACF;AACF;;AAED,aAAO8B,uBAAuB,CAAC3pC,OAAD,EAAUgW,cAAV,EAA0BjC,SAA1B,EAAqC+O,SAArC,EAAgDxD,WAAhD,CAA9B;AACD;;AAED,aAASsqB,wBAAT,CAAkC5pC,OAAlC,EAA2CgW,cAA3C,EAA2DsJ,WAA3D,EAAwE;AACtE,UAAIwD,SAAS,GAAG9M,cAAc,CAACkT,YAA/B;AACA,UAAIqf,YAAY,GAAGzlB,SAAS,CAACje,QAA7B;AACA,UAAIge,SAAS,GAAG7iB,OAAO,KAAK,IAAZ,GAAmBA,OAAO,CAAC8Y,aAA3B,GAA2C,IAA3D;;AAEA,UAAIgK,SAAS,CAAC/H,IAAV,KAAmB,QAAnB,IAA+BziB,kBAAnC,EAAwD;AACtD;AACA,YAAI,CAAC0d,cAAc,CAAC+E,IAAf,GAAsB1U,cAAvB,MAA2CD,MAA/C,EAAuD;AACrD;AACA,cAAI2c,SAAS,GAAG;AACd8mB,YAAAA,SAAS,EAAE/iC,OADG;AAEdgjC,YAAAA,SAAS,EAAE;AAFG,WAAhB;AAIA9zB,UAAAA,cAAc,CAAC8C,aAAf,GAA+BiK,SAA/B;AAEAgnB,UAAAA,eAAe,CAAC/zB,cAAD,EAAiBsJ,WAAjB,CAAf;AACD,SATD,MASO,IAAI,CAACrT,gBAAgB,CAACqT,WAAD,EAAcpW,aAAd,CAArB,EAAmD;AACxD,cAAI8gC,gBAAgB,GAAG,IAAvB,CADwD,CAC3B;AAC7B;;AAEA,cAAIC,aAAJ;;AAEA,cAAIpnB,SAAS,KAAK,IAAlB,EAAwB;AACtB,gBAAIqnB,aAAa,GAAGrnB,SAAS,CAACgnB,SAA9B;AACAI,YAAAA,aAAa,GAAG79B,UAAU,CAAC89B,aAAD,EAAgB5qB,WAAhB,CAA1B;AACD,WAHD,MAGO;AACL2qB,YAAAA,aAAa,GAAG3qB,WAAhB;AACD,WAXuD,CAWtD;;;AAGFtJ,UAAAA,cAAc,CAAC/P,KAAf,GAAuB+P,cAAc,CAACwJ,UAAf,GAA4BjT,WAAW,CAACrD,aAAD,CAA9D;AACA,cAAIq+B,UAAU,GAAG;AACfsC,YAAAA,SAAS,EAAEI,aADI;AAEfH,YAAAA,SAAS,EAAEE;AAFI,WAAjB;AAIAh0B,UAAAA,cAAc,CAAC8C,aAAf,GAA+ByuB,UAA/B;AACAvxB,UAAAA,cAAc,CAACmK,WAAf,GAA6B,IAA7B,CApBwD,CAqBxD;;AAGA4pB,UAAAA,eAAe,CAAC/zB,cAAD,EAAiBi0B,aAAjB,CAAf;AAEA,iBAAO,IAAP;AACD,SA3BM,MA2BA;AACL;AACA;AACA;AACA,cAAIE,WAAW,GAAG;AAChBN,YAAAA,SAAS,EAAE/iC,OADK;AAEhBgjC,YAAAA,SAAS,EAAE;AAFK,WAAlB;AAIA9zB,UAAAA,cAAc,CAAC8C,aAAf,GAA+BqxB,WAA/B,CARK,CAQuC;;AAE5C,cAAIxC,kBAAkB,GAAG9kB,SAAS,KAAK,IAAd,GAAqBA,SAAS,CAACgnB,SAA/B,GAA2CvqB,WAApE;AAEAyqB,UAAAA,eAAe,CAAC/zB,cAAD,EAAiB2xB,kBAAjB,CAAf;AACD;AACF,OApDD,MAoDO;AACL;AACA,YAAIyC,mBAAJ;;AAEA,YAAIvnB,SAAS,KAAK,IAAlB,EAAwB;AACtB;AACAunB,UAAAA,mBAAmB,GAAGh+B,UAAU,CAACyW,SAAS,CAACgnB,SAAX,EAAsBvqB,WAAtB,CAAhC;AAGAtJ,UAAAA,cAAc,CAAC8C,aAAf,GAA+B,IAA/B;AACD,SAND,MAMO;AACL;AACA;AACA;AACAsxB,UAAAA,mBAAmB,GAAG9qB,WAAtB;AACD;;AAEDyqB,QAAAA,eAAe,CAAC/zB,cAAD,EAAiBo0B,mBAAjB,CAAf;AACD;;AAED;AACE9B,QAAAA,iBAAiB,CAACtoC,OAAD,EAAUgW,cAAV,EAA0BuyB,YAA1B,EAAwCjpB,WAAxC,CAAjB;AACA,eAAOtJ,cAAc,CAACnV,KAAtB;AACD;AACF;;AAED,aAASmsB,cAAT,CAAwBhtB,OAAxB,EAAiCgW,cAAjC,EAAiDsJ,WAAjD,EAA8D;AAC5D,UAAIipB,YAAY,GAAGvyB,cAAc,CAACkT,YAAlC;AACAof,MAAAA,iBAAiB,CAACtoC,OAAD,EAAUgW,cAAV,EAA0BuyB,YAA1B,EAAwCjpB,WAAxC,CAAjB;AACA,aAAOtJ,cAAc,CAACnV,KAAtB;AACD;;AAED,aAASwpC,UAAT,CAAoBrqC,OAApB,EAA6BgW,cAA7B,EAA6CsJ,WAA7C,EAA0D;AACxD,UAAIipB,YAAY,GAAGvyB,cAAc,CAACkT,YAAf,CAA4BrkB,QAA/C;AACAyjC,MAAAA,iBAAiB,CAACtoC,OAAD,EAAUgW,cAAV,EAA0BuyB,YAA1B,EAAwCjpB,WAAxC,CAAjB;AACA,aAAOtJ,cAAc,CAACnV,KAAtB;AACD;;AAED,aAASypC,cAAT,CAAwBtqC,OAAxB,EAAiCgW,cAAjC,EAAiDsJ,WAAjD,EAA8D;AAC5D;AACEtJ,QAAAA,cAAc,CAACtW,KAAf,IAAwBlC,MAAxB;AAEA;AACE;AACA;AACA,cAAI2C,SAAS,GAAG6V,cAAc,CAAC7V,SAA/B;AACAA,UAAAA,SAAS,CAACugC,cAAV,GAA2B,CAA3B;AACAvgC,UAAAA,SAAS,CAAC0gC,qBAAV,GAAkC,CAAlC;AACD;AACF;AAED,UAAI/d,SAAS,GAAG9M,cAAc,CAACkT,YAA/B;AACA,UAAIqf,YAAY,GAAGzlB,SAAS,CAACje,QAA7B;AACAyjC,MAAAA,iBAAiB,CAACtoC,OAAD,EAAUgW,cAAV,EAA0BuyB,YAA1B,EAAwCjpB,WAAxC,CAAjB;AACA,aAAOtJ,cAAc,CAACnV,KAAtB;AACD;;AAED,aAAS0pC,SAAT,CAAmBvqC,OAAnB,EAA4BgW,cAA5B,EAA4C;AAC1C,UAAI8U,GAAG,GAAG9U,cAAc,CAAC8U,GAAzB;;AAEA,UAAI9qB,OAAO,KAAK,IAAZ,IAAoB8qB,GAAG,KAAK,IAA5B,IAAoC9qB,OAAO,KAAK,IAAZ,IAAoBA,OAAO,CAAC8qB,GAAR,KAAgBA,GAA5E,EAAiF;AAC/E;AACA9U,QAAAA,cAAc,CAACtW,KAAf,IAAwB3B,GAAxB;AACD;AACF;;AAED,aAAS4rC,uBAAT,CAAiC3pC,OAAjC,EAA0CgW,cAA1C,EAA0DjC,SAA1D,EAAqE+O,SAArE,EAAgFxD,WAAhF,EAA6F;AAC3F;AACE,YAAItJ,cAAc,CAAC9Z,IAAf,KAAwB8Z,cAAc,CAACgT,WAA3C,EAAwD;AACtD;AACA;AACA,cAAI0f,cAAc,GAAG30B,SAAS,CAAC2S,SAA/B;;AAEA,cAAIgiB,cAAJ,EAAoB;AAClBj0B,YAAAA,cAAc,CAACi0B,cAAD,EAAiB5lB,SAAjB,EAA4B;AAC1C,kBADc,EACN3mB,wBAAwB,CAAC4X,SAAD,CADlB,CAAd;AAED;AACF;AACF;AAED,UAAIzX,OAAJ;AAEA;AACE,YAAI8Z,eAAe,GAAGL,kBAAkB,CAACC,cAAD,EAAiBjC,SAAjB,EAA4B,IAA5B,CAAxC;AACAzX,QAAAA,OAAO,GAAGka,gBAAgB,CAACR,cAAD,EAAiBI,eAAjB,CAA1B;AACD;AAED,UAAImyB,YAAJ;AACA/nB,MAAAA,oBAAoB,CAACxK,cAAD,EAAiBsJ,WAAjB,CAApB;AAEA;AACEsoB,QAAAA,mBAAmB,CAAC5nC,OAApB,GAA8BgW,cAA9B;AACAqE,QAAAA,cAAc,CAAC,IAAD,CAAd;AACAkuB,QAAAA,YAAY,GAAGvT,eAAe,CAACh1B,OAAD,EAAUgW,cAAV,EAA0BjC,SAA1B,EAAqC+O,SAArC,EAAgDxmB,OAAhD,EAAyDgjB,WAAzD,CAA9B;AAEAjF,QAAAA,cAAc,CAAC,KAAD,CAAd;AACD;;AAED,UAAIra,OAAO,KAAK,IAAZ,IAAoB,CAAC6nC,gBAAzB,EAA2C;AACzClS,QAAAA,YAAY,CAAC31B,OAAD,EAAUgW,cAAV,EAA0BsJ,WAA1B,CAAZ;AACA,eAAOqpB,4BAA4B,CAAC3oC,OAAD,EAAUgW,cAAV,EAA0BsJ,WAA1B,CAAnC;AACD;;AAGDtJ,MAAAA,cAAc,CAACtW,KAAf,IAAwBpC,aAAxB;AACAgrC,MAAAA,iBAAiB,CAACtoC,OAAD,EAAUgW,cAAV,EAA0BuyB,YAA1B,EAAwCjpB,WAAxC,CAAjB;AACA,aAAOtJ,cAAc,CAACnV,KAAtB;AACD;;AAED,aAAS2pC,oBAAT,CAA8BxqC,OAA9B,EAAuCgW,cAAvC,EAAuDjC,SAAvD,EAAkE+O,SAAlE,EAA6ExD,WAA7E,EAA0F;AACxF;AACE;AACA,gBAAQmrB,WAAW,CAACz0B,cAAD,CAAnB;AACE,eAAK,KAAL;AACE;AACE,kBAAI00B,SAAS,GAAG10B,cAAc,CAAC7V,SAA/B;AACA,kBAAIyT,IAAI,GAAGoC,cAAc,CAAC9Z,IAA1B,CAFF,CAEkC;AAChC;;AAEA,kBAAIyuC,YAAY,GAAG,IAAI/2B,IAAJ,CAASoC,cAAc,CAACwS,aAAxB,EAAuCkiB,SAAS,CAACpuC,OAAjD,CAAnB;AACA,kBAAIkqB,KAAK,GAAGmkB,YAAY,CAACnkB,KAAzB;;AAEAkkB,cAAAA,SAAS,CAACnjB,OAAV,CAAkB/B,eAAlB,CAAkCklB,SAAlC,EAA6ClkB,KAA7C,EAAoD,IAApD;;AAEA;AACD;;AAEH,eAAK,IAAL;AACE;AACExQ,cAAAA,cAAc,CAACtW,KAAf,IAAwB7B,UAAxB;AACAmY,cAAAA,cAAc,CAACtW,KAAf,IAAwBjB,aAAxB,CAFF,CAEyC;;AAEvC,kBAAIwW,OAAO,GAAG,IAAI3U,KAAJ,CAAU,sCAAV,CAAd;AACA,kBAAIkK,IAAI,GAAGuB,iBAAiB,CAACuT,WAAD,CAA5B;AACAtJ,cAAAA,cAAc,CAAC/P,KAAf,GAAuBmG,UAAU,CAAC4J,cAAc,CAAC/P,KAAhB,EAAuBuE,IAAvB,CAAjC,CANF,CAMiE;;AAE/D,kBAAIwV,MAAM,GAAGgiB,sBAAsB,CAAChsB,cAAD,EAAiBirB,mBAAmB,CAAChsB,OAAD,EAAUe,cAAV,CAApC,EAA+DxL,IAA/D,CAAnC;AACAgY,cAAAA,qBAAqB,CAACxM,cAAD,EAAiBgK,MAAjB,CAArB;AACA;AACD;AA3BL;;AA8BA,YAAIhK,cAAc,CAAC9Z,IAAf,KAAwB8Z,cAAc,CAACgT,WAA3C,EAAwD;AACtD;AACA;AACA,cAAI0f,cAAc,GAAG30B,SAAS,CAAC2S,SAA/B;;AAEA,cAAIgiB,cAAJ,EAAoB;AAClBj0B,YAAAA,cAAc,CAACi0B,cAAD,EAAiB5lB,SAAjB,EAA4B;AAC1C,kBADc,EACN3mB,wBAAwB,CAAC4X,SAAD,CADlB,CAAd;AAED;AACF;AACF,OA3CuF,CA2CtF;AACF;AACA;;AAGA,UAAI62B,UAAJ;;AAEA,UAAI10B,iBAAiB,CAACnC,SAAD,CAArB,EAAkC;AAChC62B,QAAAA,UAAU,GAAG,IAAb;AACAvzB,QAAAA,mBAAmB,CAACrB,cAAD,CAAnB;AACD,OAHD,MAGO;AACL40B,QAAAA,UAAU,GAAG,KAAb;AACD;;AAEDpqB,MAAAA,oBAAoB,CAACxK,cAAD,EAAiBsJ,WAAjB,CAApB;AACA,UAAIpf,QAAQ,GAAG8V,cAAc,CAAC7V,SAA9B;AACA,UAAI+lB,YAAJ;;AAEA,UAAIhmB,QAAQ,KAAK,IAAjB,EAAuB;AACrB,YAAIF,OAAO,KAAK,IAAhB,EAAsB;AACpB;AACA;AACA;AACA;AACAA,UAAAA,OAAO,CAACR,SAAR,GAAoB,IAApB;AACAwW,UAAAA,cAAc,CAACxW,SAAf,GAA2B,IAA3B,CANoB,CAMa;;AAEjCwW,UAAAA,cAAc,CAACtW,KAAf,IAAwBnC,SAAxB;AACD,SAVoB,CAUnB;;;AAGFkqB,QAAAA,sBAAsB,CAACzR,cAAD,EAAiBjC,SAAjB,EAA4B+O,SAA5B,CAAtB;AACAsF,QAAAA,kBAAkB,CAACpS,cAAD,EAAiBjC,SAAjB,EAA4B+O,SAA5B,EAAuCxD,WAAvC,CAAlB;AACA4G,QAAAA,YAAY,GAAG,IAAf;AACD,OAhBD,MAgBO,IAAIlmB,OAAO,KAAK,IAAhB,EAAsB;AAC3B;AACAkmB,QAAAA,YAAY,GAAGqC,wBAAwB,CAACvS,cAAD,EAAiBjC,SAAjB,EAA4B+O,SAA5B,EAAuCxD,WAAvC,CAAvC;AACD,OAHM,MAGA;AACL4G,QAAAA,YAAY,GAAG4C,mBAAmB,CAAC9oB,OAAD,EAAUgW,cAAV,EAA0BjC,SAA1B,EAAqC+O,SAArC,EAAgDxD,WAAhD,CAAlC;AACD;;AAED,UAAIurB,cAAc,GAAGC,oBAAoB,CAAC9qC,OAAD,EAAUgW,cAAV,EAA0BjC,SAA1B,EAAqCmS,YAArC,EAAmD0kB,UAAnD,EAA+DtrB,WAA/D,CAAzC;AAEA;AACE,YAAI7Q,IAAI,GAAGuH,cAAc,CAAC7V,SAA1B;;AAEA,YAAI+lB,YAAY,IAAIzX,IAAI,CAACnY,KAAL,KAAewsB,SAAnC,EAA8C;AAC5C,cAAI,CAACqlB,4BAAL,EAAmC;AACjCjzC,YAAAA,KAAK,CAAC,2EAA2E,uDAA5E,EAAqIiI,yBAAyB,CAAC6Y,cAAD,CAAzB,IAA6C,aAAlL,CAAL;AACD;;AAEDmyB,UAAAA,4BAA4B,GAAG,IAA/B;AACD;AACF;AAED,aAAO0C,cAAP;AACD;;AAED,aAASC,oBAAT,CAA8B9qC,OAA9B,EAAuCgW,cAAvC,EAAuDjC,SAAvD,EAAkEmS,YAAlE,EAAgF0kB,UAAhF,EAA4FtrB,WAA5F,EAAyG;AACvG;AACAirB,MAAAA,SAAS,CAACvqC,OAAD,EAAUgW,cAAV,CAAT;AACA,UAAI+0B,eAAe,GAAG,CAAC/0B,cAAc,CAACtW,KAAf,GAAuB7B,UAAxB,MAAwCR,OAA9D;;AAEA,UAAI,CAAC6oB,YAAD,IAAiB,CAAC6kB,eAAtB,EAAuC;AACrC;AACA,YAAIH,UAAJ,EAAgB;AACdpzB,UAAAA,yBAAyB,CAACxB,cAAD,EAAiBjC,SAAjB,EAA4B,KAA5B,CAAzB;AACD;;AAED,eAAO40B,4BAA4B,CAAC3oC,OAAD,EAAUgW,cAAV,EAA0BsJ,WAA1B,CAAnC;AACD;;AAED,UAAIpf,QAAQ,GAAG8V,cAAc,CAAC7V,SAA9B,CAduG,CAc9D;;AAEzCynC,MAAAA,mBAAmB,CAAC5nC,OAApB,GAA8BgW,cAA9B;AACA,UAAIuyB,YAAJ;;AAEA,UAAIwC,eAAe,IAAI,OAAOh3B,SAAS,CAACqT,wBAAjB,KAA8C,UAArE,EAAiF;AAC/E;AACA;AACA;AACA;AACA;AACAmhB,QAAAA,YAAY,GAAG,IAAf;AAEA;AACErI,UAAAA,0BAA0B;AAC3B;AACF,OAXD,MAWO;AAEL;AACE7lB,UAAAA,cAAc,CAAC,IAAD,CAAd;AACAkuB,UAAAA,YAAY,GAAGroC,QAAQ,CAACzD,MAAT,EAAf;AAEA4d,UAAAA,cAAc,CAAC,KAAD,CAAd;AACD;AACF,OAtCsG,CAsCrG;;;AAGFrE,MAAAA,cAAc,CAACtW,KAAf,IAAwBpC,aAAxB;;AAEA,UAAI0C,OAAO,KAAK,IAAZ,IAAoB+qC,eAAxB,EAAyC;AACvC;AACA;AACA;AACA;AACAvC,QAAAA,+BAA+B,CAACxoC,OAAD,EAAUgW,cAAV,EAA0BuyB,YAA1B,EAAwCjpB,WAAxC,CAA/B;AACD,OAND,MAMO;AACLgpB,QAAAA,iBAAiB,CAACtoC,OAAD,EAAUgW,cAAV,EAA0BuyB,YAA1B,EAAwCjpB,WAAxC,CAAjB;AACD,OAnDsG,CAmDrG;AACF;;;AAGAtJ,MAAAA,cAAc,CAAC8C,aAAf,GAA+B5Y,QAAQ,CAACsmB,KAAxC,CAvDuG,CAuDxD;;AAE/C,UAAIokB,UAAJ,EAAgB;AACdpzB,QAAAA,yBAAyB,CAACxB,cAAD,EAAiBjC,SAAjB,EAA4B,IAA5B,CAAzB;AACD;;AAED,aAAOiC,cAAc,CAACnV,KAAtB;AACD;;AAED,aAASmqC,mBAAT,CAA6Bh1B,cAA7B,EAA6C;AAC3C,UAAIpR,IAAI,GAAGoR,cAAc,CAAC7V,SAA1B;;AAEA,UAAIyE,IAAI,CAAC6gC,cAAT,EAAyB;AACvB3uB,QAAAA,yBAAyB,CAACd,cAAD,EAAiBpR,IAAI,CAAC6gC,cAAtB,EAAsC7gC,IAAI,CAAC6gC,cAAL,KAAwB7gC,IAAI,CAACtI,OAAnE,CAAzB;AACD,OAFD,MAEO,IAAIsI,IAAI,CAACtI,OAAT,EAAkB;AACvB;AACAwa,QAAAA,yBAAyB,CAACd,cAAD,EAAiBpR,IAAI,CAACtI,OAAtB,EAA+B,KAA/B,CAAzB;AACD;;AAEDs0B,MAAAA,iBAAiB,CAAC5a,cAAD,EAAiBpR,IAAI,CAAC8K,aAAtB,CAAjB;AACD;;AAED,aAASu7B,cAAT,CAAwBjrC,OAAxB,EAAiCgW,cAAjC,EAAiDsJ,WAAjD,EAA8D;AAC5D0rB,MAAAA,mBAAmB,CAACh1B,cAAD,CAAnB;;AAEA,UAAIhW,OAAO,KAAK,IAAhB,EAAsB;AACpB,cAAM,IAAIM,KAAJ,CAAU,sDAAV,CAAN;AACD;;AAED,UAAIwiB,SAAS,GAAG9M,cAAc,CAACkT,YAA/B;AACA,UAAIrG,SAAS,GAAG7M,cAAc,CAAC8C,aAA/B;AACA,UAAIoyB,YAAY,GAAGroB,SAAS,CAACxO,OAA7B;AACA2N,MAAAA,gBAAgB,CAAChiB,OAAD,EAAUgW,cAAV,CAAhB;AACAiN,MAAAA,kBAAkB,CAACjN,cAAD,EAAiB8M,SAAjB,EAA4B,IAA5B,EAAkCxD,WAAlC,CAAlB;AACA,UAAIyD,SAAS,GAAG/M,cAAc,CAAC8C,aAA/B;AACA,UAAIlU,IAAI,GAAGoR,cAAc,CAAC7V,SAA1B,CAb4D,CAc5D;;AAGA,UAAIooC,YAAY,GAAGxlB,SAAS,CAAC1O,OAA7B;AAEA;AAEE,YAAIk0B,YAAY,KAAK2C,YAArB,EAAmC;AACjC,iBAAOvC,4BAA4B,CAAC3oC,OAAD,EAAUgW,cAAV,EAA0BsJ,WAA1B,CAAnC;AACD;;AAEDgpB,QAAAA,iBAAiB,CAACtoC,OAAD,EAAUgW,cAAV,EAA0BuyB,YAA1B,EAAwCjpB,WAAxC,CAAjB;AACD;AAED,aAAOtJ,cAAc,CAACnV,KAAtB;AACD;;AAED,aAASsqC,qBAAT,CAA+BnrC,OAA/B,EAAwCgW,cAAxC,EAAwDsJ,WAAxD,EAAqE;AACnE2R,MAAAA,eAAe,CAACjb,cAAD,CAAf;AAEA,UAAI9Z,IAAI,GAAG8Z,cAAc,CAAC9Z,IAA1B;AACA,UAAI4mB,SAAS,GAAG9M,cAAc,CAACkT,YAA/B;AACA,UAAIsgB,SAAS,GAAGxpC,OAAO,KAAK,IAAZ,GAAmBA,OAAO,CAACwoB,aAA3B,GAA2C,IAA3D;AACA,UAAI+f,YAAY,GAAGzlB,SAAS,CAACje,QAA7B;;AAEA,UAAI2kC,SAAS,KAAK,IAAd,IAAsBn5B,oBAAoB,EAA9C,EAAkD;AAChD;AACA;AACA2F,QAAAA,cAAc,CAACtW,KAAf,IAAwB/B,YAAxB;AACD;;AAED4sC,MAAAA,SAAS,CAACvqC,OAAD,EAAUgW,cAAV,CAAT;AACAsyB,MAAAA,iBAAiB,CAACtoC,OAAD,EAAUgW,cAAV,EAA0BuyB,YAA1B,EAAwCjpB,WAAxC,CAAjB;AACA,aAAOtJ,cAAc,CAACnV,KAAtB;AACD;;AAED,aAASuqC,gBAAT,CAA0BprC,OAA1B,EAAmCgW,cAAnC,EAAmD;AACjD;AAGA,aAAO,IAAP;AACD;;AAED,aAASq1B,kBAAT,CAA4BC,QAA5B,EAAsCt1B,cAAtC,EAAsDgT,WAAtD,EAAmE1J,WAAnE,EAAgF;AAC9E,UAAIgsB,QAAQ,KAAK,IAAjB,EAAuB;AACrB;AACA;AACA;AACA;AACAA,QAAAA,QAAQ,CAAC9rC,SAAT,GAAqB,IAArB;AACAwW,QAAAA,cAAc,CAACxW,SAAf,GAA2B,IAA3B,CANqB,CAMY;;AAEjCwW,QAAAA,cAAc,CAACtW,KAAf,IAAwBnC,SAAxB;AACD;;AAED,UAAIjH,KAAK,GAAG0f,cAAc,CAACkT,YAA3B;AACA,UAAIvsB,aAAa,GAAGqsB,WAApB;AACA,UAAIpsB,OAAO,GAAGD,aAAa,CAACE,QAA5B;AACA,UAAIC,IAAI,GAAGH,aAAa,CAACI,KAAzB;AACA,UAAIgX,SAAS,GAAGjX,IAAI,CAACF,OAAD,CAApB,CAhB8E,CAgB/C;;AAE/BoZ,MAAAA,cAAc,CAAC9Z,IAAf,GAAsB6X,SAAtB;AACA,UAAIw3B,WAAW,GAAGv1B,cAAc,CAAC5Z,GAAf,GAAqBovC,uBAAuB,CAACz3B,SAAD,CAA9D;AACA,UAAI03B,aAAa,GAAGvtB,mBAAmB,CAACnK,SAAD,EAAYzd,KAAZ,CAAvC;AACA,UAAIuK,KAAJ;;AAEA,cAAQ0qC,WAAR;AACE,aAAKhzC,iBAAL;AACE;AACE;AACE0wC,cAAAA,8BAA8B,CAACjzB,cAAD,EAAiBjC,SAAjB,CAA9B;AACAiC,cAAAA,cAAc,CAAC9Z,IAAf,GAAsB6X,SAAS,GAAGi1B,8BAA8B,CAACj1B,SAAD,CAAhE;AACD;AAEDlT,YAAAA,KAAK,GAAG8oC,uBAAuB,CAAC,IAAD,EAAO3zB,cAAP,EAAuBjC,SAAvB,EAAkC03B,aAAlC,EAAiDnsB,WAAjD,CAA/B;AACA,mBAAOze,KAAP;AACD;;AAEH,aAAKrI,cAAL;AACE;AACE;AACEwd,cAAAA,cAAc,CAAC9Z,IAAf,GAAsB6X,SAAS,GAAG23B,2BAA2B,CAAC33B,SAAD,CAA7D;AACD;AAEDlT,YAAAA,KAAK,GAAG2pC,oBAAoB,CAAC,IAAD,EAAOx0B,cAAP,EAAuBjC,SAAvB,EAAkC03B,aAAlC,EAAiDnsB,WAAjD,CAA5B;AACA,mBAAOze,KAAP;AACD;;AAEH,aAAK3H,UAAL;AACE;AACE;AACE8c,cAAAA,cAAc,CAAC9Z,IAAf,GAAsB6X,SAAS,GAAG43B,gCAAgC,CAAC53B,SAAD,CAAlE;AACD;AAEDlT,YAAAA,KAAK,GAAG4nC,gBAAgB,CAAC,IAAD,EAAOzyB,cAAP,EAAuBjC,SAAvB,EAAkC03B,aAAlC,EAAiDnsB,WAAjD,CAAxB;AACA,mBAAOze,KAAP;AACD;;AAEH,aAAKxH,aAAL;AACE;AACE;AACE,kBAAI2c,cAAc,CAAC9Z,IAAf,KAAwB8Z,cAAc,CAACgT,WAA3C,EAAwD;AACtD,oBAAI0gB,cAAc,GAAG31B,SAAS,CAAC2S,SAA/B;;AAEA,oBAAIgjB,cAAJ,EAAoB;AAClBj1B,kBAAAA,cAAc,CAACi1B,cAAD,EAAiB+B,aAAjB,EAAgC;AAC9C,wBADc,EACNtvC,wBAAwB,CAAC4X,SAAD,CADlB,CAAd;AAED;AACF;AACF;AAEDlT,YAAAA,KAAK,GAAG+nC,mBAAmB,CAAC,IAAD,EAAO5yB,cAAP,EAAuBjC,SAAvB,EAAkCmK,mBAAmB,CAACnK,SAAS,CAAC7X,IAAX,EAAiBuvC,aAAjB,CAArD,EAAsF;AACjHnsB,YAAAA,WAD2B,CAA3B;AAEA,mBAAOze,KAAP;AACD;AAhDL;;AAmDA,UAAI+qC,IAAI,GAAG,EAAX;AAEA;AACE,YAAI73B,SAAS,KAAK,IAAd,IAAsB,OAAOA,SAAP,KAAqB,QAA3C,IAAuDA,SAAS,CAAC1X,QAAV,KAAuBxB,eAAlF,EAAmG;AACjG+wC,UAAAA,IAAI,GAAG,2DAAP;AACD;AACF,OAhF6E,CAgF5E;AACF;AACA;;AAGA,YAAM,IAAItrC,KAAJ,CAAU,mEAAmEyT,SAAnE,GAA+E,IAA/E,IAAuF,2DAA2D63B,IAAlJ,CAAV,CAAN;AACD;;AAED,aAASC,6BAAT,CAAuCP,QAAvC,EAAiDt1B,cAAjD,EAAiEjC,SAAjE,EAA4E+O,SAA5E,EAAuFxD,WAAvF,EAAoG;AAClG,UAAIgsB,QAAQ,KAAK,IAAjB,EAAuB;AACrB;AACA;AACA;AACA;AACAA,QAAAA,QAAQ,CAAC9rC,SAAT,GAAqB,IAArB;AACAwW,QAAAA,cAAc,CAACxW,SAAf,GAA2B,IAA3B,CANqB,CAMY;;AAEjCwW,QAAAA,cAAc,CAACtW,KAAf,IAAwBnC,SAAxB;AACD,OAViG,CAUhG;;;AAGFyY,MAAAA,cAAc,CAAC5Z,GAAf,GAAqB5D,cAArB,CAbkG,CAa7D;AACrC;AACA;AACA;;AAEA,UAAIoyC,UAAJ;;AAEA,UAAI10B,iBAAiB,CAACnC,SAAD,CAArB,EAAkC;AAChC62B,QAAAA,UAAU,GAAG,IAAb;AACAvzB,QAAAA,mBAAmB,CAACrB,cAAD,CAAnB;AACD,OAHD,MAGO;AACL40B,QAAAA,UAAU,GAAG,KAAb;AACD;;AAEDpqB,MAAAA,oBAAoB,CAACxK,cAAD,EAAiBsJ,WAAjB,CAApB;AACAmI,MAAAA,sBAAsB,CAACzR,cAAD,EAAiBjC,SAAjB,EAA4B+O,SAA5B,CAAtB;AACAsF,MAAAA,kBAAkB,CAACpS,cAAD,EAAiBjC,SAAjB,EAA4B+O,SAA5B,EAAuCxD,WAAvC,CAAlB;AACA,aAAOwrB,oBAAoB,CAAC,IAAD,EAAO90B,cAAP,EAAuBjC,SAAvB,EAAkC,IAAlC,EAAwC62B,UAAxC,EAAoDtrB,WAApD,CAA3B;AACD;;AAED,aAASwsB,2BAAT,CAAqCR,QAArC,EAA+Ct1B,cAA/C,EAA+DjC,SAA/D,EAA0EuL,WAA1E,EAAuF;AACrF,UAAIgsB,QAAQ,KAAK,IAAjB,EAAuB;AACrB;AACA;AACA;AACA;AACAA,QAAAA,QAAQ,CAAC9rC,SAAT,GAAqB,IAArB;AACAwW,QAAAA,cAAc,CAACxW,SAAf,GAA2B,IAA3B,CANqB,CAMY;;AAEjCwW,QAAAA,cAAc,CAACtW,KAAf,IAAwBnC,SAAxB;AACD;;AAED,UAAIjH,KAAK,GAAG0f,cAAc,CAACkT,YAA3B;AACA,UAAI5sB,OAAJ;AAEA;AACE,YAAI8Z,eAAe,GAAGL,kBAAkB,CAACC,cAAD,EAAiBjC,SAAjB,EAA4B,KAA5B,CAAxC;AACAzX,QAAAA,OAAO,GAAGka,gBAAgB,CAACR,cAAD,EAAiBI,eAAjB,CAA1B;AACD;AAEDoK,MAAAA,oBAAoB,CAACxK,cAAD,EAAiBsJ,WAAjB,CAApB;AACA,UAAIznB,KAAJ;AAEA;AACE,YAAIkc,SAAS,CAAC/d,SAAV,IAAuB,OAAO+d,SAAS,CAAC/d,SAAV,CAAoByG,MAA3B,KAAsC,UAAjE,EAA6E;AAC3E,cAAIoY,aAAa,GAAG1Y,wBAAwB,CAAC4X,SAAD,CAAxB,IAAuC,SAA3D;;AAEA,cAAI,CAAC+zB,oBAAoB,CAACjzB,aAAD,CAAzB,EAA0C;AACxC3f,YAAAA,KAAK,CAAC,+FAA+F,8EAAhG,EAAgL2f,aAAhL,EAA+LA,aAA/L,CAAL;AAEAizB,YAAAA,oBAAoB,CAACjzB,aAAD,CAApB,GAAsC,IAAtC;AACD;AACF;;AAED,YAAImB,cAAc,CAAC+E,IAAf,GAAsBxU,gBAA1B,EAA4C;AAC1CgU,UAAAA,uBAAuB,CAACG,0BAAxB,CAAmD1E,cAAnD,EAAmE,IAAnE;AACD;;AAEDqE,QAAAA,cAAc,CAAC,IAAD,CAAd;AACAutB,QAAAA,mBAAmB,CAAC5nC,OAApB,GAA8BgW,cAA9B;AACAne,QAAAA,KAAK,GAAGm9B,eAAe,CAAC,IAAD,EAAOhf,cAAP,EAAuBjC,SAAvB,EAAkCzd,KAAlC,EAAyCgG,OAAzC,EAAkDgjB,WAAlD,CAAvB;AACAjF,QAAAA,cAAc,CAAC,KAAD,CAAd;AACD;AAGDrE,MAAAA,cAAc,CAACtW,KAAf,IAAwBpC,aAAxB;AAEA;AACE;AACA;AACA,YAAI,OAAOzF,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,KAAK,IAAvC,IAA+C,OAAOA,KAAK,CAAC4E,MAAb,KAAwB,UAAvE,IAAqF5E,KAAK,CAACwE,QAAN,KAAmBmJ,SAA5G,EAAuH;AACrH,cAAIwiB,cAAc,GAAG7rB,wBAAwB,CAAC4X,SAAD,CAAxB,IAAuC,SAA5D;;AAEA,cAAI,CAACg0B,kCAAkC,CAAC/f,cAAD,CAAvC,EAAyD;AACvD9yB,YAAAA,KAAK,CAAC,4FAA4F,6DAA5F,GAA4J,wFAA5J,GAAuP,mFAAvP,GAA6U,uCAA9U,EAAuX8yB,cAAvX,EAAuYA,cAAvY,EAAuZA,cAAvZ,CAAL;AAEA+f,YAAAA,kCAAkC,CAAC/f,cAAD,CAAlC,GAAqD,IAArD;AACD;AACF;AACF;;AAED,WAAK;AACL;AACC,aAAOnwB,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,KAAK,IAAvC,IAA+C,OAAOA,KAAK,CAAC4E,MAAb,KAAwB,UAAvE,IAAqF5E,KAAK,CAACwE,QAAN,KAAmBmJ,SAFzG,EAEoH;AAClH;AACE,cAAIumC,eAAe,GAAG5vC,wBAAwB,CAAC4X,SAAD,CAAxB,IAAuC,SAA7D;;AAEA,cAAI,CAACg0B,kCAAkC,CAACgE,eAAD,CAAvC,EAA0D;AACxD72C,YAAAA,KAAK,CAAC,4FAA4F,6DAA5F,GAA4J,wFAA5J,GAAuP,mFAAvP,GAA6U,uCAA9U,EAAuX62C,eAAvX,EAAwYA,eAAxY,EAAyZA,eAAzZ,CAAL;AAEAhE,YAAAA,kCAAkC,CAACgE,eAAD,CAAlC,GAAsD,IAAtD;AACD;AACF,SATiH,CAShH;;AAGF/1B,QAAAA,cAAc,CAAC5Z,GAAf,GAAqB5D,cAArB,CAZkH,CAY7E;;AAErCwd,QAAAA,cAAc,CAAC8C,aAAf,GAA+B,IAA/B;AACA9C,QAAAA,cAAc,CAACmK,WAAf,GAA6B,IAA7B,CAfkH,CAe/E;AACnC;AACA;;AAEA,YAAIyqB,UAAU,GAAG,KAAjB;;AAEA,YAAI10B,iBAAiB,CAACnC,SAAD,CAArB,EAAkC;AAChC62B,UAAAA,UAAU,GAAG,IAAb;AACAvzB,UAAAA,mBAAmB,CAACrB,cAAD,CAAnB;AACD,SAHD,MAGO;AACL40B,UAAAA,UAAU,GAAG,KAAb;AACD;;AAED50B,QAAAA,cAAc,CAAC8C,aAAf,GAA+BjhB,KAAK,CAAC2uB,KAAN,KAAgB,IAAhB,IAAwB3uB,KAAK,CAAC2uB,KAAN,KAAgBhhB,SAAxC,GAAoD3N,KAAK,CAAC2uB,KAA1D,GAAkE,IAAjG;AACA7E,QAAAA,qBAAqB,CAAC3L,cAAD,CAArB;AACAsR,QAAAA,kBAAkB,CAACtR,cAAD,EAAiBne,KAAjB,CAAlB;AACAuwB,QAAAA,kBAAkB,CAACpS,cAAD,EAAiBjC,SAAjB,EAA4Bzd,KAA5B,EAAmCgpB,WAAnC,CAAlB;AACA,eAAOwrB,oBAAoB,CAAC,IAAD,EAAO90B,cAAP,EAAuBjC,SAAvB,EAAkC,IAAlC,EAAwC62B,UAAxC,EAAoDtrB,WAApD,CAA3B;AACD,OAnCD,MAmCO;AACL;AACAtJ,QAAAA,cAAc,CAAC5Z,GAAf,GAAqB7D,iBAArB;AAEA+vC,QAAAA,iBAAiB,CAAC,IAAD,EAAOtyB,cAAP,EAAuBne,KAAvB,EAA8BynB,WAA9B,CAAjB;AAEA;AACE2pB,UAAAA,8BAA8B,CAACjzB,cAAD,EAAiBjC,SAAjB,CAA9B;AACD;AAED,eAAOiC,cAAc,CAACnV,KAAtB;AACD;AACF;;AAED,aAASooC,8BAAT,CAAwCjzB,cAAxC,EAAwDjC,SAAxD,EAAmE;AACjE;AACE,YAAIA,SAAJ,EAAe;AACb,cAAIA,SAAS,CAAC4C,iBAAd,EAAiC;AAC/BzhB,YAAAA,KAAK,CAAC,uEAAD,EAA0E6e,SAAS,CAACjY,WAAV,IAAyBiY,SAAS,CAAC/X,IAAnC,IAA2C,WAArH,CAAL;AACD;AACF;;AAED,YAAIga,cAAc,CAAC8U,GAAf,KAAuB,IAA3B,EAAiC;AAC/B,cAAIxnB,IAAI,GAAG,EAAX;AACA,cAAI0oC,SAAS,GAAGhyB,mCAAmC,EAAnD;;AAEA,cAAIgyB,SAAJ,EAAe;AACb1oC,YAAAA,IAAI,IAAI,qCAAqC0oC,SAArC,GAAiD,IAAzD;AACD;;AAED,cAAIC,UAAU,GAAGD,SAAS,IAAI,EAA9B;AACA,cAAIE,WAAW,GAAGl2B,cAAc,CAAC4D,YAAjC;;AAEA,cAAIsyB,WAAJ,EAAiB;AACfD,YAAAA,UAAU,GAAGC,WAAW,CAACC,QAAZ,GAAuB,GAAvB,GAA6BD,WAAW,CAACE,UAAtD;AACD;;AAED,cAAI,CAAClE,wBAAwB,CAAC+D,UAAD,CAA7B,EAA2C;AACzC/D,YAAAA,wBAAwB,CAAC+D,UAAD,CAAxB,GAAuC,IAAvC;AAEA/2C,YAAAA,KAAK,CAAC,+CAA+C,yCAA/C,GAA2F,2CAA5F,EAAyIoO,IAAzI,CAAL;AACD;AACF;;AAED,YAAI,OAAOyQ,SAAS,CAACuR,wBAAjB,KAA8C,UAAlD,EAA8D;AAC5D,cAAI+mB,eAAe,GAAGlwC,wBAAwB,CAAC4X,SAAD,CAAxB,IAAuC,SAA7D;;AAEA,cAAI,CAACk0B,8CAA8C,CAACoE,eAAD,CAAnD,EAAsE;AACpEn3C,YAAAA,KAAK,CAAC,kEAAD,EAAqEm3C,eAArE,CAAL;AAEApE,YAAAA,8CAA8C,CAACoE,eAAD,CAA9C,GAAkE,IAAlE;AACD;AACF;;AAED,YAAI,OAAOt4B,SAAS,CAAC4S,WAAjB,KAAiC,QAAjC,IAA6C5S,SAAS,CAAC4S,WAAV,KAA0B,IAA3E,EAAiF;AAC/E,cAAI2lB,eAAe,GAAGnwC,wBAAwB,CAAC4X,SAAD,CAAxB,IAAuC,SAA7D;;AAEA,cAAI,CAACi0B,0CAA0C,CAACsE,eAAD,CAA/C,EAAkE;AAChEp3C,YAAAA,KAAK,CAAC,qDAAD,EAAwDo3C,eAAxD,CAAL;AAEAtE,YAAAA,0CAA0C,CAACsE,eAAD,CAA1C,GAA8D,IAA9D;AACD;AACF;AACF;AACF;;AAED,QAAIC,gBAAgB,GAAG;AACrBna,MAAAA,UAAU,EAAE,IADS;AAErBoa,MAAAA,WAAW,EAAE,IAFQ;AAGrBC,MAAAA,SAAS,EAAE1lC;AAHU,KAAvB;;AAMA,aAAS2lC,2BAAT,CAAqCptB,WAArC,EAAkD;AAChD,aAAO;AACLuqB,QAAAA,SAAS,EAAEvqB,WADN;AAELwqB,QAAAA,SAAS,EAAElG,iBAAiB;AAFvB,OAAP;AAID;;AAED,aAAS+I,4BAAT,CAAsCC,kBAAtC,EAA0DttB,WAA1D,EAAuE;AACrE,UAAIwqB,SAAS,GAAG,IAAhB;AAEA,aAAO;AACLD,QAAAA,SAAS,EAAEz9B,UAAU,CAACwgC,kBAAkB,CAAC/C,SAApB,EAA+BvqB,WAA/B,CADhB;AAELwqB,QAAAA,SAAS,EAAEA;AAFN,OAAP;AAID,KAh0Ua,CAg0UZ;;;AAGF,aAAS+C,sBAAT,CAAgCxF,eAAhC,EAAiDrnC,OAAjD,EAA0DgW,cAA1D,EAA0EsJ,WAA1E,EAAuF;AACrF;AACA;AACA;AACA,UAAItf,OAAO,KAAK,IAAhB,EAAsB;AACpB,YAAI8sC,aAAa,GAAG9sC,OAAO,CAAC8Y,aAA5B;;AAEA,YAAIg0B,aAAa,KAAK,IAAtB,EAA4B;AAC1B;AACA;AACA;AACA;AACA,iBAAO,KAAP;AACD;AACF,OAdoF,CAcnF;;;AAGF,aAAOtb,kBAAkB,CAAC6V,eAAD,EAAkB/V,qBAAlB,CAAzB;AACD;;AAED,aAASyb,6BAAT,CAAuC/sC,OAAvC,EAAgDsf,WAAhD,EAA6D;AAC3D;AACA,aAAOjT,WAAW,CAACrM,OAAO,CAACwf,UAAT,EAAqBF,WAArB,CAAlB;AACD;;AAED,aAAS0tB,uBAAT,CAAiChtC,OAAjC,EAA0CgW,cAA1C,EAA0DsJ,WAA1D,EAAuE;AACrE,UAAIwD,SAAS,GAAG9M,cAAc,CAACkT,YAA/B,CADqE,CACxB;;AAE7C;AACE,YAAI+jB,aAAa,CAACj3B,cAAD,CAAjB,EAAmC;AACjCA,UAAAA,cAAc,CAACtW,KAAf,IAAwB7B,UAAxB;AACD;AACF;AAED,UAAIwpC,eAAe,GAAG9V,mBAAmB,CAACvxB,OAA1C;AACA,UAAIktC,YAAY,GAAG,KAAnB;AACA,UAAI1a,UAAU,GAAG,CAACxc,cAAc,CAACtW,KAAf,GAAuB7B,UAAxB,MAAwCR,OAAzD;;AAEA,UAAIm1B,UAAU,IAAIqa,sBAAsB,CAACxF,eAAD,EAAkBrnC,OAAlB,CAAxC,EAAoE;AAClE;AACA;AACAktC,QAAAA,YAAY,GAAG,IAAf;AACAl3B,QAAAA,cAAc,CAACtW,KAAf,IAAwB,CAAC7B,UAAzB;AACD,OALD,MAKO;AACL;AACA,YAAImC,OAAO,KAAK,IAAZ,IAAoBA,OAAO,CAAC8Y,aAAR,KAA0B,IAAlD,EAAwD;AACtD;AACA;AACA;AACA;AACA;AACEuuB,YAAAA,eAAe,GAAGxV,yBAAyB,CAACwV,eAAD,EAAkBhW,8BAAlB,CAA3C;AACD;AACF;AACF;;AAEDgW,MAAAA,eAAe,GAAG3V,gCAAgC,CAAC2V,eAAD,CAAlD;AACAtV,MAAAA,mBAAmB,CAAC/b,cAAD,EAAiBqxB,eAAjB,CAAnB,CAhCqE,CAgCf;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAIrnC,OAAO,KAAK,IAAhB,EAAsB;AAEpB,YAAImtC,mBAAmB,GAAGrqB,SAAS,CAACje,QAApC;AACA,YAAIuoC,oBAAoB,GAAGtqB,SAAS,CAACuqB,QAArC;;AAEA,YAAIH,YAAJ,EAAkB;AAChB,cAAII,gBAAgB,GAAGC,6BAA6B,CAACv3B,cAAD,EAAiBm3B,mBAAjB,EAAsCC,oBAAtC,EAA4D9tB,WAA5D,CAApD;AACA,cAAIkuB,oBAAoB,GAAGx3B,cAAc,CAACnV,KAA1C;AACA2sC,UAAAA,oBAAoB,CAAC10B,aAArB,GAAqC4zB,2BAA2B,CAACptB,WAAD,CAAhE;AACAtJ,UAAAA,cAAc,CAAC8C,aAAf,GAA+ByzB,gBAA/B;AACA,iBAAOe,gBAAP;AACD,SAND,MAMO;AACL,iBAAOG,4BAA4B,CAACz3B,cAAD,EAAiBm3B,mBAAjB,CAAnC;AACD;AACF,OAdD,MAcO;AACL;AACA;AACA;AACA,YAAItqB,SAAS,GAAG7iB,OAAO,CAAC8Y,aAAxB;;AAEA,YAAI+J,SAAS,KAAK,IAAlB,EAAwB;AAEtB,cAAIqqB,YAAJ,EAAkB;AAChB,gBAAIQ,sBAAsB,GAAG5qB,SAAS,CAACuqB,QAAvC;AACA,gBAAIM,qBAAqB,GAAG7qB,SAAS,CAACje,QAAtC;;AAEA,gBAAI+oC,sBAAsB,GAAGC,8BAA8B,CAAC7tC,OAAD,EAAUgW,cAAV,EAA0B23B,qBAA1B,EAAiDD,sBAAjD,EAAyEpuB,WAAzE,CAA3D;;AAEA,gBAAIwuB,sBAAsB,GAAG93B,cAAc,CAACnV,KAA5C;AACA,gBAAI+rC,kBAAkB,GAAG5sC,OAAO,CAACa,KAAR,CAAciY,aAAvC;AACAg1B,YAAAA,sBAAsB,CAACh1B,aAAvB,GAAuC8zB,kBAAkB,KAAK,IAAvB,GAA8BF,2BAA2B,CAACptB,WAAD,CAAzD,GAAyEqtB,4BAA4B,CAACC,kBAAD,EAAqBttB,WAArB,CAA5I;AACAwuB,YAAAA,sBAAsB,CAACtuB,UAAvB,GAAoCutB,6BAA6B,CAAC/sC,OAAD,EAAUsf,WAAV,CAAjE;AACAtJ,YAAAA,cAAc,CAAC8C,aAAf,GAA+ByzB,gBAA/B;AACA,mBAAOqB,sBAAP;AACD,WAZD,MAYO;AACL,gBAAIG,qBAAqB,GAAGjrB,SAAS,CAACje,QAAtC;;AAEA,gBAAImpC,sBAAsB,GAAGC,6BAA6B,CAACjuC,OAAD,EAAUgW,cAAV,EAA0B+3B,qBAA1B,EAAiDzuB,WAAjD,CAA1D;;AAEAtJ,YAAAA,cAAc,CAAC8C,aAAf,GAA+B,IAA/B;AACA,mBAAOk1B,sBAAP;AACD;AACF,SAtBD,MAsBO;AACL;AACA,cAAId,YAAJ,EAAkB;AAChB;AACA,gBAAIgB,sBAAsB,GAAGprB,SAAS,CAACuqB,QAAvC;AACA,gBAAIc,qBAAqB,GAAGrrB,SAAS,CAACje,QAAtC;;AAEA,gBAAIupC,uBAAuB,GAAGP,8BAA8B,CAAC7tC,OAAD,EAAUgW,cAAV,EAA0Bm4B,qBAA1B,EAAiDD,sBAAjD,EAAyE5uB,WAAzE,CAA5D;;AAEA,gBAAI+uB,sBAAsB,GAAGr4B,cAAc,CAACnV,KAA5C;AACA,gBAAIytC,mBAAmB,GAAGtuC,OAAO,CAACa,KAAR,CAAciY,aAAxC;AACAu1B,YAAAA,sBAAsB,CAACv1B,aAAvB,GAAuCw1B,mBAAmB,KAAK,IAAxB,GAA+B5B,2BAA2B,CAACptB,WAAD,CAA1D,GAA0EqtB,4BAA4B,CAAC2B,mBAAD,EAAsBhvB,WAAtB,CAA7I;AACA+uB,YAAAA,sBAAsB,CAAC7uB,UAAvB,GAAoCutB,6BAA6B,CAAC/sC,OAAD,EAAUsf,WAAV,CAAjE,CAVgB,CAUyE;AACzF;;AAEAtJ,YAAAA,cAAc,CAAC8C,aAAf,GAA+ByzB,gBAA/B;AACA,mBAAO6B,uBAAP;AACD,WAfD,MAeO;AACL;AACA;AACA,gBAAIG,qBAAqB,GAAGzrB,SAAS,CAACje,QAAtC;;AAEA,gBAAI2pC,sBAAsB,GAAGP,6BAA6B,CAACjuC,OAAD,EAAUgW,cAAV,EAA0Bu4B,qBAA1B,EAAiDjvB,WAAjD,CAA1D;;AAEAtJ,YAAAA,cAAc,CAAC8C,aAAf,GAA+B,IAA/B;AACA,mBAAO01B,sBAAP;AACD;AACF;AACF;AACF;;AAED,aAASf,4BAAT,CAAsCz3B,cAAtC,EAAsDy4B,eAAtD,EAAuEnvB,WAAvE,EAAoF;AAClF,UAAIvE,IAAI,GAAG/E,cAAc,CAAC+E,IAA1B;AACA,UAAI2zB,iBAAiB,GAAG;AACtB3zB,QAAAA,IAAI,EAAE,SADgB;AAEtBlW,QAAAA,QAAQ,EAAE4pC;AAFY,OAAxB;AAIA,UAAIjB,oBAAoB,GAAGmB,iCAAiC,CAACD,iBAAD,EAAoB3zB,IAApB,CAA5D;AACAyyB,MAAAA,oBAAoB,CAAC7tC,MAArB,GAA8BqW,cAA9B;AACAA,MAAAA,cAAc,CAACnV,KAAf,GAAuB2sC,oBAAvB;AACA,aAAOA,oBAAP;AACD;;AAED,aAASD,6BAAT,CAAuCv3B,cAAvC,EAAuDy4B,eAAvD,EAAwEG,gBAAxE,EAA0FtvB,WAA1F,EAAuG;AACrG,UAAIvE,IAAI,GAAG/E,cAAc,CAAC+E,IAA1B;AACA,UAAI8zB,yBAAyB,GAAG74B,cAAc,CAACnV,KAA/C;AACA,UAAI6tC,iBAAiB,GAAG;AACtB3zB,QAAAA,IAAI,EAAE,QADgB;AAEtBlW,QAAAA,QAAQ,EAAE4pC;AAFY,OAAxB;AAIA,UAAIjB,oBAAJ;AACA,UAAIsB,qBAAJ;;AAEA,UAAI,CAAC/zB,IAAI,GAAG1U,cAAR,MAA4BD,MAA5B,IAAsCyoC,yBAAyB,KAAK,IAAxE,EAA8E;AAC5E;AACA;AACArB,QAAAA,oBAAoB,GAAGqB,yBAAvB;AACArB,QAAAA,oBAAoB,CAAChuB,UAArB,GAAkC1Y,OAAlC;AACA0mC,QAAAA,oBAAoB,CAACtkB,YAArB,GAAoCwlB,iBAApC;;AAEA,YAAK14B,cAAc,CAAC+E,IAAf,GAAsBzU,WAA3B,EAAwC;AACtC;AACA;AACA;AACA;AACAknC,UAAAA,oBAAoB,CAAClN,cAArB,GAAsC,CAAtC;AACAkN,UAAAA,oBAAoB,CAACvN,eAArB,GAAuC,CAAC,CAAxC;AACAuN,UAAAA,oBAAoB,CAACjN,gBAArB,GAAwC,CAAxC;AACAiN,UAAAA,oBAAoB,CAACrI,gBAArB,GAAwC,CAAxC;AACD;;AAED2J,QAAAA,qBAAqB,GAAGthB,uBAAuB,CAACohB,gBAAD,EAAmB7zB,IAAnB,EAAyBuE,WAAzB,EAAsC,IAAtC,CAA/C;AACD,OAnBD,MAmBO;AACLkuB,QAAAA,oBAAoB,GAAGmB,iCAAiC,CAACD,iBAAD,EAAoB3zB,IAApB,CAAxD;AACA+zB,QAAAA,qBAAqB,GAAGthB,uBAAuB,CAACohB,gBAAD,EAAmB7zB,IAAnB,EAAyBuE,WAAzB,EAAsC,IAAtC,CAA/C;AACD;;AAEDkuB,MAAAA,oBAAoB,CAAC7tC,MAArB,GAA8BqW,cAA9B;AACA84B,MAAAA,qBAAqB,CAACnvC,MAAtB,GAA+BqW,cAA/B;AACAw3B,MAAAA,oBAAoB,CAAC1sC,OAArB,GAA+BguC,qBAA/B;AACA94B,MAAAA,cAAc,CAACnV,KAAf,GAAuB2sC,oBAAvB;AACA,aAAOsB,qBAAP;AACD;;AAED,aAASH,iCAAT,CAA2CI,cAA3C,EAA2Dh0B,IAA3D,EAAiEuE,WAAjE,EAA8E;AAC5E;AACA;AACA,aAAO0vB,wBAAwB,CAACD,cAAD,EAAiBh0B,IAAjB,EAAuBjU,OAAvB,EAAgC,IAAhC,CAA/B;AACD;;AAED,aAASmoC,kCAAT,CAA4CjvC,OAA5C,EAAqD+uC,cAArD,EAAqE;AACnE;AACA;AACA,aAAO5iB,oBAAoB,CAACnsB,OAAD,EAAU+uC,cAAV,CAA3B;AACD;;AAED,aAASd,6BAAT,CAAuCjuC,OAAvC,EAAgDgW,cAAhD,EAAgEy4B,eAAhE,EAAiFnvB,WAAjF,EAA8F;AAC5F,UAAI4vB,2BAA2B,GAAGlvC,OAAO,CAACa,KAA1C;AACA,UAAIsuC,4BAA4B,GAAGD,2BAA2B,CAACpuC,OAA/D;AACA,UAAI0sC,oBAAoB,GAAGyB,kCAAkC,CAACC,2BAAD,EAA8B;AACzFn0B,QAAAA,IAAI,EAAE,SADmF;AAEzFlW,QAAAA,QAAQ,EAAE4pC;AAF+E,OAA9B,CAA7D;;AAKA,UAAI,CAACz4B,cAAc,CAAC+E,IAAf,GAAsB1U,cAAvB,MAA2CD,MAA/C,EAAuD;AACrDonC,QAAAA,oBAAoB,CAACvnC,KAArB,GAA6BqZ,WAA7B;AACD;;AAEDkuB,MAAAA,oBAAoB,CAAC7tC,MAArB,GAA8BqW,cAA9B;AACAw3B,MAAAA,oBAAoB,CAAC1sC,OAArB,GAA+B,IAA/B;;AAEA,UAAIquC,4BAA4B,KAAK,IAArC,EAA2C;AACzC;AACA,YAAIvjB,SAAS,GAAG5V,cAAc,CAAC4V,SAA/B;;AAEA,YAAIA,SAAS,KAAK,IAAlB,EAAwB;AACtB5V,UAAAA,cAAc,CAAC4V,SAAf,GAA2B,CAACujB,4BAAD,CAA3B;AACAn5B,UAAAA,cAAc,CAACtW,KAAf,IAAwBhC,aAAxB;AACD,SAHD,MAGO;AACLkuB,UAAAA,SAAS,CAACjf,IAAV,CAAewiC,4BAAf;AACD;AACF;;AAEDn5B,MAAAA,cAAc,CAACnV,KAAf,GAAuB2sC,oBAAvB;AACA,aAAOA,oBAAP;AACD;;AAED,aAASK,8BAAT,CAAwC7tC,OAAxC,EAAiDgW,cAAjD,EAAiEy4B,eAAjE,EAAkFG,gBAAlF,EAAoGtvB,WAApG,EAAiH;AAC/G,UAAIvE,IAAI,GAAG/E,cAAc,CAAC+E,IAA1B;AACA,UAAIm0B,2BAA2B,GAAGlvC,OAAO,CAACa,KAA1C;AACA,UAAIsuC,4BAA4B,GAAGD,2BAA2B,CAACpuC,OAA/D;AACA,UAAI4tC,iBAAiB,GAAG;AACtB3zB,QAAAA,IAAI,EAAE,QADgB;AAEtBlW,QAAAA,QAAQ,EAAE4pC;AAFY,OAAxB;AAIA,UAAIjB,oBAAJ;;AAEA,WAAK;AACL;AACA,OAACzyB,IAAI,GAAG1U,cAAR,MAA4BD,MAA5B,IAAsC;AACtC;AACA;AACA;AACA;AACA;AACA4P,MAAAA,cAAc,CAACnV,KAAf,KAAyBquC,2BARzB,EAQsD;AACpD,YAAIL,yBAAyB,GAAG74B,cAAc,CAACnV,KAA/C;AACA2sC,QAAAA,oBAAoB,GAAGqB,yBAAvB;AACArB,QAAAA,oBAAoB,CAAChuB,UAArB,GAAkC1Y,OAAlC;AACA0mC,QAAAA,oBAAoB,CAACtkB,YAArB,GAAoCwlB,iBAApC;;AAEA,YAAK14B,cAAc,CAAC+E,IAAf,GAAsBzU,WAA3B,EAAwC;AACtC;AACA;AACA;AACA;AACAknC,UAAAA,oBAAoB,CAAClN,cAArB,GAAsC,CAAtC;AACAkN,UAAAA,oBAAoB,CAACvN,eAArB,GAAuC,CAAC,CAAxC;AACAuN,UAAAA,oBAAoB,CAACjN,gBAArB,GAAwC2O,2BAA2B,CAAC3O,gBAApE;AACAiN,UAAAA,oBAAoB,CAACrI,gBAArB,GAAwC+J,2BAA2B,CAAC/J,gBAApE;AACD,SAfmD,CAgBpD;AACA;;;AAGAnvB,QAAAA,cAAc,CAAC4V,SAAf,GAA2B,IAA3B;AACD,OA7BD,MA6BO;AACL4hB,QAAAA,oBAAoB,GAAGyB,kCAAkC,CAACC,2BAAD,EAA8BR,iBAA9B,CAAzD,CADK,CAEL;AACA;;AAGAlB,QAAAA,oBAAoB,CAACtI,YAArB,GAAoCgK,2BAA2B,CAAChK,YAA5B,GAA2C/lC,UAA/E;AACD;;AAED,UAAI2vC,qBAAJ;;AAEA,UAAIK,4BAA4B,KAAK,IAArC,EAA2C;AACzCL,QAAAA,qBAAqB,GAAG3iB,oBAAoB,CAACgjB,4BAAD,EAA+BP,gBAA/B,CAA5C;AACD,OAFD,MAEO;AACLE,QAAAA,qBAAqB,GAAGthB,uBAAuB,CAACohB,gBAAD,EAAmB7zB,IAAnB,EAAyBuE,WAAzB,EAAsC,IAAtC,CAA/C,CADK,CACuF;AAC5F;;AAEAwvB,QAAAA,qBAAqB,CAACpvC,KAAtB,IAA+BnC,SAA/B;AACD;;AAEDuxC,MAAAA,qBAAqB,CAACnvC,MAAtB,GAA+BqW,cAA/B;AACAw3B,MAAAA,oBAAoB,CAAC7tC,MAArB,GAA8BqW,cAA9B;AACAw3B,MAAAA,oBAAoB,CAAC1sC,OAArB,GAA+BguC,qBAA/B;AACA94B,MAAAA,cAAc,CAACnV,KAAf,GAAuB2sC,oBAAvB;AACA,aAAOsB,qBAAP;AACD;;AAED,aAASM,2BAAT,CAAqChyC,KAArC,EAA4CkiB,WAA5C,EAAyDC,eAAzD,EAA0E;AACxEniB,MAAAA,KAAK,CAAC6I,KAAN,GAAcmG,UAAU,CAAChP,KAAK,CAAC6I,KAAP,EAAcqZ,WAAd,CAAxB;AACA,UAAI9f,SAAS,GAAGpC,KAAK,CAACoC,SAAtB;;AAEA,UAAIA,SAAS,KAAK,IAAlB,EAAwB;AACtBA,QAAAA,SAAS,CAACyG,KAAV,GAAkBmG,UAAU,CAAC5M,SAAS,CAACyG,KAAX,EAAkBqZ,WAAlB,CAA5B;AACD;;AAEDD,MAAAA,+BAA+B,CAACjiB,KAAK,CAACuC,MAAP,EAAe2f,WAAf,EAA4BC,eAA5B,CAA/B;AACD;;AAED,aAAS8vB,8BAAT,CAAwCr5B,cAAxC,EAAwDs5B,UAAxD,EAAoEhwB,WAApE,EAAiF;AAC/E;AACA;AACA;AACA,UAAIhgB,IAAI,GAAGgwC,UAAX;;AAEA,aAAOhwC,IAAI,KAAK,IAAhB,EAAsB;AACpB,YAAIA,IAAI,CAAClD,GAAL,KAAahD,iBAAjB,EAAoC;AAClC,cAAIotB,KAAK,GAAGlnB,IAAI,CAACwZ,aAAjB;;AAEA,cAAI0N,KAAK,KAAK,IAAd,EAAoB;AAClB4oB,YAAAA,2BAA2B,CAAC9vC,IAAD,EAAOggB,WAAP,EAAoBtJ,cAApB,CAA3B;AACD;AACF,SAND,MAMO,IAAI1W,IAAI,CAAClD,GAAL,KAAa1C,qBAAjB,EAAwC;AAC7C;AACA;AACA;AACA;AACA;AACA01C,UAAAA,2BAA2B,CAAC9vC,IAAD,EAAOggB,WAAP,EAAoBtJ,cAApB,CAA3B;AACD,SAPM,MAOA,IAAI1W,IAAI,CAACuB,KAAL,KAAe,IAAnB,EAAyB;AAC9BvB,UAAAA,IAAI,CAACuB,KAAL,CAAWlB,MAAX,GAAoBL,IAApB;AACAA,UAAAA,IAAI,GAAGA,IAAI,CAACuB,KAAZ;AACA;AACD;;AAED,YAAIvB,IAAI,KAAK0W,cAAb,EAA6B;AAC3B;AACD;;AAED,eAAO1W,IAAI,CAACwB,OAAL,KAAiB,IAAxB,EAA8B;AAC5B,cAAIxB,IAAI,CAACK,MAAL,KAAgB,IAAhB,IAAwBL,IAAI,CAACK,MAAL,KAAgBqW,cAA5C,EAA4D;AAC1D;AACD;;AAED1W,UAAAA,IAAI,GAAGA,IAAI,CAACK,MAAZ;AACD;;AAEDL,QAAAA,IAAI,CAACwB,OAAL,CAAanB,MAAb,GAAsBL,IAAI,CAACK,MAA3B;AACAL,QAAAA,IAAI,GAAGA,IAAI,CAACwB,OAAZ;AACD;AACF;;AAED,aAASyuC,kBAAT,CAA4BD,UAA5B,EAAwC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAIhd,GAAG,GAAGgd,UAAV;AACA,UAAIE,cAAc,GAAG,IAArB;;AAEA,aAAOld,GAAG,KAAK,IAAf,EAAqB;AACnB,YAAImd,UAAU,GAAGnd,GAAG,CAAC9yB,SAArB,CADmB,CACa;;AAEhC,YAAIiwC,UAAU,KAAK,IAAf,IAAuBpd,kBAAkB,CAACod,UAAD,CAAlB,KAAmC,IAA9D,EAAoE;AAClED,UAAAA,cAAc,GAAGld,GAAjB;AACD;;AAEDA,QAAAA,GAAG,GAAGA,GAAG,CAACxxB,OAAV;AACD;;AAED,aAAO0uC,cAAP;AACD;;AAED,aAASE,mBAAT,CAA6Bnd,WAA7B,EAA0C;AACxC;AACE,YAAIA,WAAW,KAAK/sB,SAAhB,IAA6B+sB,WAAW,KAAK,UAA7C,IAA2DA,WAAW,KAAK,WAA3E,IAA0FA,WAAW,KAAK,UAA1G,IAAwH,CAAC6V,uBAAuB,CAAC7V,WAAD,CAApJ,EAAmK;AACjK6V,UAAAA,uBAAuB,CAAC7V,WAAD,CAAvB,GAAuC,IAAvC;;AAEA,cAAI,OAAOA,WAAP,KAAuB,QAA3B,EAAqC;AACnC,oBAAQA,WAAW,CAACod,WAAZ,EAAR;AACE,mBAAK,UAAL;AACA,mBAAK,UAAL;AACA,mBAAK,WAAL;AACE;AACEz6C,kBAAAA,KAAK,CAAC,oEAAoE,6BAArE,EAAoGq9B,WAApG,EAAiHA,WAAW,CAACod,WAAZ,EAAjH,CAAL;AAEA;AACD;;AAEH,mBAAK,SAAL;AACA,mBAAK,UAAL;AACE;AACEz6C,kBAAAA,KAAK,CAAC,oEAAoE,8DAArE,EAAqIq9B,WAArI,EAAkJA,WAAW,CAACod,WAAZ,EAAlJ,CAAL;AAEA;AACD;;AAEH;AACEz6C,gBAAAA,KAAK,CAAC,8DAA8D,qDAA/D,EAAsHq9B,WAAtH,CAAL;AAEA;AArBJ;AAuBD,WAxBD,MAwBO;AACLr9B,YAAAA,KAAK,CAAC,sEAAsE,qDAAvE,EAA8Hq9B,WAA9H,CAAL;AACD;AACF;AACF;AACF;;AAED,aAASqd,mBAAT,CAA6BpL,QAA7B,EAAuCjS,WAAvC,EAAoD;AAClD;AACE,YAAIiS,QAAQ,KAAKh/B,SAAb,IAA0B,CAAC6iC,uBAAuB,CAAC7D,QAAD,CAAtD,EAAkE;AAChE,cAAIA,QAAQ,KAAK,WAAb,IAA4BA,QAAQ,KAAK,QAA7C,EAAuD;AACrD6D,YAAAA,uBAAuB,CAAC7D,QAAD,CAAvB,GAAoC,IAApC;AAEAtvC,YAAAA,KAAK,CAAC,iEAAiE,uCAAlE,EAA2GsvC,QAA3G,CAAL;AACD,WAJD,MAIO,IAAIjS,WAAW,KAAK,UAAhB,IAA8BA,WAAW,KAAK,WAAlD,EAA+D;AACpE8V,YAAAA,uBAAuB,CAAC7D,QAAD,CAAvB,GAAoC,IAApC;AAEAtvC,YAAAA,KAAK,CAAC,gEAAgE,6BAAhE,GAAgG,iDAAjG,EAAoJsvC,QAApJ,CAAL;AACD;AACF;AACF;AACF;;AAED,aAASqL,+BAAT,CAAyCC,SAAzC,EAAoDxlC,KAApD,EAA2D;AACzD;AACE,YAAIylC,SAAS,GAAGxuC,OAAO,CAACuuC,SAAD,CAAvB;AACA,YAAIE,UAAU,GAAG,CAACD,SAAD,IAAc,OAAOx0C,aAAa,CAACu0C,SAAD,CAApB,KAAoC,UAAnE;;AAEA,YAAIC,SAAS,IAAIC,UAAjB,EAA6B;AAC3B,cAAI9zC,IAAI,GAAG6zC,SAAS,GAAG,OAAH,GAAa,UAAjC;AAEA76C,UAAAA,KAAK,CAAC,uEAAuE,2DAAvE,GAAqI,qCAArI,GAA6K,wDAA7K,GAAwO,iBAAzO,EAA4PgH,IAA5P,EAAkQoO,KAAlQ,EAAyQpO,IAAzQ,CAAL;AAEA,iBAAO,KAAP;AACD;AACF;AAED,aAAO,IAAP;AACD;;AAED,aAAS+zC,4BAAT,CAAsCprC,QAAtC,EAAgD0tB,WAAhD,EAA6D;AAC3D;AACE,YAAI,CAACA,WAAW,KAAK,UAAhB,IAA8BA,WAAW,KAAK,WAA/C,KAA+D1tB,QAAQ,KAAKW,SAA5E,IAAyFX,QAAQ,KAAK,IAAtG,IAA8GA,QAAQ,KAAK,KAA/H,EAAsI;AACpI,cAAItD,OAAO,CAACsD,QAAD,CAAX,EAAuB;AACrB,iBAAK,IAAItO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsO,QAAQ,CAAChQ,MAA7B,EAAqC0B,CAAC,EAAtC,EAA0C;AACxC,kBAAI,CAACs5C,+BAA+B,CAAChrC,QAAQ,CAACtO,CAAD,CAAT,EAAcA,CAAd,CAApC,EAAsD;AACpD;AACD;AACF;AACF,WAND,MAMO;AACL,gBAAI04B,UAAU,GAAG1zB,aAAa,CAACsJ,QAAD,CAA9B;;AAEA,gBAAI,OAAOoqB,UAAP,KAAsB,UAA1B,EAAsC;AACpC,kBAAIihB,gBAAgB,GAAGjhB,UAAU,CAAC/4B,IAAX,CAAgB2O,QAAhB,CAAvB;;AAEA,kBAAIqrC,gBAAJ,EAAsB;AACpB,oBAAI5gB,IAAI,GAAG4gB,gBAAgB,CAAC3vB,IAAjB,EAAX;AACA,oBAAI4vB,EAAE,GAAG,CAAT;;AAEA,uBAAO,CAAC7gB,IAAI,CAACD,IAAb,EAAmBC,IAAI,GAAG4gB,gBAAgB,CAAC3vB,IAAjB,EAA1B,EAAmD;AACjD,sBAAI,CAACsvB,+BAA+B,CAACvgB,IAAI,CAACz3B,KAAN,EAAas4C,EAAb,CAApC,EAAsD;AACpD;AACD;;AAEDA,kBAAAA,EAAE;AACH;AACF;AACF,aAfD,MAeO;AACLj7C,cAAAA,KAAK,CAAC,qEAAqE,mDAArE,GAA2H,qDAA5H,EAAmLq9B,WAAnL,CAAL;AACD;AACF;AACF;AACF;AACF;;AAED,aAAS6d,2BAAT,CAAqCp6B,cAArC,EAAqDkxB,WAArD,EAAkExC,IAAlE,EAAwE8K,cAAxE,EAAwFhL,QAAxF,EAAkG;AAChG,UAAIF,WAAW,GAAGtuB,cAAc,CAAC8C,aAAjC;;AAEA,UAAIwrB,WAAW,KAAK,IAApB,EAA0B;AACxBtuB,QAAAA,cAAc,CAAC8C,aAAf,GAA+B;AAC7BouB,UAAAA,WAAW,EAAEA,WADgB;AAE7B5sB,UAAAA,SAAS,EAAE,IAFkB;AAG7B2sB,UAAAA,kBAAkB,EAAE,CAHS;AAI7BG,UAAAA,IAAI,EAAEoI,cAJuB;AAK7B9K,UAAAA,IAAI,EAAEA,IALuB;AAM7BF,UAAAA,QAAQ,EAAEA;AANmB,SAA/B;AAQD,OATD,MASO;AACL;AACAF,QAAAA,WAAW,CAAC4C,WAAZ,GAA0BA,WAA1B;AACA5C,QAAAA,WAAW,CAAChqB,SAAZ,GAAwB,IAAxB;AACAgqB,QAAAA,WAAW,CAAC2C,kBAAZ,GAAiC,CAAjC;AACA3C,QAAAA,WAAW,CAAC8C,IAAZ,GAAmBoI,cAAnB;AACAlL,QAAAA,WAAW,CAACI,IAAZ,GAAmBA,IAAnB;AACAJ,QAAAA,WAAW,CAACE,QAAZ,GAAuBA,QAAvB;AACD;AACF,KAz0Va,CAy0VZ;AACF;AACA;AACA;AACA;AACA;AACA;;;AAGA,aAAS6L,2BAAT,CAAqCrwC,OAArC,EAA8CgW,cAA9C,EAA8DsJ,WAA9D,EAA2E;AACzE,UAAIwD,SAAS,GAAG9M,cAAc,CAACkT,YAA/B;AACA,UAAIqJ,WAAW,GAAGzP,SAAS,CAACyP,WAA5B;AACA,UAAIiS,QAAQ,GAAG1hB,SAAS,CAAC4hB,IAAzB;AACA,UAAIlW,WAAW,GAAG1L,SAAS,CAACje,QAA5B;AACA6qC,MAAAA,mBAAmB,CAACnd,WAAD,CAAnB;AACAqd,MAAAA,mBAAmB,CAACpL,QAAD,EAAWjS,WAAX,CAAnB;AACA0d,MAAAA,4BAA4B,CAACzhB,WAAD,EAAc+D,WAAd,CAA5B;AACA+V,MAAAA,iBAAiB,CAACtoC,OAAD,EAAUgW,cAAV,EAA0BwY,WAA1B,EAAuClP,WAAvC,CAAjB;AACA,UAAI+nB,eAAe,GAAG9V,mBAAmB,CAACvxB,OAA1C;AACA,UAAIswC,mBAAmB,GAAG9e,kBAAkB,CAAC6V,eAAD,EAAkB/V,qBAAlB,CAA5C;;AAEA,UAAIgf,mBAAJ,EAAyB;AACvBjJ,QAAAA,eAAe,GAAG1V,yBAAyB,CAAC0V,eAAD,EAAkB/V,qBAAlB,CAA3C;AACAtb,QAAAA,cAAc,CAACtW,KAAf,IAAwB7B,UAAxB;AACD,OAHD,MAGO;AACL,YAAI0yC,gBAAgB,GAAGvwC,OAAO,KAAK,IAAZ,IAAoB,CAACA,OAAO,CAACN,KAAR,GAAgB7B,UAAjB,MAAiCR,OAA5E;;AAEA,YAAIkzC,gBAAJ,EAAsB;AACpB;AACA;AACA;AACAlB,UAAAA,8BAA8B,CAACr5B,cAAD,EAAiBA,cAAc,CAACnV,KAAhC,EAAuCye,WAAvC,CAA9B;AACD;;AAED+nB,QAAAA,eAAe,GAAG3V,gCAAgC,CAAC2V,eAAD,CAAlD;AACD;;AAEDtV,MAAAA,mBAAmB,CAAC/b,cAAD,EAAiBqxB,eAAjB,CAAnB;;AAEA,UAAI,CAACrxB,cAAc,CAAC+E,IAAf,GAAsB1U,cAAvB,MAA2CD,MAA/C,EAAuD;AACrD;AACA;AACA4P,QAAAA,cAAc,CAAC8C,aAAf,GAA+B,IAA/B;AACD,OAJD,MAIO;AACL,gBAAQyZ,WAAR;AACE,eAAK,UAAL;AACE;AACE,kBAAIid,cAAc,GAAGD,kBAAkB,CAACv5B,cAAc,CAACnV,KAAhB,CAAvC;AACA,kBAAI6jC,IAAJ;;AAEA,kBAAI8K,cAAc,KAAK,IAAvB,EAA6B;AAC3B;AACA;AACA9K,gBAAAA,IAAI,GAAG1uB,cAAc,CAACnV,KAAtB;AACAmV,gBAAAA,cAAc,CAACnV,KAAf,GAAuB,IAAvB;AACD,eALD,MAKO;AACL;AACA;AACA6jC,gBAAAA,IAAI,GAAG8K,cAAc,CAAC1uC,OAAtB;AACA0uC,gBAAAA,cAAc,CAAC1uC,OAAf,GAAyB,IAAzB;AACD;;AAEDsvC,cAAAA,2BAA2B,CAACp6B,cAAD,EAAiB,KAAjB,EAAwB;AACnD0uB,cAAAA,IAD2B,EACrB8K,cADqB,EACLhL,QADK,CAA3B;AAEA;AACD;;AAEH,eAAK,WAAL;AACE;AACE;AACA;AACA;AACA;AACA,kBAAIgM,KAAK,GAAG,IAAZ;AACA,kBAAIle,GAAG,GAAGtc,cAAc,CAACnV,KAAzB;AACAmV,cAAAA,cAAc,CAACnV,KAAf,GAAuB,IAAvB;;AAEA,qBAAOyxB,GAAG,KAAK,IAAf,EAAqB;AACnB,oBAAImd,UAAU,GAAGnd,GAAG,CAAC9yB,SAArB,CADmB,CACa;;AAEhC,oBAAIiwC,UAAU,KAAK,IAAf,IAAuBpd,kBAAkB,CAACod,UAAD,CAAlB,KAAmC,IAA9D,EAAoE;AAClE;AACAz5B,kBAAAA,cAAc,CAACnV,KAAf,GAAuByxB,GAAvB;AACA;AACD;;AAED,oBAAIme,OAAO,GAAGne,GAAG,CAACxxB,OAAlB;AACAwxB,gBAAAA,GAAG,CAACxxB,OAAJ,GAAc0vC,KAAd;AACAA,gBAAAA,KAAK,GAAGle,GAAR;AACAA,gBAAAA,GAAG,GAAGme,OAAN;AACD,eAtBH,CAsBI;;;AAGFL,cAAAA,2BAA2B,CAACp6B,cAAD,EAAiB,IAAjB,EAAuB;AAClDw6B,cAAAA,KAD2B,EACpB,IADoB,EACd;AACbhM,cAAAA,QAF2B,CAA3B;AAGA;AACD;;AAEH,eAAK,UAAL;AACE;AACE4L,cAAAA,2BAA2B,CAACp6B,cAAD,EAAiB,KAAjB,EAAwB;AACnD,kBAD2B,EACrB;AACN,kBAF2B,EAErB;AACNxQ,cAAAA,SAH2B,CAA3B;AAIA;AACD;;AAEH;AACE;AACE;AACA;AACAwQ,cAAAA,cAAc,CAAC8C,aAAf,GAA+B,IAA/B;AACD;AArEL;AAuED;;AAED,aAAO9C,cAAc,CAACnV,KAAtB;AACD;;AAED,aAAS6vC,qBAAT,CAA+B1wC,OAA/B,EAAwCgW,cAAxC,EAAwDsJ,WAAxD,EAAqE;AACnEsR,MAAAA,iBAAiB,CAAC5a,cAAD,EAAiBA,cAAc,CAAC7V,SAAf,CAAyBuP,aAA1C,CAAjB;AACA,UAAI64B,YAAY,GAAGvyB,cAAc,CAACkT,YAAlC;;AAEA,UAAIlpB,OAAO,KAAK,IAAhB,EAAsB;AACpB;AACA;AACA;AACA;AACA;AACAgW,QAAAA,cAAc,CAACnV,KAAf,GAAuBivB,oBAAoB,CAAC9Z,cAAD,EAAiB,IAAjB,EAAuBuyB,YAAvB,EAAqCjpB,WAArC,CAA3C;AACD,OAPD,MAOO;AACLgpB,QAAAA,iBAAiB,CAACtoC,OAAD,EAAUgW,cAAV,EAA0BuyB,YAA1B,EAAwCjpB,WAAxC,CAAjB;AACD;;AAED,aAAOtJ,cAAc,CAACnV,KAAtB;AACD;;AAED,QAAI8vC,+CAA+C,GAAG,KAAtD;;AAEA,aAASC,qBAAT,CAA+B5wC,OAA/B,EAAwCgW,cAAxC,EAAwDsJ,WAAxD,EAAqE;AACnE,UAAIuxB,YAAY,GAAG76B,cAAc,CAAC9Z,IAAlC;AACA,UAAII,OAAO,GAAGu0C,YAAY,CAACr0C,QAA3B;AACA,UAAI4T,QAAQ,GAAG4F,cAAc,CAACkT,YAA9B;AACA,UAAI/Y,QAAQ,GAAG6F,cAAc,CAACwS,aAA9B;AACA,UAAIsoB,QAAQ,GAAG1gC,QAAQ,CAACvY,KAAxB;AAEA;AACE,YAAI,EAAE,WAAWuY,QAAb,CAAJ,EAA4B;AAC1B,cAAI,CAACugC,+CAAL,EAAsD;AACpDA,YAAAA,+CAA+C,GAAG,IAAlD;AAEAz7C,YAAAA,KAAK,CAAC,sGAAD,CAAL;AACD;AACF;;AAED,YAAI67C,iBAAiB,GAAG/6B,cAAc,CAAC9Z,IAAf,CAAoBwqB,SAA5C;;AAEA,YAAIqqB,iBAAJ,EAAuB;AACrBt8B,UAAAA,cAAc,CAACs8B,iBAAD,EAAoB3gC,QAApB,EAA8B,MAA9B,EAAsC,kBAAtC,CAAd;AACD;AACF;AAED0O,MAAAA,YAAY,CAAC9I,cAAD,EAAiB1Z,OAAjB,EAA0Bw0C,QAA1B,CAAZ;AAEA;AACE,YAAI3gC,QAAQ,KAAK,IAAjB,EAAuB;AACrB,cAAI6gC,QAAQ,GAAG7gC,QAAQ,CAACtY,KAAxB;;AAEA,cAAIkgB,QAAQ,CAACi5B,QAAD,EAAWF,QAAX,CAAZ,EAAkC;AAChC;AACA,gBAAI3gC,QAAQ,CAACtL,QAAT,KAAsBuL,QAAQ,CAACvL,QAA/B,IAA2C,CAAC6R,iBAAiB,EAAjE,EAAqE;AACnE,qBAAOiyB,4BAA4B,CAAC3oC,OAAD,EAAUgW,cAAV,EAA0BsJ,WAA1B,CAAnC;AACD;AACF,WALD,MAKO;AACL;AACA;AACAG,YAAAA,sBAAsB,CAACzJ,cAAD,EAAiB1Z,OAAjB,EAA0BgjB,WAA1B,CAAtB;AACD;AACF;AACF;AAED,UAAIkP,WAAW,GAAGpe,QAAQ,CAACvL,QAA3B;AACAyjC,MAAAA,iBAAiB,CAACtoC,OAAD,EAAUgW,cAAV,EAA0BwY,WAA1B,EAAuClP,WAAvC,CAAjB;AACA,aAAOtJ,cAAc,CAACnV,KAAtB;AACD;;AAED,QAAIowC,oCAAoC,GAAG,KAA3C;;AAEA,aAASC,qBAAT,CAA+BlxC,OAA/B,EAAwCgW,cAAxC,EAAwDsJ,WAAxD,EAAqE;AACnE,UAAIhjB,OAAO,GAAG0Z,cAAc,CAAC9Z,IAA7B,CADmE,CAChC;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACE,YAAII,OAAO,CAACE,QAAR,KAAqBgJ,SAAzB,EAAoC;AAClC;AACA;AACA;AACA,cAAIlJ,OAAO,KAAKA,OAAO,CAAC60C,QAAxB,EAAkC;AAChC,gBAAI,CAACF,oCAAL,EAA2C;AACzCA,cAAAA,oCAAoC,GAAG,IAAvC;AAEA/7C,cAAAA,KAAK,CAAC,0EAA0E,4EAA3E,CAAL;AACD;AACF;AACF,SAXD,MAWO;AACLoH,UAAAA,OAAO,GAAGA,OAAO,CAACE,QAAlB;AACD;AACF;AAED,UAAI4T,QAAQ,GAAG4F,cAAc,CAACkT,YAA9B;AACA,UAAIzsB,MAAM,GAAG2T,QAAQ,CAACvL,QAAtB;AAEA;AACE,YAAI,OAAOpI,MAAP,KAAkB,UAAtB,EAAkC;AAChCvH,UAAAA,KAAK,CAAC,wEAAwE,mEAAxE,GAA8I,kEAA9I,GAAmN,iDAApN,CAAL;AACD;AACF;AAEDsrB,MAAAA,oBAAoB,CAACxK,cAAD,EAAiBsJ,WAAjB,CAApB;AACA,UAAIwxB,QAAQ,GAAGpwB,WAAW,CAACpkB,OAAD,CAA1B;AAEA,UAAIkyB,WAAJ;AAEA;AACEoZ,QAAAA,mBAAmB,CAAC5nC,OAApB,GAA8BgW,cAA9B;AACAqE,QAAAA,cAAc,CAAC,IAAD,CAAd;AACAmU,QAAAA,WAAW,GAAG/xB,MAAM,CAACq0C,QAAD,CAApB;AACAz2B,QAAAA,cAAc,CAAC,KAAD,CAAd;AACD;AAGDrE,MAAAA,cAAc,CAACtW,KAAf,IAAwBpC,aAAxB;AACAgrC,MAAAA,iBAAiB,CAACtoC,OAAD,EAAUgW,cAAV,EAA0BwY,WAA1B,EAAuClP,WAAvC,CAAjB;AACA,aAAOtJ,cAAc,CAACnV,KAAtB;AACD;;AAED,aAAS4f,gCAAT,GAA4C;AAC1ConB,MAAAA,gBAAgB,GAAG,IAAnB;AACD;;AAED,aAASc,4BAAT,CAAsC3oC,OAAtC,EAA+CgW,cAA/C,EAA+DsJ,WAA/D,EAA4E;AAC1E,UAAItf,OAAO,KAAK,IAAhB,EAAsB;AACpB;AACAgW,QAAAA,cAAc,CAAC6J,YAAf,GAA8B7f,OAAO,CAAC6f,YAAtC;AACD;;AAED;AACE;AACAqgB,QAAAA,0BAA0B;AAC3B;AAEDpc,MAAAA,sBAAsB,CAAC9N,cAAc,CAAC/P,KAAhB,CAAtB,CAX0E,CAW5B;;AAE9C,UAAI,CAACgG,gBAAgB,CAACqT,WAAD,EAActJ,cAAc,CAACwJ,UAA7B,CAArB,EAA+D;AAC7D;AACA;AACA;AACA;AACE,iBAAO,IAAP;AACD;AACF,OApByE,CAoBxE;AACF;;;AAGAyQ,MAAAA,gBAAgB,CAACjwB,OAAD,EAAUgW,cAAV,CAAhB;AACA,aAAOA,cAAc,CAACnV,KAAtB;AACD;;AAED,aAASuwC,YAAT,CAAsBpxC,OAAtB,EAA+BqxC,iBAA/B,EAAkDC,iBAAlD,EAAqE;AACnE;AACE,YAAI7mB,WAAW,GAAG4mB,iBAAiB,CAAC1xC,MAApC;;AAEA,YAAI8qB,WAAW,KAAK,IAApB,EAA0B;AACxB;AACA,gBAAM,IAAInqB,KAAJ,CAAU,6BAAV,CAAN;AACD,SANH,CAMI;AACF;;;AAGAN,QAAAA,OAAO,CAACR,SAAR,GAAoB,IAApB;AACA6xC,QAAAA,iBAAiB,CAAC7xC,SAAlB,GAA8B,IAA9B,CAXF,CAWsC;;AAEpC8xC,QAAAA,iBAAiB,CAAChnC,KAAlB,GAA0B+mC,iBAAiB,CAAC/mC,KAA5C;AACAgnC,QAAAA,iBAAiB,CAACxwC,OAAlB,GAA4BuwC,iBAAiB,CAACvwC,OAA9C;AACAwwC,QAAAA,iBAAiB,CAAC3xC,MAAlB,GAA2B0xC,iBAAiB,CAAC1xC,MAA7C;AACA2xC,QAAAA,iBAAiB,CAACxmB,GAAlB,GAAwBumB,iBAAiB,CAACvmB,GAA1C,CAhBF,CAgBiD;;AAE/C,YAAIumB,iBAAiB,KAAK5mB,WAAW,CAAC5pB,KAAtC,EAA6C;AAC3C4pB,UAAAA,WAAW,CAAC5pB,KAAZ,GAAoBywC,iBAApB;AACD,SAFD,MAEO;AACL,cAAIC,WAAW,GAAG9mB,WAAW,CAAC5pB,KAA9B;;AAEA,cAAI0wC,WAAW,KAAK,IAApB,EAA0B;AACxB;AACA,kBAAM,IAAIjxC,KAAJ,CAAU,kCAAV,CAAN;AACD;;AAED,iBAAOixC,WAAW,CAACzwC,OAAZ,KAAwBuwC,iBAA/B,EAAkD;AAChDE,YAAAA,WAAW,GAAGA,WAAW,CAACzwC,OAA1B;;AAEA,gBAAIywC,WAAW,KAAK,IAApB,EAA0B;AACxB;AACA,oBAAM,IAAIjxC,KAAJ,CAAU,wCAAV,CAAN;AACD;AACF;;AAEDixC,UAAAA,WAAW,CAACzwC,OAAZ,GAAsBwwC,iBAAtB;AACD,SAtCH,CAsCI;AACF;;;AAGA,YAAI1lB,SAAS,GAAGnB,WAAW,CAACmB,SAA5B;;AAEA,YAAIA,SAAS,KAAK,IAAlB,EAAwB;AACtBnB,UAAAA,WAAW,CAACmB,SAAZ,GAAwB,CAAC5rB,OAAD,CAAxB;AACAyqB,UAAAA,WAAW,CAAC/qB,KAAZ,IAAqBhC,aAArB;AACD,SAHD,MAGO;AACLkuB,UAAAA,SAAS,CAACjf,IAAV,CAAe3M,OAAf;AACD;;AAEDsxC,QAAAA,iBAAiB,CAAC5xC,KAAlB,IAA2BnC,SAA3B,CAnDF,CAmDwC;;AAEtC,eAAO+zC,iBAAP;AACD;AACF;;AAED,aAAS/H,6BAAT,CAAuCvpC,OAAvC,EAAgDsf,WAAhD,EAA6D;AAC3D;AACA;AACA,UAAIkyB,WAAW,GAAGxxC,OAAO,CAACiG,KAA1B;;AAEA,UAAIgG,gBAAgB,CAACulC,WAAD,EAAclyB,WAAd,CAApB,EAAgD;AAC9C,eAAO,IAAP;AACD,OAP0D,CAOzD;;;AAEF,aAAO,KAAP;AACD;;AAED,aAASmyB,sCAAT,CAAgDzxC,OAAhD,EAAyDgW,cAAzD,EAAyEsJ,WAAzE,EAAsF;AACpF;AACA;AACA;AACA,cAAQtJ,cAAc,CAAC5Z,GAAvB;AACE,aAAK1D,QAAL;AACEsyC,UAAAA,mBAAmB,CAACh1B,cAAD,CAAnB;AACA,cAAIpR,IAAI,GAAGoR,cAAc,CAAC7V,SAA1B;AACA;;AAEF,aAAKvH,aAAL;AACEq4B,UAAAA,eAAe,CAACjb,cAAD,CAAf;AACA;;AAEF,aAAKxd,cAAL;AACE;AACE,gBAAIub,SAAS,GAAGiC,cAAc,CAAC9Z,IAA/B;;AAEA,gBAAIga,iBAAiB,CAACnC,SAAD,CAArB,EAAkC;AAChCsD,cAAAA,mBAAmB,CAACrB,cAAD,CAAnB;AACD;;AAED;AACD;;AAEH,aAAKrd,UAAL;AACEi4B,UAAAA,iBAAiB,CAAC5a,cAAD,EAAiBA,cAAc,CAAC7V,SAAf,CAAyBuP,aAA1C,CAAjB;AACA;;AAEF,aAAKzW,eAAL;AACE;AACE,gBAAI63C,QAAQ,GAAG96B,cAAc,CAACwS,aAAf,CAA6B3wB,KAA5C;AACA,gBAAIyE,OAAO,GAAG0Z,cAAc,CAAC9Z,IAAf,CAAoBM,QAAlC;AACAsiB,YAAAA,YAAY,CAAC9I,cAAD,EAAiB1Z,OAAjB,EAA0Bw0C,QAA1B,CAAZ;AACA;AACD;;AAEH,aAAK33C,QAAL;AACE;AACE;AACA,gBAAIu4C,YAAY,GAAGzlC,gBAAgB,CAACqT,WAAD,EAActJ,cAAc,CAACwJ,UAA7B,CAAnC;;AAEA,gBAAIkyB,YAAJ,EAAkB;AAChB17B,cAAAA,cAAc,CAACtW,KAAf,IAAwBlC,MAAxB;AACD;;AAED;AACE;AACA;AACA,kBAAI2C,SAAS,GAAG6V,cAAc,CAAC7V,SAA/B;AACAA,cAAAA,SAAS,CAACugC,cAAV,GAA2B,CAA3B;AACAvgC,cAAAA,SAAS,CAAC0gC,qBAAV,GAAkC,CAAlC;AACD;AACF;AAED;;AAEF,aAAKznC,iBAAL;AACE;AACE,gBAAIotB,KAAK,GAAGxQ,cAAc,CAAC8C,aAA3B;;AAEA,gBAAI0N,KAAK,KAAK,IAAd,EAAoB;AAClB;AACA;AACA;AAGA,kBAAIgnB,oBAAoB,GAAGx3B,cAAc,CAACnV,KAA1C;AACA,kBAAI8wC,iBAAiB,GAAGnE,oBAAoB,CAAChuB,UAA7C;;AAEA,kBAAIvT,gBAAgB,CAACqT,WAAD,EAAcqyB,iBAAd,CAApB,EAAsD;AACpD;AACA;AACA,uBAAO3E,uBAAuB,CAAChtC,OAAD,EAAUgW,cAAV,EAA0BsJ,WAA1B,CAA9B;AACD,eAJD,MAIO;AACL;AACA;AACAyS,gBAAAA,mBAAmB,CAAC/b,cAAD,EAAiB0b,gCAAgC,CAACH,mBAAmB,CAACvxB,OAArB,CAAjD,CAAnB,CAHK,CAG+F;AACpG;;AAEA,oBAAIa,KAAK,GAAG8nC,4BAA4B,CAAC3oC,OAAD,EAAUgW,cAAV,EAA0BsJ,WAA1B,CAAxC;;AAEA,oBAAIze,KAAK,KAAK,IAAd,EAAoB;AAClB;AACA;AACA,yBAAOA,KAAK,CAACC,OAAb;AACD,iBAJD,MAIO;AACL;AACA;AACA;AACA,yBAAO,IAAP;AACD;AACF;AACF,aAhCD,MAgCO;AACLixB,cAAAA,mBAAmB,CAAC/b,cAAD,EAAiB0b,gCAAgC,CAACH,mBAAmB,CAACvxB,OAArB,CAAjD,CAAnB;AACD;;AAED;AACD;;AAEH,aAAKtG,qBAAL;AACE;AACE,gBAAI62C,gBAAgB,GAAG,CAACvwC,OAAO,CAACN,KAAR,GAAgB7B,UAAjB,MAAiCR,OAAxD;;AAEA,gBAAIu0C,aAAa,GAAG3lC,gBAAgB,CAACqT,WAAD,EAActJ,cAAc,CAACwJ,UAA7B,CAApC;;AAEA,gBAAI+wB,gBAAJ,EAAsB;AACpB,kBAAIqB,aAAJ,EAAmB;AACjB;AACA;AACA;AACA;AACA;AACA,uBAAOvB,2BAA2B,CAACrwC,OAAD,EAAUgW,cAAV,EAA0BsJ,WAA1B,CAAlC;AACD,eARmB,CAQlB;AACF;AACA;;;AAGAtJ,cAAAA,cAAc,CAACtW,KAAf,IAAwB7B,UAAxB;AACD,aAnBH,CAmBI;AACF;AACA;;;AAGA,gBAAIymC,WAAW,GAAGtuB,cAAc,CAAC8C,aAAjC;;AAEA,gBAAIwrB,WAAW,KAAK,IAApB,EAA0B;AACxB;AACA;AACAA,cAAAA,WAAW,CAAChqB,SAAZ,GAAwB,IAAxB;AACAgqB,cAAAA,WAAW,CAACI,IAAZ,GAAmB,IAAnB;AACAJ,cAAAA,WAAW,CAACjO,UAAZ,GAAyB,IAAzB;AACD;;AAEDtE,YAAAA,mBAAmB,CAAC/b,cAAD,EAAiBub,mBAAmB,CAACvxB,OAArC,CAAnB;;AAEA,gBAAI4xC,aAAJ,EAAmB;AACjB;AACD,aAFD,MAEO;AACL;AACA;AACA;AACA,qBAAO,IAAP;AACD;AACF;;AAEH,aAAKh4C,kBAAL;AACA,aAAKC,qBAAL;AACE;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAmc,YAAAA,cAAc,CAAC/P,KAAf,GAAuBa,OAAvB;AACA,mBAAO8iC,wBAAwB,CAAC5pC,OAAD,EAAUgW,cAAV,EAA0BsJ,WAA1B,CAA/B;AACD;AA5JL;;AA+JA,aAAOqpB,4BAA4B,CAAC3oC,OAAD,EAAUgW,cAAV,EAA0BsJ,WAA1B,CAAnC;AACD;;AAED,aAASuyB,SAAT,CAAmB7xC,OAAnB,EAA4BgW,cAA5B,EAA4CsJ,WAA5C,EAAyD;AACvD;AACE,YAAItJ,cAAc,CAAC87B,kBAAf,IAAqC9xC,OAAO,KAAK,IAArD,EAA2D;AACzD;AACA,iBAAOoxC,YAAY,CAACpxC,OAAD,EAAUgW,cAAV,EAA0BmzB,2BAA2B,CAACnzB,cAAc,CAAC9Z,IAAhB,EAAsB8Z,cAAc,CAAClf,GAArC,EAA0Ckf,cAAc,CAACkT,YAAzD,EAAuElT,cAAc,CAAC2D,WAAf,IAA8B,IAArG,EAA2G3D,cAAc,CAAC+E,IAA1H,EAAgI/E,cAAc,CAAC/P,KAA/I,CAArD,CAAnB;AACD;AACF;;AAED,UAAIjG,OAAO,KAAK,IAAhB,EAAsB;AACpB,YAAImQ,QAAQ,GAAGnQ,OAAO,CAACwoB,aAAvB;AACA,YAAIpY,QAAQ,GAAG4F,cAAc,CAACkT,YAA9B;;AAEA,YAAI/Y,QAAQ,KAAKC,QAAb,IAAyBsG,iBAAiB,EAA1C,IAAkD;AACrDV,QAAAA,cAAc,CAAC9Z,IAAf,KAAwB8D,OAAO,CAAC9D,IADjC,EACyC;AACvC;AACA;AACA2rC,UAAAA,gBAAgB,GAAG,IAAnB;AACD,SALD,MAKO;AACL;AACA;AACA,cAAIyB,2BAA2B,GAAGC,6BAA6B,CAACvpC,OAAD,EAAUsf,WAAV,CAA/D;;AAEA,cAAI,CAACgqB,2BAAD,IAAgC;AACpC;AACA,WAACtzB,cAAc,CAACtW,KAAf,GAAuB7B,UAAxB,MAAwCR,OAFxC,EAEiD;AAC/C;AACAwqC,YAAAA,gBAAgB,GAAG,KAAnB;AACA,mBAAO4J,sCAAsC,CAACzxC,OAAD,EAAUgW,cAAV,EAA0BsJ,WAA1B,CAA7C;AACD;;AAED,cAAI,CAACtf,OAAO,CAACN,KAAR,GAAgBhB,4BAAjB,MAAmDrB,OAAvD,EAAgE;AAC9D;AACA;AACAwqC,YAAAA,gBAAgB,GAAG,IAAnB;AACD,WAJD,MAIO;AACL;AACA;AACA;AACA;AACAA,YAAAA,gBAAgB,GAAG,KAAnB;AACD;AACF;AACF,OAlCD,MAkCO;AACLA,QAAAA,gBAAgB,GAAG,KAAnB;AACD,OA5CsD,CA4CrD;AACF;AACA;AACA;AACA;;;AAGA7xB,MAAAA,cAAc,CAAC/P,KAAf,GAAuBa,OAAvB;;AAEA,cAAQkP,cAAc,CAAC5Z,GAAvB;AACE,aAAK3D,sBAAL;AACE;AACE,mBAAOqzC,2BAA2B,CAAC9rC,OAAD,EAAUgW,cAAV,EAA0BA,cAAc,CAAC9Z,IAAzC,EAA+CojB,WAA/C,CAAlC;AACD;;AAEH,aAAK/lB,aAAL;AACE;AACE,gBAAIyvB,WAAW,GAAGhT,cAAc,CAACgT,WAAjC;AACA,mBAAOqiB,kBAAkB,CAACrrC,OAAD,EAAUgW,cAAV,EAA0BgT,WAA1B,EAAuC1J,WAAvC,CAAzB;AACD;;AAEH,aAAK/mB,iBAAL;AACE;AACE,gBAAIwb,SAAS,GAAGiC,cAAc,CAAC9Z,IAA/B;AACA,gBAAI61C,eAAe,GAAG/7B,cAAc,CAACkT,YAArC;AACA,gBAAIuiB,aAAa,GAAGz1B,cAAc,CAACgT,WAAf,KAA+BjV,SAA/B,GAA2Cg+B,eAA3C,GAA6D7zB,mBAAmB,CAACnK,SAAD,EAAYg+B,eAAZ,CAApG;AACA,mBAAOpI,uBAAuB,CAAC3pC,OAAD,EAAUgW,cAAV,EAA0BjC,SAA1B,EAAqC03B,aAArC,EAAoDnsB,WAApD,CAA9B;AACD;;AAEH,aAAK9mB,cAAL;AACE;AACE,gBAAI+tC,UAAU,GAAGvwB,cAAc,CAAC9Z,IAAhC;AACA,gBAAI81C,gBAAgB,GAAGh8B,cAAc,CAACkT,YAAtC;;AAEA,gBAAI+oB,cAAc,GAAGj8B,cAAc,CAACgT,WAAf,KAA+Bud,UAA/B,GAA4CyL,gBAA5C,GAA+D9zB,mBAAmB,CAACqoB,UAAD,EAAayL,gBAAb,CAAvG;;AAEA,mBAAOxH,oBAAoB,CAACxqC,OAAD,EAAUgW,cAAV,EAA0BuwB,UAA1B,EAAsC0L,cAAtC,EAAsD3yB,WAAtD,CAA3B;AACD;;AAEH,aAAK5mB,QAAL;AACE,iBAAOuyC,cAAc,CAACjrC,OAAD,EAAUgW,cAAV,EAA0BsJ,WAA1B,CAArB;;AAEF,aAAK1mB,aAAL;AACE,iBAAOuyC,qBAAqB,CAACnrC,OAAD,EAAUgW,cAAV,EAA0BsJ,WAA1B,CAA5B;;AAEF,aAAKzmB,QAAL;AACE,iBAAOuyC,gBAAgB,EAAvB;;AAEF,aAAKhyC,iBAAL;AACE,iBAAO4zC,uBAAuB,CAAChtC,OAAD,EAAUgW,cAAV,EAA0BsJ,WAA1B,CAA9B;;AAEF,aAAK3mB,UAAL;AACE,iBAAO+3C,qBAAqB,CAAC1wC,OAAD,EAAUgW,cAAV,EAA0BsJ,WAA1B,CAA5B;;AAEF,aAAKpmB,UAAL;AACE;AACE,gBAAIgD,IAAI,GAAG8Z,cAAc,CAAC9Z,IAA1B;AACA,gBAAIg2C,iBAAiB,GAAGl8B,cAAc,CAACkT,YAAvC;;AAEA,gBAAIipB,eAAe,GAAGn8B,cAAc,CAACgT,WAAf,KAA+B9sB,IAA/B,GAAsCg2C,iBAAtC,GAA0Dh0B,mBAAmB,CAAChiB,IAAD,EAAOg2C,iBAAP,CAAnG;;AAEA,mBAAOzJ,gBAAgB,CAACzoC,OAAD,EAAUgW,cAAV,EAA0B9Z,IAA1B,EAAgCi2C,eAAhC,EAAiD7yB,WAAjD,CAAvB;AACD;;AAEH,aAAKxmB,QAAL;AACE,iBAAOk0B,cAAc,CAAChtB,OAAD,EAAUgW,cAAV,EAA0BsJ,WAA1B,CAArB;;AAEF,aAAKvmB,IAAL;AACE,iBAAOsxC,UAAU,CAACrqC,OAAD,EAAUgW,cAAV,EAA0BsJ,WAA1B,CAAjB;;AAEF,aAAKnmB,QAAL;AACE,iBAAOmxC,cAAc,CAACtqC,OAAD,EAAUgW,cAAV,EAA0BsJ,WAA1B,CAArB;;AAEF,aAAKrmB,eAAL;AACE,iBAAO23C,qBAAqB,CAAC5wC,OAAD,EAAUgW,cAAV,EAA0BsJ,WAA1B,CAA5B;;AAEF,aAAKtmB,eAAL;AACE,iBAAOk4C,qBAAqB,CAAClxC,OAAD,EAAUgW,cAAV,EAA0BsJ,WAA1B,CAA5B;;AAEF,aAAKjmB,aAAL;AACE;AACE,gBAAI+4C,MAAM,GAAGp8B,cAAc,CAAC9Z,IAA5B;AACA,gBAAIm2C,iBAAiB,GAAGr8B,cAAc,CAACkT,YAAvC,CAFF,CAEuD;;AAErD,gBAAIopB,eAAe,GAAGp0B,mBAAmB,CAACk0B,MAAD,EAASC,iBAAT,CAAzC;;AAEA;AACE,kBAAIr8B,cAAc,CAAC9Z,IAAf,KAAwB8Z,cAAc,CAACgT,WAA3C,EAAwD;AACtD,oBAAI0gB,cAAc,GAAG0I,MAAM,CAAC1rB,SAA5B;;AAEA,oBAAIgjB,cAAJ,EAAoB;AAClBj1B,kBAAAA,cAAc,CAACi1B,cAAD,EAAiB4I,eAAjB,EAAkC;AAChD,wBADc,EACNn2C,wBAAwB,CAACi2C,MAAD,CADlB,CAAd;AAED;AACF;AACF;AAEDE,YAAAA,eAAe,GAAGp0B,mBAAmB,CAACk0B,MAAM,CAACl2C,IAAR,EAAco2C,eAAd,CAArC;AACA,mBAAO1J,mBAAmB,CAAC5oC,OAAD,EAAUgW,cAAV,EAA0Bo8B,MAA1B,EAAkCE,eAAlC,EAAmDhzB,WAAnD,CAA1B;AACD;;AAEH,aAAKhmB,mBAAL;AACE;AACE,mBAAO4vC,yBAAyB,CAAClpC,OAAD,EAAUgW,cAAV,EAA0BA,cAAc,CAAC9Z,IAAzC,EAA+C8Z,cAAc,CAACkT,YAA9D,EAA4E5J,WAA5E,CAAhC;AACD;;AAEH,aAAK9lB,wBAAL;AACE;AACE,gBAAI+4C,WAAW,GAAGv8B,cAAc,CAAC9Z,IAAjC;AACA,gBAAIs2C,iBAAiB,GAAGx8B,cAAc,CAACkT,YAAvC;;AAEA,gBAAIupB,eAAe,GAAGz8B,cAAc,CAACgT,WAAf,KAA+BupB,WAA/B,GAA6CC,iBAA7C,GAAiEt0B,mBAAmB,CAACq0B,WAAD,EAAcC,iBAAd,CAA1G;;AAEA,mBAAO3G,6BAA6B,CAAC7rC,OAAD,EAAUgW,cAAV,EAA0Bu8B,WAA1B,EAAuCE,eAAvC,EAAwDnzB,WAAxD,CAApC;AACD;;AAEH,aAAK5lB,qBAAL;AACE;AACE,mBAAO22C,2BAA2B,CAACrwC,OAAD,EAAUgW,cAAV,EAA0BsJ,WAA1B,CAAlC;AACD;;AAEH,aAAK3lB,cAAL;AACE;AAEE;AACD;;AAEH,aAAKC,kBAAL;AACE;AACE,mBAAOgwC,wBAAwB,CAAC5pC,OAAD,EAAUgW,cAAV,EAA0BsJ,WAA1B,CAA/B;AACD;AAzHL;;AA4HA,YAAM,IAAIhf,KAAJ,CAAU,+BAA+B0V,cAAc,CAAC5Z,GAA9C,GAAoD,6CAApD,GAAoG,8BAA9G,CAAN;AACD;;AAED,aAASs2C,UAAT,CAAoB1yC,OAApB,EAA6BgW,cAA7B,EAA6CsJ,WAA7C,EAA0D;AACxD;AACA;AACA;AACA;AACAuK,MAAAA,cAAc,CAAC7T,cAAD,CAAd;;AAEA,cAAQA,cAAc,CAAC5Z,GAAvB;AACE,aAAK5D,cAAL;AACE;AACE,gBAAIub,SAAS,GAAGiC,cAAc,CAAC9Z,IAA/B;;AAEA,gBAAIga,iBAAiB,CAACnC,SAAD,CAArB,EAAkC;AAChC6C,cAAAA,UAAU,CAACZ,cAAD,CAAV;AACD;;AAED,gBAAItW,KAAK,GAAGsW,cAAc,CAACtW,KAA3B;;AAEA,gBAAIA,KAAK,GAAGjB,aAAZ,EAA2B;AACzBuX,cAAAA,cAAc,CAACtW,KAAf,GAAuBA,KAAK,GAAG,CAACjB,aAAT,GAAyBZ,UAAhD;;AAEA,kBAAK,CAACmY,cAAc,CAAC+E,IAAf,GAAsBzU,WAAvB,MAAwCF,MAA7C,EAAqD;AACnD46B,gBAAAA,sBAAsB,CAAChrB,cAAD,CAAtB;AACD;;AAED,qBAAOA,cAAP;AACD;;AAED,mBAAO,IAAP;AACD;;AAEH,aAAKtd,QAAL;AACE;AAEEq4B,YAAAA,gBAAgB,CAAC/a,cAAD,CAAhB;AACAa,YAAAA,wBAAwB,CAACb,cAAD,CAAxB;AACA+c,YAAAA,2BAA2B;AAC3B,gBAAI4f,MAAM,GAAG38B,cAAc,CAACtW,KAA5B;;AAEA,gBAAI,CAACizC,MAAM,GAAGl0C,aAAV,MAA6BpB,OAA7B,IAAwC,CAACs1C,MAAM,GAAG90C,UAAV,MAA0BR,OAAtE,EAA+E;AAC7E;AACA;AACA2Y,cAAAA,cAAc,CAACtW,KAAf,GAAuBizC,MAAM,GAAG,CAACl0C,aAAV,GAA0BZ,UAAjD;AACA,qBAAOmY,cAAP;AACD,aAZH,CAYI;;;AAGF,mBAAO,IAAP;AACD;;AAEH,aAAKpd,aAAL;AACE;AACE;AACAs4B,YAAAA,cAAc,CAAClb,cAAD,CAAd;AACA,mBAAO,IAAP;AACD;;AAEH,aAAK5c,iBAAL;AACE;AACE64B,YAAAA,kBAAkB,CAACjc,cAAD,CAAlB;AAEA,gBAAI48B,OAAO,GAAG58B,cAAc,CAACtW,KAA7B;;AAEA,gBAAIkzC,OAAO,GAAGn0C,aAAd,EAA6B;AAC3BuX,cAAAA,cAAc,CAACtW,KAAf,GAAuBkzC,OAAO,GAAG,CAACn0C,aAAX,GAA2BZ,UAAlD,CAD2B,CACmC;;AAE9D,kBAAK,CAACmY,cAAc,CAAC+E,IAAf,GAAsBzU,WAAvB,MAAwCF,MAA7C,EAAqD;AACnD46B,gBAAAA,sBAAsB,CAAChrB,cAAD,CAAtB;AACD;;AAED,qBAAOA,cAAP;AACD;;AAED,mBAAO,IAAP;AACD;;AAEH,aAAKtc,qBAAL;AACE;AACEu4B,YAAAA,kBAAkB,CAACjc,cAAD,CAAlB,CADF,CACsC;AACpC;;AAEA,mBAAO,IAAP;AACD;;AAEH,aAAKrd,UAAL;AACEo4B,UAAAA,gBAAgB,CAAC/a,cAAD,CAAhB;AACA,iBAAO,IAAP;;AAEF,aAAK/c,eAAL;AACE,cAAIqD,OAAO,GAAG0Z,cAAc,CAAC9Z,IAAf,CAAoBM,QAAlC;AACA2iB,UAAAA,WAAW,CAAC7iB,OAAD,EAAU0Z,cAAV,CAAX;AACA,iBAAO,IAAP;;AAEF,aAAKpc,kBAAL;AACA,aAAKC,qBAAL;AACEytC,UAAAA,cAAc,CAACtxB,cAAD,CAAd;AAEA,iBAAO,IAAP;;AAEF,aAAKlc,cAAL;AAEE,iBAAO,IAAP;;AAEF;AACE,iBAAO,IAAP;AAjGJ;AAmGD;;AAED,aAAS+4C,qBAAT,CAA+B7yC,OAA/B,EAAwC8yC,eAAxC,EAAyDxzB,WAAzD,EAAsE;AACpE;AACA;AACA;AACA;AACAuK,MAAAA,cAAc,CAACipB,eAAD,CAAd;;AAEA,cAAQA,eAAe,CAAC12C,GAAxB;AACE,aAAK5D,cAAL;AACE;AACE,gBAAIme,iBAAiB,GAAGm8B,eAAe,CAAC52C,IAAhB,CAAqBya,iBAA7C;;AAEA,gBAAIA,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,KAAKnR,SAAxD,EAAmE;AACjEoR,cAAAA,UAAU,CAACk8B,eAAD,CAAV;AACD;;AAED;AACD;;AAEH,aAAKp6C,QAAL;AACE;AAEEq4B,YAAAA,gBAAgB,CAAC+hB,eAAD,CAAhB;AACAj8B,YAAAA,wBAAwB,CAACi8B,eAAD,CAAxB;AACA/f,YAAAA,2BAA2B;AAC3B;AACD;;AAEH,aAAKn6B,aAAL;AACE;AACEs4B,YAAAA,cAAc,CAAC4hB,eAAD,CAAd;AACA;AACD;;AAEH,aAAKn6C,UAAL;AACEo4B,UAAAA,gBAAgB,CAAC+hB,eAAD,CAAhB;AACA;;AAEF,aAAK15C,iBAAL;AACE64B,UAAAA,kBAAkB,CAAC6gB,eAAD,CAAlB;AACA;;AAEF,aAAKp5C,qBAAL;AACEu4B,UAAAA,kBAAkB,CAAC6gB,eAAD,CAAlB;AACA;;AAEF,aAAK75C,eAAL;AACE,cAAIqD,OAAO,GAAGw2C,eAAe,CAAC52C,IAAhB,CAAqBM,QAAnC;AACA2iB,UAAAA,WAAW,CAAC7iB,OAAD,EAAUw2C,eAAV,CAAX;AACA;;AAEF,aAAKl5C,kBAAL;AACA,aAAKC,qBAAL;AACEytC,UAAAA,cAAc,CAACwL,eAAD,CAAd;AAEA;AAhDJ;AAkDD;;AAED,aAASC,yBAAT,CAAmC/2C,IAAnC,EAAyCg3C,IAAzC,EAA+C12C,OAA/C,EAAwDkE,CAAxD,EAA2DC,CAA3D,EAA8D6S,CAA9D,EAAiE2/B,CAAjE,EAAoEl1B,CAApE,EAAuEm1B,CAAvE,EAA0E;AACxE,UAAIC,QAAQ,GAAGp+C,KAAK,CAACiB,SAAN,CAAgB2iB,KAAhB,CAAsBziB,IAAtB,CAA2BtB,SAA3B,EAAsC,CAAtC,CAAf;;AAEA,UAAI;AACFo+C,QAAAA,IAAI,CAAC/8C,KAAL,CAAWqG,OAAX,EAAoB62C,QAApB;AACD,OAFD,CAEE,OAAOj+C,KAAP,EAAc;AACd,aAAKk+C,OAAL,CAAal+C,KAAb;AACD;AACF;;AAED,QAAIm+C,yBAAyB,GAAGN,yBAAhC;AAEA;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAI,OAAOO,MAAP,KAAkB,WAAlB,IAAiC,OAAOA,MAAM,CAACC,aAAd,KAAgC,UAAjE,IAA+E,OAAOC,QAAP,KAAoB,WAAnG,IAAkH,OAAOA,QAAQ,CAACC,WAAhB,KAAgC,UAAtJ,EAAkK;AAChK,YAAIC,QAAQ,GAAGF,QAAQ,CAACG,aAAT,CAAuB,OAAvB,CAAf;;AAEAN,QAAAA,yBAAyB,GAAG,SAASO,wBAAT,CAAkC53C,IAAlC,EAAwCg3C,IAAxC,EAA8C12C,OAA9C,EAAuDkE,CAAvD,EAA0DC,CAA1D,EAA6D6S,CAA7D,EAAgE2/B,CAAhE,EAAmEl1B,CAAnE,EAAsEm1B,CAAtE,EAAyE;AACnG;AACA;AACA;AACA;AACA,cAAI,OAAOM,QAAP,KAAoB,WAApB,IAAmCA,QAAQ,KAAK,IAApD,EAA0D;AACxD,kBAAM,IAAIlzC,KAAJ,CAAU,8EAA8E,wEAA9E,GAAyJ,8EAAzJ,GAA0O,2EAA1O,GAAwT,wEAAxT,GAAmY,yEAAnY,GAA+c,qBAAzd,CAAN;AACD;;AAED,cAAIuzC,GAAG,GAAGL,QAAQ,CAACC,WAAT,CAAqB,OAArB,CAAV;AACA,cAAIK,OAAO,GAAG,KAAd,CAVmG,CAU9E;AACrB;AACA;AACA;AACA;AACA;;AAEA,cAAI5uC,QAAQ,GAAG,IAAf,CAjBmG,CAiB9E;AACrB;AACA;;AAEA,cAAI6uC,WAAW,GAAGT,MAAM,CAACU,KAAzB,CArBmG,CAqBnE;AAChC;;AAEA,cAAIC,qBAAqB,GAAGr9C,MAAM,CAACs9C,wBAAP,CAAgCZ,MAAhC,EAAwC,OAAxC,CAA5B;;AAEA,mBAASa,oBAAT,GAAgC;AAC9B;AACA;AACA;AACA;AACAT,YAAAA,QAAQ,CAACU,mBAAT,CAA6BC,OAA7B,EAAsCtwB,YAAtC,EAAoD,KAApD,EAL8B,CAK8B;AAC5D;AACA;AACA;;AAEA,gBAAI,OAAOuvB,MAAM,CAACU,KAAd,KAAwB,WAAxB,IAAuCV,MAAM,CAACp/B,cAAP,CAAsB,OAAtB,CAA3C,EAA2E;AACzEo/B,cAAAA,MAAM,CAACU,KAAP,GAAeD,WAAf;AACD;AACF,WAvCkG,CAuCjG;AACF;AACA;;;AAGA,cAAIZ,QAAQ,GAAGp+C,KAAK,CAACiB,SAAN,CAAgB2iB,KAAhB,CAAsBziB,IAAtB,CAA2BtB,SAA3B,EAAsC,CAAtC,CAAf;;AAEA,mBAASmvB,YAAT,GAAwB;AACtB+vB,YAAAA,OAAO,GAAG,IAAV;AACAK,YAAAA,oBAAoB;AACpBnB,YAAAA,IAAI,CAAC/8C,KAAL,CAAWqG,OAAX,EAAoB62C,QAApB;AACAjuC,YAAAA,QAAQ,GAAG,KAAX;AACD,WAnDkG,CAmDjG;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,cAAIhQ,KAAJ,CAhEmG,CAgExF;;AAEX,cAAIo/C,WAAW,GAAG,KAAlB;AACA,cAAIC,kBAAkB,GAAG,KAAzB;;AAEA,mBAASC,iBAAT,CAA2BR,KAA3B,EAAkC;AAChC9+C,YAAAA,KAAK,GAAG8+C,KAAK,CAAC9+C,KAAd;AACAo/C,YAAAA,WAAW,GAAG,IAAd;;AAEA,gBAAIp/C,KAAK,KAAK,IAAV,IAAkB8+C,KAAK,CAACS,KAAN,KAAgB,CAAlC,IAAuCT,KAAK,CAACU,MAAN,KAAiB,CAA5D,EAA+D;AAC7DH,cAAAA,kBAAkB,GAAG,IAArB;AACD;;AAED,gBAAIP,KAAK,CAACW,gBAAV,EAA4B;AAC1B;AACA;AACA;AACA,kBAAIz/C,KAAK,IAAI,IAAT,IAAiB,OAAOA,KAAP,KAAiB,QAAtC,EAAgD;AAC9C,oBAAI;AACFA,kBAAAA,KAAK,CAACssC,gBAAN,GAAyB,IAAzB;AACD,iBAFD,CAEE,OAAOoT,KAAP,EAAc,CAAC;AAChB;AACF;AACF;AACF,WAxFkG,CAwFjG;;;AAGF,cAAIP,OAAO,GAAG,YAAYr4C,IAAI,GAAGA,IAAH,GAAU,uBAA1B,CAAd,CA3FmG,CA2FjC;;AAElEs3C,UAAAA,MAAM,CAACuB,gBAAP,CAAwB,OAAxB,EAAiCL,iBAAjC;AACAd,UAAAA,QAAQ,CAACmB,gBAAT,CAA0BR,OAA1B,EAAmCtwB,YAAnC,EAAiD,KAAjD,EA9FmG,CA8F1C;AACzD;;AAEA8vB,UAAAA,GAAG,CAACiB,SAAJ,CAAcT,OAAd,EAAuB,KAAvB,EAA8B,KAA9B;AACAX,UAAAA,QAAQ,CAACH,aAAT,CAAuBM,GAAvB;;AAEA,cAAII,qBAAJ,EAA2B;AACzBr9C,YAAAA,MAAM,CAACC,cAAP,CAAsBy8C,MAAtB,EAA8B,OAA9B,EAAuCW,qBAAvC;AACD;;AAED,cAAIH,OAAO,IAAI5uC,QAAf,EAAyB;AACvB,gBAAI,CAACovC,WAAL,EAAkB;AAChB;AACA;AACAp/C,cAAAA,KAAK,GAAG,IAAIoL,KAAJ,CAAU,kEAAkE,0DAAlE,GAA+H,2DAA/H,GAA6L,4DAA7L,GAA4P,+DAA5P,GAA8T,6DAA9T,GAA8X,gEAA9X,GAAic,qDAA3c,CAAR;AACD,aAJD,MAIO,IAAIi0C,kBAAJ,EAAwB;AAC7B;AACAr/C,cAAAA,KAAK,GAAG,IAAIoL,KAAJ,CAAU,mEAAmE,0CAAnE,GAAgH,sEAA1H,CAAR;AACD;;AAED,iBAAK8yC,OAAL,CAAal+C,KAAb;AACD,WAnHkG,CAmHjG;;;AAGFo+C,UAAAA,MAAM,CAACc,mBAAP,CAA2B,OAA3B,EAAoCI,iBAApC;;AAEA,cAAI,CAACV,OAAL,EAAc;AACZ;AACA;AACA;AACA;AACAK,YAAAA,oBAAoB;AACpB,mBAAOpB,yBAAyB,CAAC98C,KAA1B,CAAgC,IAAhC,EAAsCrB,SAAtC,CAAP;AACD;AACF,SAhID;AAiID;AACF;AAED,QAAImgD,2BAA2B,GAAG1B,yBAAlC;AAEA,QAAI2B,QAAQ,GAAG,KAAf;AACA,QAAIC,WAAW,GAAG,IAAlB,CA70Xc,CA60XU;;AACxB,QAAIC,QAAQ,GAAG;AACb9B,MAAAA,OAAO,EAAE,UAAUl+C,KAAV,EAAiB;AACxB8/C,QAAAA,QAAQ,GAAG,IAAX;AACAC,QAAAA,WAAW,GAAG//C,KAAd;AACD;AAJY,KAAf;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,aAASigD,qBAAT,CAA+Bn5C,IAA/B,EAAqCg3C,IAArC,EAA2C12C,OAA3C,EAAoDkE,CAApD,EAAuDC,CAAvD,EAA0D6S,CAA1D,EAA6D2/B,CAA7D,EAAgEl1B,CAAhE,EAAmEm1B,CAAnE,EAAsE;AACpE8B,MAAAA,QAAQ,GAAG,KAAX;AACAC,MAAAA,WAAW,GAAG,IAAd;AACAF,MAAAA,2BAA2B,CAAC9+C,KAA5B,CAAkCi/C,QAAlC,EAA4CtgD,SAA5C;AACD;;AACD,aAASwgD,gBAAT,GAA4B;AAC1B,UAAIJ,QAAJ,EAAc;AACZ,YAAI9/C,KAAK,GAAG+/C,WAAZ;AACAD,QAAAA,QAAQ,GAAG,KAAX;AACAC,QAAAA,WAAW,GAAG,IAAd;AACA,eAAO//C,KAAP;AACD,OALD,MAKO;AACL,cAAM,IAAIoL,KAAJ,CAAU,uEAAuE,2DAAjF,CAAN;AACD;AACF;;AAED,QAAI+0C,yCAAyC,GAAG,IAAhD;AAEA;AACEA,MAAAA,yCAAyC,GAAG,IAAIz5B,GAAJ,EAA5C;AACD,KAt3Xa,CAs3XZ;;AACF,QAAI05B,eAAe,GAAG,OAAOC,OAAP,KAAmB,UAAnB,GAAgCA,OAAhC,GAA0C35B,GAAhE;AACA,QAAI45B,UAAU,GAAG,IAAjB,CAx3Xc,CAw3XS;;AAEvB,aAASC,wBAAT,CAAkCvgD,KAAlC,EAAyC;AACvC;AACA;AACA;AACA;AACA;AACA;AACEigD,QAAAA,qBAAqB,CAAC,IAAD,EAAO,YAAY;AACtC,gBAAMjgD,KAAN;AACD,SAFoB,CAArB;AAGAkgD,QAAAA,gBAAgB;AACjB;AACF;;AAED,QAAIM,iCAAiC,GAAG,UAAU11C,OAAV,EAAmBE,QAAnB,EAA6B;AACnEA,MAAAA,QAAQ,CAAC5J,KAAT,GAAiB0J,OAAO,CAACwoB,aAAzB;AACAtoB,MAAAA,QAAQ,CAACsmB,KAAT,GAAiBxmB,OAAO,CAAC8Y,aAAzB;;AAEA,UAAK9Y,OAAO,CAAC+a,IAAR,GAAezU,WAApB,EAAiC;AAC/B,YAAI;AACFw6B,UAAAA,sBAAsB;AACtB5gC,UAAAA,QAAQ,CAACy1C,oBAAT;AACD,SAHD,SAGU;AACRnV,UAAAA,0BAA0B,CAACxgC,OAAD,CAA1B;AACD;AACF,OAPD,MAOO;AACLE,QAAAA,QAAQ,CAACy1C,oBAAT;AACD;AACF,KAdD,CAx4Xc,CAs5XX;;;AAGH,aAASC,8BAAT,CAAwC51C,OAAxC,EAAiD61C,sBAAjD,EAAyE31C,QAAzE,EAAmF;AACjF,UAAI;AACFw1C,QAAAA,iCAAiC,CAAC11C,OAAD,EAAUE,QAAV,CAAjC;AACD,OAFD,CAEE,OAAOhL,KAAP,EAAc;AACdugD,QAAAA,wBAAwB,CAACvgD,KAAD,CAAxB;AACA4gD,QAAAA,uBAAuB,CAAC91C,OAAD,EAAU61C,sBAAV,EAAkC3gD,KAAlC,CAAvB;AACD;AACF,KAh6Xa,CAg6XZ;;;AAEF,aAAS6gD,eAAT,CAAyB/1C,OAAzB,EAAkC61C,sBAAlC,EAA0D;AACxD,UAAI/qB,GAAG,GAAG9qB,OAAO,CAAC8qB,GAAlB;;AAEA,UAAIA,GAAG,KAAK,IAAZ,EAAkB;AAChB,YAAI,OAAOA,GAAP,KAAe,UAAnB,EAA+B;AAC7B,cAAIkrB,MAAJ;;AAEA,cAAI;AACF,gBAAIj+C,mBAAmB,IAAIC,yBAAvB,IAAoDgI,OAAO,CAAC+a,IAAR,GAAezU,WAAvE,EAAoF;AAClF,kBAAI;AACFw6B,gBAAAA,sBAAsB;AACtBkV,gBAAAA,MAAM,GAAGlrB,GAAG,CAAC,IAAD,CAAZ;AACD,eAHD,SAGU;AACR0V,gBAAAA,0BAA0B,CAACxgC,OAAD,CAA1B;AACD;AACF,aAPD,MAOO;AACLg2C,cAAAA,MAAM,GAAGlrB,GAAG,CAAC,IAAD,CAAZ;AACD;AACF,WAXD,CAWE,OAAO51B,KAAP,EAAc;AACdugD,YAAAA,wBAAwB,CAACvgD,KAAD,CAAxB;AACA4gD,YAAAA,uBAAuB,CAAC91C,OAAD,EAAU61C,sBAAV,EAAkC3gD,KAAlC,CAAvB;AACD;;AAED;AACE,gBAAI,OAAO8gD,MAAP,KAAkB,UAAtB,EAAkC;AAChC9gD,cAAAA,KAAK,CAAC,wDAAwD,8CAAzD,EAAyGiI,yBAAyB,CAAC6C,OAAD,CAAlI,CAAL;AACD;AACF;AACF,SAxBD,MAwBO;AACL8qB,UAAAA,GAAG,CAAC9qB,OAAJ,GAAc,IAAd;AACD;AACF;AACF;;AAED,aAASi2C,iBAAT,CAA2Bj2C,OAA3B,EAAoC61C,sBAApC,EAA4Djc,OAA5D,EAAqE;AACnE,UAAI;AACFA,QAAAA,OAAO;AACR,OAFD,CAEE,OAAO1kC,KAAP,EAAc;AACdugD,QAAAA,wBAAwB,CAACvgD,KAAD,CAAxB;AACA4gD,QAAAA,uBAAuB,CAAC91C,OAAD,EAAU61C,sBAAV,EAAkC3gD,KAAlC,CAAvB;AACD;AACF;;AAED,QAAIghD,qBAAqB,GAAG,IAA5B;AACA,QAAIC,iCAAiC,GAAG,KAAxC;;AACA,aAASC,2BAAT,CAAqCxxC,IAArC,EAA2C0qC,UAA3C,EAAuD;AACrD4G,MAAAA,qBAAqB,GAAGzmC,gBAAgB,CAAC7K,IAAI,CAAC8K,aAAN,CAAxC;AACA8lC,MAAAA,UAAU,GAAGlG,UAAb;AACA+G,MAAAA,iCAAiC,GAHoB,CAGhB;;AAErC,UAAIC,UAAU,GAAGH,iCAAjB;AACAA,MAAAA,iCAAiC,GAAG,KAApC;AACAD,MAAAA,qBAAqB,GAAG,IAAxB;AACA,aAAOI,UAAP;AACD;;AAED,aAASD,iCAAT,GAA6C;AAC3C,aAAOb,UAAU,KAAK,IAAtB,EAA4B;AAC1B,YAAIp4C,KAAK,GAAGo4C,UAAZ,CAD0B,CACF;;AAExB,YAAI30C,KAAK,GAAGzD,KAAK,CAACyD,KAAlB;;AAEA,YAAI,CAACzD,KAAK,CAAC8nC,YAAN,GAAqBnmC,kBAAtB,MAA8C1B,OAA9C,IAAyDwD,KAAK,KAAK,IAAvE,EAA6E;AAC3E01C,UAAAA,0BAA0B,CAAC11C,KAAD,EAAQzD,KAAR,CAA1B;AACAo4C,UAAAA,UAAU,GAAG30C,KAAb;AACD,SAHD,MAGO;AACL21C,UAAAA,oCAAoC;AACrC;AACF;AACF;;AAED,aAASA,oCAAT,GAAgD;AAC9C,aAAOhB,UAAU,KAAK,IAAtB,EAA4B;AAC1B,YAAIp4C,KAAK,GAAGo4C,UAAZ;AACAp7B,QAAAA,eAAe,CAAChd,KAAD,CAAf;;AAEA,YAAI;AACFq5C,UAAAA,kCAAkC,CAACr5C,KAAD,CAAlC;AACD,SAFD,CAEE,OAAOlI,KAAP,EAAc;AACdugD,UAAAA,wBAAwB,CAACvgD,KAAD,CAAxB;AACA4gD,UAAAA,uBAAuB,CAAC14C,KAAD,EAAQA,KAAK,CAACuC,MAAd,EAAsBzK,KAAtB,CAAvB;AACD;;AAEDglB,QAAAA,iBAAiB;AACjB,YAAIpZ,OAAO,GAAG1D,KAAK,CAAC0D,OAApB;;AAEA,YAAIA,OAAO,KAAK,IAAhB,EAAsB;AACpBy1C,UAAAA,0BAA0B,CAACz1C,OAAD,EAAU1D,KAAK,CAACuC,MAAhB,CAA1B;AACA61C,UAAAA,UAAU,GAAG10C,OAAb;AACA;AACD;;AAED00C,QAAAA,UAAU,GAAGp4C,KAAK,CAACuC,MAAnB;AACD;AACF;;AAED,aAAS82C,kCAAT,CAA4CtyB,YAA5C,EAA0D;AACxD,UAAInkB,OAAO,GAAGmkB,YAAY,CAAC3kB,SAA3B;AACA,UAAIE,KAAK,GAAGykB,YAAY,CAACzkB,KAAzB;;AAEA,UAAI,CAACA,KAAK,GAAG1B,QAAT,MAAuBX,OAA3B,EAAoC;AAClC+c,QAAAA,eAAe,CAAC+J,YAAD,CAAf;;AAEA,gBAAQA,YAAY,CAAC/nB,GAArB;AACE,eAAK7D,iBAAL;AACA,eAAKW,UAAL;AACA,eAAKI,mBAAL;AACE;AACE;AACD;;AAEH,eAAKd,cAAL;AACE;AACE,kBAAIwH,OAAO,KAAK,IAAhB,EAAsB;AACpB,oBAAIwpC,SAAS,GAAGxpC,OAAO,CAACwoB,aAAxB;AACA,oBAAI3F,SAAS,GAAG7iB,OAAO,CAAC8Y,aAAxB;AACA,oBAAI5Y,QAAQ,GAAGikB,YAAY,CAAChkB,SAA5B,CAHoB,CAGmB;AACvC;AACA;;AAEA;AACE,sBAAIgkB,YAAY,CAACjoB,IAAb,KAAsBioB,YAAY,CAAC6E,WAAnC,IAAkD,CAACmf,4BAAvD,EAAqF;AACnF,wBAAIjoC,QAAQ,CAAC5J,KAAT,KAAmB6tB,YAAY,CAACqE,aAApC,EAAmD;AACjDtzB,sBAAAA,KAAK,CAAC,sDAAsD,2BAAtD,GAAoF,6DAApF,GAAoJ,8CAApJ,GAAqM,uBAAtM,EAA+NiI,yBAAyB,CAACgnB,YAAD,CAAzB,IAA2C,UAA1Q,CAAL;AACD;;AAED,wBAAIjkB,QAAQ,CAACsmB,KAAT,KAAmBrC,YAAY,CAACrL,aAApC,EAAmD;AACjD5jB,sBAAAA,KAAK,CAAC,sDAAsD,2BAAtD,GAAoF,6DAApF,GAAoJ,8CAApJ,GAAqM,uBAAtM,EAA+NiI,yBAAyB,CAACgnB,YAAD,CAAzB,IAA2C,UAA1Q,CAAL;AACD;AACF;AACF;AAED,oBAAIuyB,QAAQ,GAAGx2C,QAAQ,CAACgnB,uBAAT,CAAiC/C,YAAY,CAAC6E,WAAb,KAA6B7E,YAAY,CAACjoB,IAA1C,GAAiDstC,SAAjD,GAA6DtrB,mBAAmB,CAACiG,YAAY,CAACjoB,IAAd,EAAoBstC,SAApB,CAAjH,EAAiJ3mB,SAAjJ,CAAf;AAEA;AACE,sBAAI8zB,UAAU,GAAGtB,yCAAjB;;AAEA,sBAAIqB,QAAQ,KAAKlxC,SAAb,IAA0B,CAACmxC,UAAU,CAAC7hC,GAAX,CAAeqP,YAAY,CAACjoB,IAA5B,CAA/B,EAAkE;AAChEy6C,oBAAAA,UAAU,CAACt6B,GAAX,CAAe8H,YAAY,CAACjoB,IAA5B;AAEAhH,oBAAAA,KAAK,CAAC,8DAA8D,gDAA/D,EAAiHiI,yBAAyB,CAACgnB,YAAD,CAA1I,CAAL;AACD;AACF;AAEDjkB,gBAAAA,QAAQ,CAAC02C,mCAAT,GAA+CF,QAA/C;AACD;;AAED;AACD;;AAEH,eAAKh+C,QAAL;AACE;AACE;AACE,oBAAIkM,IAAI,GAAGuf,YAAY,CAAChkB,SAAxB;AACAiP,gBAAAA,cAAc,CAACxK,IAAI,CAAC8K,aAAN,CAAd;AACD;AAED;AACD;;AAEH,eAAK9W,aAAL;AACA,eAAKC,QAAL;AACA,eAAKF,UAAL;AACA,eAAKa,wBAAL;AACE;AACA;;AAEF;AACE;AACE,oBAAM,IAAI8G,KAAJ,CAAU,uEAAuE,wDAAjF,CAAN;AACD;AAnEL;;AAsEA4Z,QAAAA,iBAAiB;AAClB;AACF;;AAED,aAAS28B,2BAAT,CAAqCn3C,KAArC,EAA4CykB,YAA5C,EAA0D0xB,sBAA1D,EAAkF;AAChF,UAAI11B,WAAW,GAAGgE,YAAY,CAAChE,WAA/B;AACA,UAAIkW,UAAU,GAAGlW,WAAW,KAAK,IAAhB,GAAuBA,WAAW,CAACkW,UAAnC,GAAgD,IAAjE;;AAEA,UAAIA,UAAU,KAAK,IAAnB,EAAyB;AACvB,YAAIwD,WAAW,GAAGxD,UAAU,CAAC9V,IAA7B;AACA,YAAI8D,MAAM,GAAGwV,WAAb;;AAEA,WAAG;AACD,cAAI,CAACxV,MAAM,CAACjoB,GAAP,GAAasD,KAAd,MAAyBA,KAA7B,EAAoC;AAClC;AACA,gBAAIk6B,OAAO,GAAGvV,MAAM,CAACuV,OAArB;AACAvV,YAAAA,MAAM,CAACuV,OAAP,GAAiBp0B,SAAjB;;AAEA,gBAAIo0B,OAAO,KAAKp0B,SAAhB,EAA2B;AAEzBywC,cAAAA,iBAAiB,CAAC9xB,YAAD,EAAe0xB,sBAAf,EAAuCjc,OAAvC,CAAjB;AACD;AACF;;AAEDvV,UAAAA,MAAM,GAAGA,MAAM,CAAC9D,IAAhB;AACD,SAbD,QAaS8D,MAAM,KAAKwV,WAbpB;AAcD;AACF;;AAED,aAASid,yBAAT,CAAmCp3C,KAAnC,EAA0CykB,YAA1C,EAAwD;AACtD,UAAIhE,WAAW,GAAGgE,YAAY,CAAChE,WAA/B;AACA,UAAIkW,UAAU,GAAGlW,WAAW,KAAK,IAAhB,GAAuBA,WAAW,CAACkW,UAAnC,GAAgD,IAAjE;;AAEA,UAAIA,UAAU,KAAK,IAAnB,EAAyB;AACvB,YAAIwD,WAAW,GAAGxD,UAAU,CAAC9V,IAA7B;AACA,YAAI8D,MAAM,GAAGwV,WAAb;;AAEA,WAAG;AACD,cAAI,CAACxV,MAAM,CAACjoB,GAAP,GAAasD,KAAd,MAAyBA,KAA7B,EAAoC;AAGlC,gBAAIi6B,MAAM,GAAGtV,MAAM,CAACsV,MAApB;AACAtV,YAAAA,MAAM,CAACuV,OAAP,GAAiBD,MAAM,EAAvB;AAEA;AACE,kBAAIC,OAAO,GAAGvV,MAAM,CAACuV,OAArB;;AAEA,kBAAIA,OAAO,KAAKp0B,SAAZ,IAAyB,OAAOo0B,OAAP,KAAmB,UAAhD,EAA4D;AAC1D,oBAAI1F,QAAQ,GAAG,KAAK,CAApB;;AAEA,oBAAI,CAAC7P,MAAM,CAACjoB,GAAP,GAAaw2B,MAAd,MAA0Bv1B,OAA9B,EAAuC;AACrC62B,kBAAAA,QAAQ,GAAG,iBAAX;AACD,iBAFD,MAEO,IAAI,CAAC7P,MAAM,CAACjoB,GAAP,GAAau2B,SAAd,MAA6Bt1B,OAAjC,EAA0C;AAC/C62B,kBAAAA,QAAQ,GAAG,oBAAX;AACD,iBAFM,MAEA;AACLA,kBAAAA,QAAQ,GAAG,WAAX;AACD;;AAED,oBAAItM,QAAQ,GAAG,KAAK,CAApB;;AAEA,oBAAIgS,OAAO,KAAK,IAAhB,EAAsB;AACpBhS,kBAAAA,QAAQ,GAAG,+DAA+D,oCAA1E;AACD,iBAFD,MAEO,IAAI,OAAOgS,OAAO,CAAC6I,IAAf,KAAwB,UAA5B,EAAwC;AAC7C7a,kBAAAA,QAAQ,GAAG,iCAAiCsM,QAAjC,GAA4C,2CAA5C,GAA0F,uDAA1F,GAAoJ,8BAApJ,GAAqLA,QAArL,GAAgM,YAAhM,GAA+M,kCAA/M,GAAoP,6BAApP,GAAoR,qDAApR,GAA4U,cAA5U,GAA6V,OAA7V,GAAuW,kBAAvW,GAA4X,kEAA5X,GAAic,yFAA5c;AACD,iBAFM,MAEA;AACLtM,kBAAAA,QAAQ,GAAG,oBAAoBgS,OAA/B;AACD;;AAED1kC,gBAAAA,KAAK,CAAC,qDAAqD,+BAAtD,EAAuFg/B,QAAvF,EAAiGtM,QAAjG,CAAL;AACD;AACF;AACF;;AAEDvD,UAAAA,MAAM,GAAGA,MAAM,CAAC9D,IAAhB;AACD,SArCD,QAqCS8D,MAAM,KAAKwV,WArCpB;AAsCD;AACF;;AAED,aAASkd,4BAAT,CAAsCC,YAAtC,EAAoD7yB,YAApD,EAAkE;AAChE;AACE;AACA,YAAI,CAACA,YAAY,CAACzkB,KAAb,GAAqBlC,MAAtB,MAAkCH,OAAtC,EAA+C;AAC7C,kBAAQ8mB,YAAY,CAAC/nB,GAArB;AACE,iBAAKjD,QAAL;AACE;AACE,oBAAI0nC,qBAAqB,GAAG1c,YAAY,CAAChkB,SAAb,CAAuB0gC,qBAAnD;AACA,oBAAIoW,qBAAqB,GAAG9yB,YAAY,CAACqE,aAAzC;AAAA,oBACI6U,EAAE,GAAG4Z,qBAAqB,CAAC5Z,EAD/B;AAAA,oBAEI6Z,YAAY,GAAGD,qBAAqB,CAACC,YAFzC,CAFF,CAIyD;AACvD;;AAEA,oBAAI9X,UAAU,GAAGU,aAAa,EAA9B;AACA,oBAAIqX,KAAK,GAAGhzB,YAAY,CAAC3kB,SAAb,KAA2B,IAA3B,GAAkC,OAAlC,GAA4C,QAAxD;AAEA;AACE,sBAAIkgC,qBAAqB,EAAzB,EAA6B;AAC3ByX,oBAAAA,KAAK,GAAG,eAAR;AACD;AACF;;AAED,oBAAI,OAAOD,YAAP,KAAwB,UAA5B,EAAwC;AACtCA,kBAAAA,YAAY,CAAC7Z,EAAD,EAAK8Z,KAAL,EAAYtW,qBAAZ,EAAmCzB,UAAnC,CAAZ;AACD,iBAlBH,CAkBI;AACF;;;AAGA,oBAAIqB,WAAW,GAAGtc,YAAY,CAACxkB,MAA/B;;AAEAy3C,gBAAAA,KAAK,EAAE,OAAO3W,WAAW,KAAK,IAAvB,EAA6B;AAClC,0BAAQA,WAAW,CAACrkC,GAApB;AACE,yBAAK1D,QAAL;AACE,0BAAIkM,IAAI,GAAG67B,WAAW,CAACtgC,SAAvB;AACAyE,sBAAAA,IAAI,CAACi8B,qBAAL,IAA8BA,qBAA9B;AACA,4BAAMuW,KAAN;;AAEF,yBAAKj+C,QAAL;AACE,0BAAIwnC,eAAe,GAAGF,WAAW,CAACtgC,SAAlC;AACAwgC,sBAAAA,eAAe,CAACE,qBAAhB,IAAyCA,qBAAzC;AACA,4BAAMuW,KAAN;AATJ;;AAYA3W,kBAAAA,WAAW,GAAGA,WAAW,CAAC9gC,MAA1B;AACD;;AAED;AACD;AA3CL;AA6CD;AACF;AACF;;AAED,aAAS03C,yBAAT,CAAmCL,YAAnC,EAAiDh3C,OAAjD,EAA0DmkB,YAA1D,EAAwEmzB,cAAxE,EAAwF;AACtF,UAAI,CAACnzB,YAAY,CAACzkB,KAAb,GAAqBT,UAAtB,MAAsC5B,OAA1C,EAAmD;AACjD,gBAAQ8mB,YAAY,CAAC/nB,GAArB;AACE,eAAK7D,iBAAL;AACA,eAAKW,UAAL;AACA,eAAKI,mBAAL;AACE;AACE;AACE;AACA;AACA;AACA;AACA,oBAAK6qB,YAAY,CAACpJ,IAAb,GAAoBzU,WAAzB,EAAsC;AACpC,sBAAI;AACFw6B,oBAAAA,sBAAsB;AACtBgW,oBAAAA,yBAAyB,CAAClkB,MAAM,GAAGF,SAAV,EAAqBvO,YAArB,CAAzB;AACD,mBAHD,SAGU;AACRqc,oBAAAA,0BAA0B,CAACrc,YAAD,CAA1B;AACD;AACF,iBAPD,MAOO;AACL2yB,kBAAAA,yBAAyB,CAAClkB,MAAM,GAAGF,SAAV,EAAqBvO,YAArB,CAAzB;AACD;AACF;AAED;AACD;;AAEH,eAAK3rB,cAAL;AACE;AACE,kBAAI0H,QAAQ,GAAGikB,YAAY,CAAChkB,SAA5B;;AAEA,kBAAIgkB,YAAY,CAACzkB,KAAb,GAAqBlC,MAAzB,EAAiC;AAC/B;AACE,sBAAIwC,OAAO,KAAK,IAAhB,EAAsB;AACpB;AACA;AACA;AACA;AACE,0BAAImkB,YAAY,CAACjoB,IAAb,KAAsBioB,YAAY,CAAC6E,WAAnC,IAAkD,CAACmf,4BAAvD,EAAqF;AACnF,4BAAIjoC,QAAQ,CAAC5J,KAAT,KAAmB6tB,YAAY,CAACqE,aAApC,EAAmD;AACjDtzB,0BAAAA,KAAK,CAAC,sDAAsD,qBAAtD,GAA8E,6DAA9E,GAA8I,8CAA9I,GAA+L,uBAAhM,EAAyNiI,yBAAyB,CAACgnB,YAAD,CAAzB,IAA2C,UAApQ,CAAL;AACD;;AAED,4BAAIjkB,QAAQ,CAACsmB,KAAT,KAAmBrC,YAAY,CAACrL,aAApC,EAAmD;AACjD5jB,0BAAAA,KAAK,CAAC,sDAAsD,qBAAtD,GAA8E,6DAA9E,GAA8I,8CAA9I,GAA+L,uBAAhM,EAAyNiI,yBAAyB,CAACgnB,YAAD,CAAzB,IAA2C,UAApQ,CAAL;AACD;AACF;AACF;;AAED,wBAAKA,YAAY,CAACpJ,IAAb,GAAoBzU,WAAzB,EAAsC;AACpC,0BAAI;AACFw6B,wBAAAA,sBAAsB;AACtB5gC,wBAAAA,QAAQ,CAACmoB,iBAAT;AACD,uBAHD,SAGU;AACRmY,wBAAAA,0BAA0B,CAACrc,YAAD,CAA1B;AACD;AACF,qBAPD,MAOO;AACLjkB,sBAAAA,QAAQ,CAACmoB,iBAAT;AACD;AACF,mBA1BD,MA0BO;AACL,wBAAImhB,SAAS,GAAGrlB,YAAY,CAAC6E,WAAb,KAA6B7E,YAAY,CAACjoB,IAA1C,GAAiD8D,OAAO,CAACwoB,aAAzD,GAAyEtK,mBAAmB,CAACiG,YAAY,CAACjoB,IAAd,EAAoB8D,OAAO,CAACwoB,aAA5B,CAA5G;AACA,wBAAI3F,SAAS,GAAG7iB,OAAO,CAAC8Y,aAAxB,CAFK,CAEkC;AACvC;AACA;;AAEA;AACE,0BAAIqL,YAAY,CAACjoB,IAAb,KAAsBioB,YAAY,CAAC6E,WAAnC,IAAkD,CAACmf,4BAAvD,EAAqF;AACnF,4BAAIjoC,QAAQ,CAAC5J,KAAT,KAAmB6tB,YAAY,CAACqE,aAApC,EAAmD;AACjDtzB,0BAAAA,KAAK,CAAC,sDAAsD,sBAAtD,GAA+E,6DAA/E,GAA+I,8CAA/I,GAAgM,uBAAjM,EAA0NiI,yBAAyB,CAACgnB,YAAD,CAAzB,IAA2C,UAArQ,CAAL;AACD;;AAED,4BAAIjkB,QAAQ,CAACsmB,KAAT,KAAmBrC,YAAY,CAACrL,aAApC,EAAmD;AACjD5jB,0BAAAA,KAAK,CAAC,sDAAsD,sBAAtD,GAA+E,6DAA/E,GAA+I,8CAA/I,GAAgM,uBAAjM,EAA0NiI,yBAAyB,CAACgnB,YAAD,CAAzB,IAA2C,UAArQ,CAAL;AACD;AACF;AACF;;AAED,wBAAKA,YAAY,CAACpJ,IAAb,GAAoBzU,WAAzB,EAAsC;AACpC,0BAAI;AACFw6B,wBAAAA,sBAAsB;AACtB5gC,wBAAAA,QAAQ,CAACinB,kBAAT,CAA4BqiB,SAA5B,EAAuC3mB,SAAvC,EAAkD3iB,QAAQ,CAAC02C,mCAA3D;AACD,uBAHD,SAGU;AACRpW,wBAAAA,0BAA0B,CAACrc,YAAD,CAA1B;AACD;AACF,qBAPD,MAOO;AACLjkB,sBAAAA,QAAQ,CAACinB,kBAAT,CAA4BqiB,SAA5B,EAAuC3mB,SAAvC,EAAkD3iB,QAAQ,CAAC02C,mCAA3D;AACD;AACF;AACF;AACF,eA7DH,CA6DI;AACF;;;AAGA,kBAAIz2B,WAAW,GAAGgE,YAAY,CAAChE,WAA/B;;AAEA,kBAAIA,WAAW,KAAK,IAApB,EAA0B;AACxB;AACE,sBAAIgE,YAAY,CAACjoB,IAAb,KAAsBioB,YAAY,CAAC6E,WAAnC,IAAkD,CAACmf,4BAAvD,EAAqF;AACnF,wBAAIjoC,QAAQ,CAAC5J,KAAT,KAAmB6tB,YAAY,CAACqE,aAApC,EAAmD;AACjDtzB,sBAAAA,KAAK,CAAC,sDAAsD,+BAAtD,GAAwF,6DAAxF,GAAwJ,8CAAxJ,GAAyM,uBAA1M,EAAmOiI,yBAAyB,CAACgnB,YAAD,CAAzB,IAA2C,UAA9Q,CAAL;AACD;;AAED,wBAAIjkB,QAAQ,CAACsmB,KAAT,KAAmBrC,YAAY,CAACrL,aAApC,EAAmD;AACjD5jB,sBAAAA,KAAK,CAAC,sDAAsD,+BAAtD,GAAwF,6DAAxF,GAAwJ,8CAAxJ,GAAyM,uBAA1M,EAAmOiI,yBAAyB,CAACgnB,YAAD,CAAzB,IAA2C,UAA9Q,CAAL;AACD;AACF;AACF,iBAXuB,CAWtB;AACF;AACA;;AAGAD,gBAAAA,iBAAiB,CAACC,YAAD,EAAehE,WAAf,EAA4BjgB,QAA5B,CAAjB;AACD;;AAED;AACD;;AAEH,eAAKxH,QAAL;AACE;AACE;AACA;AACA,kBAAI6+C,YAAY,GAAGpzB,YAAY,CAAChE,WAAhC;;AAEA,kBAAIo3B,YAAY,KAAK,IAArB,EAA2B;AACzB,oBAAI7M,SAAS,GAAG,IAAhB;;AAEA,oBAAIvmB,YAAY,CAACtjB,KAAb,KAAuB,IAA3B,EAAiC;AAC/B,0BAAQsjB,YAAY,CAACtjB,KAAb,CAAmBzE,GAA3B;AACE,yBAAKxD,aAAL;AACE8xC,sBAAAA,SAAS,GAAGl8B,iBAAiB,CAAC2V,YAAY,CAACtjB,KAAb,CAAmBV,SAApB,CAA7B;AACA;;AAEF,yBAAK3H,cAAL;AACEkyC,sBAAAA,SAAS,GAAGvmB,YAAY,CAACtjB,KAAb,CAAmBV,SAA/B;AACA;AAPJ;AASD;;AAED+jB,gBAAAA,iBAAiB,CAACC,YAAD,EAAeozB,YAAf,EAA6B7M,SAA7B,CAAjB;AACD;;AAED;AACD;;AAEH,eAAK9xC,aAAL;AACE;AACE,kBAAI4+C,UAAU,GAAGrzB,YAAY,CAAChkB,SAA9B,CADF,CAC2C;AACzC;AACA;AACA;;AAEA,kBAAIH,OAAO,KAAK,IAAZ,IAAoBmkB,YAAY,CAACzkB,KAAb,GAAqBlC,MAA7C,EAAqD;AACnD,oBAAItB,IAAI,GAAGioB,YAAY,CAACjoB,IAAxB;AACA,oBAAI5F,KAAK,GAAG6tB,YAAY,CAACqE,aAAzB;AACD;;AAED;AACD;;AAEH,eAAK3vB,QAAL;AACE;AACE;AACA;AACD;;AAEH,eAAKF,UAAL;AACE;AACE;AACA;AACD;;AAEH,eAAKQ,QAAL;AACE;AACE;AACE,oBAAIs+C,sBAAsB,GAAGtzB,YAAY,CAACqE,aAA1C;AAAA,oBACIkvB,QAAQ,GAAGD,sBAAsB,CAACC,QADtC;AAAA,oBAEIC,QAAQ,GAAGF,sBAAsB,CAACE,QAFtC;AAGA,oBAAIjX,cAAc,GAAGvc,YAAY,CAAChkB,SAAb,CAAuBugC,cAA5C;AACA,oBAAItB,UAAU,GAAGU,aAAa,EAA9B;AACA,oBAAIqX,KAAK,GAAGn3C,OAAO,KAAK,IAAZ,GAAmB,OAAnB,GAA6B,QAAzC;AAEA;AACE,sBAAI0/B,qBAAqB,EAAzB,EAA6B;AAC3ByX,oBAAAA,KAAK,GAAG,eAAR;AACD;AACF;;AAED,oBAAI,OAAOQ,QAAP,KAAoB,UAAxB,EAAoC;AAClCA,kBAAAA,QAAQ,CAACxzB,YAAY,CAACqE,aAAb,CAA2B6U,EAA5B,EAAgC8Z,KAAhC,EAAuChzB,YAAY,CAACmc,cAApD,EAAoEnc,YAAY,CAACghB,gBAAjF,EAAmGhhB,YAAY,CAAC8b,eAAhH,EAAiIb,UAAjI,CAAR;AACD;;AAED;AACE,sBAAI,OAAOsY,QAAP,KAAoB,UAAxB,EAAoC;AAClCA,oBAAAA,QAAQ,CAACvzB,YAAY,CAACqE,aAAb,CAA2B6U,EAA5B,EAAgC8Z,KAAhC,EAAuCzW,cAAvC,EAAuDtB,UAAvD,CAAR;AACD,mBAHH,CAGI;AACF;AACA;;;AAGAwY,kBAAAA,mCAAmC,CAACzzB,YAAD,CAAnC,CARF,CAQqD;AACnD;;AAEA,sBAAIsc,WAAW,GAAGtc,YAAY,CAACxkB,MAA/B;;AAEAy3C,kBAAAA,KAAK,EAAE,OAAO3W,WAAW,KAAK,IAAvB,EAA6B;AAClC,4BAAQA,WAAW,CAACrkC,GAApB;AACE,2BAAK1D,QAAL;AACE,4BAAIkM,IAAI,GAAG67B,WAAW,CAACtgC,SAAvB;AACAyE,wBAAAA,IAAI,CAAC87B,cAAL,IAAuBA,cAAvB;AACA,8BAAM0W,KAAN;;AAEF,2BAAKj+C,QAAL;AACE,4BAAIwnC,eAAe,GAAGF,WAAW,CAACtgC,SAAlC;AACAwgC,wBAAAA,eAAe,CAACD,cAAhB,IAAkCA,cAAlC;AACA,8BAAM0W,KAAN;AATJ;;AAYA3W,oBAAAA,WAAW,GAAGA,WAAW,CAAC9gC,MAA1B;AACD;AACF;AACF;AAED;AACD;;AAEH,eAAKvG,iBAAL;AACE;AACE;AACD;;AAEH,eAAKM,qBAAL;AACA,eAAKF,wBAAL;AACA,eAAKG,cAAL;AACA,eAAKC,kBAAL;AACA,eAAKC,qBAAL;AACE;AACE;AACD;;AAEH;AACE,kBAAM,IAAIyG,KAAJ,CAAU,uEAAuE,wDAAjF,CAAN;AA9OJ;AAgPD;;AAED;AACE;AACE,cAAI6jB,YAAY,CAACzkB,KAAb,GAAqB3B,GAAzB,EAA8B;AAC5B85C,YAAAA,eAAe,CAAC1zB,YAAD,CAAf;AACD;AACF;AACF;AACF;;AAED,aAAS2zB,uBAAT,CAAiC3zB,YAAjC,EAA+CpU,QAA/C,EAAyD;AACvD;AACA,UAAIgoC,eAAe,GAAG,IAAtB;AAEA;AACE;AACA;AACA,YAAIz4C,IAAI,GAAG6kB,YAAX;;AAEA,eAAO,IAAP,EAAa;AACX,cAAI7kB,IAAI,CAAClD,GAAL,KAAaxD,aAAjB,EAAgC;AAC9B,gBAAIm/C,eAAe,KAAK,IAAxB,EAA8B;AAC5BA,cAAAA,eAAe,GAAGz4C,IAAlB;AACA,kBAAIY,QAAQ,GAAGZ,IAAI,CAACa,SAApB;;AAEA,kBAAI4P,QAAJ,EAAc;AACZyB,gBAAAA,YAAY,CAACtR,QAAD,CAAZ;AACD,eAFD,MAEO;AACLwR,gBAAAA,cAAc,CAACpS,IAAI,CAACa,SAAN,EAAiBb,IAAI,CAACkpB,aAAtB,CAAd;AACD;AACF;AACF,WAXD,MAWO,IAAIlpB,IAAI,CAAClD,GAAL,KAAavD,QAAjB,EAA2B;AAChC,gBAAIk/C,eAAe,KAAK,IAAxB,EAA8B;AAC5B,kBAAIC,UAAU,GAAG14C,IAAI,CAACa,SAAtB;;AAEA,kBAAI4P,QAAJ,EAAc;AACZ0B,gBAAAA,gBAAgB,CAACumC,UAAD,CAAhB;AACD,eAFD,MAEO;AACLrmC,gBAAAA,kBAAkB,CAACqmC,UAAD,EAAa14C,IAAI,CAACkpB,aAAlB,CAAlB;AACD;AACF;AACF,WAVM,MAUA,IAAI,CAAClpB,IAAI,CAAClD,GAAL,KAAaxC,kBAAb,IAAmC0F,IAAI,CAAClD,GAAL,KAAavC,qBAAjD,KAA2EyF,IAAI,CAACwZ,aAAL,KAAuB,IAAlG,IAA0GxZ,IAAI,KAAK6kB,YAAvH,EAAqI,CAArI,KAA4I,IAAI7kB,IAAI,CAACuB,KAAL,KAAe,IAAnB,EAAyB;AAC1KvB,YAAAA,IAAI,CAACuB,KAAL,CAAWlB,MAAX,GAAoBL,IAApB;AACAA,YAAAA,IAAI,GAAGA,IAAI,CAACuB,KAAZ;AACA;AACD;;AAED,cAAIvB,IAAI,KAAK6kB,YAAb,EAA2B;AACzB;AACD;;AAED,iBAAO7kB,IAAI,CAACwB,OAAL,KAAiB,IAAxB,EAA8B;AAC5B,gBAAIxB,IAAI,CAACK,MAAL,KAAgB,IAAhB,IAAwBL,IAAI,CAACK,MAAL,KAAgBwkB,YAA5C,EAA0D;AACxD;AACD;;AAED,gBAAI4zB,eAAe,KAAKz4C,IAAxB,EAA8B;AAC5By4C,cAAAA,eAAe,GAAG,IAAlB;AACD;;AAEDz4C,YAAAA,IAAI,GAAGA,IAAI,CAACK,MAAZ;AACD;;AAED,cAAIo4C,eAAe,KAAKz4C,IAAxB,EAA8B;AAC5By4C,YAAAA,eAAe,GAAG,IAAlB;AACD;;AAEDz4C,UAAAA,IAAI,CAACwB,OAAL,CAAanB,MAAb,GAAsBL,IAAI,CAACK,MAA3B;AACAL,UAAAA,IAAI,GAAGA,IAAI,CAACwB,OAAZ;AACD;AACF;AACF;;AAED,aAAS+2C,eAAT,CAAyB1zB,YAAzB,EAAuC;AACrC,UAAI2G,GAAG,GAAG3G,YAAY,CAAC2G,GAAvB;;AAEA,UAAIA,GAAG,KAAK,IAAZ,EAAkB;AAChB,YAAI5qB,QAAQ,GAAGikB,YAAY,CAAChkB,SAA5B;AACA,YAAI83C,aAAJ;;AAEA,gBAAQ9zB,YAAY,CAAC/nB,GAArB;AACE,eAAKxD,aAAL;AACEq/C,YAAAA,aAAa,GAAGzpC,iBAAiB,CAACtO,QAAD,CAAjC;AACA;;AAEF;AACE+3C,YAAAA,aAAa,GAAG/3C,QAAhB;AANJ,SAJgB,CAWd;;;AAEF,YAAI,OAAO4qB,GAAP,KAAe,UAAnB,EAA+B;AAC7B,cAAIkrB,MAAJ;;AAEA,cAAK7xB,YAAY,CAACpJ,IAAb,GAAoBzU,WAAzB,EAAsC;AACpC,gBAAI;AACFw6B,cAAAA,sBAAsB;AACtBkV,cAAAA,MAAM,GAAGlrB,GAAG,CAACmtB,aAAD,CAAZ;AACD,aAHD,SAGU;AACRzX,cAAAA,0BAA0B,CAACrc,YAAD,CAA1B;AACD;AACF,WAPD,MAOO;AACL6xB,YAAAA,MAAM,GAAGlrB,GAAG,CAACmtB,aAAD,CAAZ;AACD;;AAED;AACE,gBAAI,OAAOjC,MAAP,KAAkB,UAAtB,EAAkC;AAChC9gD,cAAAA,KAAK,CAAC,wDAAwD,8CAAzD,EAAyGiI,yBAAyB,CAACgnB,YAAD,CAAlI,CAAL;AACD;AACF;AACF,SAnBD,MAmBO;AACL;AACE,gBAAI,CAAC2G,GAAG,CAAC5W,cAAJ,CAAmB,SAAnB,CAAL,EAAoC;AAClChf,cAAAA,KAAK,CAAC,4CAA4C,wDAA7C,EAAuGiI,yBAAyB,CAACgnB,YAAD,CAAhI,CAAL;AACD;AACF;AAED2G,UAAAA,GAAG,CAAC9qB,OAAJ,GAAci4C,aAAd;AACD;AACF;AACF;;AAED,aAASC,eAAT,CAAyBl4C,OAAzB,EAAkC;AAChC,UAAIm4C,UAAU,GAAGn4C,OAAO,CAAC8qB,GAAzB;;AAEA,UAAIqtB,UAAU,KAAK,IAAnB,EAAyB;AACvB,YAAI,OAAOA,UAAP,KAAsB,UAA1B,EAAsC;AACpC,cAAKn4C,OAAO,CAAC+a,IAAR,GAAezU,WAApB,EAAiC;AAC/B,gBAAI;AACFw6B,cAAAA,sBAAsB;AACtBqX,cAAAA,UAAU,CAAC,IAAD,CAAV;AACD,aAHD,SAGU;AACR3X,cAAAA,0BAA0B,CAACxgC,OAAD,CAA1B;AACD;AACF,WAPD,MAOO;AACLm4C,YAAAA,UAAU,CAAC,IAAD,CAAV;AACD;AACF,SAXD,MAWO;AACLA,UAAAA,UAAU,CAACn4C,OAAX,GAAqB,IAArB;AACD;AACF;AACF,KAhlZa,CAglZZ;AACF;AACA;;;AAGA,aAASo4C,aAAT,CAAuBpB,YAAvB,EAAqCh3C,OAArC,EAA8C61C,sBAA9C,EAAsE;AACpElwC,MAAAA,eAAe,CAAC3F,OAAD,CAAf;;AAEA,cAAQA,OAAO,CAAC5D,GAAhB;AACE,aAAK7D,iBAAL;AACA,aAAKW,UAAL;AACA,aAAKG,aAAL;AACA,aAAKC,mBAAL;AACE;AACE,gBAAI6mB,WAAW,GAAGngB,OAAO,CAACmgB,WAA1B;;AAEA,gBAAIA,WAAW,KAAK,IAApB,EAA0B;AACxB,kBAAIkW,UAAU,GAAGlW,WAAW,CAACkW,UAA7B;;AAEA,kBAAIA,UAAU,KAAK,IAAnB,EAAyB;AACvB,oBAAIwD,WAAW,GAAGxD,UAAU,CAAC9V,IAA7B;AACA,oBAAI8D,MAAM,GAAGwV,WAAb;;AAEA,mBAAG;AACD,sBAAIwe,OAAO,GAAGh0B,MAAd;AAAA,sBACIuV,OAAO,GAAGye,OAAO,CAACze,OADtB;AAAA,sBAEIx9B,GAAG,GAAGi8C,OAAO,CAACj8C,GAFlB;;AAIA,sBAAIw9B,OAAO,KAAKp0B,SAAhB,EAA2B;AACzB,wBAAI,CAACpJ,GAAG,GAAGu2B,SAAP,MAAsBF,SAA1B,EAAqC;AACnCwjB,sBAAAA,iBAAiB,CAACj2C,OAAD,EAAU61C,sBAAV,EAAkCjc,OAAlC,CAAjB;AACD,qBAFD,MAEO,IAAI,CAACx9B,GAAG,GAAGw2B,MAAP,MAAmBH,SAAvB,EAAkC;AAEvC,0BAAKzyB,OAAO,CAAC+a,IAAR,GAAezU,WAApB,EAAiC;AAC/Bw6B,wBAAAA,sBAAsB;AACtBmV,wBAAAA,iBAAiB,CAACj2C,OAAD,EAAU61C,sBAAV,EAAkCjc,OAAlC,CAAjB;AACA4G,wBAAAA,0BAA0B,CAACxgC,OAAD,CAA1B;AACD,uBAJD,MAIO;AACLi2C,wBAAAA,iBAAiB,CAACj2C,OAAD,EAAU61C,sBAAV,EAAkCjc,OAAlC,CAAjB;AACD;AACF;AACF;;AAEDvV,kBAAAA,MAAM,GAAGA,MAAM,CAAC9D,IAAhB;AACD,iBArBD,QAqBS8D,MAAM,KAAKwV,WArBpB;AAsBD;AACF;;AAED;AACD;;AAEH,aAAKrhC,cAAL;AACE;AACEu9C,YAAAA,eAAe,CAAC/1C,OAAD,EAAU61C,sBAAV,CAAf;AACA,gBAAI31C,QAAQ,GAAGF,OAAO,CAACG,SAAvB;;AAEA,gBAAI,OAAOD,QAAQ,CAACy1C,oBAAhB,KAAyC,UAA7C,EAAyD;AACvDC,cAAAA,8BAA8B,CAAC51C,OAAD,EAAU61C,sBAAV,EAAkC31C,QAAlC,CAA9B;AACD;;AAED;AACD;;AAEH,aAAKtH,aAAL;AACE;AACEm9C,YAAAA,eAAe,CAAC/1C,OAAD,EAAU61C,sBAAV,CAAf;AACA;AACD;;AAEH,aAAKl9C,UAAL;AACE;AACE;AACA;AACA;AACA;AACE2/C,cAAAA,qBAAqB,CAACtB,YAAD,EAAeh3C,OAAf,EAAwB61C,sBAAxB,CAArB;AACD;AAED;AACD;;AAEH,aAAKp8C,kBAAL;AACE;AAEE;AACD;;AAEH,aAAKE,cAAL;AACE;AAEE;AACD;AAnFL;AAqFD;;AAED,aAAS4+C,oBAAT,CAA8BvB,YAA9B,EAA4CpyC,IAA5C,EAAkDixC,sBAAlD,EAA0E;AACxE;AACA;AACA;AACA;AACA;AACA,UAAIv2C,IAAI,GAAGsF,IAAX;;AAEA,aAAO,IAAP,EAAa;AACXwzC,QAAAA,aAAa,CAACpB,YAAD,EAAe13C,IAAf,EAAqBu2C,sBAArB,CAAb,CADW,CACgD;AAC3D;;AAEA,YAAIv2C,IAAI,CAACuB,KAAL,KAAe,IAAf,IAAyB;AAC7B;AACCvB,QAAAA,IAAI,CAAClD,GAAL,KAAazD,UAFd,EAE2B;AACzB2G,UAAAA,IAAI,CAACuB,KAAL,CAAWlB,MAAX,GAAoBL,IAApB;AACAA,UAAAA,IAAI,GAAGA,IAAI,CAACuB,KAAZ;AACA;AACD;;AAED,YAAIvB,IAAI,KAAKsF,IAAb,EAAmB;AACjB;AACD;;AAED,eAAOtF,IAAI,CAACwB,OAAL,KAAiB,IAAxB,EAA8B;AAC5B,cAAIxB,IAAI,CAACK,MAAL,KAAgB,IAAhB,IAAwBL,IAAI,CAACK,MAAL,KAAgBiF,IAA5C,EAAkD;AAChD;AACD;;AAEDtF,UAAAA,IAAI,GAAGA,IAAI,CAACK,MAAZ;AACD;;AAEDL,QAAAA,IAAI,CAACwB,OAAL,CAAanB,MAAb,GAAsBL,IAAI,CAACK,MAA3B;AACAL,QAAAA,IAAI,GAAGA,IAAI,CAACwB,OAAZ;AACD;AACF;;AAED,aAAS03C,mBAAT,CAA6Bp7C,KAA7B,EAAoC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAIoC,SAAS,GAAGpC,KAAK,CAACoC,SAAtB;;AAEA,UAAIA,SAAS,KAAK,IAAlB,EAAwB;AACtBA,QAAAA,SAAS,CAACG,MAAV,GAAmB,IAAnB;AACD;;AAEDvC,MAAAA,KAAK,CAACuC,MAAN,GAAe,IAAf;AACD;;AAED,aAAS84C,uBAAT,CAAiCr7C,KAAjC,EAAwC;AACtC,UAAIoC,SAAS,GAAGpC,KAAK,CAACoC,SAAtB;;AAEA,UAAIA,SAAS,KAAK,IAAlB,EAAwB;AACtBpC,QAAAA,KAAK,CAACoC,SAAN,GAAkB,IAAlB;AACAi5C,QAAAA,uBAAuB,CAACj5C,SAAD,CAAvB;AACD,OANqC,CAMpC;AACF;;;AAGA;AACE;AACA;AACA;AACA;AACA;AACA;AACApC,QAAAA,KAAK,CAACyD,KAAN,GAAc,IAAd;AACAzD,QAAAA,KAAK,CAACwuB,SAAN,GAAkB,IAAlB;AACAxuB,QAAAA,KAAK,CAAC0D,OAAN,GAAgB,IAAhB,CATF,CASwB;AACtB;AACA;AACA;;AAEA,YAAI1D,KAAK,CAAChB,GAAN,KAAcxD,aAAlB,EAAiC;AAC/B,cAAI8/C,YAAY,GAAGt7C,KAAK,CAAC+C,SAAzB;AACD;;AAED/C,QAAAA,KAAK,CAAC+C,SAAN,GAAkB,IAAlB,CAlBF,CAkB0B;AACxB;AACA;AACA;AACA;;AAEA;AACE/C,UAAAA,KAAK,CAACuc,WAAN,GAAoB,IAApB;AACD;AAED;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACAvc,UAAAA,KAAK,CAACuC,MAAN,GAAe,IAAf;AACAvC,UAAAA,KAAK,CAACyiB,YAAN,GAAqB,IAArB;AACAziB,UAAAA,KAAK,CAACorB,aAAN,GAAsB,IAAtB;AACAprB,UAAAA,KAAK,CAAC0b,aAAN,GAAsB,IAAtB;AACA1b,UAAAA,KAAK,CAAC8rB,YAAN,GAAqB,IAArB;AACA9rB,UAAAA,KAAK,CAAC+C,SAAN,GAAkB,IAAlB,CAbF,CAa0B;;AAExB/C,UAAAA,KAAK,CAAC+iB,WAAN,GAAoB,IAApB;AACD;AACF;AACF;;AAED,aAASw4B,kBAAT,CAA4Bv7C,KAA5B,EAAmC;AACjC,UAAI8D,MAAM,GAAG9D,KAAK,CAACuC,MAAnB;;AAEA,aAAOuB,MAAM,KAAK,IAAlB,EAAwB;AACtB,YAAI03C,YAAY,CAAC13C,MAAD,CAAhB,EAA0B;AACxB,iBAAOA,MAAP;AACD;;AAEDA,QAAAA,MAAM,GAAGA,MAAM,CAACvB,MAAhB;AACD;;AAED,YAAM,IAAIW,KAAJ,CAAU,0EAA0E,iCAApF,CAAN;AACD;;AAED,aAASs4C,YAAT,CAAsBx7C,KAAtB,EAA6B;AAC3B,aAAOA,KAAK,CAAChB,GAAN,KAAcxD,aAAd,IAA+BwE,KAAK,CAAChB,GAAN,KAAc1D,QAA7C,IAAyD0E,KAAK,CAAChB,GAAN,KAAczD,UAA9E;AACD;;AAED,aAASkgD,cAAT,CAAwBz7C,KAAxB,EAA+B;AAC7B;AACA;AACA;AACA;AACA,UAAIkC,IAAI,GAAGlC,KAAX;;AAEA07C,MAAAA,QAAQ,EAAE,OAAO,IAAP,EAAa;AACrB;AACA,eAAOx5C,IAAI,CAACwB,OAAL,KAAiB,IAAxB,EAA8B;AAC5B,cAAIxB,IAAI,CAACK,MAAL,KAAgB,IAAhB,IAAwBi5C,YAAY,CAACt5C,IAAI,CAACK,MAAN,CAAxC,EAAuD;AACrD;AACA;AACA,mBAAO,IAAP;AACD;;AAEDL,UAAAA,IAAI,GAAGA,IAAI,CAACK,MAAZ;AACD;;AAEDL,QAAAA,IAAI,CAACwB,OAAL,CAAanB,MAAb,GAAsBL,IAAI,CAACK,MAA3B;AACAL,QAAAA,IAAI,GAAGA,IAAI,CAACwB,OAAZ;;AAEA,eAAOxB,IAAI,CAAClD,GAAL,KAAaxD,aAAb,IAA8B0G,IAAI,CAAClD,GAAL,KAAavD,QAA3C,IAAuDyG,IAAI,CAAClD,GAAL,KAAa3C,kBAA3E,EAA+F;AAC7F;AACA;AACA,cAAI6F,IAAI,CAACI,KAAL,GAAanC,SAAjB,EAA4B;AAC1B;AACA,qBAASu7C,QAAT;AACD,WAN4F,CAM3F;AACF;;;AAGA,cAAIx5C,IAAI,CAACuB,KAAL,KAAe,IAAf,IAAuBvB,IAAI,CAAClD,GAAL,KAAazD,UAAxC,EAAoD;AAClD,qBAASmgD,QAAT;AACD,WAFD,MAEO;AACLx5C,YAAAA,IAAI,CAACuB,KAAL,CAAWlB,MAAX,GAAoBL,IAApB;AACAA,YAAAA,IAAI,GAAGA,IAAI,CAACuB,KAAZ;AACD;AACF,SA/BoB,CA+BnB;;;AAGF,YAAI,EAAEvB,IAAI,CAACI,KAAL,GAAanC,SAAf,CAAJ,EAA+B;AAC7B;AACA,iBAAO+B,IAAI,CAACa,SAAZ;AACD;AACF;AACF;;AAED,aAAS44C,eAAT,CAAyB50B,YAAzB,EAAuC;AAGrC,UAAIsc,WAAW,GAAGkY,kBAAkB,CAACx0B,YAAD,CAApC,CAHqC,CAGe;;AAEpD,cAAQsc,WAAW,CAACrkC,GAApB;AACE,aAAKxD,aAAL;AACE;AACE,gBAAIsI,MAAM,GAAGu/B,WAAW,CAACtgC,SAAzB;;AAEA,gBAAIsgC,WAAW,CAAC/gC,KAAZ,GAAoB/B,YAAxB,EAAsC;AAEpC8iC,cAAAA,WAAW,CAAC/gC,KAAZ,IAAqB,CAAC/B,YAAtB;AACD;;AAED,gBAAIq7C,MAAM,GAAGH,cAAc,CAAC10B,YAAD,CAA3B,CARF,CAQ6C;AAC3C;;AAEA80B,YAAAA,2BAA2B,CAAC90B,YAAD,EAAe60B,MAAf,EAAuB93C,MAAvB,CAA3B;AACA;AACD;;AAEH,aAAKxI,QAAL;AACA,aAAKC,UAAL;AACE;AACE,gBAAIugD,OAAO,GAAGzY,WAAW,CAACtgC,SAAZ,CAAsBuP,aAApC;;AAEA,gBAAIypC,OAAO,GAAGN,cAAc,CAAC10B,YAAD,CAA5B;;AAEAi1B,YAAAA,wCAAwC,CAACj1B,YAAD,EAAeg1B,OAAf,EAAwBD,OAAxB,CAAxC;AACA;AACD;AACH;;AAEA;AACE,gBAAM,IAAI54C,KAAJ,CAAU,qEAAqE,iCAA/E,CAAN;AA9BJ;AAgCD;;AAED,aAAS84C,wCAAT,CAAkD95C,IAAlD,EAAwD05C,MAAxD,EAAgE93C,MAAhE,EAAwE;AACtE,UAAI9E,GAAG,GAAGkD,IAAI,CAAClD,GAAf;AACA,UAAIi9C,MAAM,GAAGj9C,GAAG,KAAKxD,aAAR,IAAyBwD,GAAG,KAAKvD,QAA9C;;AAEA,UAAIwgD,MAAJ,EAAY;AACV,YAAIl5C,SAAS,GAAGb,IAAI,CAACa,SAArB;;AAEA,YAAI64C,MAAJ,EAAY;AACV1nC,UAAAA,uBAAuB,CAACpQ,MAAD,EAASf,SAAT,EAAoB64C,MAApB,CAAvB;AACD,SAFD,MAEO;AACL3nC,UAAAA,sBAAsB,CAACnQ,MAAD,EAASf,SAAT,CAAtB;AACD;AACF,OARD,MAQO,IAAI/D,GAAG,KAAKzD,UAAZ,EAAwB,CAAxB,KAA+B;AACpC,YAAIkI,KAAK,GAAGvB,IAAI,CAACuB,KAAjB;;AAEA,YAAIA,KAAK,KAAK,IAAd,EAAoB;AAClBu4C,UAAAA,wCAAwC,CAACv4C,KAAD,EAAQm4C,MAAR,EAAgB93C,MAAhB,CAAxC;AACA,cAAIJ,OAAO,GAAGD,KAAK,CAACC,OAApB;;AAEA,iBAAOA,OAAO,KAAK,IAAnB,EAAyB;AACvBs4C,YAAAA,wCAAwC,CAACt4C,OAAD,EAAUk4C,MAAV,EAAkB93C,MAAlB,CAAxC;AACAJ,YAAAA,OAAO,GAAGA,OAAO,CAACA,OAAlB;AACD;AACF;AACF;AACF;;AAED,aAASm4C,2BAAT,CAAqC35C,IAArC,EAA2C05C,MAA3C,EAAmD93C,MAAnD,EAA2D;AACzD,UAAI9E,GAAG,GAAGkD,IAAI,CAAClD,GAAf;AACA,UAAIi9C,MAAM,GAAGj9C,GAAG,KAAKxD,aAAR,IAAyBwD,GAAG,KAAKvD,QAA9C;;AAEA,UAAIwgD,MAAJ,EAAY;AACV,YAAIl5C,SAAS,GAAGb,IAAI,CAACa,SAArB;;AAEA,YAAI64C,MAAJ,EAAY;AACVhqC,UAAAA,YAAY,CAAC9N,MAAD,EAASf,SAAT,EAAoB64C,MAApB,CAAZ;AACD,SAFD,MAEO;AACLnqC,UAAAA,WAAW,CAAC3N,MAAD,EAASf,SAAT,CAAX;AACD;AACF,OARD,MAQO,IAAI/D,GAAG,KAAKzD,UAAZ,EAAwB,CAAxB,KAA+B;AACpC,YAAIkI,KAAK,GAAGvB,IAAI,CAACuB,KAAjB;;AAEA,YAAIA,KAAK,KAAK,IAAd,EAAoB;AAClBo4C,UAAAA,2BAA2B,CAACp4C,KAAD,EAAQm4C,MAAR,EAAgB93C,MAAhB,CAA3B;AACA,cAAIJ,OAAO,GAAGD,KAAK,CAACC,OAApB;;AAEA,iBAAOA,OAAO,KAAK,IAAnB,EAAyB;AACvBm4C,YAAAA,2BAA2B,CAACn4C,OAAD,EAAUk4C,MAAV,EAAkB93C,MAAlB,CAA3B;AACAJ,YAAAA,OAAO,GAAGA,OAAO,CAACA,OAAlB;AACD;AACF;AACF;AACF;;AAED,aAASw3C,qBAAT,CAA+BtB,YAA/B,EAA6Ch3C,OAA7C,EAAsD61C,sBAAtD,EAA8E;AAC5E;AACA;AACA,UAAIv2C,IAAI,GAAGU,OAAX,CAH4E,CAGxD;AACpB;;AAEA,UAAIs5C,oBAAoB,GAAG,KAA3B,CAN4E,CAM1C;;AAElC,UAAIn4C,aAAJ;AACA,UAAIo4C,wBAAJ;;AAEA,aAAO,IAAP,EAAa;AACX,YAAI,CAACD,oBAAL,EAA2B;AACzB,cAAIp4C,MAAM,GAAG5B,IAAI,CAACK,MAAlB;;AAEA65C,UAAAA,UAAU,EAAE,OAAO,IAAP,EAAa;AACvB,gBAAIt4C,MAAM,KAAK,IAAf,EAAqB;AACnB,oBAAM,IAAIZ,KAAJ,CAAU,oEAAoE,uCAA9E,CAAN;AACD;;AAED,gBAAIqgC,eAAe,GAAGz/B,MAAM,CAACf,SAA7B;;AAEA,oBAAQe,MAAM,CAAC9E,GAAf;AACE,mBAAKxD,aAAL;AACEuI,gBAAAA,aAAa,GAAGw/B,eAAhB;AACA4Y,gBAAAA,wBAAwB,GAAG,KAA3B;AACA,sBAAMC,UAAN;;AAEF,mBAAK9gD,QAAL;AACEyI,gBAAAA,aAAa,GAAGw/B,eAAe,CAACjxB,aAAhC;AACA6pC,gBAAAA,wBAAwB,GAAG,IAA3B;AACA,sBAAMC,UAAN;;AAEF,mBAAK7gD,UAAL;AACEwI,gBAAAA,aAAa,GAAGw/B,eAAe,CAACjxB,aAAhC;AACA6pC,gBAAAA,wBAAwB,GAAG,IAA3B;AACA,sBAAMC,UAAN;AAdJ;;AAiBAt4C,YAAAA,MAAM,GAAGA,MAAM,CAACvB,MAAhB;AACD;;AAED25C,UAAAA,oBAAoB,GAAG,IAAvB;AACD;;AAED,YAAIh6C,IAAI,CAAClD,GAAL,KAAaxD,aAAb,IAA8B0G,IAAI,CAAClD,GAAL,KAAavD,QAA/C,EAAyD;AACvD0/C,UAAAA,oBAAoB,CAACvB,YAAD,EAAe13C,IAAf,EAAqBu2C,sBAArB,CAApB,CADuD,CACW;AAClE;;AAEA,cAAI0D,wBAAJ,EAA8B;AAC5BhoC,YAAAA,wBAAwB,CAACpQ,aAAD,EAAgB7B,IAAI,CAACa,SAArB,CAAxB;AACD,WAFD,MAEO;AACLgP,YAAAA,WAAW,CAAChO,aAAD,EAAgB7B,IAAI,CAACa,SAArB,CAAX;AACD,WARsD,CAQrD;;AAEH,SAVD,MAUO,IAAIb,IAAI,CAAClD,GAAL,KAAazD,UAAjB,EAA6B;AAClC,cAAI2G,IAAI,CAACuB,KAAL,KAAe,IAAnB,EAAyB;AACvB;AACA;AACAM,YAAAA,aAAa,GAAG7B,IAAI,CAACa,SAAL,CAAeuP,aAA/B;AACA6pC,YAAAA,wBAAwB,GAAG,IAA3B,CAJuB,CAIU;;AAEjCj6C,YAAAA,IAAI,CAACuB,KAAL,CAAWlB,MAAX,GAAoBL,IAApB;AACAA,YAAAA,IAAI,GAAGA,IAAI,CAACuB,KAAZ;AACA;AACD;AACF,SAXM,MAWA;AACLu3C,UAAAA,aAAa,CAACpB,YAAD,EAAe13C,IAAf,EAAqBu2C,sBAArB,CAAb,CADK,CACsD;;AAE3D,cAAIv2C,IAAI,CAACuB,KAAL,KAAe,IAAnB,EAAyB;AACvBvB,YAAAA,IAAI,CAACuB,KAAL,CAAWlB,MAAX,GAAoBL,IAApB;AACAA,YAAAA,IAAI,GAAGA,IAAI,CAACuB,KAAZ;AACA;AACD;AACF;;AAED,YAAIvB,IAAI,KAAKU,OAAb,EAAsB;AACpB;AACD;;AAED,eAAOV,IAAI,CAACwB,OAAL,KAAiB,IAAxB,EAA8B;AAC5B,cAAIxB,IAAI,CAACK,MAAL,KAAgB,IAAhB,IAAwBL,IAAI,CAACK,MAAL,KAAgBK,OAA5C,EAAqD;AACnD;AACD;;AAEDV,UAAAA,IAAI,GAAGA,IAAI,CAACK,MAAZ;;AAEA,cAAIL,IAAI,CAAClD,GAAL,KAAazD,UAAjB,EAA6B;AAC3B;AACA;AACA2gD,YAAAA,oBAAoB,GAAG,KAAvB;AACD;AACF;;AAEDh6C,QAAAA,IAAI,CAACwB,OAAL,CAAanB,MAAb,GAAsBL,IAAI,CAACK,MAA3B;AACAL,QAAAA,IAAI,GAAGA,IAAI,CAACwB,OAAZ;AACD;AACF;;AAED,aAAS24C,cAAT,CAAwBzC,YAAxB,EAAsCh3C,OAAtC,EAA+C61C,sBAA/C,EAAuE;AACrE;AACE;AACA;AACAyC,QAAAA,qBAAqB,CAACtB,YAAD,EAAeh3C,OAAf,EAAwB61C,sBAAxB,CAArB;AACD;AAED2C,MAAAA,mBAAmB,CAACx4C,OAAD,CAAnB;AACD;;AAED,aAAS05C,UAAT,CAAoB15C,OAApB,EAA6BmkB,YAA7B,EAA2C;AAEzC,cAAQA,YAAY,CAAC/nB,GAArB;AACE,aAAK7D,iBAAL;AACA,aAAKW,UAAL;AACA,aAAKG,aAAL;AACA,aAAKC,mBAAL;AACE;AACEu9C,YAAAA,2BAA2B,CAAClkB,SAAS,GAAGD,SAAb,EAAwBvO,YAAxB,EAAsCA,YAAY,CAACxkB,MAAnD,CAA3B;AACAm3C,YAAAA,yBAAyB,CAACnkB,SAAS,GAAGD,SAAb,EAAwBvO,YAAxB,CAAzB,CAFF,CAEkE;AAChE;AACA;AACA;AACA;;AAEA,gBAAKA,YAAY,CAACpJ,IAAb,GAAoBzU,WAAzB,EAAsC;AACpC,kBAAI;AACFw6B,gBAAAA,sBAAsB;AACtB+V,gBAAAA,2BAA2B,CAACjkB,MAAM,GAAGF,SAAV,EAAqBvO,YAArB,EAAmCA,YAAY,CAACxkB,MAAhD,CAA3B;AACD,eAHD,SAGU;AACR6gC,gBAAAA,0BAA0B,CAACrc,YAAD,CAA1B;AACD;AACF,aAPD,MAOO;AACL0yB,cAAAA,2BAA2B,CAACjkB,MAAM,GAAGF,SAAV,EAAqBvO,YAArB,EAAmCA,YAAY,CAACxkB,MAAhD,CAA3B;AACD;;AAED;AACD;;AAEH,aAAKnH,cAAL;AACE;AACE;AACD;;AAEH,aAAKI,aAAL;AACE;AACE,gBAAIsH,QAAQ,GAAGikB,YAAY,CAAChkB,SAA5B;;AAEA,gBAAID,QAAQ,IAAI,IAAhB,EAAsB;AACpB;AACA,kBAAIkQ,QAAQ,GAAG+T,YAAY,CAACqE,aAA5B,CAFoB,CAEuB;AAC3C;AACA;;AAEA,kBAAIrY,QAAQ,GAAGnQ,OAAO,KAAK,IAAZ,GAAmBA,OAAO,CAACwoB,aAA3B,GAA2CpY,QAA1D;AACA,kBAAIlU,IAAI,GAAGioB,YAAY,CAACjoB,IAAxB,CAPoB,CAOU;;AAE9B,kBAAI6U,aAAa,GAAGoT,YAAY,CAAChE,WAAjC;AACAgE,cAAAA,YAAY,CAAChE,WAAb,GAA2B,IAA3B;;AAEA,kBAAIpP,aAAa,KAAK,IAAtB,EAA4B;AAC1BD,gBAAAA,YAAY,CAAC5Q,QAAD,EAAW6Q,aAAX,EAA0B7U,IAA1B,EAAgCiU,QAAhC,EAA0CC,QAA1C,CAAZ;AACD;AACF;;AAED;AACD;;AAEH,aAAKvX,QAAL;AACE;AACE,gBAAIsrB,YAAY,CAAChkB,SAAb,KAA2B,IAA/B,EAAqC;AACnC,oBAAM,IAAIG,KAAJ,CAAU,oEAAoE,iDAA9E,CAAN;AACD;;AAED,gBAAI2Q,YAAY,GAAGkT,YAAY,CAAChkB,SAAhC;AACA,gBAAIgR,OAAO,GAAGgT,YAAY,CAACqE,aAA3B,CANF,CAM4C;AAC1C;AACA;;AAEA,gBAAItX,OAAO,GAAGlR,OAAO,KAAK,IAAZ,GAAmBA,OAAO,CAACwoB,aAA3B,GAA2CrX,OAAzD;AACAH,YAAAA,gBAAgB,CAACC,YAAD,EAAeC,OAAf,EAAwBC,OAAxB,CAAhB;AACA;AACD;;AAEH,aAAKzY,QAAL;AACE;AAEE;AACD;;AAEH,aAAKS,QAAL;AACE;AACE;AACD;;AAEH,aAAKC,iBAAL;AACE;AACEugD,YAAAA,sBAAsB,CAACx1B,YAAD,CAAtB;AACAy1B,YAAAA,4BAA4B,CAACz1B,YAAD,CAA5B;AACA;AACD;;AAEH,aAAKzqB,qBAAL;AACE;AACEkgD,YAAAA,4BAA4B,CAACz1B,YAAD,CAA5B;AACA;AACD;;AAEH,aAAK3qB,wBAAL;AACE;AACE;AACD;AAnGL;;AAsGA,YAAM,IAAI8G,KAAJ,CAAU,uEAAuE,wDAAjF,CAAN;AACD;;AAED,aAASq5C,sBAAT,CAAgCx1B,YAAhC,EAA8C;AAC5C;AACA,UAAIf,QAAQ,GAAGe,YAAY,CAACrL,aAA5B;AACD;;AAED,aAAS8gC,4BAAT,CAAsCz1B,YAAtC,EAAoD;AAClD;AACA;AACA;AACA,UAAIye,SAAS,GAAGze,YAAY,CAAChE,WAA7B;;AAEA,UAAIyiB,SAAS,KAAK,IAAlB,EAAwB;AACtBze,QAAAA,YAAY,CAAChE,WAAb,GAA2B,IAA3B;AACA,YAAI05B,UAAU,GAAG11B,YAAY,CAAChkB,SAA9B;;AAEA,YAAI05C,UAAU,KAAK,IAAnB,EAAyB;AACvBA,UAAAA,UAAU,GAAG11B,YAAY,CAAChkB,SAAb,GAAyB,IAAIm1C,eAAJ,EAAtC;AACD;;AAED1S,QAAAA,SAAS,CAAC1nB,OAAV,CAAkB,UAAU/U,QAAV,EAAoB;AACpC;AACA,cAAI2zC,KAAK,GAAGC,oBAAoB,CAAChlC,IAArB,CAA0B,IAA1B,EAAgCoP,YAAhC,EAA8Che,QAA9C,CAAZ;;AAEA,cAAI,CAAC0zC,UAAU,CAAC/kC,GAAX,CAAe3O,QAAf,CAAL,EAA+B;AAC7B0zC,YAAAA,UAAU,CAACx9B,GAAX,CAAelW,QAAf;AAEAA,YAAAA,QAAQ,CAACs8B,IAAT,CAAcqX,KAAd,EAAqBA,KAArB;AACD;AACF,SATD;AAUD;AACF,KA7raa,CA6raZ;;;AAEF,aAASE,sBAAT,CAAgCh6C,OAAhC,EAAyC;AAEvCoR,MAAAA,gBAAgB,CAACpR,OAAO,CAACG,SAAT,CAAhB;AACD;;AAED,aAAS85C,qBAAT,CAA+Br1C,IAA/B,EAAqC0qC,UAArC,EAAiDgI,cAAjD,EAAiE;AAC/D9B,MAAAA,UAAU,GAAGlG,UAAb;AACA4K,MAAAA,2BAA2B,CAACt1C,IAAD,EAAO0yC,cAAP,CAA3B;AACD;;AAED,aAAS4C,2BAAT,CAAqCt1C,IAArC,EAA2CqB,KAA3C,EAAkD;AAChD,aAAOuvC,UAAU,KAAK,IAAtB,EAA4B;AAC1B,YAAIp4C,KAAK,GAAGo4C,UAAZ,CAD0B,CACF;;AAExB,YAAI5pB,SAAS,GAAGxuB,KAAK,CAACwuB,SAAtB;;AAEA,YAAIA,SAAS,KAAK,IAAlB,EAAwB;AACtB,eAAK,IAAIr1B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGq1B,SAAS,CAAC/2B,MAA9B,EAAsC0B,CAAC,EAAvC,EAA2C;AACzC,gBAAIo1B,aAAa,GAAGC,SAAS,CAACr1B,CAAD,CAA7B;;AAEA,gBAAI;AACFkjD,cAAAA,cAAc,CAAC70C,IAAD,EAAO+mB,aAAP,EAAsBvuB,KAAtB,CAAd;AACD,aAFD,CAEE,OAAOlI,KAAP,EAAc;AACdugD,cAAAA,wBAAwB,CAACvgD,KAAD,CAAxB;AACA4gD,cAAAA,uBAAuB,CAACnqB,aAAD,EAAgBvuB,KAAhB,EAAuBlI,KAAvB,CAAvB;AACD;AACF;AACF;;AAED,YAAI2L,KAAK,GAAGzD,KAAK,CAACyD,KAAlB;;AAEA,YAAI,CAACzD,KAAK,CAAC8nC,YAAN,GAAqBlmC,YAAtB,MAAwC3B,OAAxC,IAAmDwD,KAAK,KAAK,IAAjE,EAAuE;AACrE01C,UAAAA,0BAA0B,CAAC11C,KAAD,EAAQzD,KAAR,CAA1B;AACAo4C,UAAAA,UAAU,GAAG30C,KAAb;AACD,SAHD,MAGO;AACLs5C,UAAAA,8BAA8B,CAACv1C,IAAD,EAAOqB,KAAP,CAA9B;AACD;AACF;AACF;;AAED,aAASk0C,8BAAT,CAAwCv1C,IAAxC,EAA8CqB,KAA9C,EAAqD;AACnD,aAAOuvC,UAAU,KAAK,IAAtB,EAA4B;AAC1B,YAAIp4C,KAAK,GAAGo4C,UAAZ;AACAp7B,QAAAA,eAAe,CAAChd,KAAD,CAAf;;AAEA,YAAI;AACFg9C,UAAAA,4BAA4B,CAACh9C,KAAD,EAAQwH,IAAR,EAAcqB,KAAd,CAA5B;AACD,SAFD,CAEE,OAAO/Q,KAAP,EAAc;AACdugD,UAAAA,wBAAwB,CAACvgD,KAAD,CAAxB;AACA4gD,UAAAA,uBAAuB,CAAC14C,KAAD,EAAQA,KAAK,CAACuC,MAAd,EAAsBzK,KAAtB,CAAvB;AACD;;AAEDglB,QAAAA,iBAAiB;AACjB,YAAIpZ,OAAO,GAAG1D,KAAK,CAAC0D,OAApB;;AAEA,YAAIA,OAAO,KAAK,IAAhB,EAAsB;AACpBy1C,UAAAA,0BAA0B,CAACz1C,OAAD,EAAU1D,KAAK,CAACuC,MAAhB,CAA1B;AACA61C,UAAAA,UAAU,GAAG10C,OAAb;AACA;AACD;;AAED00C,QAAAA,UAAU,GAAGp4C,KAAK,CAACuC,MAAnB;AACD;AACF;;AAED,aAASy6C,4BAAT,CAAsCj2B,YAAtC,EAAoDvf,IAApD,EAA0DqB,KAA1D,EAAiE;AAC/D;AACA;AACA;AACA;AACA,UAAIvG,KAAK,GAAGykB,YAAY,CAACzkB,KAAzB;;AAEA,UAAIA,KAAK,GAAG/B,YAAZ,EAA0B;AACxBq8C,QAAAA,sBAAsB,CAAC71B,YAAD,CAAtB;AACD;;AAED,UAAIzkB,KAAK,GAAG3B,GAAZ,EAAiB;AACf,YAAIiC,OAAO,GAAGmkB,YAAY,CAAC3kB,SAA3B;;AAEA,YAAIQ,OAAO,KAAK,IAAhB,EAAsB;AACpBk4C,UAAAA,eAAe,CAACl4C,OAAD,CAAf;AACD;AACF;;AAED,UAAIN,KAAK,GAAGtB,UAAZ,EAAwB;AACtB,gBAAQ+lB,YAAY,CAAC/nB,GAArB;AACE,eAAKhD,iBAAL;AACE;AACE,kBAAIgqB,QAAQ,GAAGe,YAAY,CAACrL,aAA5B;AACA,kBAAI/I,QAAQ,GAAGqT,QAAQ,KAAK,IAA5B;;AAEA,kBAAIrT,QAAJ,EAAc;AACZ,oBAAIu7B,QAAQ,GAAGnnB,YAAY,CAAC3kB,SAA5B;AACA,oBAAI66C,SAAS,GAAG/O,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,CAACxyB,aAAT,KAA2B,IAAhE;;AAEA,oBAAI,CAACuhC,SAAL,EAAgB;AACd;AACAC,kBAAAA,wBAAwB;AACzB;AACF;;AAED;AACD;;AAEH,eAAK1gD,kBAAL;AACE;AACE,kBAAI2gD,SAAS,GAAGp2B,YAAY,CAACrL,aAA7B;;AAEA,kBAAI0hC,SAAS,GAAGD,SAAS,KAAK,IAA9B;;AAEA,kBAAIE,SAAS,GAAGt2B,YAAY,CAAC3kB,SAA7B;;AAEA,kBAAIk7C,UAAU,GAAGD,SAAS,KAAK,IAAd,IAAsBA,SAAS,CAAC3hC,aAAV,KAA4B,IAAnE;;AAEA,kBAAI6hC,iBAAiB,GAAGx2B,YAAxB;AAEA;AACE;AACA;AACA2zB,gBAAAA,uBAAuB,CAAC6C,iBAAD,EAAoBH,SAApB,CAAvB;AACD;AACF;AApCL;AAsCD,OA1D8D,CA0D7D;AACF;AACA;AACA;;;AAGA,UAAII,YAAY,GAAGl7C,KAAK,IAAInC,SAAS,GAAGC,MAAZ,GAAqBU,SAAzB,CAAxB;;AAEC,cAAQ08C,YAAR;AACC,aAAKr9C,SAAL;AACE;AACEw7C,YAAAA,eAAe,CAAC50B,YAAD,CAAf,CADF,CACiC;AAC/B;AACA;AACA;;AAEAA,YAAAA,YAAY,CAACzkB,KAAb,IAAsB,CAACnC,SAAvB;AACA;AACD;;AAEH,aAAKE,kBAAL;AACE;AACE;AACAs7C,YAAAA,eAAe,CAAC50B,YAAD,CAAf,CAFF,CAEiC;AAC/B;;AAEAA,YAAAA,YAAY,CAACzkB,KAAb,IAAsB,CAACnC,SAAvB,CALF,CAKoC;;AAElC,gBAAIs9C,SAAS,GAAG12B,YAAY,CAAC3kB,SAA7B;AACAk6C,YAAAA,UAAU,CAACmB,SAAD,EAAY12B,YAAZ,CAAV;AACA;AACD;;AAEH,aAAKjmB,SAAL;AACE;AACEimB,YAAAA,YAAY,CAACzkB,KAAb,IAAsB,CAACxB,SAAvB;AACA;AACD;;AAEH,aAAKC,kBAAL;AACE;AACEgmB,YAAAA,YAAY,CAACzkB,KAAb,IAAsB,CAACxB,SAAvB,CADF,CACoC;;AAElC,gBAAI48C,SAAS,GAAG32B,YAAY,CAAC3kB,SAA7B;AACAk6C,YAAAA,UAAU,CAACoB,SAAD,EAAY32B,YAAZ,CAAV;AACA;AACD;;AAEH,aAAK3mB,MAAL;AACE;AACE,gBAAIu9C,SAAS,GAAG52B,YAAY,CAAC3kB,SAA7B;AACAk6C,YAAAA,UAAU,CAACqB,SAAD,EAAY52B,YAAZ,CAAV;AACA;AACD;AA7CJ;AA+CF;;AAED,aAAS62B,mBAAT,CAA6B72B,YAA7B,EAA2Cvf,IAA3C,EAAiD0yC,cAAjD,EAAiE;AAC/D9B,MAAAA,UAAU,GAAGrxB,YAAb;AACA82B,MAAAA,yBAAyB,CAAC92B,YAAD,EAAevf,IAAf,EAAqB0yC,cAArB,CAAzB;AACD;;AAED,aAAS2D,yBAAT,CAAmCC,WAAnC,EAAgDt2C,IAAhD,EAAsD0yC,cAAtD,EAAsE;AACpE;AACA,UAAI6D,YAAY,GAAG,CAACD,WAAW,CAACngC,IAAZ,GAAmB1U,cAApB,MAAwCD,MAA3D;;AAEA,aAAOovC,UAAU,KAAK,IAAtB,EAA4B;AAC1B,YAAIp4C,KAAK,GAAGo4C,UAAZ;AACA,YAAIlG,UAAU,GAAGlyC,KAAK,CAACyD,KAAvB;;AAEA,YAAI,CAACzD,KAAK,CAAC8nC,YAAN,GAAqBjmC,UAAtB,MAAsC5B,OAAtC,IAAiDiyC,UAAU,KAAK,IAApE,EAA0E;AACxEiH,UAAAA,0BAA0B,CAACjH,UAAD,EAAalyC,KAAb,CAA1B;AACAo4C,UAAAA,UAAU,GAAGlG,UAAb;AACD,SAHD,MAGO;AACL8L,UAAAA,iCAAiC,CAACF,WAAD,EAAct2C,IAAd,EAAoB0yC,cAApB,CAAjC;AACD;AACF;AACF;;AAED,aAAS8D,iCAAT,CAA2CF,WAA3C,EAAwDt2C,IAAxD,EAA8D0yC,cAA9D,EAA8E;AAC5E,aAAO9B,UAAU,KAAK,IAAtB,EAA4B;AAC1B,YAAIp4C,KAAK,GAAGo4C,UAAZ;;AAEA,YAAI,CAACp4C,KAAK,CAACsC,KAAN,GAAcT,UAAf,MAA+B5B,OAAnC,EAA4C;AAC1C,cAAI2C,OAAO,GAAG5C,KAAK,CAACoC,SAApB;AACA4a,UAAAA,eAAe,CAAChd,KAAD,CAAf;;AAEA,cAAI;AACFi6C,YAAAA,yBAAyB,CAACzyC,IAAD,EAAO5E,OAAP,EAAgB5C,KAAhB,EAAuBk6C,cAAvB,CAAzB;AACD,WAFD,CAEE,OAAOpiD,KAAP,EAAc;AACdugD,YAAAA,wBAAwB,CAACvgD,KAAD,CAAxB;AACA4gD,YAAAA,uBAAuB,CAAC14C,KAAD,EAAQA,KAAK,CAACuC,MAAd,EAAsBzK,KAAtB,CAAvB;AACD;;AAEDglB,UAAAA,iBAAiB;AAClB;;AAED,YAAI9c,KAAK,KAAK89C,WAAd,EAA2B;AACzB1F,UAAAA,UAAU,GAAG,IAAb;AACA;AACD;;AAED,YAAI10C,OAAO,GAAG1D,KAAK,CAAC0D,OAApB;;AAEA,YAAIA,OAAO,KAAK,IAAhB,EAAsB;AACpBy1C,UAAAA,0BAA0B,CAACz1C,OAAD,EAAU1D,KAAK,CAACuC,MAAhB,CAA1B;AACA61C,UAAAA,UAAU,GAAG10C,OAAb;AACA;AACD;;AAED00C,QAAAA,UAAU,GAAGp4C,KAAK,CAACuC,MAAnB;AACD;AACF;;AAED,aAAS07C,yBAAT,CAAmCz2C,IAAnC,EAAyCuf,YAAzC,EAAuD;AACrDqxB,MAAAA,UAAU,GAAGrxB,YAAb;AACAm3B,MAAAA,+BAA+B,CAACn3B,YAAD,EAAevf,IAAf,CAA/B;AACD;;AAED,aAAS02C,+BAAT,CAAyCJ,WAAzC,EAAsDt2C,IAAtD,EAA4D;AAC1D,aAAO4wC,UAAU,KAAK,IAAtB,EAA4B;AAC1B,YAAIp4C,KAAK,GAAGo4C,UAAZ;AACA,YAAIlG,UAAU,GAAGlyC,KAAK,CAACyD,KAAvB;;AAEA,YAAI,CAACzD,KAAK,CAAC8nC,YAAN,GAAqBhmC,WAAtB,MAAuC7B,OAAvC,IAAkDiyC,UAAU,KAAK,IAArE,EAA2E;AACzEiH,UAAAA,0BAA0B,CAACjH,UAAD,EAAalyC,KAAb,CAA1B;AACAo4C,UAAAA,UAAU,GAAGlG,UAAb;AACD,SAHD,MAGO;AACLiM,UAAAA,kCAAkC,CAACL,WAAD,EAAct2C,IAAd,CAAlC;AACD;AACF;AACF;;AAED,aAAS22C,kCAAT,CAA4CL,WAA5C,EAAyDt2C,IAAzD,EAA+D;AAC7D,aAAO4wC,UAAU,KAAK,IAAtB,EAA4B;AAC1B,YAAIp4C,KAAK,GAAGo4C,UAAZ;;AAEA,YAAI,CAACp4C,KAAK,CAACsC,KAAN,GAAczB,OAAf,MAA4BZ,OAAhC,EAAyC;AACvC+c,UAAAA,eAAe,CAAChd,KAAD,CAAf;;AAEA,cAAI;AACFo+C,YAAAA,yBAAyB,CAAC52C,IAAD,EAAOxH,KAAP,CAAzB;AACD,WAFD,CAEE,OAAOlI,KAAP,EAAc;AACdugD,YAAAA,wBAAwB,CAACvgD,KAAD,CAAxB;AACA4gD,YAAAA,uBAAuB,CAAC14C,KAAD,EAAQA,KAAK,CAACuC,MAAd,EAAsBzK,KAAtB,CAAvB;AACD;;AAEDglB,UAAAA,iBAAiB;AAClB;;AAED,YAAI9c,KAAK,KAAK89C,WAAd,EAA2B;AACzB1F,UAAAA,UAAU,GAAG,IAAb;AACA;AACD;;AAED,YAAI10C,OAAO,GAAG1D,KAAK,CAAC0D,OAApB;;AAEA,YAAIA,OAAO,KAAK,IAAhB,EAAsB;AACpBy1C,UAAAA,0BAA0B,CAACz1C,OAAD,EAAU1D,KAAK,CAACuC,MAAhB,CAA1B;AACA61C,UAAAA,UAAU,GAAG10C,OAAb;AACA;AACD;;AAED00C,QAAAA,UAAU,GAAGp4C,KAAK,CAACuC,MAAnB;AACD;AACF;;AAED,aAAS67C,yBAAT,CAAmCxE,YAAnC,EAAiD7yB,YAAjD,EAA+D;AAC7D,cAAQA,YAAY,CAAC/nB,GAArB;AACE,aAAK7D,iBAAL;AACA,aAAKW,UAAL;AACA,aAAKI,mBAAL;AACE;AACE,gBAAK6qB,YAAY,CAACpJ,IAAb,GAAoBzU,WAAzB,EAAsC;AACpCy6B,cAAAA,uBAAuB;;AAEvB,kBAAI;AACF+V,gBAAAA,yBAAyB,CAACjkB,SAAS,GAAGH,SAAb,EAAwBvO,YAAxB,CAAzB;AACD,eAFD,SAEU;AACRyc,gBAAAA,2BAA2B,CAACzc,YAAD,CAA3B;AACD;AACF,aARD,MAQO;AACL2yB,cAAAA,yBAAyB,CAACjkB,SAAS,GAAGH,SAAb,EAAwBvO,YAAxB,CAAzB;AACD;;AAED;AACD;AAlBL;AAoBD;;AAED,aAASs3B,2BAAT,CAAqCnM,UAArC,EAAiD;AAC/CkG,MAAAA,UAAU,GAAGlG,UAAb;AACAoM,MAAAA,iCAAiC;AAClC;;AAED,aAASA,iCAAT,GAA6C;AAC3C,aAAOlG,UAAU,KAAK,IAAtB,EAA4B;AAC1B,YAAIp4C,KAAK,GAAGo4C,UAAZ;AACA,YAAI30C,KAAK,GAAGzD,KAAK,CAACyD,KAAlB;;AAEA,YAAI,CAAC20C,UAAU,CAAC91C,KAAX,GAAmBhC,aAApB,MAAuCL,OAA3C,EAAoD;AAClD,cAAIuuB,SAAS,GAAGxuB,KAAK,CAACwuB,SAAtB;;AAEA,cAAIA,SAAS,KAAK,IAAlB,EAAwB;AACtB,iBAAK,IAAIr1B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGq1B,SAAS,CAAC/2B,MAA9B,EAAsC0B,CAAC,EAAvC,EAA2C;AACzC,kBAAIolD,aAAa,GAAG/vB,SAAS,CAACr1B,CAAD,CAA7B;AACAi/C,cAAAA,UAAU,GAAGmG,aAAb;AACAC,cAAAA,oDAAoD,CAACD,aAAD,EAAgBv+C,KAAhB,CAApD;AACD;;AAED;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAIy+C,aAAa,GAAGz+C,KAAK,CAACoC,SAA1B;;AAEA,kBAAIq8C,aAAa,KAAK,IAAtB,EAA4B;AAC1B,oBAAIC,aAAa,GAAGD,aAAa,CAACh7C,KAAlC;;AAEA,oBAAIi7C,aAAa,KAAK,IAAtB,EAA4B;AAC1BD,kBAAAA,aAAa,CAACh7C,KAAd,GAAsB,IAAtB;;AAEA,qBAAG;AACD,wBAAIk7C,eAAe,GAAGD,aAAa,CAACh7C,OAApC;AACAg7C,oBAAAA,aAAa,CAACh7C,OAAd,GAAwB,IAAxB;AACAg7C,oBAAAA,aAAa,GAAGC,eAAhB;AACD,mBAJD,QAISD,aAAa,KAAK,IAJ3B;AAKD;AACF;AACF;AAEDtG,YAAAA,UAAU,GAAGp4C,KAAb;AACD;AACF;;AAED,YAAI,CAACA,KAAK,CAAC8nC,YAAN,GAAqBhmC,WAAtB,MAAuC7B,OAAvC,IAAkDwD,KAAK,KAAK,IAAhE,EAAsE;AACpE01C,UAAAA,0BAA0B,CAAC11C,KAAD,EAAQzD,KAAR,CAA1B;AACAo4C,UAAAA,UAAU,GAAG30C,KAAb;AACD,SAHD,MAGO;AACLm7C,UAAAA,oCAAoC;AACrC;AACF;AACF;;AAED,aAASA,oCAAT,GAAgD;AAC9C,aAAOxG,UAAU,KAAK,IAAtB,EAA4B;AAC1B,YAAIp4C,KAAK,GAAGo4C,UAAZ;;AAEA,YAAI,CAACp4C,KAAK,CAACsC,KAAN,GAAczB,OAAf,MAA4BZ,OAAhC,EAAyC;AACvC+c,UAAAA,eAAe,CAAChd,KAAD,CAAf;AACA6+C,UAAAA,2BAA2B,CAAC7+C,KAAD,CAA3B;AACA8c,UAAAA,iBAAiB;AAClB;;AAED,YAAIpZ,OAAO,GAAG1D,KAAK,CAAC0D,OAApB;;AAEA,YAAIA,OAAO,KAAK,IAAhB,EAAsB;AACpBy1C,UAAAA,0BAA0B,CAACz1C,OAAD,EAAU1D,KAAK,CAACuC,MAAhB,CAA1B;AACA61C,UAAAA,UAAU,GAAG10C,OAAb;AACA;AACD;;AAED00C,QAAAA,UAAU,GAAGp4C,KAAK,CAACuC,MAAnB;AACD;AACF;;AAED,aAASs8C,2BAAT,CAAqC93B,YAArC,EAAmD;AACjD,cAAQA,YAAY,CAAC/nB,GAArB;AACE,aAAK7D,iBAAL;AACA,aAAKW,UAAL;AACA,aAAKI,mBAAL;AACE;AACE,gBAAK6qB,YAAY,CAACpJ,IAAb,GAAoBzU,WAAzB,EAAsC;AACpCy6B,cAAAA,uBAAuB;AACvB8V,cAAAA,2BAA2B,CAAChkB,SAAS,GAAGH,SAAb,EAAwBvO,YAAxB,EAAsCA,YAAY,CAACxkB,MAAnD,CAA3B;AACAihC,cAAAA,2BAA2B,CAACzc,YAAD,CAA3B;AACD,aAJD,MAIO;AACL0yB,cAAAA,2BAA2B,CAAChkB,SAAS,GAAGH,SAAb,EAAwBvO,YAAxB,EAAsCA,YAAY,CAACxkB,MAAnD,CAA3B;AACD;;AAED;AACD;AAdL;AAgBD;;AAED,aAASi8C,oDAAT,CAA8DM,kBAA9D,EAAkFrG,sBAAlF,EAA0G;AACxG,aAAOL,UAAU,KAAK,IAAtB,EAA4B;AAC1B,YAAIp4C,KAAK,GAAGo4C,UAAZ,CAD0B,CACF;AACxB;;AAEAp7B,QAAAA,eAAe,CAAChd,KAAD,CAAf;AACA++C,QAAAA,4CAA4C,CAAC/+C,KAAD,EAAQy4C,sBAAR,CAA5C;AACA37B,QAAAA,iBAAiB;AACjB,YAAIrZ,KAAK,GAAGzD,KAAK,CAACyD,KAAlB,CAP0B,CAOD;AACzB;;AAEA,YAAIA,KAAK,KAAK,IAAd,EAAoB;AAClB01C,UAAAA,0BAA0B,CAAC11C,KAAD,EAAQzD,KAAR,CAA1B;AACAo4C,UAAAA,UAAU,GAAG30C,KAAb;AACD,SAHD,MAGO;AACLu7C,UAAAA,uDAAuD,CAACF,kBAAD,CAAvD;AACD;AACF;AACF;;AAED,aAASE,uDAAT,CAAiEF,kBAAjE,EAAqF;AACnF,aAAO1G,UAAU,KAAK,IAAtB,EAA4B;AAC1B,YAAIp4C,KAAK,GAAGo4C,UAAZ;AACA,YAAI10C,OAAO,GAAG1D,KAAK,CAAC0D,OAApB;AACA,YAAI2pB,WAAW,GAAGrtB,KAAK,CAACuC,MAAxB;AAEA;AACE;AACA;AACA;AACA84C,UAAAA,uBAAuB,CAACr7C,KAAD,CAAvB;;AAEA,cAAIA,KAAK,KAAK8+C,kBAAd,EAAkC;AAChC1G,YAAAA,UAAU,GAAG,IAAb;AACA;AACD;AACF;;AAED,YAAI10C,OAAO,KAAK,IAAhB,EAAsB;AACpBy1C,UAAAA,0BAA0B,CAACz1C,OAAD,EAAU2pB,WAAV,CAA1B;AACA+qB,UAAAA,UAAU,GAAG10C,OAAb;AACA;AACD;;AAED00C,QAAAA,UAAU,GAAG/qB,WAAb;AACD;AACF;;AAED,aAAS0xB,4CAAT,CAAsDn8C,OAAtD,EAA+D61C,sBAA/D,EAAuF;AACrF,cAAQ71C,OAAO,CAAC5D,GAAhB;AACE,aAAK7D,iBAAL;AACA,aAAKW,UAAL;AACA,aAAKI,mBAAL;AACE;AACE,gBAAK0G,OAAO,CAAC+a,IAAR,GAAezU,WAApB,EAAiC;AAC/By6B,cAAAA,uBAAuB;AACvB8V,cAAAA,2BAA2B,CAAChkB,SAAD,EAAY7yB,OAAZ,EAAqB61C,sBAArB,CAA3B;AACAjV,cAAAA,2BAA2B,CAAC5gC,OAAD,CAA3B;AACD,aAJD,MAIO;AACL62C,cAAAA,2BAA2B,CAAChkB,SAAD,EAAY7yB,OAAZ,EAAqB61C,sBAArB,CAA3B;AACD;;AAED;AACD;AAdL;AAgBD;;AAED,QAAIwG,yBAAyB,GAAG,KAAhC;;AAEA,aAAS9F,0BAAT,CAAoCn5C,KAApC,EAA2Ck/C,mBAA3C,EAAgE;AAC9D;AACE,YAAI,CAACD,yBAAD,IAA8Bj/C,KAAK,CAACuC,MAAN,KAAiB28C,mBAAnD,EAAwE;AACtED,UAAAA,yBAAyB,GAAG,IAA5B;AAEAnnD,UAAAA,KAAK,CAAC,0DAA0D,cAA3D,CAAL;AACD;AACF,OAP6D,CAO5D;AACF;;AAGAkI,MAAAA,KAAK,CAACuC,MAAN,GAAe28C,mBAAf;AACD,KAhrba,CAgrbZ;;;AAEF,QAAIC,cAAc,GAAG,CAArB;AACA,QAAIC,qBAAqB,GAAG,CAA5B;AACA,QAAIC,SAAS,GAAG,CAAhB;AACA,QAAIC,cAAc,GAAG,CAArB;AACA,QAAIC,SAAS,GAAG,CAAhB;;AAEA,QAAI,OAAO1iD,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACC,GAA3C,EAAgD;AAC9C,UAAI0iD,SAAS,GAAG3iD,MAAM,CAACC,GAAvB;AACAqiD,MAAAA,cAAc,GAAGK,SAAS,CAAC,oBAAD,CAA1B;AACAJ,MAAAA,qBAAqB,GAAGI,SAAS,CAAC,2BAAD,CAAjC;AACAH,MAAAA,SAAS,GAAGG,SAAS,CAAC,eAAD,CAArB;AACAF,MAAAA,cAAc,GAAGE,SAAS,CAAC,kBAAD,CAA1B;AACAD,MAAAA,SAAS,GAAGC,SAAS,CAAC,eAAD,CAArB;AACD;;AAED,QAAIC,oBAAoB,GAAGtoD,oBAAoB,CAACsoD,oBAAhD;;AACA,aAASC,sBAAT,CAAgC1/C,KAAhC,EAAuC;AACrC;AACE;AACA;AACA;AACA;AACA,YAAI2/C,2BAA2B,GAAG;AAClC,eAAOC,wBAAP,KAAoC,WAApC,GAAkDA,wBAAlD,GAA6Ex3C,SAD7E,CALF,CAM0F;;AAExF,YAAIy3C,aAAa,GAAG,OAAOC,IAAP,KAAgB,WAApC;AACA,eAAQD,aAAa,IAAIF,2BAA2B,KAAK,KAAzD;AACD;AACF;;AACD,aAASI,0BAAT,GAAsC;AACpC;AACE,YAAIJ,2BAA2B,GAAG;AAClC,eAAOC,wBAAP,KAAoC,WAApC,GAAkDA,wBAAlD,GAA6Ex3C,SAD7E;;AAGA,YAAI,CAACu3C,2BAAD,IAAgCF,oBAAoB,CAAC78C,OAArB,KAAiC,IAArE,EAA2E;AACzE;AACA9K,UAAAA,KAAK,CAAC,kEAAkE,UAAnE,CAAL;AACD;;AAED,eAAO6nD,2BAAP;AACD;AACF;;AAED,QAAIK,IAAI,GAAG32C,IAAI,CAAC22C,IAAhB;AACA,QAAIC,wBAAwB,GAAG9oD,oBAAoB,CAACud,sBAApD;AAAA,QACIwrC,mBAAmB,GAAG/oD,oBAAoB,CAAC6K,iBAD/C;AAAA,QAEIm+C,yBAAyB,GAAGhpD,oBAAoB,CAACykB,uBAFrD;AAAA,QAGIwkC,sBAAsB,GAAGjpD,oBAAoB,CAACsoD,oBAHlD;AAIA,QAAIY,SAAS;AACb;AACA,KAFA;AAGA,QAAIC,cAAc;AAClB;AACA,KAFA;AAGA,QAAIC,aAAa;AACjB;AACA,KAFA;AAGA,QAAIC,aAAa;AACjB;AACA,KAFA;AAGA,QAAIC,cAAc,GAAG,CAArB;AACA,QAAIC,gBAAgB,GAAG,CAAvB;AACA,QAAIC,WAAW,GAAG,CAAlB;AACA,QAAIC,aAAa,GAAG,CAApB;AACA,QAAIC,sBAAsB,GAAG,CAA7B;AACA,QAAIC,aAAa,GAAG,CAApB;AACA,QAAIC,kBAAkB,GAAG,CAAzB,CApvbc,CAovbc;;AAE5B,QAAIC,gBAAgB,GAAGX,SAAvB,CAtvbc,CAsvboB;;AAElC,QAAIY,kBAAkB,GAAG,IAAzB,CAxvbc,CAwvbiB;;AAE/B,QAAIroC,cAAc,GAAG,IAArB,CA1vbc,CA0vba;;AAE3B,QAAIsoC,6BAA6B,GAAGx3C,OAApC,CA5vbc,CA4vb+B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAI6gC,kBAAkB,GAAG7gC,OAAzB;AACA,QAAIy3C,wBAAwB,GAAGjpC,YAAY,CAACxO,OAAD,CAA3C,CAtwbc,CAswbwC;;AAEtD,QAAI03C,4BAA4B,GAAGX,cAAnC,CAxwbc,CAwwbqC;;AAEnD,QAAIY,4BAA4B,GAAG,IAAnC,CA1wbc,CA0wb2B;AACzC;AACA;AACA;;AAEA,QAAIC,+BAA+B,GAAG53C,OAAtC,CA/wbc,CA+wbiC;AAC/C;;AAEA,QAAI63C,8BAA8B,GAAG73C,OAArC,CAlxbc,CAkxbgC;;AAE9C,QAAI83C,yCAAyC,GAAG93C,OAAhD,CApxbc,CAoxb2C;;AAEzD,QAAI+3C,6BAA6B,GAAG/3C,OAApC,CAtxbc,CAsxb+B;;AAE7C,QAAIg4C,kCAAkC,GAAG,IAAzC,CAxxbc,CAwxbiC;AAC/C;;AAEA,QAAIC,mCAAmC,GAAG,IAA1C,CA3xbc,CA2xbkC;AAChD;;AAEA,QAAIC,4BAA4B,GAAG,CAAnC;AACA,QAAIC,oBAAoB,GAAG,GAA3B,CA/xbc,CA+xbkB;AAChC;;AAEA,QAAIC,kCAAkC,GAAGC,QAAzC,CAlybc,CAkybqC;AACnD;;AAEA,QAAIC,iBAAiB,GAAG,GAAxB;;AAEA,aAASC,gBAAT,GAA4B;AAC1BH,MAAAA,kCAAkC,GAAGl9C,GAAG,KAAKo9C,iBAA7C;AACD;;AAED,aAAStY,mBAAT,GAA+B;AAC7B,aAAOoY,kCAAP;AACD;;AACD,QAAII,gBAAgB,GAAG,KAAvB;AACA,QAAIC,kBAAkB,GAAG,IAAzB;AACA,QAAIC,sCAAsC,GAAG,IAA7C,CAhzbc,CAgzbqC;;AACnD,QAAIC,0BAA0B,GAAG,KAAjC;AACA,QAAIC,6BAA6B,GAAG,IAApC;AACA,QAAIC,0BAA0B,GAAG74C,OAAjC;AACA,QAAI84C,6BAA6B,GAAG,EAApC;AAEA,QAAIC,mBAAmB,GAAG,EAA1B;AACA,QAAIC,iBAAiB,GAAG,CAAxB;AACA,QAAIC,qBAAqB,GAAG,IAA5B;AACA,QAAIC,2BAA2B,GAAG,EAAlC;AACA,QAAIC,wBAAwB,GAAG,CAA/B,CA1zbc,CA0zboB;AAClC;AACA;;AAEA,QAAIC,gBAAgB,GAAG/2C,WAAvB;AACA,QAAIg3C,0BAA0B,GAAGr5C,OAAjC;;AACA,aAASuxB,qBAAT,GAAiC;AAC/B,aAAOgmB,kBAAP;AACD;;AACD,aAAS54B,gBAAT,GAA4B;AAC1B,UAAI,CAAC24B,gBAAgB,IAAIT,aAAa,GAAGC,aAApB,CAAjB,MAAyDH,SAA7D,EAAwE;AACtE;AACA,eAAOz7C,GAAG,EAAV;AACD,OAJyB,CAIxB;;;AAGF,UAAIk+C,gBAAgB,KAAK/2C,WAAzB,EAAsC;AACpC;AACA,eAAO+2C,gBAAP;AACD,OAVyB,CAUxB;;;AAGFA,MAAAA,gBAAgB,GAAGl+C,GAAG,EAAtB;AACA,aAAOk+C,gBAAP;AACD;;AACD,aAASx6B,iBAAT,CAA2BtoB,KAA3B,EAAkC;AAChC;AACA,UAAI2d,IAAI,GAAG3d,KAAK,CAAC2d,IAAjB;;AAEA,UAAI,CAACA,IAAI,GAAG1U,cAAR,MAA4BD,MAAhC,EAAwC;AACtC,eAAOY,QAAP;AACD,OAFD,MAEO,IAAK,CAACo3C,gBAAgB,GAAGT,aAApB,MAAuCF,SAAvC,IAAoDa,6BAA6B,KAAKx3C,OAA3F,EAAoG;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAOiF,iBAAiB,CAACuyC,6BAAD,CAAxB;AACD;;AAED,UAAI8B,YAAY,GAAGlnC,wBAAwB,OAAOD,YAAlD;;AAEA,UAAImnC,YAAJ,EAAkB;AAChB,YAAK7C,yBAAyB,CAACpkC,UAA1B,KAAyC,IAA9C,EAAoD;AAClD,cAAIA,UAAU,GAAGokC,yBAAyB,CAACpkC,UAA3C;;AAEA,cAAI,CAACA,UAAU,CAACojB,cAAhB,EAAgC;AAC9BpjB,YAAAA,UAAU,CAACojB,cAAX,GAA4B,IAAI3gB,GAAJ,EAA5B;AACD;;AAEDzC,UAAAA,UAAU,CAACojB,cAAX,CAA0BlgB,GAA1B,CAA8Bjf,KAA9B;AACD,SATe,CASd;AACF;AACA;AACA;AACA;AACA;AACA;;;AAGA,YAAI+iD,0BAA0B,KAAKp5C,MAAnC,EAA2C;AACzC;AACAo5C,UAAAA,0BAA0B,GAAGt0C,uBAAuB,EAApD;AACD;;AAED,eAAOs0C,0BAAP;AACD,OA7C+B,CA6C9B;AACF;AACA;AACA;AACA;AACA;;;AAGA,UAAItzC,UAAU,GAAGU,wBAAwB,EAAzC;;AAEA,UAAIV,UAAU,KAAK9F,MAAnB,EAA2B;AACzB,eAAO8F,UAAP;AACD,OAzD+B,CAyD9B;AACF;AACA;AACA;AACA;AACA;;;AAGA,UAAIwzC,SAAS,GAAG7vC,uBAAuB,EAAvC;AACA,aAAO6vC,SAAP;AACD;;AAED,aAASC,gBAAT,CAA0BljD,KAA1B,EAAiC;AAC/B;AACA;AACA;AACA;AACA,UAAI2d,IAAI,GAAG3d,KAAK,CAAC2d,IAAjB;;AAEA,UAAI,CAACA,IAAI,GAAG1U,cAAR,MAA4BD,MAAhC,EAAwC;AACtC,eAAOY,QAAP;AACD;;AAED,aAAO8E,kBAAkB,EAAzB;AACD;;AAED,aAAS6Z,qBAAT,CAA+BvoB,KAA/B,EAAsCoN,IAAtC,EAA4CI,SAA5C,EAAuD;AACrD21C,MAAAA,qBAAqB;AACrB,UAAI37C,IAAI,GAAG47C,6BAA6B,CAACpjD,KAAD,EAAQoN,IAAR,CAAxC;;AAEA,UAAI5F,IAAI,KAAK,IAAb,EAAmB;AACjB,eAAO,IAAP;AACD,OANoD,CAMnD;;;AAGFgI,MAAAA,eAAe,CAAChI,IAAD,EAAO4F,IAAP,EAAaI,SAAb,CAAf;;AAEA,UAAI,CAACwzC,gBAAgB,GAAGT,aAApB,MAAuC72C,OAAvC,IAAkDlC,IAAI,KAAKy5C,kBAA/D,EAAmF;AACjF;AACA;AACA;AACA;AACA;AACAoC,QAAAA,gCAAgC,CAACrjD,KAAD,CAAhC,CANiF,CAMxC;AAC1C,OAPD,MAOO;AAELsjD,QAAAA,iCAAiC,CAACtjD,KAAD,CAAjC;;AAEA,YAAIwH,IAAI,KAAKy5C,kBAAb,EAAiC;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,cAAK,CAACD,gBAAgB,GAAGT,aAApB,MAAuCF,SAA5C,EAAuD;AACrDmB,YAAAA,yCAAyC,GAAGxyC,UAAU,CAACwyC,yCAAD,EAA4Cp0C,IAA5C,CAAtD;AACD;;AAED,cAAIg0C,4BAA4B,KAAKP,sBAArC,EAA6D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA0C,YAAAA,mBAAmB,CAAC/7C,IAAD,EAAO05C,6BAAP,CAAnB;AACD;AACF;;AAEDsC,QAAAA,qBAAqB,CAACh8C,IAAD,EAAOgG,SAAP,CAArB;;AAEA,YAAIJ,IAAI,KAAKxD,QAAT,IAAqBo3C,gBAAgB,KAAKX,SAA1C,IAAuD,CAACrgD,KAAK,CAAC2d,IAAN,GAAa1U,cAAd,MAAkCD,MAAzF,IAAmG;AACvG,SAAGo3C,sBAAsB,CAACqD,gBAD1B,EAC6C;AAC3C;AACA;AACA;AACA;AACA;AACAxB,UAAAA,gBAAgB;AAChB/mC,UAAAA,kCAAkC;AACnC;AACF;;AAED,aAAO1T,IAAP;AACD,KAj+ba,CAk+bd;AACA;AACA;;;AAEA,aAAS47C,6BAAT,CAAuC1d,WAAvC,EAAoDt4B,IAApD,EAA0D;AACxD;AACAs4B,MAAAA,WAAW,CAAC78B,KAAZ,GAAoBmG,UAAU,CAAC02B,WAAW,CAAC78B,KAAb,EAAoBuE,IAApB,CAA9B;AACA,UAAIhL,SAAS,GAAGsjC,WAAW,CAACtjC,SAA5B;;AAEA,UAAIA,SAAS,KAAK,IAAlB,EAAwB;AACtBA,QAAAA,SAAS,CAACyG,KAAV,GAAkBmG,UAAU,CAAC5M,SAAS,CAACyG,KAAX,EAAkBuE,IAAlB,CAA5B;AACD;;AAED;AACE,YAAIhL,SAAS,KAAK,IAAd,IAAsB,CAACsjC,WAAW,CAACpjC,KAAZ,IAAqBnC,SAAS,GAAGW,SAAjC,CAAD,MAAkDb,OAA5E,EAAqF;AACnFyjD,UAAAA,wCAAwC,CAAChe,WAAD,CAAxC;AACD;AACF,OAbuD,CAatD;;AAGF,UAAIxjC,IAAI,GAAGwjC,WAAX;AACA,UAAI5hC,MAAM,GAAG4hC,WAAW,CAACnjC,MAAzB;;AAEA,aAAOuB,MAAM,KAAK,IAAlB,EAAwB;AACtBA,QAAAA,MAAM,CAACse,UAAP,GAAoBpT,UAAU,CAAClL,MAAM,CAACse,UAAR,EAAoBhV,IAApB,CAA9B;AACAhL,QAAAA,SAAS,GAAG0B,MAAM,CAAC1B,SAAnB;;AAEA,YAAIA,SAAS,KAAK,IAAlB,EAAwB;AACtBA,UAAAA,SAAS,CAACggB,UAAV,GAAuBpT,UAAU,CAAC5M,SAAS,CAACggB,UAAX,EAAuBhV,IAAvB,CAAjC;AACD,SAFD,MAEO;AACL;AACE,gBAAI,CAACtJ,MAAM,CAACxB,KAAP,IAAgBnC,SAAS,GAAGW,SAA5B,CAAD,MAA6Cb,OAAjD,EAA0D;AACxDyjD,cAAAA,wCAAwC,CAAChe,WAAD,CAAxC;AACD;AACF;AACF;;AAEDxjC,QAAAA,IAAI,GAAG4B,MAAP;AACAA,QAAAA,MAAM,GAAGA,MAAM,CAACvB,MAAhB;AACD;;AAED,UAAIL,IAAI,CAAClD,GAAL,KAAa1D,QAAjB,EAA2B;AACzB,YAAIkM,IAAI,GAAGtF,IAAI,CAACa,SAAhB;AACA,eAAOyE,IAAP;AACD,OAHD,MAGO;AACL,eAAO,IAAP;AACD;AACF;;AAED,aAASwd,mBAAT,CAA6BhlB,KAA7B,EAAoCoN,IAApC,EAA0C;AACxC,aAAQ;AACN;AACA;AACA6zC,QAAAA,kBAAkB,KAAK,IAAvB,IAA+B,CAACjhD,KAAK,CAAC2d,IAAN,GAAa1U,cAAd,MAAkCD,MAAjE,IAA6E;AAC7E;AACA;AACA;AACC,SAACg4C,gBAAgB,GAAGT,aAApB,MAAuCF;AAP1C;AASD,KA7hca,CA6hcZ;AACF;AACA;AACA;AACA;;;AAEA,aAASmD,qBAAT,CAA+Bh8C,IAA/B,EAAqCkG,WAArC,EAAkD;AAChD,UAAIi2C,oBAAoB,GAAGn8C,IAAI,CAACo8C,YAAhC,CADgD,CACF;AAC9C;;AAEAj2C,MAAAA,yBAAyB,CAACnG,IAAD,EAAOkG,WAAP,CAAzB,CAJgD,CAIF;;AAE9C,UAAInB,SAAS,GAAGH,YAAY,CAAC5E,IAAD,EAAOA,IAAI,KAAKy5C,kBAAT,GAA8BC,6BAA9B,GAA8Dx3C,OAArE,CAA5B;;AAEA,UAAI6C,SAAS,KAAK7C,OAAlB,EAA2B;AACzB;AACA,YAAIi6C,oBAAoB,KAAK,IAA7B,EAAmC;AACjCE,UAAAA,gBAAgB,CAACF,oBAAD,CAAhB;AACD;;AAEDn8C,QAAAA,IAAI,CAACo8C,YAAL,GAAoB,IAApB;AACAp8C,QAAAA,IAAI,CAACs8C,gBAAL,GAAwBn6C,MAAxB;AACA;AACD,OAjB+C,CAiB9C;;;AAGF,UAAIo6C,mBAAmB,GAAG53C,sBAAsB,CAACI,SAAD,CAAhD,CApBgD,CAoBa;;AAE7D,UAAIy3C,wBAAwB,GAAGx8C,IAAI,CAACs8C,gBAApC;;AAEA,UAAIE,wBAAwB,KAAKD,mBAA7B,IAAoD;AACxD;AACA;AACA,QAAG3D,sBAAsB,CAACx9C,OAAvB,KAAmC,IAAnC,IAA2C+gD,oBAAoB,KAAKM,mBAAvE,CAHA,EAG6F;AAC3F;AACE;AACA;AACA;AACA,cAAIN,oBAAoB,IAAI,IAAxB,IAAgCK,wBAAwB,KAAKp6C,QAAjE,EAA2E;AACzE9R,YAAAA,KAAK,CAAC,4GAAD,CAAL;AACD;AACF,SAR0F,CAQzF;;AAGF;AACD;;AAED,UAAI6rD,oBAAoB,IAAI,IAA5B,EAAkC;AAChC;AACAE,QAAAA,gBAAgB,CAACF,oBAAD,CAAhB;AACD,OA5C+C,CA4C9C;;;AAGF,UAAIO,eAAJ;;AAEA,UAAIH,mBAAmB,KAAKn6C,QAA5B,EAAsC;AACpC;AACA;AACA,YAAIpC,IAAI,CAACxI,GAAL,KAAaub,UAAjB,EAA6B;AAC3B,cAAK6lC,sBAAsB,CAACqD,gBAAvB,KAA4C,IAAjD,EAAuD;AACrDrD,YAAAA,sBAAsB,CAAC+D,uBAAvB,GAAiD,IAAjD;AACD;;AAEDlpC,UAAAA,0BAA0B,CAACmpC,qBAAqB,CAACzsC,IAAtB,CAA2B,IAA3B,EAAiCnQ,IAAjC,CAAD,CAA1B;AACD,SAND,MAMO;AACLuT,UAAAA,oBAAoB,CAACqpC,qBAAqB,CAACzsC,IAAtB,CAA2B,IAA3B,EAAiCnQ,IAAjC,CAAD,CAApB;AACD;;AAED;AACE;AACA68C,UAAAA,kBAAkB,CAACv/C,iBAAD,EAAoBqW,kBAApB,CAAlB;AACD;AAED+oC,QAAAA,eAAe,GAAG,IAAlB;AACD,OAnBD,MAmBO;AACL,YAAII,sBAAJ;;AAEA,gBAAQ7zC,oBAAoB,CAAClE,SAAD,CAA5B;AACE,eAAKvE,qBAAL;AACEs8C,YAAAA,sBAAsB,GAAGx/C,iBAAzB;AACA;;AAEF,eAAKmD,uBAAL;AACEq8C,YAAAA,sBAAsB,GAAGt/C,oBAAzB;AACA;;AAEF,eAAKkD,oBAAL;AACEo8C,YAAAA,sBAAsB,GAAGp/C,cAAzB;AACA;;AAEF,eAAKiD,iBAAL;AACEm8C,YAAAA,sBAAsB,GAAGl/C,YAAzB;AACA;;AAEF;AACEk/C,YAAAA,sBAAsB,GAAGp/C,cAAzB;AACA;AAnBJ;;AAsBAg/C,QAAAA,eAAe,GAAGG,kBAAkB,CAACC,sBAAD,EAAyBC,2BAA2B,CAAC5sC,IAA5B,CAAiC,IAAjC,EAAuCnQ,IAAvC,CAAzB,CAApC;AACD;;AAEDA,MAAAA,IAAI,CAACs8C,gBAAL,GAAwBC,mBAAxB;AACAv8C,MAAAA,IAAI,CAACo8C,YAAL,GAAoBM,eAApB;AACD,KAroca,CAqocZ;AACF;;;AAGA,aAASK,2BAAT,CAAqC/8C,IAArC,EAA2Cg9C,UAA3C,EAAuD;AACrD;AACEhiB,QAAAA,qBAAqB;AACtB,OAHoD,CAGnD;AACF;;AAGAsgB,MAAAA,gBAAgB,GAAG/2C,WAAnB;AACAg3C,MAAAA,0BAA0B,GAAGr5C,OAA7B;;AAEA,UAAI,CAACs3C,gBAAgB,IAAIT,aAAa,GAAGC,aAApB,CAAjB,MAAyDH,SAA7D,EAAwE;AACtE,cAAM,IAAIn9C,KAAJ,CAAU,gCAAV,CAAN;AACD,OAZoD,CAYnD;AACF;;;AAGA,UAAIuhD,oBAAoB,GAAGj9C,IAAI,CAACo8C,YAAhC;AACA,UAAIc,sBAAsB,GAAGC,mBAAmB,EAAhD;;AAEA,UAAID,sBAAJ,EAA4B;AAC1B;AACA;AACA,YAAIl9C,IAAI,CAACo8C,YAAL,KAAsBa,oBAA1B,EAAgD;AAC9C;AACA;AACA;AACA,iBAAO,IAAP;AACD;AACF,OA5BoD,CA4BnD;AACF;;;AAGA,UAAI57C,KAAK,GAAGuD,YAAY,CAAC5E,IAAD,EAAOA,IAAI,KAAKy5C,kBAAT,GAA8BC,6BAA9B,GAA8Dx3C,OAArE,CAAxB;;AAEA,UAAIb,KAAK,KAAKa,OAAd,EAAuB;AACrB;AACA,eAAO,IAAP;AACD,OArCoD,CAqCnD;AACF;AACA;AACA;AACA;AACA;;;AAGA,UAAIk7C,eAAe,GAAG,CAACv2C,oBAAoB,CAAC7G,IAAD,EAAOqB,KAAP,CAArB,IAAsC,CAAC0F,mBAAmB,CAAC/G,IAAD,EAAOqB,KAAP,CAA1D,IAA6E,CAAC27C,UAApG;AACA,UAAIK,UAAU,GAAGD,eAAe,GAAGE,oBAAoB,CAACt9C,IAAD,EAAOqB,KAAP,CAAvB,GAAuCk8C,cAAc,CAACv9C,IAAD,EAAOqB,KAAP,CAArF;;AAEA,UAAIg8C,UAAU,KAAKpE,cAAnB,EAAmC;AACjC,YAAIoE,UAAU,KAAKlE,WAAnB,EAAgC;AAC9B;AACA;AACA;AACA;AACA,cAAIqE,eAAe,GAAGj3C,mCAAmC,CAACvG,IAAD,CAAzD;;AAEA,cAAIw9C,eAAe,KAAKt7C,OAAxB,EAAiC;AAC/Bb,YAAAA,KAAK,GAAGm8C,eAAR;AACAH,YAAAA,UAAU,GAAGI,0BAA0B,CAACz9C,IAAD,EAAOw9C,eAAP,CAAvC;AACD;AACF;;AAED,YAAIH,UAAU,KAAKnE,gBAAnB,EAAqC;AACnC,cAAIwE,UAAU,GAAG7D,4BAAjB;AACA8D,UAAAA,iBAAiB,CAAC39C,IAAD,EAAOkC,OAAP,CAAjB;AACA65C,UAAAA,mBAAmB,CAAC/7C,IAAD,EAAOqB,KAAP,CAAnB;AACA26C,UAAAA,qBAAqB,CAACh8C,IAAD,EAAO5C,GAAG,EAAV,CAArB;AACA,gBAAMsgD,UAAN;AACD;;AAED,YAAIL,UAAU,KAAK9D,kBAAnB,EAAuC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACAwC,UAAAA,mBAAmB,CAAC/7C,IAAD,EAAOqB,KAAP,CAAnB;AACD,SATD,MASO;AACL;AACA;AACA;AACA;AACA;AACA;AACA,cAAIu8C,mBAAmB,GAAG,CAAC/2C,oBAAoB,CAAC7G,IAAD,EAAOqB,KAAP,CAA/C;AACA,cAAIke,YAAY,GAAGvf,IAAI,CAAC5E,OAAL,CAAaR,SAAhC;;AAEA,cAAIgjD,mBAAmB,IAAI,CAACC,oCAAoC,CAACt+B,YAAD,CAAhE,EAAgF;AAC9E;AACA;AACA89B,YAAAA,UAAU,GAAGE,cAAc,CAACv9C,IAAD,EAAOqB,KAAP,CAA3B,CAH8E,CAGpC;;AAE1C,gBAAIg8C,UAAU,KAAKlE,WAAnB,EAAgC;AAC9B,kBAAI2E,gBAAgB,GAAGv3C,mCAAmC,CAACvG,IAAD,CAA1D;;AAEA,kBAAI89C,gBAAgB,KAAK57C,OAAzB,EAAkC;AAChCb,gBAAAA,KAAK,GAAGy8C,gBAAR;AACAT,gBAAAA,UAAU,GAAGI,0BAA0B,CAACz9C,IAAD,EAAO89C,gBAAP,CAAvC,CAFgC,CAEiC;AACjE;AACD;AACF;;AAED,gBAAIT,UAAU,KAAKnE,gBAAnB,EAAqC;AACnC,kBAAI6E,WAAW,GAAGlE,4BAAlB;AACA8D,cAAAA,iBAAiB,CAAC39C,IAAD,EAAOkC,OAAP,CAAjB;AACA65C,cAAAA,mBAAmB,CAAC/7C,IAAD,EAAOqB,KAAP,CAAnB;AACA26C,cAAAA,qBAAqB,CAACh8C,IAAD,EAAO5C,GAAG,EAAV,CAArB;AACA,oBAAM2gD,WAAN;AACD;AACF,WAhCI,CAgCH;AACF;;;AAGA/9C,UAAAA,IAAI,CAACuf,YAAL,GAAoBA,YAApB;AACAvf,UAAAA,IAAI,CAACg+C,aAAL,GAAqB38C,KAArB;AACA48C,UAAAA,sBAAsB,CAACj+C,IAAD,EAAOq9C,UAAP,EAAmBh8C,KAAnB,CAAtB;AACD;AACF;;AAED26C,MAAAA,qBAAqB,CAACh8C,IAAD,EAAO5C,GAAG,EAAV,CAArB;;AAEA,UAAI4C,IAAI,CAACo8C,YAAL,KAAsBa,oBAA1B,EAAgD;AAC9C;AACA;AACA,eAAOF,2BAA2B,CAAC5sC,IAA5B,CAAiC,IAAjC,EAAuCnQ,IAAvC,CAAP;AACD;;AAED,aAAO,IAAP;AACD;;AAED,aAASy9C,0BAAT,CAAoCz9C,IAApC,EAA0Cw9C,eAA1C,EAA2D;AACzD;AACA;AACA;AACA,UAAIU,sBAAsB,GAAGhE,kCAA7B;;AAEA,UAAIlmC,gBAAgB,CAAChU,IAAD,CAApB,EAA4B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAIm+C,kBAAkB,GAAGR,iBAAiB,CAAC39C,IAAD,EAAOw9C,eAAP,CAA1C;AACAW,QAAAA,kBAAkB,CAACrjD,KAAnB,IAA4B5B,iBAA5B;AAEA;AACEoQ,UAAAA,uBAAuB,CAACtJ,IAAI,CAAC8K,aAAN,CAAvB;AACD;AACF;;AAED,UAAIuyC,UAAU,GAAGE,cAAc,CAACv9C,IAAD,EAAOw9C,eAAP,CAA/B;;AAEA,UAAIH,UAAU,KAAKlE,WAAnB,EAAgC;AAC9B;AACA;AACA;AACA;AACA,YAAIiF,uBAAuB,GAAGjE,mCAA9B;AACAA,QAAAA,mCAAmC,GAAG+D,sBAAtC,CAN8B,CAMgC;AAC9D;;AAEA,YAAIE,uBAAuB,KAAK,IAAhC,EAAsC;AACpCC,UAAAA,sBAAsB,CAACD,uBAAD,CAAtB;AACD;AACF;;AAED,aAAOf,UAAP;AACD;;AAED,aAASgB,sBAAT,CAAgCC,MAAhC,EAAwC;AACtC,UAAInE,mCAAmC,KAAK,IAA5C,EAAkD;AAChDA,QAAAA,mCAAmC,GAAGmE,MAAtC;AACD,OAFD,MAEO;AACLnE,QAAAA,mCAAmC,CAACpyC,IAApC,CAAyC1W,KAAzC,CAA+C8oD,mCAA/C,EAAoFmE,MAApF;AACD;AACF;;AAED,aAASL,sBAAT,CAAgCj+C,IAAhC,EAAsCq9C,UAAtC,EAAkDh8C,KAAlD,EAAyD;AACvD,cAAQg8C,UAAR;AACE,aAAKpE,cAAL;AACA,aAAKC,gBAAL;AACE;AACE,kBAAM,IAAIx9C,KAAJ,CAAU,gDAAV,CAAN;AACD;AACH;AACA;AACA;;AAEA,aAAKy9C,WAAL;AACE;AACE;AACA;AACAoF,YAAAA,UAAU,CAACv+C,IAAD,EAAOm6C,mCAAP,CAAV;AACA;AACD;;AAEH,aAAKf,aAAL;AACE;AACE2C,YAAAA,mBAAmB,CAAC/7C,IAAD,EAAOqB,KAAP,CAAnB,CADF,CACoC;AAClC;;AAEA,gBAAIsF,mBAAmB,CAACtF,KAAD,CAAnB,IAA8B;AAClC,aAACm9C,8BAA8B,EAD/B,EACmC;AACjC;AACA;AACA,kBAAIC,cAAc,GAAGrE,4BAA4B,GAAGC,oBAA/B,GAAsDj9C,GAAG,EAA9E,CAHiC,CAGiD;;AAElF,kBAAIqhD,cAAc,GAAG,EAArB,EAAyB;AACvB,oBAAI15C,SAAS,GAAGH,YAAY,CAAC5E,IAAD,EAAOkC,OAAP,CAA5B;;AAEA,oBAAI6C,SAAS,KAAK7C,OAAlB,EAA2B;AACzB;AACA;AACD;;AAED,oBAAI8C,cAAc,GAAGhF,IAAI,CAACgF,cAA1B;;AAEA,oBAAI,CAACsC,eAAe,CAACtC,cAAD,EAAiB3D,KAAjB,CAApB,EAA6C;AAC3C;AACA;AACA;AACA;AACA,sBAAI2E,SAAS,GAAG6a,gBAAgB,EAAhC;AACA1Y,kBAAAA,cAAc,CAACnI,IAAD,EAAOgF,cAAP,CAAd;AACA;AACD,iBAlBsB,CAkBrB;AACF;AACA;;;AAGAhF,gBAAAA,IAAI,CAAC0+C,aAAL,GAAqB7yC,eAAe,CAAC0yC,UAAU,CAACpuC,IAAX,CAAgB,IAAhB,EAAsBnQ,IAAtB,EAA4Bm6C,mCAA5B,CAAD,EAAmEsE,cAAnE,CAApC;AACA;AACD;AACF,aApCH,CAoCI;;;AAGFF,YAAAA,UAAU,CAACv+C,IAAD,EAAOm6C,mCAAP,CAAV;AACA;AACD;;AAEH,aAAKd,sBAAL;AACE;AACE0C,YAAAA,mBAAmB,CAAC/7C,IAAD,EAAOqB,KAAP,CAAnB;;AAEA,gBAAIuF,uBAAuB,CAACvF,KAAD,CAA3B,EAAoC;AAClC;AACA;AACA;AACA;AACD;;AAED,gBAAI,CAACm9C,8BAA8B,EAAnC,EAAuC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,kBAAIz4C,mBAAmB,GAAGF,sBAAsB,CAAC7F,IAAD,EAAOqB,KAAP,CAAhD;AACA,kBAAIs9C,WAAW,GAAG54C,mBAAlB;AACA,kBAAI64C,aAAa,GAAGxhD,GAAG,KAAKuhD,WAA5B;;AAEA,kBAAIE,eAAe,GAAGC,GAAG,CAACF,aAAD,CAAH,GAAqBA,aAA3C,CAXqC,CAWqB;;;AAG1D,kBAAIC,eAAe,GAAG,EAAtB,EAA0B;AACxB;AACA;AACA7+C,gBAAAA,IAAI,CAAC0+C,aAAL,GAAqB7yC,eAAe,CAAC0yC,UAAU,CAACpuC,IAAX,CAAgB,IAAhB,EAAsBnQ,IAAtB,EAA4Bm6C,mCAA5B,CAAD,EAAmE0E,eAAnE,CAApC;AACA;AACD;AACF,aA9BH,CA8BI;;;AAGFN,YAAAA,UAAU,CAACv+C,IAAD,EAAOm6C,mCAAP,CAAV;AACA;AACD;;AAEH,aAAKb,aAAL;AACE;AACE;AACAiF,YAAAA,UAAU,CAACv+C,IAAD,EAAOm6C,mCAAP,CAAV;AACA;AACD;;AAEH;AACE;AACE,kBAAM,IAAIz+C,KAAJ,CAAU,2BAAV,CAAN;AACD;AA9GL;AAgHD;;AAED,aAASmiD,oCAAT,CAA8Ct+B,YAA9C,EAA4D;AAC1D;AACA;AACA;AACA,UAAI7kB,IAAI,GAAG6kB,YAAX;;AAEA,aAAO,IAAP,EAAa;AACX,YAAI7kB,IAAI,CAACI,KAAL,GAAarB,gBAAjB,EAAmC;AACjC,cAAI8hB,WAAW,GAAG7gB,IAAI,CAAC6gB,WAAvB;;AAEA,cAAIA,WAAW,KAAK,IAApB,EAA0B;AACxB,gBAAIwjC,MAAM,GAAGxjC,WAAW,CAACmW,MAAzB;;AAEA,gBAAIqtB,MAAM,KAAK,IAAf,EAAqB;AACnB,mBAAK,IAAIptD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGotD,MAAM,CAAC9uD,MAA3B,EAAmC0B,CAAC,EAApC,EAAwC;AACtC,oBAAIyiC,KAAK,GAAG2qB,MAAM,CAACptD,CAAD,CAAlB;AACA,oBAAIuhC,WAAW,GAAGkB,KAAK,CAAClB,WAAxB;AACA,oBAAI8rB,aAAa,GAAG5qB,KAAK,CAACnhC,KAA1B;;AAEA,oBAAI;AACF,sBAAI,CAACkgB,QAAQ,CAAC+f,WAAW,EAAZ,EAAgB8rB,aAAhB,CAAb,EAA6C;AAC3C;AACA,2BAAO,KAAP;AACD;AACF,iBALD,CAKE,OAAO1uD,KAAP,EAAc;AACd;AACA;AACA,yBAAO,KAAP;AACD;AACF;AACF;AACF;AACF;;AAED,YAAI2L,KAAK,GAAGvB,IAAI,CAACuB,KAAjB;;AAEA,YAAIvB,IAAI,CAAC4lC,YAAL,GAAoB7mC,gBAApB,IAAwCwC,KAAK,KAAK,IAAtD,EAA4D;AAC1DA,UAAAA,KAAK,CAAClB,MAAN,GAAeL,IAAf;AACAA,UAAAA,IAAI,GAAGuB,KAAP;AACA;AACD;;AAED,YAAIvB,IAAI,KAAK6kB,YAAb,EAA2B;AACzB,iBAAO,IAAP;AACD;;AAED,eAAO7kB,IAAI,CAACwB,OAAL,KAAiB,IAAxB,EAA8B;AAC5B,cAAIxB,IAAI,CAACK,MAAL,KAAgB,IAAhB,IAAwBL,IAAI,CAACK,MAAL,KAAgBwkB,YAA5C,EAA0D;AACxD,mBAAO,IAAP;AACD;;AAED7kB,UAAAA,IAAI,GAAGA,IAAI,CAACK,MAAZ;AACD;;AAEDL,QAAAA,IAAI,CAACwB,OAAL,CAAanB,MAAb,GAAsBL,IAAI,CAACK,MAA3B;AACAL,QAAAA,IAAI,GAAGA,IAAI,CAACwB,OAAZ;AACD,OAxDyD,CAwDxD;AACF;;;AAGA,aAAO,IAAP;AACD;;AAED,aAAS6/C,mBAAT,CAA6B/7C,IAA7B,EAAmCgF,cAAnC,EAAmD;AACjD;AACA;AACA;AACA;AACAA,MAAAA,cAAc,GAAGyC,WAAW,CAACzC,cAAD,EAAiBi1C,6BAAjB,CAA5B;AACAj1C,MAAAA,cAAc,GAAGyC,WAAW,CAACzC,cAAD,EAAiBg1C,yCAAjB,CAA5B;AACA9xC,MAAAA,iBAAiB,CAAClI,IAAD,EAAOgF,cAAP,CAAjB;AACD,KA5/ca,CA4/cZ;AACF;;;AAGA,aAAS43C,qBAAT,CAA+B58C,IAA/B,EAAqC;AACnC;AACEi7B,QAAAA,oBAAoB;AACrB;;AAED,UAAI,CAACue,gBAAgB,IAAIT,aAAa,GAAGC,aAApB,CAAjB,MAAyDH,SAA7D,EAAwE;AACtE,cAAM,IAAIn9C,KAAJ,CAAU,gCAAV,CAAN;AACD;;AAEDyhD,MAAAA,mBAAmB;AACnB,UAAI97C,KAAK,GAAGuD,YAAY,CAAC5E,IAAD,EAAOkC,OAAP,CAAxB;;AAEA,UAAI,CAACmF,gBAAgB,CAAChG,KAAD,EAAQe,QAAR,CAArB,EAAwC;AACtC;AACA45C,QAAAA,qBAAqB,CAACh8C,IAAD,EAAO5C,GAAG,EAAV,CAArB;AACA,eAAO,IAAP;AACD;;AAED,UAAIigD,UAAU,GAAGE,cAAc,CAACv9C,IAAD,EAAOqB,KAAP,CAA/B;;AAEA,UAAIrB,IAAI,CAACxI,GAAL,KAAaub,UAAb,IAA2BsqC,UAAU,KAAKlE,WAA9C,EAA2D;AACzD;AACA;AACA;AACA;AACA,YAAIqE,eAAe,GAAGj3C,mCAAmC,CAACvG,IAAD,CAAzD;;AAEA,YAAIw9C,eAAe,KAAKt7C,OAAxB,EAAiC;AAC/Bb,UAAAA,KAAK,GAAGm8C,eAAR;AACAH,UAAAA,UAAU,GAAGI,0BAA0B,CAACz9C,IAAD,EAAOw9C,eAAP,CAAvC;AACD;AACF;;AAED,UAAIH,UAAU,KAAKnE,gBAAnB,EAAqC;AACnC,YAAIwE,UAAU,GAAG7D,4BAAjB;AACA8D,QAAAA,iBAAiB,CAAC39C,IAAD,EAAOkC,OAAP,CAAjB;AACA65C,QAAAA,mBAAmB,CAAC/7C,IAAD,EAAOqB,KAAP,CAAnB;AACA26C,QAAAA,qBAAqB,CAACh8C,IAAD,EAAO5C,GAAG,EAAV,CAArB;AACA,cAAMsgD,UAAN;AACD;;AAED,UAAIL,UAAU,KAAK9D,kBAAnB,EAAuC;AACrC,cAAM,IAAI79C,KAAJ,CAAU,gDAAV,CAAN;AACD,OA3CkC,CA2CjC;AACF;;;AAGA,UAAI6jB,YAAY,GAAGvf,IAAI,CAAC5E,OAAL,CAAaR,SAAhC;AACAoF,MAAAA,IAAI,CAACuf,YAAL,GAAoBA,YAApB;AACAvf,MAAAA,IAAI,CAACg+C,aAAL,GAAqB38C,KAArB;AACAk9C,MAAAA,UAAU,CAACv+C,IAAD,EAAOm6C,mCAAP,CAAV,CAlDmC,CAkDoB;AACvD;;AAEA6B,MAAAA,qBAAqB,CAACh8C,IAAD,EAAO5C,GAAG,EAAV,CAArB;AACA,aAAO,IAAP;AACD;;AACD,aAAS6hD,cAAT,CAAwBrxC,EAAxB,EAA4BhS,CAA5B,EAA+B;AAC7B,UAAIsjD,oBAAoB,GAAG1F,gBAA3B;AACAA,MAAAA,gBAAgB,IAAIV,cAApB;;AAEA,UAAI;AACF,eAAOlrC,EAAE,CAAChS,CAAD,CAAT;AACD,OAFD,SAEU;AACR49C,QAAAA,gBAAgB,GAAG0F,oBAAnB,CADQ,CACiC;AACzC;;AAEA,YAAI1F,gBAAgB,KAAKX,SAArB,IAAkC;AACtC,SAAGD,sBAAsB,CAACqD,gBAD1B,EAC6C;AAC3CxB,UAAAA,gBAAgB;AAChB/mC,UAAAA,kCAAkC;AACnC;AACF;AACF,KAxkda,CAykdd;AAEA;;;AACA,aAASyrC,SAAT,CAAmBvxC,EAAnB,EAAuB;AACrB;AACA;AACA,UAAIktC,6BAA6B,KAAK,IAAlC,IAA0CA,6BAA6B,CAACtjD,GAA9B,KAAsCub,UAAhF,IAA8F,CAACymC,gBAAgB,IAAIT,aAAa,GAAGC,aAApB,CAAjB,MAAyDH,SAA3J,EAAsK;AACpKsE,QAAAA,mBAAmB;AACpB;;AAED,UAAI+B,oBAAoB,GAAG1F,gBAA3B;AACAA,MAAAA,gBAAgB,IAAIV,cAApB;AACA,UAAI7hB,cAAc,GAAG0hB,yBAAyB,CAACpkC,UAA/C;AACA,UAAIkjB,gBAAgB,GAAG9uB,wBAAwB,EAA/C;;AAEA,UAAI;AACFgwC,QAAAA,yBAAyB,CAACpkC,UAA1B,GAAuC,IAAvC;AACA3L,QAAAA,wBAAwB,CAACpI,qBAAD,CAAxB;;AAEA,YAAIoN,EAAJ,EAAQ;AACN,iBAAOA,EAAE,EAAT;AACD,SAFD,MAEO;AACL,iBAAOhN,SAAP;AACD;AACF,OATD,SASU;AACRgI,QAAAA,wBAAwB,CAAC6uB,gBAAD,CAAxB;AACAkhB,QAAAA,yBAAyB,CAACpkC,UAA1B,GAAuC0iB,cAAvC;AACAuiB,QAAAA,gBAAgB,GAAG0F,oBAAnB,CAHQ,CAGiC;AACzC;AACA;;AAEA,YAAI,CAAC1F,gBAAgB,IAAIT,aAAa,GAAGC,aAApB,CAAjB,MAAyDH,SAA7D,EAAwE;AACtEllC,UAAAA,kBAAkB;AACnB;AACF;AACF;;AACD,aAASwxB,eAAT,CAAyB3sC,KAAzB,EAAgC6I,KAAhC,EAAuC;AACrC0G,MAAAA,IAAI,CAAC4xC,wBAAD,EAA2B5W,kBAA3B,EAA+CvqC,KAA/C,CAAJ;AACAuqC,MAAAA,kBAAkB,GAAGv7B,UAAU,CAACu7B,kBAAD,EAAqB1hC,KAArB,CAA/B;AACAy4C,MAAAA,+BAA+B,GAAGtyC,UAAU,CAACsyC,+BAAD,EAAkCz4C,KAAlC,CAA5C;AACD;;AACD,aAASqhC,cAAT,CAAwBlqC,KAAxB,EAA+B;AAC7BuqC,MAAAA,kBAAkB,GAAG4W,wBAAwB,CAACv+C,OAA9C;AACAwV,MAAAA,GAAG,CAAC+oC,wBAAD,EAA2BnhD,KAA3B,CAAH;AACD;;AAED,aAASmlD,iBAAT,CAA2B39C,IAA3B,EAAiCqB,KAAjC,EAAwC;AACtCrB,MAAAA,IAAI,CAACuf,YAAL,GAAoB,IAApB;AACAvf,MAAAA,IAAI,CAACg+C,aAAL,GAAqB97C,OAArB;AACA,UAAIw8C,aAAa,GAAG1+C,IAAI,CAAC0+C,aAAzB;;AAEA,UAAIA,aAAa,KAAKzyC,SAAtB,EAAiC;AAC/B;AACA;AACAjM,QAAAA,IAAI,CAAC0+C,aAAL,GAAqBzyC,SAArB,CAH+B,CAGC;;AAEhCF,QAAAA,aAAa,CAAC2yC,aAAD,CAAb;AACD;;AAED,UAAIttC,cAAc,KAAK,IAAvB,EAA6B;AAC3B,YAAI88B,eAAe,GAAG98B,cAAc,CAACrW,MAArC;;AAEA,eAAOmzC,eAAe,KAAK,IAA3B,EAAiC;AAC/B,cAAI9yC,OAAO,GAAG8yC,eAAe,CAACtzC,SAA9B;AACAqzC,UAAAA,qBAAqB,CAAC7yC,OAAD,EAAU8yC,eAAV,CAArB;AACAA,UAAAA,eAAe,GAAGA,eAAe,CAACnzC,MAAlC;AACD;AACF;;AAED0+C,MAAAA,kBAAkB,GAAGz5C,IAArB;AACA,UAAIm+C,kBAAkB,GAAG52B,oBAAoB,CAACvnB,IAAI,CAAC5E,OAAN,EAAe,IAAf,CAA7C;AACAgW,MAAAA,cAAc,GAAG+sC,kBAAjB;AACAzE,MAAAA,6BAA6B,GAAG3W,kBAAkB,GAAG+W,+BAA+B,GAAGz4C,KAAvF;AACAu4C,MAAAA,4BAA4B,GAAGX,cAA/B;AACAY,MAAAA,4BAA4B,GAAG,IAA/B;AACAE,MAAAA,8BAA8B,GAAG73C,OAAjC;AACA83C,MAAAA,yCAAyC,GAAG93C,OAA5C;AACA+3C,MAAAA,6BAA6B,GAAG/3C,OAAhC;AACAg4C,MAAAA,kCAAkC,GAAG,IAArC;AACAC,MAAAA,mCAAmC,GAAG,IAAtC;AACAh+B,MAAAA,yBAAyB;AAEzB;AACExG,QAAAA,uBAAuB,CAACK,sBAAxB;AACD;AAED,aAAOmoC,kBAAP;AACD;;AAED,aAASiB,WAAT,CAAqBp/C,IAArB,EAA2BoB,WAA3B,EAAwC;AACtC,SAAG;AACD,YAAIi+C,WAAW,GAAGjuC,cAAlB;;AAEA,YAAI;AACF;AACA2I,UAAAA,wBAAwB;AACxBiX,UAAAA,oBAAoB;AACpB1b,UAAAA,iBAAiB,GAJf,CAImB;AACrB;;AAEAojC,UAAAA,mBAAmB,CAACt9C,OAApB,GAA8B,IAA9B;;AAEA,cAAIikD,WAAW,KAAK,IAAhB,IAAwBA,WAAW,CAACtkD,MAAZ,KAAuB,IAAnD,EAAyD;AACvD;AACA;AACA;AACA;AACA6+C,YAAAA,4BAA4B,GAAGV,gBAA/B;AACAW,YAAAA,4BAA4B,GAAGz4C,WAA/B,CANuD,CAMX;AAC5C;AACA;AACA;AACA;AACA;;AAEAgQ,YAAAA,cAAc,GAAG,IAAjB;AACA;AACD;;AAED,cAAIje,mBAAmB,IAAIksD,WAAW,CAAClpC,IAAZ,GAAmBzU,WAA9C,EAA2D;AACzD;AACA;AACA;AACA65B,YAAAA,wCAAwC,CAAC8jB,WAAD,EAAc,IAAd,CAAxC;AACD;;AAED,cAAInsD,wBAAJ,EAA8B;AAC5BgO,YAAAA,0BAA0B;;AAE1B,gBAAIE,WAAW,KAAK,IAAhB,IAAwB,OAAOA,WAAP,KAAuB,QAA/C,IAA2D,OAAOA,WAAW,CAACy8B,IAAnB,KAA4B,UAA3F,EAAuG;AACrG,kBAAIt8B,QAAQ,GAAGH,WAAf;AACAE,cAAAA,sBAAsB,CAAC+9C,WAAD,EAAc99C,QAAd,EAAwBm4C,6BAAxB,CAAtB;AACD,aAHD,MAGO;AACLv4C,cAAAA,oBAAoB,CAACk+C,WAAD,EAAcj+C,WAAd,EAA2Bs4C,6BAA3B,CAApB;AACD;AACF;;AAEDlb,UAAAA,cAAc,CAACx+B,IAAD,EAAOq/C,WAAW,CAACtkD,MAAnB,EAA2BskD,WAA3B,EAAwCj+C,WAAxC,EAAqDs4C,6BAArD,CAAd;AACA4F,UAAAA,kBAAkB,CAACD,WAAD,CAAlB;AACD,SA9CD,CA8CE,OAAOE,qBAAP,EAA8B;AAC9B;AACAn+C,UAAAA,WAAW,GAAGm+C,qBAAd;;AAEA,cAAInuC,cAAc,KAAKiuC,WAAnB,IAAkCA,WAAW,KAAK,IAAtD,EAA4D;AAC1D;AACA;AACAA,YAAAA,WAAW,GAAGA,WAAW,CAACtkD,MAA1B;AACAqW,YAAAA,cAAc,GAAGiuC,WAAjB;AACD,WALD,MAKO;AACLA,YAAAA,WAAW,GAAGjuC,cAAd;AACD;;AAED;AACD,SA/DA,CA+DC;;;AAGF;AACD,OAnED,QAmES,IAnET;AAoED;;AAED,aAASouC,cAAT,GAA0B;AACxB,UAAIxmB,cAAc,GAAGyf,wBAAwB,CAACr9C,OAA9C;AACAq9C,MAAAA,wBAAwB,CAACr9C,OAAzB,GAAmCy1B,qBAAnC;;AAEA,UAAImI,cAAc,KAAK,IAAvB,EAA6B;AAC3B;AACA;AACA;AACA,eAAOnI,qBAAP;AACD,OALD,MAKO;AACL,eAAOmI,cAAP;AACD;AACF;;AAED,aAASymB,aAAT,CAAuBzmB,cAAvB,EAAuC;AACrCyf,MAAAA,wBAAwB,CAACr9C,OAAzB,GAAmC49B,cAAnC;AACD;;AAED,aAAS0c,wBAAT,GAAoC;AAClC0E,MAAAA,4BAA4B,GAAGh9C,GAAG,EAAlC;AACD;;AACD,aAAS8hB,sBAAT,CAAgCtZ,IAAhC,EAAsC;AACpCm0C,MAAAA,8BAA8B,GAAGvyC,UAAU,CAAC5B,IAAD,EAAOm0C,8BAAP,CAA3C;AACD;;AACD,aAAStY,gBAAT,GAA4B;AAC1B,UAAImY,4BAA4B,KAAKX,cAArC,EAAqD;AACnDW,QAAAA,4BAA4B,GAAGR,aAA/B;AACD;AACF;;AACD,aAAS3a,+BAAT,GAA2C;AACzC,UAAImb,4BAA4B,KAAKX,cAAjC,IAAmDW,4BAA4B,KAAKR,aAApF,IAAqGQ,4BAA4B,KAAKT,WAA1I,EAAuJ;AACrJS,QAAAA,4BAA4B,GAAGP,sBAA/B;AACD,OAHwC,CAGvC;AACF;;;AAGA,UAAII,kBAAkB,KAAK,IAAvB,KAAgC/yC,mBAAmB,CAACqzC,8BAAD,CAAnB,IAAuDrzC,mBAAmB,CAACszC,yCAAD,CAA1G,CAAJ,EAA4J;AAC1J;AACA;AACA;AACA;AACA;AACA;AACA;AACA+B,QAAAA,mBAAmB,CAACtC,kBAAD,EAAqBC,6BAArB,CAAnB;AACD;AACF;;AACD,aAAS/a,cAAT,CAAwBruC,KAAxB,EAA+B;AAC7B,UAAIspD,4BAA4B,KAAKP,sBAArC,EAA6D;AAC3DO,QAAAA,4BAA4B,GAAGT,WAA/B;AACD;;AAED,UAAIe,kCAAkC,KAAK,IAA3C,EAAiD;AAC/CA,QAAAA,kCAAkC,GAAG,CAAC5pD,KAAD,CAArC;AACD,OAFD,MAEO;AACL4pD,QAAAA,kCAAkC,CAACnyC,IAAnC,CAAwCzX,KAAxC;AACD;AACF,KAlyda,CAkydZ;AACF;;;AAEA,aAASyxC,wBAAT,GAAoC;AAClC;AACA;AACA,aAAO6X,4BAA4B,KAAKX,cAAxC;AACD;;AAED,aAASsE,cAAT,CAAwBv9C,IAAxB,EAA8BqB,KAA9B,EAAqC;AACnC,UAAI69C,oBAAoB,GAAG1F,gBAA3B;AACAA,MAAAA,gBAAgB,IAAIT,aAApB;AACA,UAAI/f,cAAc,GAAGwmB,cAAc,EAAnC,CAHmC,CAGI;AACvC;;AAEA,UAAI/F,kBAAkB,KAAKz5C,IAAvB,IAA+B05C,6BAA6B,KAAKr4C,KAArE,EAA4E;AAC1Es8C,QAAAA,iBAAiB,CAAC39C,IAAD,EAAOqB,KAAP,CAAjB;AACD;;AAED,SAAG;AACD,YAAI;AACFq+C,UAAAA,YAAY;AACZ;AACD,SAHD,CAGE,OAAOt+C,WAAP,EAAoB;AACpBg+C,UAAAA,WAAW,CAACp/C,IAAD,EAAOoB,WAAP,CAAX;AACD;AACF,OAPD,QAOS,IAPT;;AASA2Y,MAAAA,wBAAwB;AACxBy/B,MAAAA,gBAAgB,GAAG0F,oBAAnB;AACAO,MAAAA,aAAa,CAACzmB,cAAD,CAAb;;AAEA,UAAI5nB,cAAc,KAAK,IAAvB,EAA6B;AAC3B;AACA,cAAM,IAAI1V,KAAJ,CAAU,wEAAwE,qCAAlF,CAAN;AACD;;AAGD+9C,MAAAA,kBAAkB,GAAG,IAArB;AACAC,MAAAA,6BAA6B,GAAGx3C,OAAhC;AACA,aAAO03C,4BAAP;AACD,KA30da,CA20dZ;;AAEF;;;AAGA,aAAS8F,YAAT,GAAwB;AACtB;AACA,aAAOtuC,cAAc,KAAK,IAA1B,EAAgC;AAC9BuuC,QAAAA,iBAAiB,CAACvuC,cAAD,CAAjB;AACD;AACF;;AAED,aAASksC,oBAAT,CAA8Bt9C,IAA9B,EAAoCqB,KAApC,EAA2C;AACzC,UAAI69C,oBAAoB,GAAG1F,gBAA3B;AACAA,MAAAA,gBAAgB,IAAIT,aAApB;AACA,UAAI/f,cAAc,GAAGwmB,cAAc,EAAnC,CAHyC,CAGF;AACvC;;AAEA,UAAI/F,kBAAkB,KAAKz5C,IAAvB,IAA+B05C,6BAA6B,KAAKr4C,KAArE,EAA4E;AAC1Eo5C,QAAAA,gBAAgB;AAChBkD,QAAAA,iBAAiB,CAAC39C,IAAD,EAAOqB,KAAP,CAAjB;AACD;;AAED,SAAG;AACD,YAAI;AACFu+C,UAAAA,kBAAkB;AAClB;AACD,SAHD,CAGE,OAAOx+C,WAAP,EAAoB;AACpBg+C,UAAAA,WAAW,CAACp/C,IAAD,EAAOoB,WAAP,CAAX;AACD;AACF,OAPD,QAOS,IAPT;;AASA2Y,MAAAA,wBAAwB;AACxB0lC,MAAAA,aAAa,CAACzmB,cAAD,CAAb;AACAwgB,MAAAA,gBAAgB,GAAG0F,oBAAnB;;AAGA,UAAI9tC,cAAc,KAAK,IAAvB,EAA6B;AAE3B,eAAO6nC,cAAP;AACD,OAHD,MAGO;AAGLQ,QAAAA,kBAAkB,GAAG,IAArB;AACAC,QAAAA,6BAA6B,GAAGx3C,OAAhC,CAJK,CAIoC;;AAEzC,eAAO03C,4BAAP;AACD;AACF;AACD;;;AAGA,aAASgG,kBAAT,GAA8B;AAC5B;AACA,aAAOxuC,cAAc,KAAK,IAAnB,IAA2B,CAACpU,WAAW,EAA9C,EAAkD;AAChD2iD,QAAAA,iBAAiB,CAACvuC,cAAD,CAAjB;AACD;AACF;;AAED,aAASuuC,iBAAT,CAA2BE,UAA3B,EAAuC;AACrC;AACA;AACA;AACA,UAAIzkD,OAAO,GAAGykD,UAAU,CAACjlD,SAAzB;AACA4a,MAAAA,eAAe,CAACqqC,UAAD,CAAf;AACA,UAAIlkC,IAAJ;;AAEA,UAAK,CAACkkC,UAAU,CAAC1pC,IAAX,GAAkBzU,WAAnB,MAAoCF,MAAzC,EAAiD;AAC/C45B,QAAAA,kBAAkB,CAACykB,UAAD,CAAlB;AACAlkC,QAAAA,IAAI,GAAGmkC,WAAW,CAAC1kD,OAAD,EAAUykD,UAAV,EAAsB9c,kBAAtB,CAAlB;AACAxH,QAAAA,wCAAwC,CAACskB,UAAD,EAAa,IAAb,CAAxC;AACD,OAJD,MAIO;AACLlkC,QAAAA,IAAI,GAAGmkC,WAAW,CAAC1kD,OAAD,EAAUykD,UAAV,EAAsB9c,kBAAtB,CAAlB;AACD;;AAEDztB,MAAAA,iBAAiB;AACjBuqC,MAAAA,UAAU,CAACj8B,aAAX,GAA2Bi8B,UAAU,CAACv7B,YAAtC;;AAEA,UAAI3I,IAAI,KAAK,IAAb,EAAmB;AACjB;AACA2jC,QAAAA,kBAAkB,CAACO,UAAD,CAAlB;AACD,OAHD,MAGO;AACLzuC,QAAAA,cAAc,GAAGuK,IAAjB;AACD;;AAED+8B,MAAAA,mBAAmB,CAACt9C,OAApB,GAA8B,IAA9B;AACD;;AAED,aAASkkD,kBAAT,CAA4BO,UAA5B,EAAwC;AACtC;AACA;AACA,UAAI1f,aAAa,GAAG0f,UAApB;;AAEA,SAAG;AACD;AACA;AACA;AACA,YAAIzkD,OAAO,GAAG+kC,aAAa,CAACvlC,SAA5B;AACA,YAAIirB,WAAW,GAAGsa,aAAa,CAACplC,MAAhC,CALC,CAKuC;;AAExC,YAAI,CAAColC,aAAa,CAACrlC,KAAd,GAAsBlB,UAAvB,MAAuCnB,OAA3C,EAAoD;AAClD+c,UAAAA,eAAe,CAAC2qB,aAAD,CAAf;AACA,cAAIxkB,IAAI,GAAG,KAAK,CAAhB;;AAEA,cAAK,CAACwkB,aAAa,CAAChqB,IAAd,GAAqBzU,WAAtB,MAAuCF,MAA5C,EAAoD;AAClDma,YAAAA,IAAI,GAAGglB,YAAY,CAACvlC,OAAD,EAAU+kC,aAAV,EAAyB4C,kBAAzB,CAAnB;AACD,WAFD,MAEO;AACL3H,YAAAA,kBAAkB,CAAC+E,aAAD,CAAlB;AACAxkB,YAAAA,IAAI,GAAGglB,YAAY,CAACvlC,OAAD,EAAU+kC,aAAV,EAAyB4C,kBAAzB,CAAnB,CAFK,CAE4D;;AAEjExH,YAAAA,wCAAwC,CAAC4E,aAAD,EAAgB,KAAhB,CAAxC;AACD;;AAED7qB,UAAAA,iBAAiB;;AAEjB,cAAIqG,IAAI,KAAK,IAAb,EAAmB;AACjB;AACAvK,YAAAA,cAAc,GAAGuK,IAAjB;AACA;AACD;AACF,SApBD,MAoBO;AACL;AACA;AACA;AACA,cAAIokC,KAAK,GAAGjS,UAAU,CAAC1yC,OAAD,EAAU+kC,aAAV,CAAtB,CAJK,CAI2C;;;AAGhD,cAAI4f,KAAK,KAAK,IAAd,EAAoB;AAClB;AACA;AACA;AACA;AACAA,YAAAA,KAAK,CAACjlD,KAAN,IAAenB,cAAf;AACAyX,YAAAA,cAAc,GAAG2uC,KAAjB;AACA;AACD;;AAED,cAAK,CAAC5f,aAAa,CAAChqB,IAAd,GAAqBzU,WAAtB,MAAuCF,MAA5C,EAAoD;AAClD;AACA+5B,YAAAA,wCAAwC,CAAC4E,aAAD,EAAgB,KAAhB,CAAxC,CAFkD,CAEc;;AAEhE,gBAAIzE,cAAc,GAAGyE,aAAa,CAACzE,cAAnC;AACA,gBAAIz/B,KAAK,GAAGkkC,aAAa,CAAClkC,KAA1B;;AAEA,mBAAOA,KAAK,KAAK,IAAjB,EAAuB;AACrBy/B,cAAAA,cAAc,IAAIz/B,KAAK,CAACy/B,cAAxB;AACAz/B,cAAAA,KAAK,GAAGA,KAAK,CAACC,OAAd;AACD;;AAEDikC,YAAAA,aAAa,CAACzE,cAAd,GAA+BA,cAA/B;AACD;;AAED,cAAI7V,WAAW,KAAK,IAApB,EAA0B;AACxB;AACAA,YAAAA,WAAW,CAAC/qB,KAAZ,IAAqBlB,UAArB;AACAisB,YAAAA,WAAW,CAACya,YAAZ,GAA2B7nC,OAA3B;AACAotB,YAAAA,WAAW,CAACmB,SAAZ,GAAwB,IAAxB;AACD,WALD,MAKO;AACL;AACA4yB,YAAAA,4BAA4B,GAAGL,kBAA/B;AACAnoC,YAAAA,cAAc,GAAG,IAAjB;AACA;AACD;AACF;;AAED,YAAI4uC,YAAY,GAAG7f,aAAa,CAACjkC,OAAjC;;AAEA,YAAI8jD,YAAY,KAAK,IAArB,EAA2B;AACzB;AACA5uC,UAAAA,cAAc,GAAG4uC,YAAjB;AACA;AACD,SA9EA,CA8EC;;;AAGF7f,QAAAA,aAAa,GAAGta,WAAhB,CAjFC,CAiF4B;;AAE7BzU,QAAAA,cAAc,GAAG+uB,aAAjB;AACD,OApFD,QAoFSA,aAAa,KAAK,IApF3B,EALsC,CAyFJ;;;AAGlC,UAAIyZ,4BAA4B,KAAKX,cAArC,EAAqD;AACnDW,QAAAA,4BAA4B,GAAGN,aAA/B;AACD;AACF;;AAED,aAASiF,UAAT,CAAoBv+C,IAApB,EAA0BigD,iBAA1B,EAA6C;AAC3C;AACA;AACA,UAAIC,0BAA0B,GAAGv3C,wBAAwB,EAAzD;AACA,UAAIsuB,cAAc,GAAG0hB,yBAAyB,CAACpkC,UAA/C;;AAEA,UAAI;AACFokC,QAAAA,yBAAyB,CAACpkC,UAA1B,GAAuC,IAAvC;AACA3L,QAAAA,wBAAwB,CAACpI,qBAAD,CAAxB;AACA2/C,QAAAA,cAAc,CAACngD,IAAD,EAAOigD,iBAAP,EAA0BC,0BAA1B,CAAd;AACD,OAJD,SAIU;AACRvH,QAAAA,yBAAyB,CAACpkC,UAA1B,GAAuC0iB,cAAvC;AACAruB,QAAAA,wBAAwB,CAACs3C,0BAAD,CAAxB;AACD;;AAED,aAAO,IAAP;AACD;;AAED,aAASC,cAAT,CAAwBngD,IAAxB,EAA8BigD,iBAA9B,EAAiDG,mBAAjD,EAAsE;AACpE,SAAG;AACD;AACA;AACA;AACA;AACA;AACA;AACAjD,QAAAA,mBAAmB;AACpB,OARD,QAQSrC,6BAA6B,KAAK,IAR3C;;AAUAuF,MAAAA,uCAAuC;;AAEvC,UAAI,CAAC7G,gBAAgB,IAAIT,aAAa,GAAGC,aAApB,CAAjB,MAAyDH,SAA7D,EAAwE;AACtE,cAAM,IAAIn9C,KAAJ,CAAU,gCAAV,CAAN;AACD;;AAED,UAAI6jB,YAAY,GAAGvf,IAAI,CAACuf,YAAxB;AACA,UAAIle,KAAK,GAAGrB,IAAI,CAACg+C,aAAjB;;AAEA,UAAIz+B,YAAY,KAAK,IAArB,EAA2B;AAEzB,eAAO,IAAP;AACD,OAHD,MAGO;AACL;AACE,cAAIle,KAAK,KAAKa,OAAd,EAAuB;AACrB5R,YAAAA,KAAK,CAAC,uEAAuE,eAAxE,CAAL;AACD;AACF;AACF;;AAED0P,MAAAA,IAAI,CAACuf,YAAL,GAAoB,IAApB;AACAvf,MAAAA,IAAI,CAACg+C,aAAL,GAAqB97C,OAArB;;AAEA,UAAIqd,YAAY,KAAKvf,IAAI,CAAC5E,OAA1B,EAAmC;AACjC,cAAM,IAAIM,KAAJ,CAAU,2EAA2E,uCAArF,CAAN;AACD,OApCmE,CAoClE;AACF;;;AAGAsE,MAAAA,IAAI,CAACo8C,YAAL,GAAoB,IAApB;AACAp8C,MAAAA,IAAI,CAACs8C,gBAAL,GAAwBn6C,MAAxB,CAzCoE,CAyCpC;AAChC;;AAEA,UAAIkG,cAAc,GAAGb,UAAU,CAAC+X,YAAY,CAACle,KAAd,EAAqBke,YAAY,CAAC3E,UAAlC,CAA/B;AACAxS,MAAAA,gBAAgB,CAACpI,IAAD,EAAOqI,cAAP,CAAhB;;AAEA,UAAIrI,IAAI,KAAKy5C,kBAAb,EAAiC;AAC/B;AACAA,QAAAA,kBAAkB,GAAG,IAArB;AACAroC,QAAAA,cAAc,GAAG,IAAjB;AACAsoC,QAAAA,6BAA6B,GAAGx3C,OAAhC;AACD,OApDmE,CAoDlE;AACF;AACA;AACA;AACA;;;AAGA,UAAI,CAACqd,YAAY,CAAC+gB,YAAb,GAA4BhmC,WAA7B,MAA8C7B,OAA9C,IAAyD,CAAC8mB,YAAY,CAACzkB,KAAb,GAAqBR,WAAtB,MAAuC7B,OAApG,EAA6G;AAC3G,YAAI,CAACoiD,0BAAL,EAAiC;AAC/BA,UAAAA,0BAA0B,GAAG,IAA7B;AACAgC,UAAAA,kBAAkB,CAACn/C,cAAD,EAAiB,YAAY;AAC7Cy/C,YAAAA,mBAAmB,GAD0B,CACtB;AACvB;AACA;;AAEA,mBAAO,IAAP;AACD,WANiB,CAAlB;AAOD;AACF,OAtEmE,CAsElE;AACF;AACA;AACA;AACA;;;AAGA,UAAImD,iBAAiB,GAAG,CAAC/gC,YAAY,CAAC+gB,YAAb,IAA6BnmC,kBAAkB,GAAGC,YAArB,GAAoCC,UAApC,GAAiDC,WAA9E,CAAD,MAAiG7B,OAAzH;AACA,UAAI8nD,aAAa,GAAG,CAAChhC,YAAY,CAACzkB,KAAb,IAAsBX,kBAAkB,GAAGC,YAArB,GAAoCC,UAApC,GAAiDC,WAAvE,CAAD,MAA0F7B,OAA9G;;AAEA,UAAI6nD,iBAAiB,IAAIC,aAAzB,EAAwC;AACtC,YAAItpB,cAAc,GAAG0hB,yBAAyB,CAACpkC,UAA/C;AACAokC,QAAAA,yBAAyB,CAACpkC,UAA1B,GAAuC,IAAvC;AACA,YAAIkjB,gBAAgB,GAAG9uB,wBAAwB,EAA/C;AACAC,QAAAA,wBAAwB,CAACpI,qBAAD,CAAxB;AACA,YAAI0+C,oBAAoB,GAAG1F,gBAA3B;AACAA,QAAAA,gBAAgB,IAAIR,aAApB,CANsC,CAMH;;AAEnCN,QAAAA,mBAAmB,CAACt9C,OAApB,GAA8B,IAA9B,CARsC,CAQF;AACpC;AACA;AACA;AACA;AACA;;AAEA,YAAIm2C,iCAAiC,GAAGC,2BAA2B,CAACxxC,IAAD,EAAOuf,YAAP,CAAnE;AAEA;AACE;AACA;AACA4b,UAAAA,gBAAgB;AACjB;AAGDka,QAAAA,qBAAqB,CAACr1C,IAAD,EAAOuf,YAAP,EAAqBle,KAArB,CAArB;AAEA0J,QAAAA,gBAAgB,CAAC/K,IAAI,CAAC8K,aAAN,CAAhB,CA1BsC,CA0BA;AACtC;AACA;AACA;;AAEA9K,QAAAA,IAAI,CAAC5E,OAAL,GAAemkB,YAAf,CA/BsC,CA+BT;;AAE7B62B,QAAAA,mBAAmB,CAAC72B,YAAD,EAAevf,IAAf,EAAqBqB,KAArB,CAAnB,CAjCsC,CAkCtC;;AAGAnE,QAAAA,YAAY;AACZs8C,QAAAA,gBAAgB,GAAG0F,oBAAnB,CAtCsC,CAsCG;;AAEzCt2C,QAAAA,wBAAwB,CAAC6uB,gBAAD,CAAxB;AACAkhB,QAAAA,yBAAyB,CAACpkC,UAA1B,GAAuC0iB,cAAvC;AACD,OA1CD,MA0CO;AACL;AACAj3B,QAAAA,IAAI,CAAC5E,OAAL,GAAemkB,YAAf,CAFK,CAEwB;AAC7B;AACA;;AAEA;AACE4b,UAAAA,gBAAgB;AACjB;AACF;;AAED,UAAI0f,0BAAJ,EAAgC;AAC9B;AACA;AACAA,QAAAA,0BAA0B,GAAG,KAA7B;AACAC,QAAAA,6BAA6B,GAAG96C,IAAhC;AACA+6C,QAAAA,0BAA0B,GAAG15C,KAA7B;AACD,OA3ImE,CA2IlE;;;AAGFgH,MAAAA,cAAc,GAAGrI,IAAI,CAAC8E,YAAtB,CA9IoE,CA8IhC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAIuD,cAAc,KAAKnG,OAAvB,EAAgC;AAC9B;AACA;AACA04C,QAAAA,sCAAsC,GAAG,IAAzC;AACD;;AAEDz6C,MAAAA,YAAY,CAACof,YAAY,CAAChkB,SAAd,EAAyB6kD,mBAAzB,CAAZ,CA/JoE,CAgKpE;;AAGApE,MAAAA,qBAAqB,CAACh8C,IAAD,EAAO5C,GAAG,EAAV,CAArB;;AAEA,UAAI6iD,iBAAiB,KAAK,IAA1B,EAAgC;AAC9B;AACA;AACA,YAAIO,kBAAkB,GAAGxgD,IAAI,CAACwgD,kBAA9B;;AAEA,aAAK,IAAI7uD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsuD,iBAAiB,CAAChwD,MAAtC,EAA8C0B,CAAC,EAA/C,EAAmD;AACjD,cAAI8uD,gBAAgB,GAAGR,iBAAiB,CAACtuD,CAAD,CAAxC;AACA6uD,UAAAA,kBAAkB,CAACC,gBAAD,CAAlB;AACD;AACF;;AAED,UAAI/F,gBAAJ,EAAsB;AACpBA,QAAAA,gBAAgB,GAAG,KAAnB;AACA,YAAIrqC,OAAO,GAAGsqC,kBAAd;AACAA,QAAAA,kBAAkB,GAAG,IAArB;AACA,cAAMtqC,OAAN;AACD,OArLmE,CAqLlE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,UAAIhJ,gBAAgB,CAAC0zC,0BAAD,EAA6B34C,QAA7B,CAAhB,IAA0DpC,IAAI,CAACxI,GAAL,KAAaub,UAA3E,EAAuF;AACrFoqC,QAAAA,mBAAmB;AACpB,OAjMmE,CAiMlE;;;AAGF90C,MAAAA,cAAc,GAAGrI,IAAI,CAAC8E,YAAtB;;AAEA,UAAIuC,gBAAgB,CAACgB,cAAD,EAAiBjG,QAAjB,CAApB,EAAgD;AAC9C;AACE24B,UAAAA,yBAAyB;AAC1B,SAH6C,CAG5C;AACF;;AAGA,YAAI/6B,IAAI,KAAKm7C,qBAAb,EAAoC;AAClCD,UAAAA,iBAAiB;AAClB,SAFD,MAEO;AACLA,UAAAA,iBAAiB,GAAG,CAApB;AACAC,UAAAA,qBAAqB,GAAGn7C,IAAxB;AACD;AACF,OAbD,MAaO;AACLk7C,QAAAA,iBAAiB,GAAG,CAApB;AACD,OArNmE,CAqNlE;;;AAGFvnC,MAAAA,kBAAkB;AAElB,aAAO,IAAP;AACD;;AAED,aAASwpC,mBAAT,GAA+B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,UAAIrC,6BAA6B,KAAK,IAAtC,EAA4C;AAC1C,YAAI4F,cAAc,GAAGz3C,oBAAoB,CAAC8xC,0BAAD,CAAzC;AACA,YAAI4F,QAAQ,GAAG53C,kBAAkB,CAACrI,oBAAD,EAAuBggD,cAAvB,CAAjC;AACA,YAAIzpB,cAAc,GAAG0hB,yBAAyB,CAACpkC,UAA/C;AACA,YAAIkjB,gBAAgB,GAAG9uB,wBAAwB,EAA/C;;AAEA,YAAI;AACFgwC,UAAAA,yBAAyB,CAACpkC,UAA1B,GAAuC,IAAvC;AACA3L,UAAAA,wBAAwB,CAAC+3C,QAAD,CAAxB;AACA,iBAAOC,uBAAuB,EAA9B;AACD,SAJD,SAIU;AACRh4C,UAAAA,wBAAwB,CAAC6uB,gBAAD,CAAxB;AACAkhB,UAAAA,yBAAyB,CAACpkC,UAA1B,GAAuC0iB,cAAvC,CAFQ,CAE+C;AACxD;AACF;;AAED,aAAO,KAAP;AACD;;AACD,aAAS+b,mCAAT,CAA6Cx6C,KAA7C,EAAoD;AAClD;AACEwiD,QAAAA,6BAA6B,CAACjzC,IAA9B,CAAmCvP,KAAnC;;AAEA,YAAI,CAACqiD,0BAAL,EAAiC;AAC/BA,UAAAA,0BAA0B,GAAG,IAA7B;AACAgC,UAAAA,kBAAkB,CAACn/C,cAAD,EAAiB,YAAY;AAC7Cy/C,YAAAA,mBAAmB;AACnB,mBAAO,IAAP;AACD,WAHiB,CAAlB;AAID;AACF;AACF;;AAED,aAASyD,uBAAT,GAAmC;AACjC,UAAI9F,6BAA6B,KAAK,IAAtC,EAA4C;AAC1C,eAAO,KAAP;AACD;;AAED,UAAI96C,IAAI,GAAG86C,6BAAX;AACAA,MAAAA,6BAA6B,GAAG,IAAhC,CANiC,CAMK;AACtC;AACA;;AAEAC,MAAAA,0BAA0B,GAAG74C,OAA7B;;AAEA,UAAI,CAACs3C,gBAAgB,IAAIT,aAAa,GAAGC,aAApB,CAAjB,MAAyDH,SAA7D,EAAwE;AACtE,cAAM,IAAIn9C,KAAJ,CAAU,uDAAV,CAAN;AACD;;AAED,UAAIwjD,oBAAoB,GAAG1F,gBAA3B;AACAA,MAAAA,gBAAgB,IAAIR,aAApB;AACAnC,MAAAA,2BAA2B,CAAC72C,IAAI,CAAC5E,OAAN,CAA3B;AACAq7C,MAAAA,yBAAyB,CAACz2C,IAAD,EAAOA,IAAI,CAAC5E,OAAZ,CAAzB,CAnBiC,CAmBc;;AAE/C;AACE,YAAIylD,eAAe,GAAG7F,6BAAtB;AACAA,QAAAA,6BAA6B,GAAG,EAAhC;;AAEA,aAAK,IAAIrpD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkvD,eAAe,CAAC5wD,MAApC,EAA4C0B,CAAC,EAA7C,EAAiD;AAC/C,cAAImvD,MAAM,GAAGD,eAAe,CAAClvD,CAAD,CAA5B;AACAwgD,UAAAA,4BAA4B,CAACnyC,IAAD,EAAO8gD,MAAP,CAA5B;AACD;AACF;AAEDtH,MAAAA,gBAAgB,GAAG0F,oBAAnB;AACAvrC,MAAAA,kBAAkB,GAhCe,CAgCX;AACtB;;AAEA0nC,MAAAA,wBAAwB,GAAGP,6BAA6B,KAAK,IAAlC,GAAyC,CAAzC,GAA6CO,wBAAwB,GAAG,CAAnG,CAnCiC,CAmCqE;;AAEtGx6C,MAAAA,gBAAgB,CAACb,IAAD,CAAhB;AAEA;AACE,YAAIzE,SAAS,GAAGyE,IAAI,CAAC5E,OAAL,CAAaG,SAA7B;AACAA,QAAAA,SAAS,CAACugC,cAAV,GAA2B,CAA3B;AACAvgC,QAAAA,SAAS,CAAC0gC,qBAAV,GAAkC,CAAlC;AACD;AAED,aAAO,IAAP;AACD;;AAED,aAAS4C,kCAAT,CAA4CvjC,QAA5C,EAAsD;AACpD,aAAOs/C,sCAAsC,KAAK,IAA3C,IAAmDA,sCAAsC,CAAC1qC,GAAvC,CAA2C5U,QAA3C,CAA1D;AACD;;AACD,aAASiiC,+BAAT,CAAyCjiC,QAAzC,EAAmD;AACjD,UAAIs/C,sCAAsC,KAAK,IAA/C,EAAqD;AACnDA,QAAAA,sCAAsC,GAAG,IAAI5jC,GAAJ,CAAQ,CAAC1b,QAAD,CAAR,CAAzC;AACD,OAFD,MAEO;AACLs/C,QAAAA,sCAAsC,CAACnjC,GAAvC,CAA2Cnc,QAA3C;AACD;AACF;;AAED,aAASylD,2BAAT,CAAqCzwD,KAArC,EAA4C;AAC1C,UAAI,CAACoqD,gBAAL,EAAuB;AACrBA,QAAAA,gBAAgB,GAAG,IAAnB;AACAC,QAAAA,kBAAkB,GAAGrqD,KAArB;AACD;AACF;;AAED,QAAI6sC,eAAe,GAAG4jB,2BAAtB;;AAEA,aAASC,6BAAT,CAAuCC,SAAvC,EAAkD/iB,WAAlD,EAA+D5tC,KAA/D,EAAsE;AACpE,UAAIksC,SAAS,GAAGH,mBAAmB,CAAC/rC,KAAD,EAAQ4tC,WAAR,CAAnC;AACA,UAAI9iB,MAAM,GAAG8hB,qBAAqB,CAAC+jB,SAAD,EAAYzkB,SAAZ,EAAuBp6B,QAAvB,CAAlC;AACAmb,MAAAA,aAAa,CAAC0jC,SAAD,EAAY7lC,MAAZ,CAAb;AACA,UAAIpV,SAAS,GAAG6a,gBAAgB,EAAhC;AACA,UAAI7gB,IAAI,GAAG47C,6BAA6B,CAACqF,SAAD,EAAY7+C,QAAZ,CAAxC;;AAEA,UAAIpC,IAAI,KAAK,IAAb,EAAmB;AACjBgI,QAAAA,eAAe,CAAChI,IAAD,EAAOoC,QAAP,EAAiB4D,SAAjB,CAAf;AACAg2C,QAAAA,qBAAqB,CAACh8C,IAAD,EAAOgG,SAAP,CAArB;AACD;AACF;;AAED,aAASkrC,uBAAT,CAAiChT,WAAjC,EAA8C+S,sBAA9C,EAAsE5gC,OAAtE,EAA+E;AAC7E,UAAI6tB,WAAW,CAAC1mC,GAAZ,KAAoB1D,QAAxB,EAAkC;AAChC;AACA;AACAktD,QAAAA,6BAA6B,CAAC9iB,WAAD,EAAcA,WAAd,EAA2B7tB,OAA3B,CAA7B;AACA;AACD;;AAED,UAAI7X,KAAK,GAAG,IAAZ;AAEA;AACEA,QAAAA,KAAK,GAAG0lC,WAAW,CAACnjC,MAApB;AACD;;AAED,aAAOvC,KAAK,KAAK,IAAjB,EAAuB;AACrB,YAAIA,KAAK,CAAChB,GAAN,KAAc1D,QAAlB,EAA4B;AAC1BktD,UAAAA,6BAA6B,CAACxoD,KAAD,EAAQ0lC,WAAR,EAAqB7tB,OAArB,CAA7B;AACA;AACD,SAHD,MAGO,IAAI7X,KAAK,CAAChB,GAAN,KAAc5D,cAAlB,EAAkC;AACvC,cAAIob,IAAI,GAAGxW,KAAK,CAAClB,IAAjB;AACA,cAAIgE,QAAQ,GAAG9C,KAAK,CAAC+C,SAArB;;AAEA,cAAI,OAAOyT,IAAI,CAACwT,wBAAZ,KAAyC,UAAzC,IAAuD,OAAOlnB,QAAQ,CAACgiC,iBAAhB,KAAsC,UAAtC,IAAoD,CAACuB,kCAAkC,CAACvjC,QAAD,CAAlJ,EAA8J;AAC5J,gBAAIkhC,SAAS,GAAGH,mBAAmB,CAAChsB,OAAD,EAAU6tB,WAAV,CAAnC;AACA,gBAAI9iB,MAAM,GAAGgiB,sBAAsB,CAAC5kC,KAAD,EAAQgkC,SAAR,EAAmBp6B,QAAnB,CAAnC;AACAmb,YAAAA,aAAa,CAAC/kB,KAAD,EAAQ4iB,MAAR,CAAb;AACA,gBAAIpV,SAAS,GAAG6a,gBAAgB,EAAhC;AACA,gBAAI7gB,IAAI,GAAG47C,6BAA6B,CAACpjD,KAAD,EAAQ4J,QAAR,CAAxC;;AAEA,gBAAIpC,IAAI,KAAK,IAAb,EAAmB;AACjBgI,cAAAA,eAAe,CAAChI,IAAD,EAAOoC,QAAP,EAAiB4D,SAAjB,CAAf;AACAg2C,cAAAA,qBAAqB,CAACh8C,IAAD,EAAOgG,SAAP,CAArB;AACD;;AAED;AACD;AACF;;AAEDxN,QAAAA,KAAK,GAAGA,KAAK,CAACuC,MAAd;AACD;;AAED;AACE;AACA;AACA;AACA;AACA;AACAzK,QAAAA,KAAK,CAAC,qEAAqE,gEAArE,GAAwI,uEAAxI,GAAkN,+DAAlN,GAAoR,sBAArR,EAA6S+f,OAA7S,CAAL;AACD;AACF;;AACD,aAASutB,iBAAT,CAA2B59B,IAA3B,EAAiCuB,QAAjC,EAA2C0D,WAA3C,EAAwD;AACtD,UAAIw4B,SAAS,GAAGz9B,IAAI,CAACy9B,SAArB;;AAEA,UAAIA,SAAS,KAAK,IAAlB,EAAwB;AACtB;AACA;AACAA,QAAAA,SAAS,CAACvT,MAAV,CAAiB3oB,QAAjB;AACD;;AAED,UAAIyE,SAAS,GAAG6a,gBAAgB,EAAhC;AACA1Y,MAAAA,cAAc,CAACnI,IAAD,EAAOiF,WAAP,CAAd;AACAi8C,MAAAA,4CAA4C,CAAClhD,IAAD,CAA5C;;AAEA,UAAIy5C,kBAAkB,KAAKz5C,IAAvB,IAA+BsH,eAAe,CAACoyC,6BAAD,EAAgCz0C,WAAhC,CAAlD,EAAgG;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAI20C,4BAA4B,KAAKP,sBAAjC,IAA2DO,4BAA4B,KAAKR,aAAjC,IAAkDzyC,mBAAmB,CAAC+yC,6BAAD,CAArE,IAAwGt8C,GAAG,KAAKg9C,4BAAR,GAAuCC,oBAA9M,EAAoO;AAClO;AACAsD,UAAAA,iBAAiB,CAAC39C,IAAD,EAAOkC,OAAP,CAAjB;AACD,SAHD,MAGO;AACL;AACA;AACA+3C,UAAAA,6BAA6B,GAAGzyC,UAAU,CAACyyC,6BAAD,EAAgCh1C,WAAhC,CAA1C;AACD;AACF;;AAED+2C,MAAAA,qBAAqB,CAACh8C,IAAD,EAAOgG,SAAP,CAArB;AACD;;AAED,aAASm7C,qBAAT,CAA+BC,aAA/B,EAA8CvZ,SAA9C,EAAyD;AACvD;AACA;AACA;AACA;AACA,UAAIA,SAAS,KAAK1lC,MAAlB,EAA0B;AACxB;AACA;AACA0lC,QAAAA,SAAS,GAAG6T,gBAAgB,CAAC0F,aAAD,CAA5B;AACD,OATsD,CASrD;;;AAGF,UAAIp7C,SAAS,GAAG6a,gBAAgB,EAAhC;AACA,UAAI7gB,IAAI,GAAG47C,6BAA6B,CAACwF,aAAD,EAAgBvZ,SAAhB,CAAxC;;AAEA,UAAI7nC,IAAI,KAAK,IAAb,EAAmB;AACjBgI,QAAAA,eAAe,CAAChI,IAAD,EAAO6nC,SAAP,EAAkB7hC,SAAlB,CAAf;AACAg2C,QAAAA,qBAAqB,CAACh8C,IAAD,EAAOgG,SAAP,CAArB;AACD;AACF;;AACD,aAASmvC,oBAAT,CAA8BiM,aAA9B,EAA6C7/C,QAA7C,EAAuD;AACrD,UAAIsmC,SAAS,GAAG1lC,MAAhB,CADqD,CAC7B;;AAExB,UAAI8yC,UAAJ;AAEA;AACEA,QAAAA,UAAU,GAAGmM,aAAa,CAAC7lD,SAA3B;AACD;;AAED,UAAI05C,UAAU,KAAK,IAAnB,EAAyB;AACvB;AACA;AACAA,QAAAA,UAAU,CAAC/qB,MAAX,CAAkB3oB,QAAlB;AACD;;AAED4/C,MAAAA,qBAAqB,CAACC,aAAD,EAAgBvZ,SAAhB,CAArB;AACD,KAn+ea,CAm+eZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,aAASiX,GAAT,CAAauC,WAAb,EAA0B;AACxB,aAAOA,WAAW,GAAG,GAAd,GAAoB,GAApB,GAA0BA,WAAW,GAAG,GAAd,GAAoB,GAApB,GAA0BA,WAAW,GAAG,IAAd,GAAqB,IAArB,GAA4BA,WAAW,GAAG,IAAd,GAAqB,IAArB,GAA4BA,WAAW,GAAG,IAAd,GAAqB,IAArB,GAA4BA,WAAW,GAAG,IAAd,GAAqB,IAArB,GAA4B7I,IAAI,CAAC6I,WAAW,GAAG,IAAf,CAAJ,GAA2B,IAAtM;AACD;;AAED,aAAS1F,qBAAT,GAAiC;AAC/B,UAAIT,iBAAiB,GAAGD,mBAAxB,EAA6C;AAC3CC,QAAAA,iBAAiB,GAAG,CAApB;AACAC,QAAAA,qBAAqB,GAAG,IAAxB;AACA,cAAM,IAAIz/C,KAAJ,CAAU,qEAAqE,0DAArE,GAAkI,mEAAlI,GAAwM,yBAAlN,CAAN;AACD;;AAED;AACE,YAAI2/C,wBAAwB,GAAGD,2BAA/B,EAA4D;AAC1DC,UAAAA,wBAAwB,GAAG,CAA3B;AAEA/qD,UAAAA,KAAK,CAAC,qEAAqE,gEAArE,GAAwI,iEAAxI,GAA4M,eAA7M,CAAL;AACD;AACF;AACF;;AAED,aAAS+vD,uCAAT,GAAmD;AACjD;AACE1qC,QAAAA,uBAAuB,CAACI,yBAAxB;AAEA;AACEJ,UAAAA,uBAAuB,CAACE,mCAAxB;AACD;AACF;AACF;;AAED,QAAIyrC,2CAA2C,GAAG,IAAlD;;AAEA,aAASpF,wCAAT,CAAkD1jD,KAAlD,EAAyD;AACvD;AACE,YAAI,CAACghD,gBAAgB,GAAGT,aAApB,MAAuCF,SAA3C,EAAsD;AACpD;AACA;AACD;;AAED,YAAI,EAAErgD,KAAK,CAAC2d,IAAN,GAAa1U,cAAf,CAAJ,EAAoC;AAClC;AACD;;AAED,YAAIjK,GAAG,GAAGgB,KAAK,CAAChB,GAAhB;;AAEA,YAAIA,GAAG,KAAK3D,sBAAR,IAAkC2D,GAAG,KAAK1D,QAA1C,IAAsD0D,GAAG,KAAK5D,cAA9D,IAAgF4D,GAAG,KAAK7D,iBAAxF,IAA6G6D,GAAG,KAAKlD,UAArH,IAAmIkD,GAAG,KAAK/C,aAA3I,IAA4J+C,GAAG,KAAK9C,mBAAxK,EAA6L;AAC3L;AACA;AACD,SAfH,CAeI;AACF;;;AAGA,YAAIub,aAAa,GAAG1X,yBAAyB,CAACC,KAAD,CAAzB,IAAoC,gBAAxD;;AAEA,YAAI8oD,2CAA2C,KAAK,IAApD,EAA0D;AACxD,cAAIA,2CAA2C,CAACpxC,GAA5C,CAAgDD,aAAhD,CAAJ,EAAoE;AAClE;AACD;;AAEDqxC,UAAAA,2CAA2C,CAAC7pC,GAA5C,CAAgDxH,aAAhD;AACD,SAND,MAMO;AACLqxC,UAAAA,2CAA2C,GAAG,IAAItqC,GAAJ,CAAQ,CAAC/G,aAAD,CAAR,CAA9C;AACD;;AAED,YAAIgnC,aAAa,GAAG77C,OAApB;;AAEA,YAAI;AACFoa,UAAAA,eAAe,CAAChd,KAAD,CAAf;AAEAlI,UAAAA,KAAK,CAAC,gFAAgF,0EAAhF,GAA6J,8EAA7J,GAA8O,oBAA/O,CAAL;AACD,SAJD,SAIU;AACR,cAAI2mD,aAAJ,EAAmB;AACjBzhC,YAAAA,eAAe,CAAChd,KAAD,CAAf;AACD,WAFD,MAEO;AACL8c,YAAAA,iBAAiB;AAClB;AACF;AACF;AACF;;AAED,QAAIwqC,WAAJ;AAEA;AACEA,MAAAA,WAAW,GAAG7S,SAAd;AACD;AAED,QAAIsU,0BAA0B,GAAG,KAAjC;AACA,QAAIC,6CAAJ;AAEA;AACEA,MAAAA,6CAA6C,GAAG,IAAIxqC,GAAJ,EAAhD;AACD;;AAED,aAAS6kC,gCAAT,CAA0CrjD,KAA1C,EAAiD;AAC/C;AACE,YAAI2c,WAAW,IAAI,CAACmjB,0CAA0C,EAA9D,EAAkE;AAChE,kBAAQ9/B,KAAK,CAAChB,GAAd;AACE,iBAAK7D,iBAAL;AACA,iBAAKW,UAAL;AACA,iBAAKI,mBAAL;AACE;AACE,oBAAI+sD,sBAAsB,GAAGrwC,cAAc,IAAI7Y,yBAAyB,CAAC6Y,cAAD,CAA3C,IAA+D,SAA5F,CADF,CACyG;;AAEvG,oBAAIswC,SAAS,GAAGD,sBAAhB;;AAEA,oBAAI,CAACD,6CAA6C,CAACtxC,GAA9C,CAAkDwxC,SAAlD,CAAL,EAAmE;AACjEF,kBAAAA,6CAA6C,CAAC/pC,GAA9C,CAAkDiqC,SAAlD;AACA,sBAAIC,qBAAqB,GAAGppD,yBAAyB,CAACC,KAAD,CAAzB,IAAoC,SAAhE;AAEAlI,kBAAAA,KAAK,CAAC,wDAAwD,6EAAxD,GAAwI,oFAAzI,EAA+NqxD,qBAA/N,EAAsPF,sBAAtP,EAA8QA,sBAA9Q,CAAL;AACD;;AAED;AACD;;AAEH,iBAAK7tD,cAAL;AACE;AACE,oBAAI,CAAC2tD,0BAAL,EAAiC;AAC/BjxD,kBAAAA,KAAK,CAAC,gEAAgE,oDAAhE,GAAuH,8BAAxH,CAAL;AAEAixD,kBAAAA,0BAA0B,GAAG,IAA7B;AACD;;AAED;AACD;AA5BL;AA8BD;AACF;AACF;;AACD,QAAI9E,mBAAmB,GAAG,EAA1B;;AAEA,aAASI,kBAAT,CAA4B+E,aAA5B,EAA2CpuC,QAA3C,EAAqD;AACnD;AACE;AACA;AACA,YAAIquC,QAAQ,GAAGjJ,sBAAsB,CAACx9C,OAAtC;;AAEA,YAAIymD,QAAQ,KAAK,IAAjB,EAAuB;AACrBA,UAAAA,QAAQ,CAAC95C,IAAT,CAAcyL,QAAd;AACA,iBAAOipC,mBAAP;AACD,SAHD,MAGO;AACL,iBAAO7/C,gBAAgB,CAACglD,aAAD,EAAgBpuC,QAAhB,CAAvB;AACD;AACF;AACF;;AAED,aAAS6oC,gBAAT,CAA0BD,YAA1B,EAAwC;AACtC,UAAKA,YAAY,KAAKK,mBAAtB,EAA2C;AACzC;AACD,OAHqC,CAGpC;;;AAGF,aAAO3/C,cAAc,CAACs/C,YAAD,CAArB;AACD;;AAED,aAASoC,8BAAT,GAA0C;AACxC;AACA,aAAQ5F,sBAAsB,CAACx9C,OAAvB,KAAmC,IAA3C;AACD;;AAED,aAAS0gD,iCAAT,CAA2CtjD,KAA3C,EAAkD;AAChD;AACE,YAAIA,KAAK,CAAC2d,IAAN,GAAa1U,cAAjB,EAAiC;AAC/B,cAAI,CAAC82C,0BAA0B,EAA/B,EAAmC;AACjC;AACA;AACD;AACF,SALD,MAKO;AACL;AACA,cAAI,CAACL,sBAAsB,EAA3B,EAA+B;AAC7B;AACA;AACD;;AAED,cAAIsB,gBAAgB,KAAKX,SAAzB,EAAoC;AAClC;AACA;AACA;AACD;;AAED,cAAIrgD,KAAK,CAAChB,GAAN,KAAc7D,iBAAd,IAAmC6E,KAAK,CAAChB,GAAN,KAAclD,UAAjD,IAA+DkE,KAAK,CAAChB,GAAN,KAAc9C,mBAAjF,EAAsG;AACpG;AACA;AACA;AACD;AACF;;AAED,YAAIkkD,sBAAsB,CAACx9C,OAAvB,KAAmC,IAAvC,EAA6C;AAC3C,cAAI67C,aAAa,GAAG77C,OAApB;;AAEA,cAAI;AACFoa,YAAAA,eAAe,CAAChd,KAAD,CAAf;AAEAlI,YAAAA,KAAK,CAAC,mEAAmE,+DAAnE,GAAqI,4BAArI,GAAoK,eAApK,GAAsL,yCAAtL,GAAkO,OAAlO,GAA4O,gCAA5O,GAA+Q,mEAA/Q,GAAqV,iBAArV,GAAyW,6DAA1W,EAAyaiI,yBAAyB,CAACC,KAAD,CAAlc,CAAL;AACD,WAJD,SAIU;AACR,gBAAIy+C,aAAJ,EAAmB;AACjBzhC,cAAAA,eAAe,CAAChd,KAAD,CAAf;AACD,aAFD,MAEO;AACL8c,cAAAA,iBAAiB;AAClB;AACF;AACF;AACF;AACF;;AAED,aAAS4rC,4CAAT,CAAsDlhD,IAAtD,EAA4D;AAC1D;AACE,YAAIA,IAAI,CAACxI,GAAL,KAAaub,UAAb,IAA2BwlC,0BAA0B,EAArD,IAA2DK,sBAAsB,CAACx9C,OAAvB,KAAmC,IAAlG,EAAwG;AACtG9K,UAAAA,KAAK,CAAC,wEAAwE,kCAAxE,GAA6G,oEAA7G,GAAoL,oBAApL,GAA2M,eAA3M,GAA6N,yCAA7N,GAAyQ,OAAzQ,GAAmR,gCAAnR,GAAsT,mEAAtT,GAA4X,iBAA5X,GAAgZ,6DAAjZ,CAAL;AACD;AACF;AACF;AAED;;;AACA,QAAIwxD,aAAa,GAAG,IAApB,CAnsfc,CAmsfY;;AAE1B,QAAIC,gBAAgB,GAAG,IAAvB;;AACA,QAAIC,iBAAiB,GAAG,UAAUC,OAAV,EAAmB;AACzC;AACEH,QAAAA,aAAa,GAAGG,OAAhB;AACD;AACF,KAJD;;AAKA,aAAS7d,8BAAT,CAAwC9sC,IAAxC,EAA8C;AAC5C;AACE,YAAIwqD,aAAa,KAAK,IAAtB,EAA4B;AAC1B;AACA,iBAAOxqD,IAAP;AACD;;AAED,YAAI4qD,MAAM,GAAGJ,aAAa,CAACxqD,IAAD,CAA1B;;AAEA,YAAI4qD,MAAM,KAAKthD,SAAf,EAA0B;AACxB,iBAAOtJ,IAAP;AACD,SAVH,CAUI;;;AAGF,eAAO4qD,MAAM,CAAC9mD,OAAd;AACD;AACF;;AACD,aAAS0rC,2BAAT,CAAqCxvC,IAArC,EAA2C;AACzC;AACA,aAAO8sC,8BAA8B,CAAC9sC,IAAD,CAArC;AACD;;AACD,aAASyvC,gCAAT,CAA0CzvC,IAA1C,EAAgD;AAC9C;AACE,YAAIwqD,aAAa,KAAK,IAAtB,EAA4B;AAC1B;AACA,iBAAOxqD,IAAP;AACD;;AAED,YAAI4qD,MAAM,GAAGJ,aAAa,CAACxqD,IAAD,CAA1B;;AAEA,YAAI4qD,MAAM,KAAKthD,SAAf,EAA0B;AACxB;AACA,cAAItJ,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAKsJ,SAA1B,IAAuC,OAAOtJ,IAAI,CAACO,MAAZ,KAAuB,UAAlE,EAA8E;AAC5E;AACA;AACA;AACA,gBAAIsqD,aAAa,GAAG/d,8BAA8B,CAAC9sC,IAAI,CAACO,MAAN,CAAlD;;AAEA,gBAAIP,IAAI,CAACO,MAAL,KAAgBsqD,aAApB,EAAmC;AACjC,kBAAIC,aAAa,GAAG;AAClB3qD,gBAAAA,QAAQ,EAAE5B,sBADQ;AAElBgC,gBAAAA,MAAM,EAAEsqD;AAFU,eAApB;;AAKA,kBAAI7qD,IAAI,CAACJ,WAAL,KAAqB0J,SAAzB,EAAoC;AAClCwhD,gBAAAA,aAAa,CAAClrD,WAAd,GAA4BI,IAAI,CAACJ,WAAjC;AACD;;AAED,qBAAOkrD,aAAP;AACD;AACF;;AAED,iBAAO9qD,IAAP;AACD,SA/BH,CA+BI;;;AAGF,eAAO4qD,MAAM,CAAC9mD,OAAd;AACD;AACF;;AACD,aAASitB,iCAAT,CAA2C7vB,KAA3C,EAAkDiX,OAAlD,EAA2D;AACzD;AACE,YAAIqyC,aAAa,KAAK,IAAtB,EAA4B;AAC1B;AACA,iBAAO,KAAP;AACD;;AAED,YAAIO,QAAQ,GAAG7pD,KAAK,CAAC4rB,WAArB;AACA,YAAIk+B,QAAQ,GAAG7yC,OAAO,CAACnY,IAAvB,CAPF,CAO+B;;AAE7B,YAAIirD,oBAAoB,GAAG,KAA3B;AACA,YAAIC,gBAAgB,GAAG,OAAOF,QAAP,KAAoB,QAApB,IAAgCA,QAAQ,KAAK,IAA7C,GAAoDA,QAAQ,CAAC7qD,QAA7D,GAAwE,IAA/F;;AAEA,gBAAQe,KAAK,CAAChB,GAAd;AACE,eAAK5D,cAAL;AACE;AACE,kBAAI,OAAO0uD,QAAP,KAAoB,UAAxB,EAAoC;AAClCC,gBAAAA,oBAAoB,GAAG,IAAvB;AACD;;AAED;AACD;;AAEH,eAAK5uD,iBAAL;AACE;AACE,kBAAI,OAAO2uD,QAAP,KAAoB,UAAxB,EAAoC;AAClCC,gBAAAA,oBAAoB,GAAG,IAAvB;AACD,eAFD,MAEO,IAAIC,gBAAgB,KAAKvsD,eAAzB,EAA0C;AAC/C;AACA;AACA;AACA;AACAssD,gBAAAA,oBAAoB,GAAG,IAAvB;AACD;;AAED;AACD;;AAEH,eAAKjuD,UAAL;AACE;AACE,kBAAIkuD,gBAAgB,KAAK3sD,sBAAzB,EAAiD;AAC/C0sD,gBAAAA,oBAAoB,GAAG,IAAvB;AACD,eAFD,MAEO,IAAIC,gBAAgB,KAAKvsD,eAAzB,EAA0C;AAC/CssD,gBAAAA,oBAAoB,GAAG,IAAvB;AACD;;AAED;AACD;;AAEH,eAAK9tD,aAAL;AACA,eAAKC,mBAAL;AACE;AACE,kBAAI8tD,gBAAgB,KAAKxsD,eAAzB,EAA0C;AACxC;AACA;AACAusD,gBAAAA,oBAAoB,GAAG,IAAvB;AACD,eAJD,MAIO,IAAIC,gBAAgB,KAAKvsD,eAAzB,EAA0C;AAC/CssD,gBAAAA,oBAAoB,GAAG,IAAvB;AACD;;AAED;AACD;;AAEH;AACE,mBAAO,KAAP;AAnDJ,SAZF,CAgEI;;;AAGF,YAAIA,oBAAJ,EAA0B;AACxB;AACA;AACA;AACA;AACA;AACA,cAAIE,UAAU,GAAGX,aAAa,CAACO,QAAD,CAA9B;;AAEA,cAAII,UAAU,KAAK7hD,SAAf,IAA4B6hD,UAAU,KAAKX,aAAa,CAACQ,QAAD,CAA5D,EAAwE;AACtE,mBAAO,IAAP;AACD;AACF;;AAED,eAAO,KAAP;AACD;AACF;;AACD,aAASjlB,sCAAT,CAAgD7kC,KAAhD,EAAuD;AACrD;AACE,YAAIspD,aAAa,KAAK,IAAtB,EAA4B;AAC1B;AACA;AACD;;AAED,YAAI,OAAOnR,OAAP,KAAmB,UAAvB,EAAmC;AACjC;AACD;;AAED,YAAIoR,gBAAgB,KAAK,IAAzB,EAA+B;AAC7BA,UAAAA,gBAAgB,GAAG,IAAIpR,OAAJ,EAAnB;AACD;;AAEDoR,QAAAA,gBAAgB,CAACtqC,GAAjB,CAAqBjf,KAArB;AACD;AACF;;AACD,QAAIkqD,eAAe,GAAG,UAAU1iD,IAAV,EAAgBob,MAAhB,EAAwB;AAC5C;AACE,YAAI0mC,aAAa,KAAK,IAAtB,EAA4B;AAC1B;AACA;AACD;;AAED,YAAIa,aAAa,GAAGvnC,MAAM,CAACunC,aAA3B;AAAA,YACIC,eAAe,GAAGxnC,MAAM,CAACwnC,eAD7B;AAEAzF,QAAAA,mBAAmB;AACnBgC,QAAAA,SAAS,CAAC,YAAY;AACpB0D,UAAAA,qCAAqC,CAAC7iD,IAAI,CAAC5E,OAAN,EAAewnD,eAAf,EAAgCD,aAAhC,CAArC;AACD,SAFQ,CAAT;AAGD;AACF,KAdD;;AAeA,QAAIG,YAAY,GAAG,UAAU9iD,IAAV,EAAgByP,OAAhB,EAAyB;AAC1C;AACE,YAAIzP,IAAI,CAACtI,OAAL,KAAiBqZ,kBAArB,EAAyC;AACvC;AACA;AACA;AACA;AACD;;AAEDosC,QAAAA,mBAAmB;AACnBgC,QAAAA,SAAS,CAAC,YAAY;AACpB4D,UAAAA,eAAe,CAACtzC,OAAD,EAAUzP,IAAV,EAAgB,IAAhB,EAAsB,IAAtB,CAAf;AACD,SAFQ,CAAT;AAGD;AACF,KAdD;;AAgBA,aAAS6iD,qCAAT,CAA+CrqD,KAA/C,EAAsDoqD,eAAtD,EAAuED,aAAvE,EAAsF;AACpF;AACE,YAAI/nD,SAAS,GAAGpC,KAAK,CAACoC,SAAtB;AAAA,YACIqB,KAAK,GAAGzD,KAAK,CAACyD,KADlB;AAAA,YAEIC,OAAO,GAAG1D,KAAK,CAAC0D,OAFpB;AAAA,YAGI1E,GAAG,GAAGgB,KAAK,CAAChB,GAHhB;AAAA,YAIIF,IAAI,GAAGkB,KAAK,CAAClB,IAJjB;AAKA,YAAI0rD,aAAa,GAAG,IAApB;;AAEA,gBAAQxrD,GAAR;AACE,eAAK7D,iBAAL;AACA,eAAKe,mBAAL;AACA,eAAKd,cAAL;AACEovD,YAAAA,aAAa,GAAG1rD,IAAhB;AACA;;AAEF,eAAKhD,UAAL;AACE0uD,YAAAA,aAAa,GAAG1rD,IAAI,CAACO,MAArB;AACA;AATJ;;AAYA,YAAIiqD,aAAa,KAAK,IAAtB,EAA4B;AAC1B,gBAAM,IAAIpmD,KAAJ,CAAU,qDAAV,CAAN;AACD;;AAED,YAAIunD,WAAW,GAAG,KAAlB;AACA,YAAIC,YAAY,GAAG,KAAnB;;AAEA,YAAIF,aAAa,KAAK,IAAtB,EAA4B;AAC1B,cAAId,MAAM,GAAGJ,aAAa,CAACkB,aAAD,CAA1B;;AAEA,cAAId,MAAM,KAAKthD,SAAf,EAA0B;AACxB,gBAAI+hD,aAAa,CAACzyC,GAAd,CAAkBgyC,MAAlB,CAAJ,EAA+B;AAC7BgB,cAAAA,YAAY,GAAG,IAAf;AACD,aAFD,MAEO,IAAIN,eAAe,CAAC1yC,GAAhB,CAAoBgyC,MAApB,CAAJ,EAAiC;AACtC,kBAAI1qD,GAAG,KAAK5D,cAAZ,EAA4B;AAC1BsvD,gBAAAA,YAAY,GAAG,IAAf;AACD,eAFD,MAEO;AACLD,gBAAAA,WAAW,GAAG,IAAd;AACD;AACF;AACF;AACF;;AAED,YAAIlB,gBAAgB,KAAK,IAAzB,EAA+B;AAC7B,cAAIA,gBAAgB,CAAC7xC,GAAjB,CAAqB1X,KAArB,KAA+BoC,SAAS,KAAK,IAAd,IAAsBmnD,gBAAgB,CAAC7xC,GAAjB,CAAqBtV,SAArB,CAAzD,EAA0F;AACxFsoD,YAAAA,YAAY,GAAG,IAAf;AACD;AACF;;AAED,YAAIA,YAAJ,EAAkB;AAChB1qD,UAAAA,KAAK,CAAC00C,kBAAN,GAA2B,IAA3B;AACD;;AAED,YAAIgW,YAAY,IAAID,WAApB,EAAiC;AAC/BliC,UAAAA,qBAAqB,CAACvoB,KAAD,EAAQ4J,QAAR,EAAkBmC,WAAlB,CAArB;AACD;;AAED,YAAItI,KAAK,KAAK,IAAV,IAAkB,CAACinD,YAAvB,EAAqC;AACnCL,UAAAA,qCAAqC,CAAC5mD,KAAD,EAAQ2mD,eAAR,EAAyBD,aAAzB,CAArC;AACD;;AAED,YAAIzmD,OAAO,KAAK,IAAhB,EAAsB;AACpB2mD,UAAAA,qCAAqC,CAAC3mD,OAAD,EAAU0mD,eAAV,EAA2BD,aAA3B,CAArC;AACD;AACF;AACF;;AAED,QAAIQ,2BAA2B,GAAG,UAAUnjD,IAAV,EAAgBojD,QAAhB,EAA0B;AAC1D;AACE,YAAIC,aAAa,GAAG,IAAIrsC,GAAJ,EAApB;AACA,YAAIssC,KAAK,GAAG,IAAItsC,GAAJ,CAAQosC,QAAQ,CAACryD,GAAT,CAAa,UAAUmxD,MAAV,EAAkB;AACjD,iBAAOA,MAAM,CAAC9mD,OAAd;AACD,SAFmB,CAAR,CAAZ;AAGAmoD,QAAAA,6CAA6C,CAACvjD,IAAI,CAAC5E,OAAN,EAAekoD,KAAf,EAAsBD,aAAtB,CAA7C;AACA,eAAOA,aAAP;AACD;AACF,KATD;;AAWA,aAASE,6CAAT,CAAuD/qD,KAAvD,EAA8D8qD,KAA9D,EAAqED,aAArE,EAAoF;AAClF;AACE,YAAIpnD,KAAK,GAAGzD,KAAK,CAACyD,KAAlB;AAAA,YACIC,OAAO,GAAG1D,KAAK,CAAC0D,OADpB;AAAA,YAEI1E,GAAG,GAAGgB,KAAK,CAAChB,GAFhB;AAAA,YAGIF,IAAI,GAAGkB,KAAK,CAAClB,IAHjB;AAIA,YAAI0rD,aAAa,GAAG,IAApB;;AAEA,gBAAQxrD,GAAR;AACE,eAAK7D,iBAAL;AACA,eAAKe,mBAAL;AACA,eAAKd,cAAL;AACEovD,YAAAA,aAAa,GAAG1rD,IAAhB;AACA;;AAEF,eAAKhD,UAAL;AACE0uD,YAAAA,aAAa,GAAG1rD,IAAI,CAACO,MAArB;AACA;AATJ;;AAYA,YAAI2rD,QAAQ,GAAG,KAAf;;AAEA,YAAIR,aAAa,KAAK,IAAtB,EAA4B;AAC1B,cAAIM,KAAK,CAACpzC,GAAN,CAAU8yC,aAAV,CAAJ,EAA8B;AAC5BQ,YAAAA,QAAQ,GAAG,IAAX;AACD;AACF;;AAED,YAAIA,QAAJ,EAAc;AACZ;AACA;AACA;AACAC,UAAAA,kCAAkC,CAACjrD,KAAD,EAAQ6qD,aAAR,CAAlC;AACD,SALD,MAKO;AACL;AACA,cAAIpnD,KAAK,KAAK,IAAd,EAAoB;AAClBsnD,YAAAA,6CAA6C,CAACtnD,KAAD,EAAQqnD,KAAR,EAAeD,aAAf,CAA7C;AACD;AACF;;AAED,YAAInnD,OAAO,KAAK,IAAhB,EAAsB;AACpBqnD,UAAAA,6CAA6C,CAACrnD,OAAD,EAAUonD,KAAV,EAAiBD,aAAjB,CAA7C;AACD;AACF;AACF;;AAED,aAASI,kCAAT,CAA4CjrD,KAA5C,EAAmD6qD,aAAnD,EAAkE;AAChE;AACE,YAAIK,kBAAkB,GAAGC,uCAAuC,CAACnrD,KAAD,EAAQ6qD,aAAR,CAAhE;;AAEA,YAAIK,kBAAJ,EAAwB;AACtB;AACD,SALH,CAKI;;;AAGF,YAAIhpD,IAAI,GAAGlC,KAAX;;AAEA,eAAO,IAAP,EAAa;AACX,kBAAQkC,IAAI,CAAClD,GAAb;AACE,iBAAKxD,aAAL;AACEqvD,cAAAA,aAAa,CAAC5rC,GAAd,CAAkB/c,IAAI,CAACa,SAAvB;AACA;;AAEF,iBAAKxH,UAAL;AACEsvD,cAAAA,aAAa,CAAC5rC,GAAd,CAAkB/c,IAAI,CAACa,SAAL,CAAeuP,aAAjC;AACA;;AAEF,iBAAKhX,QAAL;AACEuvD,cAAAA,aAAa,CAAC5rC,GAAd,CAAkB/c,IAAI,CAACa,SAAL,CAAeuP,aAAjC;AACA;AAXJ;;AAcA,cAAIpQ,IAAI,CAACK,MAAL,KAAgB,IAApB,EAA0B;AACxB,kBAAM,IAAIW,KAAJ,CAAU,+BAAV,CAAN;AACD;;AAEDhB,UAAAA,IAAI,GAAGA,IAAI,CAACK,MAAZ;AACD;AACF;AACF;;AAED,aAAS4oD,uCAAT,CAAiDnrD,KAAjD,EAAwD6qD,aAAxD,EAAuE;AACrE;AACE,YAAI3oD,IAAI,GAAGlC,KAAX;AACA,YAAIkrD,kBAAkB,GAAG,KAAzB;;AAEA,eAAO,IAAP,EAAa;AACX,cAAIhpD,IAAI,CAAClD,GAAL,KAAaxD,aAAjB,EAAgC;AAC9B;AACA0vD,YAAAA,kBAAkB,GAAG,IAArB;AACAL,YAAAA,aAAa,CAAC5rC,GAAd,CAAkB/c,IAAI,CAACa,SAAvB,EAH8B,CAGK;AACpC,WAJD,MAIO,IAAIb,IAAI,CAACuB,KAAL,KAAe,IAAnB,EAAyB;AAC9BvB,YAAAA,IAAI,CAACuB,KAAL,CAAWlB,MAAX,GAAoBL,IAApB;AACAA,YAAAA,IAAI,GAAGA,IAAI,CAACuB,KAAZ;AACA;AACD;;AAED,cAAIvB,IAAI,KAAKlC,KAAb,EAAoB;AAClB,mBAAOkrD,kBAAP;AACD;;AAED,iBAAOhpD,IAAI,CAACwB,OAAL,KAAiB,IAAxB,EAA8B;AAC5B,gBAAIxB,IAAI,CAACK,MAAL,KAAgB,IAAhB,IAAwBL,IAAI,CAACK,MAAL,KAAgBvC,KAA5C,EAAmD;AACjD,qBAAOkrD,kBAAP;AACD;;AAEDhpD,YAAAA,IAAI,GAAGA,IAAI,CAACK,MAAZ;AACD;;AAEDL,UAAAA,IAAI,CAACwB,OAAL,CAAanB,MAAb,GAAsBL,IAAI,CAACK,MAA3B;AACAL,UAAAA,IAAI,GAAGA,IAAI,CAACwB,OAAZ;AACD;AACF;AAED,aAAO,KAAP;AACD;;AAED,QAAI0nD,iBAAJ;AAEA;AACEA,MAAAA,iBAAiB,GAAG,KAApB;;AAEA,UAAI;AACF,YAAIC,mBAAmB,GAAG7xD,MAAM,CAAC8xD,iBAAP,CAAyB,EAAzB,CAA1B;AACA;;AAEA,YAAIp2C,GAAJ,CAAQ,CAAC,CAACm2C,mBAAD,EAAsB,IAAtB,CAAD,CAAR;AACA,YAAI7sC,GAAJ,CAAQ,CAAC6sC,mBAAD,CAAR;AACA;AACD,OAPD,CAOE,OAAO1qC,CAAP,EAAU;AACV;AACAyqC,QAAAA,iBAAiB,GAAG,IAApB;AACD;AACF;;AAED,aAASG,SAAT,CAAmBvsD,GAAnB,EAAwB8sB,YAAxB,EAAsCpyB,GAAtC,EAA2CikB,IAA3C,EAAiD;AAC/C;AACA,WAAK3e,GAAL,GAAWA,GAAX;AACA,WAAKtF,GAAL,GAAWA,GAAX;AACA,WAAKkyB,WAAL,GAAmB,IAAnB;AACA,WAAK9sB,IAAL,GAAY,IAAZ;AACA,WAAKiE,SAAL,GAAiB,IAAjB,CAN+C,CAMxB;;AAEvB,WAAKR,MAAL,GAAc,IAAd;AACA,WAAKkB,KAAL,GAAa,IAAb;AACA,WAAKC,OAAL,GAAe,IAAf;AACA,WAAKwJ,KAAL,GAAa,CAAb;AACA,WAAKwgB,GAAL,GAAW,IAAX;AACA,WAAK5B,YAAL,GAAoBA,YAApB;AACA,WAAKV,aAAL,GAAqB,IAArB;AACA,WAAKrI,WAAL,GAAmB,IAAnB;AACA,WAAKrH,aAAL,GAAqB,IAArB;AACA,WAAK+G,YAAL,GAAoB,IAApB;AACA,WAAK9E,IAAL,GAAYA,IAAZ,CAlB+C,CAkB7B;;AAElB,WAAKrb,KAAL,GAAarC,OAAb;AACA,WAAK6nC,YAAL,GAAoB7nC,OAApB;AACA,WAAKuuB,SAAL,GAAiB,IAAjB;AACA,WAAK3lB,KAAL,GAAaa,OAAb;AACA,WAAK0Y,UAAL,GAAkB1Y,OAAlB;AACA,WAAKtH,SAAL,GAAiB,IAAjB;AAEA;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK8gC,cAAL,GAAsBsoB,MAAM,CAACC,GAA7B;AACA,aAAK5oB,eAAL,GAAuB2oB,MAAM,CAACC,GAA9B;AACA,aAAKtoB,gBAAL,GAAwBqoB,MAAM,CAACC,GAA/B;AACA,aAAK1jB,gBAAL,GAAwByjB,MAAM,CAACC,GAA/B,CAhBF,CAgBsC;AACpC;AACA;;AAEA,aAAKvoB,cAAL,GAAsB,CAAtB;AACA,aAAKL,eAAL,GAAuB,CAAC,CAAxB;AACA,aAAKM,gBAAL,GAAwB,CAAxB;AACA,aAAK4E,gBAAL,GAAwB,CAAxB;AACD;AAED;AACE;AACA,aAAKvrB,YAAL,GAAoB,IAApB;AACA,aAAKD,WAAL,GAAmB,IAAnB;AACA,aAAKm4B,kBAAL,GAA0B,KAA1B;AACA,aAAK3c,eAAL,GAAuB,IAAvB;;AAEA,YAAI,CAACqzB,iBAAD,IAAsB,OAAO5xD,MAAM,CAAC8xD,iBAAd,KAAoC,UAA9D,EAA0E;AACxE9xD,UAAAA,MAAM,CAAC8xD,iBAAP,CAAyB,IAAzB;AACD;AACF;AACF,KAjqgBa,CAiqgBZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,QAAII,WAAW,GAAG,UAAU1sD,GAAV,EAAe8sB,YAAf,EAA6BpyB,GAA7B,EAAkCikB,IAAlC,EAAwC;AACxD;AACA,aAAO,IAAI4tC,SAAJ,CAAcvsD,GAAd,EAAmB8sB,YAAnB,EAAiCpyB,GAAjC,EAAsCikB,IAAtC,CAAP;AACD,KAHD;;AAKA,aAASguC,iBAAT,CAA2Bh1C,SAA3B,EAAsC;AACpC,UAAI/d,SAAS,GAAG+d,SAAS,CAAC/d,SAA1B;AACA,aAAO,CAAC,EAAEA,SAAS,IAAIA,SAAS,CAACge,gBAAzB,CAAR;AACD;;AAED,aAAS60B,yBAAT,CAAmC3sC,IAAnC,EAAyC;AACvC,aAAO,OAAOA,IAAP,KAAgB,UAAhB,IAA8B,CAAC6sD,iBAAiB,CAAC7sD,IAAD,CAAhD,IAA0DA,IAAI,CAACkiB,YAAL,KAAsB5Y,SAAvF;AACD;;AACD,aAASgmC,uBAAT,CAAiCz3B,SAAjC,EAA4C;AAC1C,UAAI,OAAOA,SAAP,KAAqB,UAAzB,EAAqC;AACnC,eAAOg1C,iBAAiB,CAACh1C,SAAD,CAAjB,GAA+Bvb,cAA/B,GAAgDD,iBAAvD;AACD,OAFD,MAEO,IAAIwb,SAAS,KAAKvO,SAAd,IAA2BuO,SAAS,KAAK,IAA7C,EAAmD;AACxD,YAAI1X,QAAQ,GAAG0X,SAAS,CAAC1X,QAAzB;;AAEA,YAAIA,QAAQ,KAAK5B,sBAAjB,EAAyC;AACvC,iBAAOvB,UAAP;AACD;;AAED,YAAImD,QAAQ,KAAKzB,eAAjB,EAAkC;AAChC,iBAAOvB,aAAP;AACD;AACF;;AAED,aAAOZ,sBAAP;AACD,KA7sgBa,CA6sgBZ;;;AAEF,aAAS0zB,oBAAT,CAA8BnsB,OAA9B,EAAuCkpB,YAAvC,EAAqD;AACnD,UAAIlT,cAAc,GAAGhW,OAAO,CAACR,SAA7B;;AAEA,UAAIwW,cAAc,KAAK,IAAvB,EAA6B;AAC3B;AACA;AACA;AACA;AACA;AACAA,QAAAA,cAAc,GAAG8yC,WAAW,CAAC9oD,OAAO,CAAC5D,GAAT,EAAc8sB,YAAd,EAA4BlpB,OAAO,CAAClJ,GAApC,EAAyCkJ,OAAO,CAAC+a,IAAjD,CAA5B;AACA/E,QAAAA,cAAc,CAACgT,WAAf,GAA6BhpB,OAAO,CAACgpB,WAArC;AACAhT,QAAAA,cAAc,CAAC9Z,IAAf,GAAsB8D,OAAO,CAAC9D,IAA9B;AACA8Z,QAAAA,cAAc,CAAC7V,SAAf,GAA2BH,OAAO,CAACG,SAAnC;AAEA;AACE;AACA6V,UAAAA,cAAc,CAAC4D,YAAf,GAA8B5Z,OAAO,CAAC4Z,YAAtC;AACA5D,UAAAA,cAAc,CAAC2D,WAAf,GAA6B3Z,OAAO,CAAC2Z,WAArC;AACA3D,UAAAA,cAAc,CAACmf,eAAf,GAAiCn1B,OAAO,CAACm1B,eAAzC;AACD;AAEDnf,QAAAA,cAAc,CAACxW,SAAf,GAA2BQ,OAA3B;AACAA,QAAAA,OAAO,CAACR,SAAR,GAAoBwW,cAApB;AACD,OApBD,MAoBO;AACLA,QAAAA,cAAc,CAACkT,YAAf,GAA8BA,YAA9B,CADK,CACuC;;AAE5ClT,QAAAA,cAAc,CAAC9Z,IAAf,GAAsB8D,OAAO,CAAC9D,IAA9B,CAHK,CAG+B;AACpC;;AAEA8Z,QAAAA,cAAc,CAACtW,KAAf,GAAuBrC,OAAvB,CANK,CAM2B;;AAEhC2Y,QAAAA,cAAc,CAACkvB,YAAf,GAA8B7nC,OAA9B;AACA2Y,QAAAA,cAAc,CAAC4V,SAAf,GAA2B,IAA3B;AAEA;AACE;AACA;AACA;AACA;AACA5V,UAAAA,cAAc,CAACsqB,cAAf,GAAgC,CAAhC;AACAtqB,UAAAA,cAAc,CAACiqB,eAAf,GAAiC,CAAC,CAAlC;AACD;AACF,OA1CkD,CA0CjD;AACF;;;AAGAjqB,MAAAA,cAAc,CAACtW,KAAf,GAAuBM,OAAO,CAACN,KAAR,GAAgBP,UAAvC;AACA6W,MAAAA,cAAc,CAACwJ,UAAf,GAA4Bxf,OAAO,CAACwf,UAApC;AACAxJ,MAAAA,cAAc,CAAC/P,KAAf,GAAuBjG,OAAO,CAACiG,KAA/B;AACA+P,MAAAA,cAAc,CAACnV,KAAf,GAAuBb,OAAO,CAACa,KAA/B;AACAmV,MAAAA,cAAc,CAACwS,aAAf,GAA+BxoB,OAAO,CAACwoB,aAAvC;AACAxS,MAAAA,cAAc,CAAC8C,aAAf,GAA+B9Y,OAAO,CAAC8Y,aAAvC;AACA9C,MAAAA,cAAc,CAACmK,WAAf,GAA6BngB,OAAO,CAACmgB,WAArC,CApDmD,CAoDD;AAClD;;AAEA,UAAI6oC,mBAAmB,GAAGhpD,OAAO,CAAC6f,YAAlC;AACA7J,MAAAA,cAAc,CAAC6J,YAAf,GAA8BmpC,mBAAmB,KAAK,IAAxB,GAA+B,IAA/B,GAAsC;AAClE/iD,QAAAA,KAAK,EAAE+iD,mBAAmB,CAAC/iD,KADuC;AAElE8Z,QAAAA,YAAY,EAAEipC,mBAAmB,CAACjpC;AAFgC,OAApE,CAxDmD,CA2DhD;;AAEH/J,MAAAA,cAAc,CAAClV,OAAf,GAAyBd,OAAO,CAACc,OAAjC;AACAkV,MAAAA,cAAc,CAAC1L,KAAf,GAAuBtK,OAAO,CAACsK,KAA/B;AACA0L,MAAAA,cAAc,CAAC8U,GAAf,GAAqB9qB,OAAO,CAAC8qB,GAA7B;AAEA;AACE9U,QAAAA,cAAc,CAACuqB,gBAAf,GAAkCvgC,OAAO,CAACugC,gBAA1C;AACAvqB,QAAAA,cAAc,CAACmvB,gBAAf,GAAkCnlC,OAAO,CAACmlC,gBAA1C;AACD;AAED;AACEnvB,QAAAA,cAAc,CAAC87B,kBAAf,GAAoC9xC,OAAO,CAAC8xC,kBAA5C;;AAEA,gBAAQ97B,cAAc,CAAC5Z,GAAvB;AACE,eAAK3D,sBAAL;AACA,eAAKF,iBAAL;AACA,eAAKe,mBAAL;AACE0c,YAAAA,cAAc,CAAC9Z,IAAf,GAAsB8sC,8BAA8B,CAAChpC,OAAO,CAAC9D,IAAT,CAApD;AACA;;AAEF,eAAK1D,cAAL;AACEwd,YAAAA,cAAc,CAAC9Z,IAAf,GAAsBwvC,2BAA2B,CAAC1rC,OAAO,CAAC9D,IAAT,CAAjD;AACA;;AAEF,eAAKhD,UAAL;AACE8c,YAAAA,cAAc,CAAC9Z,IAAf,GAAsByvC,gCAAgC,CAAC3rC,OAAO,CAAC9D,IAAT,CAAtD;AACA;AAbJ;AAeD;AAED,aAAO8Z,cAAP;AACD,KA1ygBa,CA0ygBZ;;;AAEF,aAASoa,mBAAT,CAA6Bpa,cAA7B,EAA6CsJ,WAA7C,EAA0D;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAtJ,MAAAA,cAAc,CAACtW,KAAf,IAAwBP,UAAU,GAAG5B,SAArC,CATwD,CASR;;AAEhD,UAAIyC,OAAO,GAAGgW,cAAc,CAACxW,SAA7B;;AAEA,UAAIQ,OAAO,KAAK,IAAhB,EAAsB;AACpB;AACAgW,QAAAA,cAAc,CAACwJ,UAAf,GAA4B1Y,OAA5B;AACAkP,QAAAA,cAAc,CAAC/P,KAAf,GAAuBqZ,WAAvB;AACAtJ,QAAAA,cAAc,CAACnV,KAAf,GAAuB,IAAvB;AACAmV,QAAAA,cAAc,CAACkvB,YAAf,GAA8B7nC,OAA9B;AACA2Y,QAAAA,cAAc,CAACwS,aAAf,GAA+B,IAA/B;AACAxS,QAAAA,cAAc,CAAC8C,aAAf,GAA+B,IAA/B;AACA9C,QAAAA,cAAc,CAACmK,WAAf,GAA6B,IAA7B;AACAnK,QAAAA,cAAc,CAAC6J,YAAf,GAA8B,IAA9B;AACA7J,QAAAA,cAAc,CAAC7V,SAAf,GAA2B,IAA3B;AAEA;AACE;AACA;AACA6V,UAAAA,cAAc,CAACuqB,gBAAf,GAAkC,CAAlC;AACAvqB,UAAAA,cAAc,CAACmvB,gBAAf,GAAkC,CAAlC;AACD;AACF,OAlBD,MAkBO;AACL;AACAnvB,QAAAA,cAAc,CAACwJ,UAAf,GAA4Bxf,OAAO,CAACwf,UAApC;AACAxJ,QAAAA,cAAc,CAAC/P,KAAf,GAAuBjG,OAAO,CAACiG,KAA/B;AACA+P,QAAAA,cAAc,CAACnV,KAAf,GAAuBb,OAAO,CAACa,KAA/B;AACAmV,QAAAA,cAAc,CAACkvB,YAAf,GAA8B7nC,OAA9B;AACA2Y,QAAAA,cAAc,CAAC4V,SAAf,GAA2B,IAA3B;AACA5V,QAAAA,cAAc,CAACwS,aAAf,GAA+BxoB,OAAO,CAACwoB,aAAvC;AACAxS,QAAAA,cAAc,CAAC8C,aAAf,GAA+B9Y,OAAO,CAAC8Y,aAAvC;AACA9C,QAAAA,cAAc,CAACmK,WAAf,GAA6BngB,OAAO,CAACmgB,WAArC,CATK,CAS6C;;AAElDnK,QAAAA,cAAc,CAAC9Z,IAAf,GAAsB8D,OAAO,CAAC9D,IAA9B,CAXK,CAW+B;AACpC;;AAEA,YAAI8sD,mBAAmB,GAAGhpD,OAAO,CAAC6f,YAAlC;AACA7J,QAAAA,cAAc,CAAC6J,YAAf,GAA8BmpC,mBAAmB,KAAK,IAAxB,GAA+B,IAA/B,GAAsC;AAClE/iD,UAAAA,KAAK,EAAE+iD,mBAAmB,CAAC/iD,KADuC;AAElE8Z,UAAAA,YAAY,EAAEipC,mBAAmB,CAACjpC;AAFgC,SAApE;AAKA;AACE;AACA;AACA/J,UAAAA,cAAc,CAACuqB,gBAAf,GAAkCvgC,OAAO,CAACugC,gBAA1C;AACAvqB,UAAAA,cAAc,CAACmvB,gBAAf,GAAkCnlC,OAAO,CAACmlC,gBAA1C;AACD;AACF;;AAED,aAAOnvB,cAAP;AACD;;AACD,aAASizC,mBAAT,CAA6B7sD,GAA7B,EAAkC8sD,YAAlC,EAAgDC,kCAAhD,EAAoF;AAClF,UAAIpuC,IAAJ;;AAEA,UAAI3e,GAAG,KAAKwb,cAAZ,EAA4B;AAC1BmD,QAAAA,IAAI,GAAG1U,cAAP;;AAEA,YAAI6iD,YAAY,KAAK,IAArB,EAA2B;AACzBnuC,UAAAA,IAAI,IAAIxU,gBAAR;AACD;AACF,OAND,MAMO;AACLwU,QAAAA,IAAI,GAAG3U,MAAP;AACD;;AAED,UAAKrC,iBAAL,EAAwB;AACtB;AACA;AACA;AACAgX,QAAAA,IAAI,IAAIzU,WAAR;AACD;;AAED,aAAOwiD,WAAW,CAACpwD,QAAD,EAAW,IAAX,EAAiB,IAAjB,EAAuBqiB,IAAvB,CAAlB;AACD;;AACD,aAASouB,2BAAT,CAAqCjtC,IAArC,EAA2C;AAC3CpF,IAAAA,GADA,EACKoyB,YADL,EACmBnpB,KADnB,EAC0Bgb,IAD1B,EACgC9U,KADhC,EACuC;AACrC,UAAImjD,QAAQ,GAAG3wD,sBAAf,CADqC,CACE;;AAEvC,UAAIswC,YAAY,GAAG7sC,IAAnB;;AAEA,UAAI,OAAOA,IAAP,KAAgB,UAApB,EAAgC;AAC9B,YAAI6sD,iBAAiB,CAAC7sD,IAAD,CAArB,EAA6B;AAC3BktD,UAAAA,QAAQ,GAAG5wD,cAAX;AAEA;AACEuwC,YAAAA,YAAY,GAAG2C,2BAA2B,CAAC3C,YAAD,CAA1C;AACD;AACF,SAND,MAMO;AACL;AACEA,YAAAA,YAAY,GAAGC,8BAA8B,CAACD,YAAD,CAA7C;AACD;AACF;AACF,OAZD,MAYO,IAAI,OAAO7sC,IAAP,KAAgB,QAApB,EAA8B;AACnCktD,QAAAA,QAAQ,GAAGxwD,aAAX;AACD,OAFM,MAEA;AACLywD,QAAAA,MAAM,EAAE,QAAQntD,IAAR;AACN,eAAK9B,mBAAL;AACE,mBAAOozB,uBAAuB,CAACtE,YAAY,CAACrkB,QAAd,EAAwBkW,IAAxB,EAA8B9U,KAA9B,EAAqCnP,GAArC,CAA9B;;AAEF,eAAKuD,sBAAL;AACE+uD,YAAAA,QAAQ,GAAGrwD,IAAX;AACAgiB,YAAAA,IAAI,IAAIxU,gBAAR;AAEA;;AAEF,eAAKjM,mBAAL;AACE,mBAAOgvD,uBAAuB,CAACpgC,YAAD,EAAenO,IAAf,EAAqB9U,KAArB,EAA4BnP,GAA5B,CAA9B;;AAEF,eAAK4D,mBAAL;AACE,mBAAO6uD,uBAAuB,CAACrgC,YAAD,EAAenO,IAAf,EAAqB9U,KAArB,EAA4BnP,GAA5B,CAA9B;;AAEF,eAAK6D,wBAAL;AACE,mBAAO6uD,2BAA2B,CAACtgC,YAAD,EAAenO,IAAf,EAAqB9U,KAArB,EAA4BnP,GAA5B,CAAlC;;AAEF,eAAKkE,oBAAL;AACE,mBAAOg0C,wBAAwB,CAAC9lB,YAAD,EAAenO,IAAf,EAAqB9U,KAArB,EAA4BnP,GAA5B,CAA/B;;AAEF,eAAKmE,wBAAL,CAtBM,CAwBN;;AAEA,eAAKH,gBAAL,CA1BM,CA4BN;;AAEA,eAAKI,gBAAL,CA9BM,CAgCN;;AAEA,eAAKC,yBAAL,CAlCM,CAoCN;;AAEA,eAAKJ,6BAAL,CAtCM,CAwCN;;AAEA;AACE;AACE,kBAAI,OAAOmB,IAAP,KAAgB,QAAhB,IAA4BA,IAAI,KAAK,IAAzC,EAA+C;AAC7C,wBAAQA,IAAI,CAACG,QAAb;AACE,uBAAK9B,mBAAL;AACE6uD,oBAAAA,QAAQ,GAAGnwD,eAAX;AACA,0BAAMowD,MAAN;;AAEF,uBAAK7uD,kBAAL;AACE;AACA4uD,oBAAAA,QAAQ,GAAGpwD,eAAX;AACA,0BAAMqwD,MAAN;;AAEF,uBAAK5uD,sBAAL;AACE2uD,oBAAAA,QAAQ,GAAGlwD,UAAX;AAEA;AACE6vC,sBAAAA,YAAY,GAAG4C,gCAAgC,CAAC5C,YAAD,CAA/C;AACD;AAED,0BAAMsgB,MAAN;;AAEF,uBAAKzuD,eAAL;AACEwuD,oBAAAA,QAAQ,GAAG/vD,aAAX;AACA,0BAAMgwD,MAAN;;AAEF,uBAAKxuD,eAAL;AACEuuD,oBAAAA,QAAQ,GAAG7vD,aAAX;AACAwvC,oBAAAA,YAAY,GAAG,IAAf;AACA,0BAAMsgB,MAAN;AA1BJ;AA4BD;;AAED,kBAAI/lD,IAAI,GAAG,EAAX;AAEA;AACE,oBAAIpH,IAAI,KAAKsJ,SAAT,IAAsB,OAAOtJ,IAAP,KAAgB,QAAhB,IAA4BA,IAAI,KAAK,IAArC,IAA6CtF,MAAM,CAACW,IAAP,CAAY2E,IAAZ,EAAkBrH,MAAlB,KAA6B,CAApG,EAAuG;AACrGyO,kBAAAA,IAAI,IAAI,+DAA+D,0DAA/D,GAA4H,gBAApI;AACD;;AAED,oBAAI0oC,SAAS,GAAGjsC,KAAK,GAAG5C,yBAAyB,CAAC4C,KAAD,CAA5B,GAAsC,IAA3D;;AAEA,oBAAIisC,SAAJ,EAAe;AACb1oC,kBAAAA,IAAI,IAAI,qCAAqC0oC,SAArC,GAAiD,IAAzD;AACD;AACF;AAED,oBAAM,IAAI1rC,KAAJ,CAAU,8DAA8D,6DAA9D,IAA+H,eAAepE,IAAI,IAAI,IAAR,GAAeA,IAAf,GAAsB,OAAOA,IAA5C,IAAoD,GAApD,GAA0DoH,IAAzL,CAAV,CAAN;AACD;AA1FG;AA4FT;;AAED,UAAIlG,KAAK,GAAG0rD,WAAW,CAACM,QAAD,EAAWlgC,YAAX,EAAyBpyB,GAAzB,EAA8BikB,IAA9B,CAAvB;AACA3d,MAAAA,KAAK,CAAC4rB,WAAN,GAAoB9sB,IAApB;AACAkB,MAAAA,KAAK,CAAClB,IAAN,GAAa6sC,YAAb;AACA3rC,MAAAA,KAAK,CAAC6I,KAAN,GAAcA,KAAd;AAEA;AACE7I,QAAAA,KAAK,CAACuc,WAAN,GAAoB5Z,KAApB;AACD;AAED,aAAO3C,KAAP;AACD;;AACD,aAAS8vB,sBAAT,CAAgC7Y,OAAhC,EAAyC0G,IAAzC,EAA+C9U,KAA/C,EAAsD;AACpD,UAAIlG,KAAK,GAAG,IAAZ;AAEA;AACEA,QAAAA,KAAK,GAAGsU,OAAO,CAACC,MAAhB;AACD;AAED,UAAIpY,IAAI,GAAGmY,OAAO,CAACnY,IAAnB;AACA,UAAIpF,GAAG,GAAGud,OAAO,CAACvd,GAAlB;AACA,UAAIoyB,YAAY,GAAG7U,OAAO,CAAC/d,KAA3B;AACA,UAAI8G,KAAK,GAAG+rC,2BAA2B,CAACjtC,IAAD,EAAOpF,GAAP,EAAYoyB,YAAZ,EAA0BnpB,KAA1B,EAAiCgb,IAAjC,EAAuC9U,KAAvC,CAAvC;AAEA;AACE7I,QAAAA,KAAK,CAACwc,YAAN,GAAqBvF,OAAO,CAACE,OAA7B;AACAnX,QAAAA,KAAK,CAACuc,WAAN,GAAoBtF,OAAO,CAACC,MAA5B;AACD;AAED,aAAOlX,KAAP;AACD;;AACD,aAASowB,uBAAT,CAAiCi8B,QAAjC,EAA2C1uC,IAA3C,EAAiD9U,KAAjD,EAAwDnP,GAAxD,EAA6D;AAC3D,UAAIsG,KAAK,GAAG0rD,WAAW,CAAChwD,QAAD,EAAW2wD,QAAX,EAAqB3yD,GAArB,EAA0BikB,IAA1B,CAAvB;AACA3d,MAAAA,KAAK,CAAC6I,KAAN,GAAcA,KAAd;AACA,aAAO7I,KAAP;AACD;;AAED,aAASksD,uBAAT,CAAiCpgC,YAAjC,EAA+CnO,IAA/C,EAAqD9U,KAArD,EAA4DnP,GAA5D,EAAiE;AAC/D;AACE,YAAI,OAAOoyB,YAAY,CAACmU,EAApB,KAA2B,QAA/B,EAAyC;AACvCnoC,UAAAA,KAAK,CAAC,2FAAD,EAA8F,OAAOg0B,YAAY,CAACmU,EAAlH,CAAL;AACD;AACF;AAED,UAAIjgC,KAAK,GAAG0rD,WAAW,CAAC3vD,QAAD,EAAW+vB,YAAX,EAAyBpyB,GAAzB,EAA8BikB,IAAI,GAAGzU,WAArC,CAAvB;AACAlJ,MAAAA,KAAK,CAAC4rB,WAAN,GAAoB1uB,mBAApB;AACA8C,MAAAA,KAAK,CAAC6I,KAAN,GAAcA,KAAd;AAEA;AACE7I,QAAAA,KAAK,CAAC+C,SAAN,GAAkB;AAChBugC,UAAAA,cAAc,EAAE,CADA;AAEhBG,UAAAA,qBAAqB,EAAE;AAFP,SAAlB;AAID;AAED,aAAOzjC,KAAP;AACD;;AAED,aAASmsD,uBAAT,CAAiCrgC,YAAjC,EAA+CnO,IAA/C,EAAqD9U,KAArD,EAA4DnP,GAA5D,EAAiE;AAC/D,UAAIsG,KAAK,GAAG0rD,WAAW,CAAC1vD,iBAAD,EAAoB8vB,YAApB,EAAkCpyB,GAAlC,EAAuCikB,IAAvC,CAAvB;AACA3d,MAAAA,KAAK,CAAC4rB,WAAN,GAAoBtuB,mBAApB;AACA0C,MAAAA,KAAK,CAAC6I,KAAN,GAAcA,KAAd;AACA,aAAO7I,KAAP;AACD;;AACD,aAASosD,2BAAT,CAAqCtgC,YAArC,EAAmDnO,IAAnD,EAAyD9U,KAAzD,EAAgEnP,GAAhE,EAAqE;AACnE,UAAIsG,KAAK,GAAG0rD,WAAW,CAACpvD,qBAAD,EAAwBwvB,YAAxB,EAAsCpyB,GAAtC,EAA2CikB,IAA3C,CAAvB;AACA3d,MAAAA,KAAK,CAAC4rB,WAAN,GAAoBruB,wBAApB;AACAyC,MAAAA,KAAK,CAAC6I,KAAN,GAAcA,KAAd;AACA,aAAO7I,KAAP;AACD;;AACD,aAAS4xC,wBAAT,CAAkC9lB,YAAlC,EAAgDnO,IAAhD,EAAsD9U,KAAtD,EAA6DnP,GAA7D,EAAkE;AAChE,UAAIsG,KAAK,GAAG0rD,WAAW,CAAClvD,kBAAD,EAAqBsvB,YAArB,EAAmCpyB,GAAnC,EAAwCikB,IAAxC,CAAvB;AACA3d,MAAAA,KAAK,CAAC4rB,WAAN,GAAoBhuB,oBAApB;AACAoC,MAAAA,KAAK,CAAC6I,KAAN,GAAcA,KAAd;AACA,UAAIyjD,oBAAoB,GAAG,EAA3B;AACAtsD,MAAAA,KAAK,CAAC+C,SAAN,GAAkBupD,oBAAlB;AACA,aAAOtsD,KAAP;AACD;;AACD,aAASyvB,mBAAT,CAA6B88B,OAA7B,EAAsC5uC,IAAtC,EAA4C9U,KAA5C,EAAmD;AACjD,UAAI7I,KAAK,GAAG0rD,WAAW,CAACjwD,QAAD,EAAW8wD,OAAX,EAAoB,IAApB,EAA0B5uC,IAA1B,CAAvB;AACA3d,MAAAA,KAAK,CAAC6I,KAAN,GAAcA,KAAd;AACA,aAAO7I,KAAP;AACD;;AACD,aAASkwB,qBAAT,CAA+BF,MAA/B,EAAuCrS,IAAvC,EAA6C9U,KAA7C,EAAoD;AAClD,UAAIijB,YAAY,GAAGkE,MAAM,CAACvoB,QAAP,KAAoB,IAApB,GAA2BuoB,MAAM,CAACvoB,QAAlC,GAA6C,EAAhE;AACA,UAAIzH,KAAK,GAAG0rD,WAAW,CAACnwD,UAAD,EAAauwB,YAAb,EAA2BkE,MAAM,CAACt2B,GAAlC,EAAuCikB,IAAvC,CAAvB;AACA3d,MAAAA,KAAK,CAAC6I,KAAN,GAAcA,KAAd;AACA7I,MAAAA,KAAK,CAAC+C,SAAN,GAAkB;AAChBuP,QAAAA,aAAa,EAAE0d,MAAM,CAAC1d,aADN;AAEhBk6C,QAAAA,eAAe,EAAE,IAFD;AAGhB;AACAv8B,QAAAA,cAAc,EAAED,MAAM,CAACC;AAJP,OAAlB;AAMA,aAAOjwB,KAAP;AACD,KA/khBa,CA+khBZ;;;AAEF,aAASysD,aAAT,CAAuBn6C,aAAvB,EAAsCtT,GAAtC,EAA2C0tD,OAA3C,EAAoD1sB,gBAApD,EAAsEgoB,kBAAtE,EAA0F;AACxF,WAAKhpD,GAAL,GAAWA,GAAX;AACA,WAAKsT,aAAL,GAAqBA,aAArB;AACA,WAAKk6C,eAAL,GAAuB,IAAvB;AACA,WAAK5pD,OAAL,GAAe,IAAf;AACA,WAAKqiC,SAAL,GAAiB,IAAjB;AACA,WAAKle,YAAL,GAAoB,IAApB;AACA,WAAKm/B,aAAL,GAAqBzyC,SAArB;AACA,WAAKvU,OAAL,GAAe,IAAf;AACA,WAAKmpC,cAAL,GAAsB,IAAtB;AACA,WAAKub,YAAL,GAAoB,IAApB;AACA,WAAKE,gBAAL,GAAwBn6C,MAAxB;AACA,WAAK2D,UAAL,GAAkB8B,aAAa,CAAC1F,OAAD,CAA/B;AACA,WAAKkE,eAAL,GAAuBwB,aAAa,CAACrD,WAAD,CAApC;AACA,WAAKO,YAAL,GAAoB5C,OAApB;AACA,WAAK8C,cAAL,GAAsB9C,OAAtB;AACA,WAAK+C,WAAL,GAAmB/C,OAAnB;AACA,WAAKoE,YAAL,GAAoBpE,OAApB;AACA,WAAKqG,gBAAL,GAAwBrG,OAAxB;AACA,WAAK87C,aAAL,GAAqB97C,OAArB;AACA,WAAKsD,cAAL,GAAsBtD,OAAtB;AACA,WAAKuD,aAAL,GAAqBmC,aAAa,CAAC1F,OAAD,CAAlC;AACA,WAAKs2B,gBAAL,GAAwBA,gBAAxB;AACA,WAAKgoB,kBAAL,GAA0BA,kBAA1B;AAEA;AACE,aAAK1kB,cAAL,GAAsB,CAAtB;AACA,aAAKG,qBAAL,GAA6B,CAA7B;AACD;AAED;AACE,gBAAQzkC,GAAR;AACE,eAAKwb,cAAL;AACE,iBAAKmyC,cAAL,GAAsBD,OAAO,GAAG,eAAH,GAAqB,cAAlD;AACA;;AAEF,eAAKnyC,UAAL;AACE,iBAAKoyC,cAAL,GAAsBD,OAAO,GAAG,WAAH,GAAiB,UAA9C;AACA;AAPJ;AASD;AACF;;AAED,aAASE,eAAT,CAAyBt6C,aAAzB,EAAwCtT,GAAxC,EAA6C0tD,OAA7C,EAAsDG,eAAtD,EAAuEC,kBAAvE,EAA2FhB,YAA3F,EAAyGC,kCAAzG,EAA6I;AAC7I;AACA;AACA;AACA/rB,IAAAA,gBAJA,EAIkBgoB,kBAJlB,EAIsC+E,mBAJtC,EAI2D;AACzD,UAAIvlD,IAAI,GAAG,IAAIilD,aAAJ,CAAkBn6C,aAAlB,EAAiCtT,GAAjC,EAAsC0tD,OAAtC,EAA+C1sB,gBAA/C,EAAiEgoB,kBAAjE,CAAX,CADyD,CAEzD;;AAGA,UAAIgF,kBAAkB,GAAGnB,mBAAmB,CAAC7sD,GAAD,EAAM8sD,YAAN,CAA5C;AACAtkD,MAAAA,IAAI,CAAC5E,OAAL,GAAeoqD,kBAAf;AACAA,MAAAA,kBAAkB,CAACjqD,SAAnB,GAA+ByE,IAA/B;AAEA;AACE,YAAIylD,aAAa,GAAG;AAClBh2C,UAAAA,OAAO,EAAE41C,eADS;AAElBlxC,UAAAA,YAAY,EAAE+wC,OAFI;AAGlBQ,UAAAA,KAAK,EAAE,IAHW;AAIlB;AACAC,UAAAA,WAAW,EAAE;AALK,SAApB;AAOAH,QAAAA,kBAAkB,CAACtxC,aAAnB,GAAmCuxC,aAAnC;AACD;AAED1oC,MAAAA,qBAAqB,CAACyoC,kBAAD,CAArB;AACA,aAAOxlD,IAAP;AACD;;AAED,QAAI4lD,YAAY,GAAG,2BAAnB;AAEA,QAAIC,yBAAJ;AAEA;AACEA,MAAAA,yBAAyB,GAAG,KAA5B;AACD;;AAED,aAASC,oBAAT,CAA8BC,eAA9B,EAA+C;AAC7C,UAAI,CAACA,eAAL,EAAsB;AACpB,eAAOh1C,kBAAP;AACD;;AAED,UAAIvY,KAAK,GAAG1F,GAAG,CAACizD,eAAD,CAAf;AACA,UAAI1zC,aAAa,GAAGS,0BAA0B,CAACta,KAAD,CAA9C;;AAEA,UAAIA,KAAK,CAAChB,GAAN,KAAc5D,cAAlB,EAAkC;AAChC,YAAIub,SAAS,GAAG3W,KAAK,CAAClB,IAAtB;;AAEA,YAAIga,iBAAiB,CAACnC,SAAD,CAArB,EAAkC;AAChC,iBAAOiD,mBAAmB,CAAC5Z,KAAD,EAAQ2W,SAAR,EAAmBkD,aAAnB,CAA1B;AACD;AACF;;AAED,aAAOA,aAAP;AACD;;AAED,aAAS2zC,eAAT,CAAyBl7C,aAAzB,EAAwCtT,GAAxC,EAA6C8tD,kBAA7C,EAAiEhB,YAAjE,EAA+EC,kCAA/E,EAAmH/rB,gBAAnH,EAAqIgoB,kBAArI,EAAyJ+E,mBAAzJ,EAA8K;AAC5K,UAAIL,OAAO,GAAG,KAAd;AACA,UAAIG,eAAe,GAAG,IAAtB;AACA,aAAOD,eAAe,CAACt6C,aAAD,EAAgBtT,GAAhB,EAAqB0tD,OAArB,EAA8BG,eAA9B,EAA+CC,kBAA/C,EAAmEhB,YAAnE,EAAiFC,kCAAjF,EAAqH/rB,gBAArH,EAAuIgoB,kBAAvI,CAAtB;AACD;;AACD,aAASuC,eAAT,CAAyBtzC,OAAzB,EAAkChF,SAAlC,EAA6Cs7C,eAA7C,EAA8DvyC,QAA9D,EAAwE;AACtE;AACEzT,QAAAA,cAAc,CAAC0K,SAAD,EAAYgF,OAAZ,CAAd;AACD;AAED,UAAIw2C,SAAS,GAAGx7C,SAAS,CAACrP,OAA1B;AACA,UAAI4K,SAAS,GAAG6a,gBAAgB,EAAhC;AACA,UAAIjb,IAAI,GAAGkb,iBAAiB,CAACmlC,SAAD,CAA5B;AAEA,UAAIvuD,OAAO,GAAGouD,oBAAoB,CAACC,eAAD,CAAlC;;AAEA,UAAIt7C,SAAS,CAAC/S,OAAV,KAAsB,IAA1B,EAAgC;AAC9B+S,QAAAA,SAAS,CAAC/S,OAAV,GAAoBA,OAApB;AACD,OAFD,MAEO;AACL+S,QAAAA,SAAS,CAACo2B,cAAV,GAA2BnpC,OAA3B;AACD;;AAED;AACE,YAAIyd,WAAW,IAAI/Z,OAAO,KAAK,IAA3B,IAAmC,CAACyqD,yBAAxC,EAAmE;AACjEA,UAAAA,yBAAyB,GAAG,IAA5B;AAEAv1D,UAAAA,KAAK,CAAC,kEAAkE,kEAAlE,GAAuI,iEAAvI,GAA2M,gCAA5M,EAA8OiI,yBAAyB,CAAC6C,OAAD,CAAzB,IAAsC,SAApR,CAAL;AACD;AACF;AAED,UAAIggB,MAAM,GAAGC,YAAY,CAACrV,SAAD,EAAYJ,IAAZ,CAAzB,CAzBsE,CAyB1B;AAC5C;;AAEAwV,MAAAA,MAAM,CAACpjB,OAAP,GAAiB;AACfyX,QAAAA,OAAO,EAAEA;AADM,OAAjB;AAGA+D,MAAAA,QAAQ,GAAGA,QAAQ,KAAK5S,SAAb,GAAyB,IAAzB,GAAgC4S,QAA3C;;AAEA,UAAIA,QAAQ,KAAK,IAAjB,EAAuB;AACrB;AACE,cAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AAClCljB,YAAAA,KAAK,CAAC,yEAAyE,iCAA1E,EAA6GkjB,QAA7G,CAAL;AACD;AACF;AAED4H,QAAAA,MAAM,CAAC5H,QAAP,GAAkBA,QAAlB;AACD;;AAED+J,MAAAA,aAAa,CAAC0oC,SAAD,EAAY7qC,MAAZ,CAAb;AACA,UAAIpb,IAAI,GAAG+gB,qBAAqB,CAACklC,SAAD,EAAYrgD,IAAZ,EAAkBI,SAAlB,CAAhC;;AAEA,UAAIhG,IAAI,KAAK,IAAb,EAAmB;AACjByd,QAAAA,mBAAmB,CAACzd,IAAD,EAAOimD,SAAP,EAAkBrgD,IAAlB,CAAnB;AACD;;AAED,aAAOA,IAAP;AACD;;AACD,aAASsgD,qBAAT,CAA+Bz7C,SAA/B,EAA0C;AACxC,UAAI07C,cAAc,GAAG17C,SAAS,CAACrP,OAA/B;;AAEA,UAAI,CAAC+qD,cAAc,CAAClqD,KAApB,EAA2B;AACzB,eAAO,IAAP;AACD;;AAED,cAAQkqD,cAAc,CAAClqD,KAAf,CAAqBzE,GAA7B;AACE,aAAKxD,aAAL;AACE,iBAAO4V,iBAAiB,CAACu8C,cAAc,CAAClqD,KAAf,CAAqBV,SAAtB,CAAxB;;AAEF;AACE,iBAAO4qD,cAAc,CAAClqD,KAAf,CAAqBV,SAA5B;AALJ;AAOD;;AAED,QAAI6qD,eAAe,GAAG,UAAU5tD,KAAV,EAAiB;AACrC,aAAO,IAAP;AACD,KAFD;;AAIA,aAASqtC,WAAT,CAAqBrtC,KAArB,EAA4B;AAC1B,aAAO4tD,eAAe,CAAC5tD,KAAD,CAAtB;AACD;;AAED,QAAI6tD,iBAAiB,GAAG,UAAU7tD,KAAV,EAAiB;AACvC,aAAO,KAAP;AACD,KAFD;;AAIA,aAAS6vC,aAAT,CAAuB7vC,KAAvB,EAA8B;AAC5B,aAAO6tD,iBAAiB,CAAC7tD,KAAD,CAAxB;AACD;;AACD,QAAI8tD,iBAAiB,GAAG,IAAxB;AACA,QAAIC,2BAA2B,GAAG,IAAlC;AACA,QAAIC,2BAA2B,GAAG,IAAlC;AACA,QAAIC,aAAa,GAAG,IAApB;AACA,QAAIC,uBAAuB,GAAG,IAA9B;AACA,QAAIC,uBAAuB,GAAG,IAA9B;AACA,QAAIC,cAAc,GAAG,IAArB;AACA,QAAIC,eAAe,GAAG,IAAtB;AACA,QAAIC,kBAAkB,GAAG,IAAzB;AAEA;AACE,UAAIC,kBAAkB,GAAG,UAAUC,GAAV,EAAeC,IAAf,EAAqBvhD,KAArB,EAA4B;AACnD,YAAIxT,GAAG,GAAG+0D,IAAI,CAACvhD,KAAD,CAAd;AACA,YAAIwhD,OAAO,GAAGvqD,OAAO,CAACqqD,GAAD,CAAP,GAAeA,GAAG,CAACjzC,KAAJ,EAAf,GAA6BlhB,MAAM,CAAC,EAAD,EAAKm0D,GAAL,CAAjD;;AAEA,YAAIthD,KAAK,GAAG,CAAR,KAAcuhD,IAAI,CAACh3D,MAAvB,EAA+B;AAC7B,cAAI0M,OAAO,CAACuqD,OAAD,CAAX,EAAsB;AACpBA,YAAAA,OAAO,CAAC/8C,MAAR,CAAejY,GAAf,EAAoB,CAApB;AACD,WAFD,MAEO;AACL,mBAAOg1D,OAAO,CAACh1D,GAAD,CAAd;AACD;;AAED,iBAAOg1D,OAAP;AACD,SAZkD,CAYjD;;;AAGFA,QAAAA,OAAO,CAACh1D,GAAD,CAAP,GAAe60D,kBAAkB,CAACC,GAAG,CAAC90D,GAAD,CAAJ,EAAW+0D,IAAX,EAAiBvhD,KAAK,GAAG,CAAzB,CAAjC;AACA,eAAOwhD,OAAP;AACD,OAjBD;;AAmBA,UAAIC,cAAc,GAAG,UAAUH,GAAV,EAAeC,IAAf,EAAqB;AACxC,eAAOF,kBAAkB,CAACC,GAAD,EAAMC,IAAN,EAAY,CAAZ,CAAzB;AACD,OAFD;;AAIA,UAAIG,kBAAkB,GAAG,UAAUJ,GAAV,EAAeK,OAAf,EAAwBC,OAAxB,EAAiC5hD,KAAjC,EAAwC;AAC/D,YAAI6hD,MAAM,GAAGF,OAAO,CAAC3hD,KAAD,CAApB;AACA,YAAIwhD,OAAO,GAAGvqD,OAAO,CAACqqD,GAAD,CAAP,GAAeA,GAAG,CAACjzC,KAAJ,EAAf,GAA6BlhB,MAAM,CAAC,EAAD,EAAKm0D,GAAL,CAAjD;;AAEA,YAAIthD,KAAK,GAAG,CAAR,KAAc2hD,OAAO,CAACp3D,MAA1B,EAAkC;AAChC,cAAIu3D,MAAM,GAAGF,OAAO,CAAC5hD,KAAD,CAApB,CADgC,CACH;;AAE7BwhD,UAAAA,OAAO,CAACM,MAAD,CAAP,GAAkBN,OAAO,CAACK,MAAD,CAAzB;;AAEA,cAAI5qD,OAAO,CAACuqD,OAAD,CAAX,EAAsB;AACpBA,YAAAA,OAAO,CAAC/8C,MAAR,CAAeo9C,MAAf,EAAuB,CAAvB;AACD,WAFD,MAEO;AACL,mBAAOL,OAAO,CAACK,MAAD,CAAd;AACD;AACF,SAVD,MAUO;AACL;AACAL,UAAAA,OAAO,CAACK,MAAD,CAAP,GAAkBH,kBAAkB,EAAE;AACtCJ,UAAAA,GAAG,CAACO,MAAD,CADiC,EACvBF,OADuB,EACdC,OADc,EACL5hD,KAAK,GAAG,CADH,CAApC;AAED;;AAED,eAAOwhD,OAAP;AACD,OArBD;;AAuBA,UAAIO,cAAc,GAAG,UAAUT,GAAV,EAAeK,OAAf,EAAwBC,OAAxB,EAAiC;AACpD,YAAID,OAAO,CAACp3D,MAAR,KAAmBq3D,OAAO,CAACr3D,MAA/B,EAAuC;AACrCJ,UAAAA,IAAI,CAAC,mDAAD,CAAJ;AAEA;AACD,SAJD,MAIO;AACL,eAAK,IAAI8B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG21D,OAAO,CAACr3D,MAAR,GAAiB,CAArC,EAAwC0B,CAAC,EAAzC,EAA6C;AAC3C,gBAAI01D,OAAO,CAAC11D,CAAD,CAAP,KAAe21D,OAAO,CAAC31D,CAAD,CAA1B,EAA+B;AAC7B9B,cAAAA,IAAI,CAAC,0EAAD,CAAJ;AAEA;AACD;AACF;AACF;;AAED,eAAOu3D,kBAAkB,CAACJ,GAAD,EAAMK,OAAN,EAAeC,OAAf,EAAwB,CAAxB,CAAzB;AACD,OAhBD;;AAkBA,UAAII,eAAe,GAAG,UAAUV,GAAV,EAAeC,IAAf,EAAqBvhD,KAArB,EAA4BzS,KAA5B,EAAmC;AACvD,YAAIyS,KAAK,IAAIuhD,IAAI,CAACh3D,MAAlB,EAA0B;AACxB,iBAAOgD,KAAP;AACD;;AAED,YAAIf,GAAG,GAAG+0D,IAAI,CAACvhD,KAAD,CAAd;AACA,YAAIwhD,OAAO,GAAGvqD,OAAO,CAACqqD,GAAD,CAAP,GAAeA,GAAG,CAACjzC,KAAJ,EAAf,GAA6BlhB,MAAM,CAAC,EAAD,EAAKm0D,GAAL,CAAjD,CANuD,CAMK;;AAE5DE,QAAAA,OAAO,CAACh1D,GAAD,CAAP,GAAew1D,eAAe,CAACV,GAAG,CAAC90D,GAAD,CAAJ,EAAW+0D,IAAX,EAAiBvhD,KAAK,GAAG,CAAzB,EAA4BzS,KAA5B,CAA9B;AACA,eAAOi0D,OAAP;AACD,OAVD;;AAYA,UAAIS,WAAW,GAAG,UAAUX,GAAV,EAAeC,IAAf,EAAqBh0D,KAArB,EAA4B;AAC5C,eAAOy0D,eAAe,CAACV,GAAD,EAAMC,IAAN,EAAY,CAAZ,EAAeh0D,KAAf,CAAtB;AACD,OAFD;;AAIA,UAAI20D,QAAQ,GAAG,UAAUpvD,KAAV,EAAiBigC,EAAjB,EAAqB;AAClC;AACA;AACA,YAAI9J,WAAW,GAAGn2B,KAAK,CAAC0b,aAAxB;;AAEA,eAAOya,WAAW,KAAK,IAAhB,IAAwB8J,EAAE,GAAG,CAApC,EAAuC;AACrC9J,UAAAA,WAAW,GAAGA,WAAW,CAAChT,IAA1B;AACA8c,UAAAA,EAAE;AACH;;AAED,eAAO9J,WAAP;AACD,OAXD,CAjFF,CA4FK;;;AAGH23B,MAAAA,iBAAiB,GAAG,UAAU9tD,KAAV,EAAiBigC,EAAjB,EAAqBwuB,IAArB,EAA2Bh0D,KAA3B,EAAkC;AACpD,YAAIsM,IAAI,GAAGqoD,QAAQ,CAACpvD,KAAD,EAAQigC,EAAR,CAAnB;;AAEA,YAAIl5B,IAAI,KAAK,IAAb,EAAmB;AACjB,cAAIif,QAAQ,GAAGmpC,WAAW,CAACpoD,IAAI,CAAC2U,aAAN,EAAqB+yC,IAArB,EAA2Bh0D,KAA3B,CAA1B;AACAsM,UAAAA,IAAI,CAAC2U,aAAL,GAAqBsK,QAArB;AACAjf,UAAAA,IAAI,CAACyd,SAAL,GAAiBwB,QAAjB,CAHiB,CAGU;AAC3B;AACA;AACA;AACA;;AAEAhmB,UAAAA,KAAK,CAACorB,aAAN,GAAsB/wB,MAAM,CAAC,EAAD,EAAK2F,KAAK,CAACorB,aAAX,CAA5B;AACA7C,UAAAA,qBAAqB,CAACvoB,KAAD,EAAQ4J,QAAR,EAAkBmC,WAAlB,CAArB;AACD;AACF,OAfD;;AAiBAgiD,MAAAA,2BAA2B,GAAG,UAAU/tD,KAAV,EAAiBigC,EAAjB,EAAqBwuB,IAArB,EAA2B;AACvD,YAAI1nD,IAAI,GAAGqoD,QAAQ,CAACpvD,KAAD,EAAQigC,EAAR,CAAnB;;AAEA,YAAIl5B,IAAI,KAAK,IAAb,EAAmB;AACjB,cAAIif,QAAQ,GAAG2oC,cAAc,CAAC5nD,IAAI,CAAC2U,aAAN,EAAqB+yC,IAArB,CAA7B;AACA1nD,UAAAA,IAAI,CAAC2U,aAAL,GAAqBsK,QAArB;AACAjf,UAAAA,IAAI,CAACyd,SAAL,GAAiBwB,QAAjB,CAHiB,CAGU;AAC3B;AACA;AACA;AACA;;AAEAhmB,UAAAA,KAAK,CAACorB,aAAN,GAAsB/wB,MAAM,CAAC,EAAD,EAAK2F,KAAK,CAACorB,aAAX,CAA5B;AACA7C,UAAAA,qBAAqB,CAACvoB,KAAD,EAAQ4J,QAAR,EAAkBmC,WAAlB,CAArB;AACD;AACF,OAfD;;AAiBAiiD,MAAAA,2BAA2B,GAAG,UAAUhuD,KAAV,EAAiBigC,EAAjB,EAAqB4uB,OAArB,EAA8BC,OAA9B,EAAuC;AACnE,YAAI/nD,IAAI,GAAGqoD,QAAQ,CAACpvD,KAAD,EAAQigC,EAAR,CAAnB;;AAEA,YAAIl5B,IAAI,KAAK,IAAb,EAAmB;AACjB,cAAIif,QAAQ,GAAGipC,cAAc,CAACloD,IAAI,CAAC2U,aAAN,EAAqBmzC,OAArB,EAA8BC,OAA9B,CAA7B;AACA/nD,UAAAA,IAAI,CAAC2U,aAAL,GAAqBsK,QAArB;AACAjf,UAAAA,IAAI,CAACyd,SAAL,GAAiBwB,QAAjB,CAHiB,CAGU;AAC3B;AACA;AACA;AACA;;AAEAhmB,UAAAA,KAAK,CAACorB,aAAN,GAAsB/wB,MAAM,CAAC,EAAD,EAAK2F,KAAK,CAACorB,aAAX,CAA5B;AACA7C,UAAAA,qBAAqB,CAACvoB,KAAD,EAAQ4J,QAAR,EAAkBmC,WAAlB,CAArB;AACD;AACF,OAfD,CAjIF,CAgJK;;;AAGHkiD,MAAAA,aAAa,GAAG,UAAUjuD,KAAV,EAAiByuD,IAAjB,EAAuBh0D,KAAvB,EAA8B;AAC5CuF,QAAAA,KAAK,CAAC8rB,YAAN,GAAqBqjC,WAAW,CAACnvD,KAAK,CAACorB,aAAP,EAAsBqjC,IAAtB,EAA4Bh0D,KAA5B,CAAhC;;AAEA,YAAIuF,KAAK,CAACoC,SAAV,EAAqB;AACnBpC,UAAAA,KAAK,CAACoC,SAAN,CAAgB0pB,YAAhB,GAA+B9rB,KAAK,CAAC8rB,YAArC;AACD;;AAEDvD,QAAAA,qBAAqB,CAACvoB,KAAD,EAAQ4J,QAAR,EAAkBmC,WAAlB,CAArB;AACD,OARD;;AAUAmiD,MAAAA,uBAAuB,GAAG,UAAUluD,KAAV,EAAiByuD,IAAjB,EAAuB;AAC/CzuD,QAAAA,KAAK,CAAC8rB,YAAN,GAAqB6iC,cAAc,CAAC3uD,KAAK,CAACorB,aAAP,EAAsBqjC,IAAtB,CAAnC;;AAEA,YAAIzuD,KAAK,CAACoC,SAAV,EAAqB;AACnBpC,UAAAA,KAAK,CAACoC,SAAN,CAAgB0pB,YAAhB,GAA+B9rB,KAAK,CAAC8rB,YAArC;AACD;;AAEDvD,QAAAA,qBAAqB,CAACvoB,KAAD,EAAQ4J,QAAR,EAAkBmC,WAAlB,CAArB;AACD,OARD;;AAUAoiD,MAAAA,uBAAuB,GAAG,UAAUnuD,KAAV,EAAiB6uD,OAAjB,EAA0BC,OAA1B,EAAmC;AAC3D9uD,QAAAA,KAAK,CAAC8rB,YAAN,GAAqBmjC,cAAc,CAACjvD,KAAK,CAACorB,aAAP,EAAsByjC,OAAtB,EAA+BC,OAA/B,CAAnC;;AAEA,YAAI9uD,KAAK,CAACoC,SAAV,EAAqB;AACnBpC,UAAAA,KAAK,CAACoC,SAAN,CAAgB0pB,YAAhB,GAA+B9rB,KAAK,CAAC8rB,YAArC;AACD;;AAEDvD,QAAAA,qBAAqB,CAACvoB,KAAD,EAAQ4J,QAAR,EAAkBmC,WAAlB,CAArB;AACD,OARD;;AAUAqiD,MAAAA,cAAc,GAAG,UAAUpuD,KAAV,EAAiB;AAChCuoB,QAAAA,qBAAqB,CAACvoB,KAAD,EAAQ4J,QAAR,EAAkBmC,WAAlB,CAArB;AACD,OAFD;;AAIAsiD,MAAAA,eAAe,GAAG,UAAUgB,kBAAV,EAA8B;AAC9CzB,QAAAA,eAAe,GAAGyB,kBAAlB;AACD,OAFD;;AAIAf,MAAAA,kBAAkB,GAAG,UAAUgB,oBAAV,EAAgC;AACnDzB,QAAAA,iBAAiB,GAAGyB,oBAApB;AACD,OAFD;AAGD;;AAED,aAASC,uBAAT,CAAiCvvD,KAAjC,EAAwC;AACtC,UAAIwvD,SAAS,GAAG3rD,oBAAoB,CAAC7D,KAAD,CAApC;;AAEA,UAAIwvD,SAAS,KAAK,IAAlB,EAAwB;AACtB,eAAO,IAAP;AACD;;AAED,aAAOA,SAAS,CAACzsD,SAAjB;AACD;;AAED,aAAS0sD,4BAAT,CAAsC3sD,QAAtC,EAAgD;AAC9C,aAAO,IAAP;AACD;;AAED,aAAS4sD,0BAAT,GAAsC;AACpC,aAAO9sD,OAAP;AACD;;AAED,aAAS+sD,kBAAT,CAA4BC,cAA5B,EAA4C;AAC1C,UAAIC,uBAAuB,GAAGD,cAAc,CAACC,uBAA7C;AACA,UAAIn7C,sBAAsB,GAAGvd,oBAAoB,CAACud,sBAAlD;AACA,aAAO7N,eAAe,CAAC;AACrBipD,QAAAA,UAAU,EAAEF,cAAc,CAACE,UADN;AAErBC,QAAAA,OAAO,EAAEH,cAAc,CAACG,OAFH;AAGrBC,QAAAA,mBAAmB,EAAEJ,cAAc,CAACI,mBAHf;AAIrBC,QAAAA,cAAc,EAAEL,cAAc,CAACK,cAJV;AAKrBnC,QAAAA,iBAAiB,EAAEA,iBALE;AAMrBC,QAAAA,2BAA2B,EAAEA,2BANR;AAOrBC,QAAAA,2BAA2B,EAAEA,2BAPR;AAQrBC,QAAAA,aAAa,EAAEA,aARM;AASrBC,QAAAA,uBAAuB,EAAEA,uBATJ;AAUrBC,QAAAA,uBAAuB,EAAEA,uBAVJ;AAWrBE,QAAAA,eAAe,EAAEA,eAXI;AAYrBC,QAAAA,kBAAkB,EAAEA,kBAZC;AAarBF,QAAAA,cAAc,EAAEA,cAbK;AAcrB8B,QAAAA,oBAAoB,EAAEx7C,sBAdD;AAerB66C,QAAAA,uBAAuB,EAAEA,uBAfJ;AAgBrBM,QAAAA,uBAAuB,EAAEA,uBAAuB,IAAIJ,4BAhB/B;AAiBrB;AACA9E,QAAAA,2BAA2B,EAAGA,2BAlBT;AAmBrBT,QAAAA,eAAe,EAAGA,eAnBG;AAoBrBI,QAAAA,YAAY,EAAGA,YApBM;AAqBrBd,QAAAA,iBAAiB,EAAGA,iBArBC;AAsBrB;AACA2G,QAAAA,eAAe,EAAGT,0BAvBG;AAwBrB;AACA;AACAU,QAAAA,iBAAiB,EAAEhD;AA1BE,OAAD,CAAtB;AA4BD;;AAED,QAAIiD,GAAG,GAAGt5D,KAAK,CAACu5D,YAAhB,CAtgiBc,CAsgiBgB;;AAE9B,QAAIC,kBAAkB,GAAG;AACvBj/C,MAAAA,cAAc,EAAE,YAAY;AAC1B,eAAO,IAAP;AACD;AAHsB,KAAzB;;AAMA,aAASk/C,MAAT,CAAgBn/C,IAAhB,EAAsB;AACpB,UAAIA,IAAI,CAACsB,QAAT,EAAmB;AACjB;AACA;AACA;AACA,eAAO,IAAP;AACD;;AAED,cAAQtB,IAAI,CAACrS,GAAb;AACE,aAAK,MAAL;AACE,iBAAOqS,IAAI,CAAC8B,IAAZ;;AAEF,aAAK,UAAL;AACE;AACE;AACA;AACA;AACA,gBAAIs9C,WAAW,GAAGp/C,IAAI,CAACnY,KAAvB;AAAA,gBACIuO,QAAQ,GAAGgpD,WAAW,CAAChpD,QAD3B;AAAA,gBAEIvO,KAAK,GAAGa,6BAA6B,CAAC02D,WAAD,EAAc,CAAC,UAAD,CAAd,CAFzC;AAGA;;;AAGA,gBAAIC,gBAAgB,GAAG,IAAvB;;AAEA,gBAAIr/C,IAAI,CAAC5J,QAAL,IAAiB4J,IAAI,CAAC5J,QAAL,CAAchQ,MAAnC,EAA2C;AACzC,mBAAK,IAAI0B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkY,IAAI,CAAC5J,QAAL,CAAchQ,MAAlC,EAA0C0B,CAAC,EAA3C,EAA+C;AAC7C,oBAAIw3D,aAAa,GAAGH,MAAM,CAACn/C,IAAI,CAAC5J,QAAL,CAActO,CAAd,CAAD,CAA1B;;AAEA,oBAAIw3D,aAAa,KAAK,IAAtB,EAA4B;AAC1B,sBAAID,gBAAgB,KAAK,IAAzB,EAA+B;AAC7BA,oBAAAA,gBAAgB,GAAG,CAACC,aAAD,CAAnB;AACD,mBAFD,MAEO;AACLD,oBAAAA,gBAAgB,CAACnhD,IAAjB,CAAsBohD,aAAtB;AACD;AACF;AACF;AACF;;AAED,gBAAIC,IAAI,GAAG;AACT9xD,cAAAA,IAAI,EAAEuS,IAAI,CAACvS,IADF;AAET5F,cAAAA,KAAK,EAAEA,KAFE;AAGTuO,cAAAA,QAAQ,EAAEipD;AAHD,aAAX;AAKAl3D,YAAAA,MAAM,CAACC,cAAP,CAAsBm3D,IAAtB,EAA4B,UAA5B,EAAwC;AACtCn2D,cAAAA,KAAK,EAAEoC,MAAM,CAACC,GAAP,CAAW,iBAAX;AAD+B,aAAxC;AAGA,mBAAO8zD,IAAP;AACD;;AAEH;AACE,gBAAM,IAAI1tD,KAAJ,CAAU,qCAAqCmO,IAAI,CAACrS,GAApD,CAAN;AA3CJ;AA6CD;;AAED,aAAS6xD,cAAT,CAAwB3uD,IAAxB,EAA8B;AAC5B,UAAI,CAACA,IAAL,EAAW;AACT,eAAO,IAAP;AACD;;AAED,UAAIuF,QAAQ,GAAGqpD,oBAAoB,CAAC5uD,IAAD,CAAnC;;AAEA,UAAIuF,QAAQ,CAAChQ,MAAT,KAAoB,CAAxB,EAA2B;AACzB,eAAO,IAAP;AACD,OAFD,MAEO,IAAIgQ,QAAQ,CAAChQ,MAAT,KAAoB,CAAxB,EAA2B;AAChC,eAAOs5D,MAAM,CAACtpD,QAAQ,CAAC,CAAD,CAAT,CAAb;AACD;;AAED,aAAOupD,OAAO,CAACvpD,QAAQ,CAAClP,GAAT,CAAaw4D,MAAb,CAAD,CAAd;AACD;;AAED,aAASD,oBAAT,CAA8BG,eAA9B,EAA+C;AAC7C,UAAIpzC,KAAK,GAAG,EAAZ;AACA,UAAI3b,IAAI,GAAG+uD,eAAX;;AAEA,aAAO/uD,IAAI,IAAI,IAAf,EAAqB;AACnB2b,QAAAA,KAAK,CAACtO,IAAN,CAAWrN,IAAX;AACAA,QAAAA,IAAI,GAAGA,IAAI,CAACwB,OAAZ;AACD;;AAED,aAAOma,KAAP;AACD;;AAED,aAASmzC,OAAT,CAAiBE,GAAjB,EAAsB;AACpB,UAAIC,MAAM,GAAG,EAAb;AACA,UAAIh5D,KAAK,GAAG,CAAC;AACXgB,QAAAA,CAAC,EAAE,CADQ;AAEX0kB,QAAAA,KAAK,EAAEqzC;AAFI,OAAD,CAAZ;;AAKA,aAAO/4D,KAAK,CAACV,MAAb,EAAqB;AACnB,YAAI25D,CAAC,GAAGj5D,KAAK,CAACigB,GAAN,EAAR;;AAEA,eAAOg5C,CAAC,CAACj4D,CAAF,GAAMi4D,CAAC,CAACvzC,KAAF,CAAQpmB,MAArB,EAA6B;AAC3B,cAAI45D,EAAE,GAAGD,CAAC,CAACvzC,KAAF,CAAQuzC,CAAC,CAACj4D,CAAV,CAAT;AACAi4D,UAAAA,CAAC,CAACj4D,CAAF,IAAO,CAAP;;AAEA,cAAIgL,OAAO,CAACktD,EAAD,CAAX,EAAiB;AACfl5D,YAAAA,KAAK,CAACoX,IAAN,CAAW6hD,CAAX;AACAj5D,YAAAA,KAAK,CAACoX,IAAN,CAAW;AACTpW,cAAAA,CAAC,EAAE,CADM;AAET0kB,cAAAA,KAAK,EAAEwzC;AAFE,aAAX;AAIA;AACD;;AAEDF,UAAAA,MAAM,CAAC5hD,IAAP,CAAY8hD,EAAZ;AACD;AACF;;AAED,aAAOF,MAAP;AACD;;AAED,aAASJ,MAAT,CAAgB7uD,IAAhB,EAAsB;AACpB,UAAIA,IAAI,IAAI,IAAZ,EAAkB;AAChB,eAAO,IAAP;AACD;;AAED,cAAQA,IAAI,CAAClD,GAAb;AACE,aAAK1D,QAAL;AACE,iBAAOu1D,cAAc,CAAC3uD,IAAI,CAACuB,KAAN,CAArB;;AAEF,aAAKlI,UAAL;AACE,iBAAOs1D,cAAc,CAAC3uD,IAAI,CAACuB,KAAN,CAArB;;AAEF,aAAKrI,cAAL;AACE,iBAAO;AACLk2D,YAAAA,QAAQ,EAAE,WADL;AAELxyD,YAAAA,IAAI,EAAEoD,IAAI,CAACpD,IAFN;AAGL5F,YAAAA,KAAK,EAAEmB,MAAM,CAAC,EAAD,EAAK6H,IAAI,CAACkpB,aAAV,CAHR;AAILtoB,YAAAA,QAAQ,EAAEZ,IAAI,CAACa,SAJV;AAKLwuD,YAAAA,QAAQ,EAAEV,cAAc,CAAC3uD,IAAI,CAACuB,KAAN;AALnB,WAAP;;AAQF,aAAKtI,iBAAL;AACA,aAAKe,mBAAL;AACE,iBAAO;AACLo1D,YAAAA,QAAQ,EAAE,WADL;AAELxyD,YAAAA,IAAI,EAAEoD,IAAI,CAACpD,IAFN;AAGL5F,YAAAA,KAAK,EAAEmB,MAAM,CAAC,EAAD,EAAK6H,IAAI,CAACkpB,aAAV,CAHR;AAILtoB,YAAAA,QAAQ,EAAE,IAJL;AAKLyuD,YAAAA,QAAQ,EAAEV,cAAc,CAAC3uD,IAAI,CAACuB,KAAN;AALnB,WAAP;;AAQF,aAAKjI,aAAL;AACE;AACE,mBAAO;AACL81D,cAAAA,QAAQ,EAAE,MADL;AAELxyD,cAAAA,IAAI,EAAEoD,IAAI,CAACpD,IAFN;AAGL5F,cAAAA,KAAK,EAAEmB,MAAM,CAAC,EAAD,EAAK6H,IAAI,CAACkpB,aAAV,CAHR;AAILtoB,cAAAA,QAAQ,EAAE,IAJL;AAKL;AACAyuD,cAAAA,QAAQ,EAAEP,OAAO,CAACF,oBAAoB,CAAC5uD,IAAI,CAACuB,KAAN,CAApB,CAAiClL,GAAjC,CAAqCw4D,MAArC,CAAD;AANZ,aAAP;AAQD;;AAEH,aAAKt1D,QAAL;AACE,iBAAOyG,IAAI,CAACa,SAAL,CAAeoQ,IAAtB;;AAEF,aAAKzX,QAAL;AACA,aAAKG,eAAL;AACA,aAAKD,eAAL;AACA,aAAKD,IAAL;AACA,aAAKI,QAAL;AACA,aAAKD,UAAL;AACA,aAAKG,aAAL;AACA,aAAKG,wBAAL;AACA,aAAKG,cAAL;AACE,iBAAOs0D,cAAc,CAAC3uD,IAAI,CAACuB,KAAN,CAArB;;AAEF;AACE,gBAAM,IAAIP,KAAJ,CAAU,6DAA6DhB,IAAI,CAAClD,GAA5E,CAAN;AArDJ;AAuDD;;AAED,QAAIwyD,iBAAiB,GAAG,IAAIhzC,GAAJ,CAAQ,CAACrjB,iBAAD,EAAoBC,cAApB,EAAoCI,aAApC,EAAmDM,UAAnD,EAA+DG,aAA/D,EAA8EC,mBAA9E,EAAmG;AACnIZ,IAAAA,QADgC,CAAR,CAAxB;;AAGA,aAASm2D,WAAT,CAAqB3tD,MAArB,EAA6B;AAC3B,UAAI2D,QAAQ,GAAG,EAAf;AACA,UAAIiqD,YAAY,GAAG5tD,MAAnB;AACA,UAAI5B,IAAI,GAAGwvD,YAAX;;AAEA,UAAIxvD,IAAI,CAACuB,KAAL,KAAe,IAAnB,EAAyB;AACvB,eAAOgE,QAAP;AACD;;AAEDvF,MAAAA,IAAI,CAACuB,KAAL,CAAWlB,MAAX,GAAoBL,IAApB;AACAA,MAAAA,IAAI,GAAGA,IAAI,CAACuB,KAAZ;;AAEAu2C,MAAAA,KAAK,EAAE,OAAO,IAAP,EAAa;AAClB,YAAI2X,OAAO,GAAG,KAAd;;AAEA,YAAIH,iBAAiB,CAAC95C,GAAlB,CAAsBxV,IAAI,CAAClD,GAA3B,CAAJ,EAAqC;AACnCyI,UAAAA,QAAQ,CAAC8H,IAAT,CAAcqiD,SAAS,CAAC1vD,IAAD,CAAvB;AACD,SAFD,MAEO,IAAIA,IAAI,CAAClD,GAAL,KAAavD,QAAjB,EAA2B;AAChC;AACEmlB,YAAAA,uBAAuB,CAAC1e,IAAI,CAACkpB,aAAN,EAAqB,eAArB,CAAvB;AACD;AAED3jB,UAAAA,QAAQ,CAAC8H,IAAT,CAAc,KAAKrN,IAAI,CAACkpB,aAAxB;AACD,SANM,MAMA;AACLumC,UAAAA,OAAO,GAAG,IAAV;AACD;;AAED,YAAIA,OAAO,IAAIzvD,IAAI,CAACuB,KAAL,KAAe,IAA9B,EAAoC;AAClCvB,UAAAA,IAAI,CAACuB,KAAL,CAAWlB,MAAX,GAAoBL,IAApB;AACAA,UAAAA,IAAI,GAAGA,IAAI,CAACuB,KAAZ;AACA;AACD;;AAED,eAAOvB,IAAI,CAACwB,OAAL,KAAiB,IAAxB,EAA8B;AAC5B,cAAIxB,IAAI,CAACK,MAAL,KAAgBmvD,YAApB,EAAkC;AAChC,kBAAM1X,KAAN;AACD;;AAED93C,UAAAA,IAAI,GAAGA,IAAI,CAACK,MAAZ;AACD;;AAEDL,QAAAA,IAAI,CAACwB,OAAL,CAAanB,MAAb,GAAsBL,IAAI,CAACK,MAA3B;AACAL,QAAAA,IAAI,GAAGA,IAAI,CAACwB,OAAZ;AACD;;AAED,aAAO+D,QAAP;AACD;;AAED,QAAIoqD,iBAAiB,GAAG,aAAa,YAAY;AAC/C,UAAIC,MAAM,GAAGD,iBAAiB,CAACj5D,SAA/B;;AAEAk5D,MAAAA,MAAM,CAACC,aAAP,GAAuB,SAASA,aAAT,GAAyB;AAC9C;AACA,YAAI/xD,KAAK,GAAGmD,6BAA6B,CAAC,KAAKmlD,MAAN,CAAzC;;AAEA,YAAItoD,KAAK,KAAK,IAAd,EAAoB;AAClB,gBAAM,IAAIkD,KAAJ,CAAU,wEAAwE,iDAAlF,CAAN;AACD;;AAED,eAAOlD,KAAP;AACD,OATD;;AAWA,eAAS6xD,iBAAT,CAA2B7xD,KAA3B,EAAkC;AAChC,YAAI,CAACwxD,iBAAiB,CAAC95C,GAAlB,CAAsB1X,KAAK,CAAChB,GAA5B,CAAL,EAAuC;AACrC,gBAAM,IAAIkE,KAAJ,CAAU,qEAAqElD,KAAK,CAAChB,GAA3E,GAAiF,KAAjF,GAAyF,kCAAnG,CAAN;AACD;;AAED,aAAKspD,MAAL,GAActoD,KAAd;AACD,OApB8C,CAsB/C;;;AACA8xD,MAAAA,MAAM,CAACE,IAAP,GAAc,SAASA,IAAT,CAAcC,SAAd,EAAyB;AACrC,eAAOC,SAAS,CAAC,KAAKC,OAAL,CAAaF,SAAb,EAAwB;AACvCG,UAAAA,IAAI,EAAE;AADiC,SAAxB,CAAD,EAEZ,gCAAgCH,SAAS,CAAC/jC,QAAV,EAFpB,CAAhB;AAGD,OAJD;;AAMA4jC,MAAAA,MAAM,CAACO,UAAP,GAAoB,SAASA,UAAT,CAAoBvzD,IAApB,EAA0B;AAC5C,eAAOozD,SAAS,CAAC,KAAKI,aAAL,CAAmBxzD,IAAnB,EAAyB;AACxCszD,UAAAA,IAAI,EAAE;AADkC,SAAzB,CAAD,EAEZ,wBAAwBrzD,wBAAwB,CAACD,IAAD,CAAxB,IAAkC,SAA1D,IAAuE,IAF3D,CAAhB;AAGD,OAJD;;AAMAgzD,MAAAA,MAAM,CAACS,WAAP,GAAqB,SAASA,WAAT,CAAqBr5D,KAArB,EAA4B;AAC/C,eAAOg5D,SAAS,CAAC,KAAKM,cAAL,CAAoBt5D,KAApB,EAA2B;AAC1Ck5D,UAAAA,IAAI,EAAE;AADoC,SAA3B,CAAD,EAEZ,iBAAiBK,IAAI,CAACC,SAAL,CAAex5D,KAAf,CAFL,CAAhB;AAGD,OAJD;;AAMA44D,MAAAA,MAAM,CAACK,OAAP,GAAiB,SAASA,OAAT,CAAiBF,SAAjB,EAA4B;AAC3C,YAAIjzB,OAAO,GAAGxnC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiB4Q,SAAzC,GAAqD5Q,SAAS,CAAC,CAAD,CAA9D,GAAoE,IAAlF;AACA,eAAOm7D,QAAQ,CAAC,IAAD,EAAOV,SAAP,EAAkBjzB,OAAlB,CAAf;AACD,OAHD;;AAKA8yB,MAAAA,MAAM,CAACQ,aAAP,GAAuB,SAASA,aAAT,CAAuBxzD,IAAvB,EAA6B;AAClD,YAAIkgC,OAAO,GAAGxnC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiB4Q,SAAzC,GAAqD5Q,SAAS,CAAC,CAAD,CAA9D,GAAoE,IAAlF;AACA,eAAOm7D,QAAQ,CAAC,IAAD,EAAO,UAAUzwD,IAAV,EAAgB;AACpC,iBAAOA,IAAI,CAACpD,IAAL,KAAcA,IAArB;AACD,SAFc,EAEZkgC,OAFY,CAAf;AAGD,OALD;;AAOA8yB,MAAAA,MAAM,CAACU,cAAP,GAAwB,SAASA,cAAT,CAAwBt5D,KAAxB,EAA+B;AACrD,YAAI8lC,OAAO,GAAGxnC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiB4Q,SAAzC,GAAqD5Q,SAAS,CAAC,CAAD,CAA9D,GAAoE,IAAlF;AACA,eAAOm7D,QAAQ,CAAC,IAAD,EAAO,UAAUzwD,IAAV,EAAgB;AACpC,iBAAOA,IAAI,CAAChJ,KAAL,IAAc05D,UAAU,CAAC1wD,IAAI,CAAChJ,KAAN,EAAaA,KAAb,CAA/B;AACD,SAFc,EAEZ8lC,OAFY,CAAf;AAGD,OALD;;AAOArlC,MAAAA,YAAY,CAACk4D,iBAAD,EAAoB,CAAC;AAC/Bn4D,QAAAA,GAAG,EAAE,UAD0B;AAE/BY,QAAAA,GAAG,EAAE,YAAY;AACf,cAAI,KAAKguD,MAAL,CAAYtpD,GAAZ,KAAoBxD,aAAxB,EAAuC;AACrC,mBAAO4V,iBAAiB,CAAC,KAAKk3C,MAAL,CAAYvlD,SAAb,CAAxB;AACD,WAFD,MAEO;AACL,mBAAO,KAAKulD,MAAL,CAAYvlD,SAAnB;AACD;AACF;AAR8B,OAAD,EAS7B;AACDrJ,QAAAA,GAAG,EAAE,MADJ;AAEDY,QAAAA,GAAG,EAAE,YAAY;AACf,iBAAO,KAAKguD,MAAL,CAAYxpD,IAAnB;AACD;AAJA,OAT6B,EAc7B;AACDpF,QAAAA,GAAG,EAAE,OADJ;AAEDY,QAAAA,GAAG,EAAE,YAAY;AACf,iBAAO,KAAKy3D,aAAL,GAAqB3mC,aAA5B;AACD;AAJA,OAd6B,EAmB7B;AACD1xB,QAAAA,GAAG,EAAE,QADJ;AAEDY,QAAAA,GAAG,EAAE,YAAY;AACf,cAAIwJ,MAAM,GAAG,KAAKwkD,MAAL,CAAY/lD,MAAzB;;AAEA,iBAAOuB,MAAM,KAAK,IAAlB,EAAwB;AACtB,gBAAI0tD,iBAAiB,CAAC95C,GAAlB,CAAsB5T,MAAM,CAAC9E,GAA7B,CAAJ,EAAuC;AACrC,kBAAI8E,MAAM,CAAC9E,GAAP,KAAe1D,QAAnB,EAA6B;AAC3B;AACA;AACA,oBAAIm2D,WAAW,CAAC3tD,MAAD,CAAX,CAAoBrM,MAApB,GAA6B,CAAjC,EAAoC;AAClC,yBAAO,IAAP;AACD;AACF;;AAED,qBAAOm6D,SAAS,CAAC9tD,MAAD,CAAhB;AACD;;AAEDA,YAAAA,MAAM,GAAGA,MAAM,CAACvB,MAAhB;AACD;;AAED,iBAAO,IAAP;AACD;AAtBA,OAnB6B,EA0C7B;AACD7I,QAAAA,GAAG,EAAE,UADJ;AAEDY,QAAAA,GAAG,EAAE,YAAY;AACf,iBAAOm3D,WAAW,CAAC,KAAKM,aAAL,EAAD,CAAlB;AACD;AAJA,OA1C6B,CAApB,CAAZ;;AAiDA,aAAOF,iBAAP;AACD,KA9GoC,EAArC;;AAgHA,aAASc,QAAT,CAAkBnrD,IAAlB,EAAwByqD,SAAxB,EAAmCjzB,OAAnC,EAA4C;AAC1C,UAAIozB,IAAI,GAAGpzB,OAAO,GAAGA,OAAO,CAACozB,IAAX,GAAkB,IAApC;AACA,UAAIS,OAAO,GAAG,EAAd;;AAEA,UAAIZ,SAAS,CAACzqD,IAAD,CAAb,EAAqB;AACnBqrD,QAAAA,OAAO,CAACtjD,IAAR,CAAa/H,IAAb;;AAEA,YAAI,CAAC4qD,IAAL,EAAW;AACT,iBAAOS,OAAP;AACD;AACF;;AAEDrrD,MAAAA,IAAI,CAACC,QAAL,CAAcqW,OAAd,CAAsB,UAAUra,KAAV,EAAiB;AACrC,YAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B;AACD;;AAEDovD,QAAAA,OAAO,CAACtjD,IAAR,CAAa1W,KAAb,CAAmBg6D,OAAnB,EAA4BF,QAAQ,CAAClvD,KAAD,EAAQwuD,SAAR,EAAmBjzB,OAAnB,CAApC;AACD,OAND;AAOA,aAAO6zB,OAAP;AACD;;AAED,aAASX,SAAT,CAAmBY,GAAnB,EAAwB/6C,OAAxB,EAAiC;AAC/B,UAAI+6C,GAAG,CAACr7D,MAAJ,KAAe,CAAnB,EAAsB;AACpB,eAAOq7D,GAAG,CAAC,CAAD,CAAV;AACD;;AAED,UAAIn+C,MAAM,GAAGm+C,GAAG,CAACr7D,MAAJ,KAAe,CAAf,GAAmB,qBAAnB,GAA2C,0BAA0Bq7D,GAAG,CAACr7D,MAA9B,GAAuC,aAA/F;AACA,YAAM,IAAIyL,KAAJ,CAAUyR,MAAM,GAAGoD,OAAnB,CAAN;AACD;;AAED,aAAS66C,UAAT,CAAoB15D,KAApB,EAA2B65D,MAA3B,EAAmC;AACjC,WAAK,IAAIr5D,GAAT,IAAgBq5D,MAAhB,EAAwB;AACtB,YAAI75D,KAAK,CAACQ,GAAD,CAAL,KAAeq5D,MAAM,CAACr5D,GAAD,CAAzB,EAAgC;AAC9B,iBAAO,KAAP;AACD;AACF;;AAED,aAAO,IAAP;AACD;;AAED,aAASsuD,kBAAT,CAA4BnwC,OAA5B,EAAqC;AACnC;AACA;AACA/f,MAAAA,KAAK,CAAC+f,OAAD,CAAL;AACD;;AAED,aAAS0kB,MAAT,CAAgBtlB,OAAhB,EAAyB+nB,OAAzB,EAAkC;AAChC,UAAI1tB,cAAc,GAAGi/C,kBAAkB,CAACj/C,cAAxC;AACA,UAAI0hD,YAAY,GAAG,KAAnB;AACA,UAAIlH,YAAY,GAAG,KAAnB;AACA,UAAImH,0BAA0B,GAAG,IAAjC;;AAEA,UAAI,OAAOj0B,OAAP,KAAmB,QAAnB,IAA+BA,OAAO,KAAK,IAA/C,EAAqD;AACnD,YAAI,OAAOA,OAAO,CAAC1tB,cAAf,KAAkC,UAAtC,EAAkD;AAChDA,UAAAA,cAAc,GAAG0tB,OAAO,CAAC1tB,cAAzB;AACD;;AAED,YAAI0tB,OAAO,CAACk0B,qBAAR,KAAkC,IAAtC,EAA4C;AAC1CF,UAAAA,YAAY,GAAG,IAAf;AACD;;AAED,YAAIh0B,OAAO,CAACm0B,mBAAR,KAAgC,IAApC,EAA0C;AACxCrH,UAAAA,YAAY,GAAG,IAAf;AACD;AACF;;AAED,UAAI75C,SAAS,GAAG;AACdxK,QAAAA,QAAQ,EAAE,EADI;AAEd6J,QAAAA,cAAc,EAAEA,cAFF;AAGdtS,QAAAA,GAAG,EAAE;AAHS,OAAhB;AAKA,UAAIwI,IAAI,GAAGgmD,eAAe,CAACv7C,SAAD,EAAY+gD,YAAY,GAAGx4C,cAAH,GAAoBD,UAA5C,EAAwD,IAAxD,EAA8DuxC,YAA9D,EAA4EmH,0BAA5E,EAAwG,EAAxG,EAA4GjL,kBAA5G,CAA1B;;AAEA,UAAIxgD,IAAI,IAAI,IAAZ,EAAkB;AAChB,cAAM,IAAItE,KAAJ,CAAU,sBAAV,CAAN;AACD;;AAEDqnD,MAAAA,eAAe,CAACtzC,OAAD,EAAUzP,IAAV,EAAgB,IAAhB,EAAsB,IAAtB,CAAf;AACA,UAAI4rD,KAAK,GAAG;AACVC,QAAAA,UAAU,EAAEp8D,SADF;AAEVuQ,QAAAA,IAAI,EAAEY,SAFI;AAGV;AACA;AACAooD,QAAAA,MAAM,EAAE,YAAY;AAClB,cAAIhpD,IAAI,IAAI,IAAR,IAAgBA,IAAI,CAAC5E,OAAL,IAAgB,IAAhC,IAAwCqP,SAAS,IAAI,IAAzD,EAA+D;AAC7D,mBAAO,IAAP;AACD;;AAED,cAAIA,SAAS,CAACxK,QAAV,CAAmBhQ,MAAnB,KAA8B,CAAlC,EAAqC;AACnC,mBAAO,IAAP;AACD;;AAED,cAAIwa,SAAS,CAACxK,QAAV,CAAmBhQ,MAAnB,KAA8B,CAAlC,EAAqC;AACnC,mBAAO+4D,MAAM,CAACv+C,SAAS,CAACxK,QAAV,CAAmB,CAAnB,CAAD,CAAb;AACD;;AAED,cAAIwK,SAAS,CAACxK,QAAV,CAAmBhQ,MAAnB,KAA8B,CAA9B,IAAmCwa,SAAS,CAACxK,QAAV,CAAmB,CAAnB,EAAsBkL,QAAtB,KAAmC,IAAtE,IAA8EV,SAAS,CAACxK,QAAV,CAAmB,CAAnB,EAAsBkL,QAAtB,KAAmC,KAArH,EAA4H;AAC1H;AACA;AACA,mBAAO69C,MAAM,CAACv+C,SAAS,CAACxK,QAAV,CAAmB,CAAnB,CAAD,CAAb;AACD;;AAED,cAAIipD,gBAAgB,GAAG,IAAvB;;AAEA,cAAIz+C,SAAS,CAACxK,QAAV,IAAsBwK,SAAS,CAACxK,QAAV,CAAmBhQ,MAA7C,EAAqD;AACnD,iBAAK,IAAI0B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8Y,SAAS,CAACxK,QAAV,CAAmBhQ,MAAvC,EAA+C0B,CAAC,EAAhD,EAAoD;AAClD,kBAAIw3D,aAAa,GAAGH,MAAM,CAACv+C,SAAS,CAACxK,QAAV,CAAmBtO,CAAnB,CAAD,CAA1B;;AAEA,kBAAIw3D,aAAa,KAAK,IAAtB,EAA4B;AAC1B,oBAAID,gBAAgB,KAAK,IAAzB,EAA+B;AAC7BA,kBAAAA,gBAAgB,GAAG,CAACC,aAAD,CAAnB;AACD,iBAFD,MAEO;AACLD,kBAAAA,gBAAgB,CAACnhD,IAAjB,CAAsBohD,aAAtB;AACD;AACF;AACF;AACF;;AAED,iBAAOD,gBAAP;AACD,SAzCS;AA0CVK,QAAAA,MAAM,EAAE,YAAY;AAClB,cAAIvpD,IAAI,IAAI,IAAR,IAAgBA,IAAI,CAAC5E,OAAL,IAAgB,IAApC,EAA0C;AACxC,mBAAO,IAAP;AACD;;AAED,iBAAOmuD,MAAM,CAACvpD,IAAI,CAAC5E,OAAN,CAAb;AACD,SAhDS;AAiDVggB,QAAAA,MAAM,EAAE,UAAU0wC,UAAV,EAAsB;AAC5B,cAAI9rD,IAAI,IAAI,IAAR,IAAgBA,IAAI,CAAC5E,OAAL,IAAgB,IAApC,EAA0C;AACxC;AACD;;AAED2nD,UAAAA,eAAe,CAAC+I,UAAD,EAAa9rD,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,CAAf;AACD,SAvDS;AAwDV+rD,QAAAA,OAAO,EAAE,YAAY;AACnB,cAAI/rD,IAAI,IAAI,IAAR,IAAgBA,IAAI,CAAC5E,OAAL,IAAgB,IAApC,EAA0C;AACxC;AACD;;AAED2nD,UAAAA,eAAe,CAAC,IAAD,EAAO/iD,IAAP,EAAa,IAAb,EAAmB,IAAnB,CAAf;AACAyK,UAAAA,SAAS,GAAG,IAAZ;AACAzK,UAAAA,IAAI,GAAG,IAAP;AACD,SAhES;AAiEVgsD,QAAAA,WAAW,EAAE,YAAY;AACvB,cAAIhsD,IAAI,IAAI,IAAR,IAAgBA,IAAI,CAAC5E,OAAL,IAAgB,IAApC,EAA0C;AACxC,mBAAO,IAAP;AACD;;AAED,iBAAO8qD,qBAAqB,CAAClmD,IAAD,CAA5B;AACD,SAvES;AAwEVisD,QAAAA,kBAAkB,EAAE9M;AAxEV,OAAZ;AA0EAntD,MAAAA,MAAM,CAACC,cAAP,CAAsB25D,KAAtB,EAA6B,MAA7B,EAAqC;AACnC95D,QAAAA,YAAY,EAAE,IADqB;AAEnCD,QAAAA,UAAU,EAAE,IAFuB;AAGnCiB,QAAAA,GAAG,EAAE,YAAY;AACf,cAAIkN,IAAI,KAAK,IAAb,EAAmB;AACjB,kBAAM,IAAItE,KAAJ,CAAU,+CAAV,CAAN;AACD;;AAED,cAAIuE,QAAQ,GAAGgqD,WAAW,CAACjqD,IAAI,CAAC5E,OAAN,CAA1B;;AAEA,cAAI6E,QAAQ,CAAChQ,MAAT,KAAoB,CAAxB,EAA2B;AACzB,kBAAM,IAAIyL,KAAJ,CAAU,+CAAV,CAAN;AACD,WAFD,MAEO,IAAIuE,QAAQ,CAAChQ,MAAT,KAAoB,CAAxB,EAA2B;AAChC;AACA,mBAAOgQ,QAAQ,CAAC,CAAD,CAAf;AACD,WAHM,MAGA;AACL;AACA;AACA,mBAAOmqD,SAAS,CAACpqD,IAAI,CAAC5E,OAAN,CAAhB;AACD;AACF;AApBkC,OAArC;AAsBA,aAAOwwD,KAAP;AACD;;AAED,QAAIM,cAAc,GAAG,IAAIxiD,OAAJ,EAArB;;AAEA,aAAS0gD,SAAT,CAAmB5xD,KAAnB,EAA0B;AACxB,UAAI2zD,OAAO,GAAGD,cAAc,CAACp5D,GAAf,CAAmB0F,KAAnB,CAAd;;AAEA,UAAI2zD,OAAO,KAAKvrD,SAAZ,IAAyBpI,KAAK,CAACoC,SAAN,KAAoB,IAAjD,EAAuD;AACrDuxD,QAAAA,OAAO,GAAGD,cAAc,CAACp5D,GAAf,CAAmB0F,KAAK,CAACoC,SAAzB,CAAV;AACD;;AAED,UAAIuxD,OAAO,KAAKvrD,SAAhB,EAA2B;AACzBurD,QAAAA,OAAO,GAAG,IAAI9B,iBAAJ,CAAsB7xD,KAAtB,CAAV;AACA0zD,QAAAA,cAAc,CAACl5D,GAAf,CAAmBwF,KAAnB,EAA0B2zD,OAA1B;AACD;;AAED,aAAOA,OAAP;AACD,KAjijBa,CAiijBZ;;;AAGFhE,IAAAA,kBAAkB,CAAC;AACjBE,MAAAA,uBAAuB,EAAE,YAAY;AACnC,cAAM,IAAI3sD,KAAJ,CAAU,yDAAV,CAAN;AACD,OAHgB;AAIjB4sD,MAAAA,UAAU,EAAG,CAJI;AAKjBC,MAAAA,OAAO,EAAE3C,YALQ;AAMjB4C,MAAAA,mBAAmB,EAAE;AANJ,KAAD,CAAlB;AASA4D,IAAAA,OAAO,CAACP,UAAR,GAAqBp8D,SAArB;AACA28D,IAAAA,OAAO,CAACvD,GAAR,GAAcA,GAAd;AACAuD,IAAAA,OAAO,CAACr3B,MAAR,GAAiBA,MAAjB;AACAq3B,IAAAA,OAAO,CAACC,uBAAR,GAAkCpN,cAAlC;AACG,GAjjjBD;AAkjjBD","sourcesContent":["/**\n * @license React\n * react-test-renderer.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function() {\n'use strict';\n\nvar React = require('react');\nvar Scheduler = require('scheduler/unstable_mock');\nvar Scheduler$1 = require('scheduler');\n\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\n// by calls to these methods by a Babel plugin.\n//\n// In PROD (or in packages without access to React internals),\n// they are left as they are instead.\n\nfunction warn(format) {\n  {\n    {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      printWarning('warn', format, args);\n    }\n  }\n}\nfunction error(format) {\n  {\n    {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      printWarning('error', format, args);\n    }\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n    var argsWithFormat = args.map(function (item) {\n      return String(item);\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar assign = Object.assign;\n\n/**\n * `ReactInstanceMap` maintains a mapping from a public facing stateful\n * instance (key) and the internal representation (value). This allows public\n * methods to accept the user facing instance as an argument and map them back\n * to internal methods.\n *\n * Note that this module is currently shared and assumed to be stateless.\n * If this becomes an actual Map, that will break.\n */\nfunction get(key) {\n  return key._reactInternals;\n}\nfunction set(key, value) {\n  key._reactInternals = value;\n}\n\nvar enableSchedulingProfiler = false;\nvar enableProfilerTimer = true;\nvar enableProfilerCommitHooks = true;\nvar enableLazyElements = false;\nvar warnAboutStringRefs = false;\nvar enableSuspenseAvoidThisFallback = false;\nvar enableNewReconciler = false;\nvar enableLazyContextPropagation = false;\nvar enableLegacyHidden = false;\n\nvar FunctionComponent = 0;\nvar ClassComponent = 1;\nvar IndeterminateComponent = 2; // Before we know whether it is function or class\n\nvar HostRoot = 3; // Root of a host tree. Could be nested inside another node.\n\nvar HostPortal = 4; // A subtree. Could be an entry point to a different renderer.\n\nvar HostComponent = 5;\nvar HostText = 6;\nvar Fragment = 7;\nvar Mode = 8;\nvar ContextConsumer = 9;\nvar ContextProvider = 10;\nvar ForwardRef = 11;\nvar Profiler = 12;\nvar SuspenseComponent = 13;\nvar MemoComponent = 14;\nvar SimpleMemoComponent = 15;\nvar LazyComponent = 16;\nvar IncompleteClassComponent = 17;\nvar DehydratedFragment = 18;\nvar SuspenseListComponent = 19;\nvar ScopeComponent = 21;\nvar OffscreenComponent = 22;\nvar LegacyHiddenComponent = 23;\nvar CacheComponent = 24;\nvar TracingMarkerComponent = 25;\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types.\nvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\nvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\nvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nvar REACT_PROVIDER_TYPE = Symbol.for('react.provider');\nvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\nvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nvar REACT_MEMO_TYPE = Symbol.for('react.memo');\nvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\nvar REACT_SCOPE_TYPE = Symbol.for('react.scope');\nvar REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for('react.debug_trace_mode');\nvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\nvar REACT_LEGACY_HIDDEN_TYPE = Symbol.for('react.legacy_hidden');\nvar REACT_CACHE_TYPE = Symbol.for('react.cache');\nvar REACT_TRACING_MARKER_TYPE = Symbol.for('react.tracing_marker');\nvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var displayName = outerType.displayName;\n\n  if (displayName) {\n    return displayName;\n  }\n\n  var functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n} // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\n\nfunction getComponentNameFromType(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  {\n    if (typeof type.tag === 'number') {\n      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n    }\n  }\n\n  if (typeof type === 'function') {\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n        return getContextName(context) + '.Consumer';\n\n      case REACT_PROVIDER_TYPE:\n        var provider = type;\n        return getContextName(provider._context) + '.Provider';\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        var outerName = type.displayName || null;\n\n        if (outerName !== null) {\n          return outerName;\n        }\n\n        return getComponentNameFromType(type.type) || 'Memo';\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentNameFromType(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n\n      // eslint-disable-next-line no-fallthrough\n    }\n  }\n\n  return null;\n}\n\nfunction getWrappedName$1(outerType, innerType, wrapperName) {\n  var functionName = innerType.displayName || innerType.name || '';\n  return outerType.displayName || (functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName);\n} // Keep in sync with shared/getComponentNameFromType\n\n\nfunction getContextName$1(type) {\n  return type.displayName || 'Context';\n}\n\nfunction getComponentNameFromFiber(fiber) {\n  var tag = fiber.tag,\n      type = fiber.type;\n\n  switch (tag) {\n    case CacheComponent:\n      return 'Cache';\n\n    case ContextConsumer:\n      var context = type;\n      return getContextName$1(context) + '.Consumer';\n\n    case ContextProvider:\n      var provider = type;\n      return getContextName$1(provider._context) + '.Provider';\n\n    case DehydratedFragment:\n      return 'DehydratedFragment';\n\n    case ForwardRef:\n      return getWrappedName$1(type, type.render, 'ForwardRef');\n\n    case Fragment:\n      return 'Fragment';\n\n    case HostComponent:\n      // Host component type is the display name (e.g. \"div\", \"View\")\n      return type;\n\n    case HostPortal:\n      return 'Portal';\n\n    case HostRoot:\n      return 'Root';\n\n    case HostText:\n      return 'Text';\n\n    case LazyComponent:\n      // Name comes from the type in this case; we don't have a tag.\n      return getComponentNameFromType(type);\n\n    case Mode:\n      if (type === REACT_STRICT_MODE_TYPE) {\n        // Don't be less specific than shared/getComponentNameFromType\n        return 'StrictMode';\n      }\n\n      return 'Mode';\n\n    case OffscreenComponent:\n      return 'Offscreen';\n\n    case Profiler:\n      return 'Profiler';\n\n    case ScopeComponent:\n      return 'Scope';\n\n    case SuspenseComponent:\n      return 'Suspense';\n\n    case SuspenseListComponent:\n      return 'SuspenseList';\n\n    case TracingMarkerComponent:\n      return 'TracingMarker';\n    // The display name for this tags come from the user-provided type:\n\n    case ClassComponent:\n    case FunctionComponent:\n    case IncompleteClassComponent:\n    case IndeterminateComponent:\n    case MemoComponent:\n    case SimpleMemoComponent:\n      if (typeof type === 'function') {\n        return type.displayName || type.name || null;\n      }\n\n      if (typeof type === 'string') {\n        return type;\n      }\n\n      break;\n\n  }\n\n  return null;\n}\n\n// Don't change these two values. They're used by React Dev Tools.\nvar NoFlags =\n/*                      */\n0;\nvar PerformedWork =\n/*                */\n1; // You can change the rest (and add more).\n\nvar Placement =\n/*                    */\n2;\nvar Update =\n/*                       */\n4;\nvar PlacementAndUpdate =\n/*           */\nPlacement | Update;\nvar ChildDeletion =\n/*                */\n16;\nvar ContentReset =\n/*                 */\n32;\nvar Callback =\n/*                     */\n64;\nvar DidCapture =\n/*                   */\n128;\nvar ForceClientRender =\n/*            */\n256;\nvar Ref =\n/*                          */\n512;\nvar Snapshot =\n/*                     */\n1024;\nvar Passive =\n/*                      */\n2048;\nvar Hydrating =\n/*                    */\n4096;\nvar HydratingAndUpdate =\n/*           */\nHydrating | Update;\nvar Visibility =\n/*                   */\n8192;\nvar StoreConsistency =\n/*             */\n16384;\nvar LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency; // Union of all commit flags (flags with the lifetime of a particular commit)\n\nvar HostEffectMask =\n/*               */\n32767; // These are not really side effects, but we still reuse this field.\n\nvar Incomplete =\n/*                   */\n32768;\nvar ShouldCapture =\n/*                */\n65536;\nvar ForceUpdateForLegacySuspense =\n/* */\n131072;\nvar Forked =\n/*                       */\n1048576; // Static tags describe aspects of a fiber that are not specific to a render,\n// e.g. a fiber uses a passive effect (even if there are no updates on this particular render).\n// This enables us to defer more work in the unmount case,\n// since we can defer traversing the tree during layout to look for Passive effects,\n// and instead rely on the static flag as a signal that there may be cleanup work.\n\nvar RefStatic =\n/*                    */\n2097152;\nvar LayoutStatic =\n/*                 */\n4194304;\nvar PassiveStatic =\n/*                */\n8388608; // These flags allow us to traverse to fibers that have effects on mount\n// don't contain effects, by checking subtreeFlags.\n\nvar BeforeMutationMask = // TODO: Remove Update flag from before mutation phase by re-landing Visibility\n// flag logic (see #20043)\nUpdate | Snapshot | ( 0);\nvar MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;\nvar LayoutMask = Update | Callback | Ref | Visibility; // TODO: Split into PassiveMountMask and PassiveUnmountMask\n\nvar PassiveMask = Passive | ChildDeletion; // Union of tags that don't get reset on clones.\n// This allows certain concepts to persist without recalculating them,\n// e.g. whether a subtree contains passive effects or portals.\n\nvar StaticMask = LayoutStatic | PassiveStatic | RefStatic;\n\nvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\nfunction getNearestMountedFiber(fiber) {\n  var node = fiber;\n  var nearestMounted = fiber;\n\n  if (!fiber.alternate) {\n    // If there is no alternate, this might be a new tree that isn't inserted\n    // yet. If it is, then it will have a pending insertion effect on it.\n    var nextNode = node;\n\n    do {\n      node = nextNode;\n\n      if ((node.flags & (Placement | Hydrating)) !== NoFlags) {\n        // This is an insertion or in-progress hydration. The nearest possible\n        // mounted fiber is the parent but we need to continue to figure out\n        // if that one is still mounted.\n        nearestMounted = node.return;\n      }\n\n      nextNode = node.return;\n    } while (nextNode);\n  } else {\n    while (node.return) {\n      node = node.return;\n    }\n  }\n\n  if (node.tag === HostRoot) {\n    // TODO: Check if this was a nested HostRoot when used with\n    // renderContainerIntoSubtree.\n    return nearestMounted;\n  } // If we didn't hit the root, that means that we're in an disconnected tree\n  // that has been unmounted.\n\n\n  return null;\n}\nfunction isFiberMounted(fiber) {\n  return getNearestMountedFiber(fiber) === fiber;\n}\nfunction isMounted(component) {\n  {\n    var owner = ReactCurrentOwner.current;\n\n    if (owner !== null && owner.tag === ClassComponent) {\n      var ownerFiber = owner;\n      var instance = ownerFiber.stateNode;\n\n      if (!instance._warnedAboutRefsInRender) {\n        error('%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentNameFromFiber(ownerFiber) || 'A component');\n      }\n\n      instance._warnedAboutRefsInRender = true;\n    }\n  }\n\n  var fiber = get(component);\n\n  if (!fiber) {\n    return false;\n  }\n\n  return getNearestMountedFiber(fiber) === fiber;\n}\n\nfunction assertIsMounted(fiber) {\n  if (getNearestMountedFiber(fiber) !== fiber) {\n    throw new Error('Unable to find node on an unmounted component.');\n  }\n}\n\nfunction findCurrentFiberUsingSlowPath(fiber) {\n  var alternate = fiber.alternate;\n\n  if (!alternate) {\n    // If there is no alternate, then we only need to check if it is mounted.\n    var nearestMounted = getNearestMountedFiber(fiber);\n\n    if (nearestMounted === null) {\n      throw new Error('Unable to find node on an unmounted component.');\n    }\n\n    if (nearestMounted !== fiber) {\n      return null;\n    }\n\n    return fiber;\n  } // If we have two possible branches, we'll walk backwards up to the root\n  // to see what path the root points to. On the way we may hit one of the\n  // special cases and we'll deal with them.\n\n\n  var a = fiber;\n  var b = alternate;\n\n  while (true) {\n    var parentA = a.return;\n\n    if (parentA === null) {\n      // We're at the root.\n      break;\n    }\n\n    var parentB = parentA.alternate;\n\n    if (parentB === null) {\n      // There is no alternate. This is an unusual case. Currently, it only\n      // happens when a Suspense component is hidden. An extra fragment fiber\n      // is inserted in between the Suspense fiber and its children. Skip\n      // over this extra fragment fiber and proceed to the next parent.\n      var nextParent = parentA.return;\n\n      if (nextParent !== null) {\n        a = b = nextParent;\n        continue;\n      } // If there's no parent, we're at the root.\n\n\n      break;\n    } // If both copies of the parent fiber point to the same child, we can\n    // assume that the child is current. This happens when we bailout on low\n    // priority: the bailed out fiber's child reuses the current child.\n\n\n    if (parentA.child === parentB.child) {\n      var child = parentA.child;\n\n      while (child) {\n        if (child === a) {\n          // We've determined that A is the current branch.\n          assertIsMounted(parentA);\n          return fiber;\n        }\n\n        if (child === b) {\n          // We've determined that B is the current branch.\n          assertIsMounted(parentA);\n          return alternate;\n        }\n\n        child = child.sibling;\n      } // We should never have an alternate for any mounting node. So the only\n      // way this could possibly happen is if this was unmounted, if at all.\n\n\n      throw new Error('Unable to find node on an unmounted component.');\n    }\n\n    if (a.return !== b.return) {\n      // The return pointer of A and the return pointer of B point to different\n      // fibers. We assume that return pointers never criss-cross, so A must\n      // belong to the child set of A.return, and B must belong to the child\n      // set of B.return.\n      a = parentA;\n      b = parentB;\n    } else {\n      // The return pointers point to the same fiber. We'll have to use the\n      // default, slow path: scan the child sets of each parent alternate to see\n      // which child belongs to which set.\n      //\n      // Search parent A's child set\n      var didFindChild = false;\n      var _child = parentA.child;\n\n      while (_child) {\n        if (_child === a) {\n          didFindChild = true;\n          a = parentA;\n          b = parentB;\n          break;\n        }\n\n        if (_child === b) {\n          didFindChild = true;\n          b = parentA;\n          a = parentB;\n          break;\n        }\n\n        _child = _child.sibling;\n      }\n\n      if (!didFindChild) {\n        // Search parent B's child set\n        _child = parentB.child;\n\n        while (_child) {\n          if (_child === a) {\n            didFindChild = true;\n            a = parentB;\n            b = parentA;\n            break;\n          }\n\n          if (_child === b) {\n            didFindChild = true;\n            b = parentB;\n            a = parentA;\n            break;\n          }\n\n          _child = _child.sibling;\n        }\n\n        if (!didFindChild) {\n          throw new Error('Child was not found in either parent set. This indicates a bug ' + 'in React related to the return pointer. Please file an issue.');\n        }\n      }\n    }\n\n    if (a.alternate !== b) {\n      throw new Error(\"Return fibers should always be each others' alternates. \" + 'This error is likely caused by a bug in React. Please file an issue.');\n    }\n  } // If the root is not a host container, we're in a disconnected tree. I.e.\n  // unmounted.\n\n\n  if (a.tag !== HostRoot) {\n    throw new Error('Unable to find node on an unmounted component.');\n  }\n\n  if (a.stateNode.current === a) {\n    // We've determined that A is the current branch.\n    return fiber;\n  } // Otherwise B has to be current branch.\n\n\n  return alternate;\n}\nfunction findCurrentHostFiber(parent) {\n  var currentParent = findCurrentFiberUsingSlowPath(parent);\n  return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;\n}\n\nfunction findCurrentHostFiberImpl(node) {\n  // Next we'll drill down this component to find the first HostComponent/Text.\n  if (node.tag === HostComponent || node.tag === HostText) {\n    return node;\n  }\n\n  var child = node.child;\n\n  while (child !== null) {\n    var match = findCurrentHostFiberImpl(child);\n\n    if (match !== null) {\n      return match;\n    }\n\n    child = child.sibling;\n  }\n\n  return null;\n}\n\nvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\nfunction isArray(a) {\n  return isArrayImpl(a);\n}\n\n// This module only exists as an ESM wrapper around the external CommonJS\nvar scheduleCallback = Scheduler$1.unstable_scheduleCallback;\nvar cancelCallback = Scheduler$1.unstable_cancelCallback;\nvar shouldYield = Scheduler$1.unstable_shouldYield;\nvar requestPaint = Scheduler$1.unstable_requestPaint;\nvar now = Scheduler$1.unstable_now;\nvar ImmediatePriority = Scheduler$1.unstable_ImmediatePriority;\nvar UserBlockingPriority = Scheduler$1.unstable_UserBlockingPriority;\nvar NormalPriority = Scheduler$1.unstable_NormalPriority;\nvar IdlePriority = Scheduler$1.unstable_IdlePriority;\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: assign({}, props, {\n          value: prevLog\n        }),\n        info: assign({}, props, {\n          value: prevInfo\n        }),\n        warn: assign({}, props, {\n          value: prevWarn\n        }),\n        error: assign({}, props, {\n          value: prevError\n        }),\n        group: assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar rendererID = null;\nvar injectedHook = null;\nvar hasLoggedError = false;\nvar isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';\nfunction injectInternals(internals) {\n  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n    // No DevTools\n    return false;\n  }\n\n  var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;\n\n  if (hook.isDisabled) {\n    // This isn't a real property on the hook, but it can be set to opt out\n    // of DevTools integration and associated warnings and logs.\n    // https://github.com/facebook/react/issues/3877\n    return true;\n  }\n\n  if (!hook.supportsFiber) {\n    {\n      error('The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://reactjs.org/link/react-devtools');\n    } // DevTools exists, even though it doesn't support Fiber.\n\n\n    return true;\n  }\n\n  try {\n    if (enableSchedulingProfiler) {\n      // Conditionally inject these hooks only if Timeline profiler is supported by this build.\n      // This gives DevTools a way to feature detect that isn't tied to version number\n      // (since profiling and timeline are controlled by different feature flags).\n      internals = assign({}, internals, {\n        getLaneLabelMap: getLaneLabelMap,\n        injectProfilingHooks: injectProfilingHooks\n      });\n    }\n\n    rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.\n\n    injectedHook = hook;\n  } catch (err) {\n    // Catch all errors because it is unsafe to throw during initialization.\n    {\n      error('React instrumentation encountered an error: %s.', err);\n    }\n  }\n\n  if (hook.checkDCE) {\n    // This is the real DevTools.\n    return true;\n  } else {\n    // This is likely a hook installed by Fast Refresh runtime.\n    return false;\n  }\n}\nfunction onScheduleRoot(root, children) {\n  {\n    if (injectedHook && typeof injectedHook.onScheduleFiberRoot === 'function') {\n      try {\n        injectedHook.onScheduleFiberRoot(rendererID, root, children);\n      } catch (err) {\n        if ( !hasLoggedError) {\n          hasLoggedError = true;\n\n          error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\nfunction onCommitRoot(root, eventPriority) {\n  if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') {\n    try {\n      var didError = (root.current.flags & DidCapture) === DidCapture;\n\n      if (enableProfilerTimer) {\n        var schedulerPriority;\n\n        switch (eventPriority) {\n          case DiscreteEventPriority:\n            schedulerPriority = ImmediatePriority;\n            break;\n\n          case ContinuousEventPriority:\n            schedulerPriority = UserBlockingPriority;\n            break;\n\n          case DefaultEventPriority:\n            schedulerPriority = NormalPriority;\n            break;\n\n          case IdleEventPriority:\n            schedulerPriority = IdlePriority;\n            break;\n\n          default:\n            schedulerPriority = NormalPriority;\n            break;\n        }\n\n        injectedHook.onCommitFiberRoot(rendererID, root, schedulerPriority, didError);\n      } else {\n        injectedHook.onCommitFiberRoot(rendererID, root, undefined, didError);\n      }\n    } catch (err) {\n      {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n\n          error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\nfunction onPostCommitRoot(root) {\n  if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === 'function') {\n    try {\n      injectedHook.onPostCommitFiberRoot(rendererID, root);\n    } catch (err) {\n      {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n\n          error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\nfunction onCommitUnmount(fiber) {\n  if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') {\n    try {\n      injectedHook.onCommitFiberUnmount(rendererID, fiber);\n    } catch (err) {\n      {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n\n          error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\n\nfunction injectProfilingHooks(profilingHooks) {\n}\n\nfunction getLaneLabelMap() {\n  {\n    return null;\n  }\n}\nfunction markComponentRenderStopped() {\n}\nfunction markComponentErrored(fiber, thrownValue, lanes) {\n}\nfunction markComponentSuspended(fiber, wakeable, lanes) {\n}\n\nvar NoMode =\n/*                         */\n0; // TODO: Remove ConcurrentMode by reading from the root tag instead\n\nvar ConcurrentMode =\n/*                 */\n1;\nvar ProfileMode =\n/*                    */\n2;\nvar StrictLegacyMode =\n/*               */\n8;\n\n// TODO: This is pretty well supported by browsers. Maybe we can drop it.\nvar clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros.\n// Based on:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32\n\nvar log = Math.log;\nvar LN2 = Math.LN2;\n\nfunction clz32Fallback(x) {\n  var asUint = x >>> 0;\n\n  if (asUint === 0) {\n    return 32;\n  }\n\n  return 31 - (log(asUint) / LN2 | 0) | 0;\n}\n\n// If those values are changed that package should be rebuilt and redeployed.\n\nvar TotalLanes = 31;\nvar NoLanes =\n/*                        */\n0;\nvar NoLane =\n/*                          */\n0;\nvar SyncLane =\n/*                        */\n1;\nvar InputContinuousHydrationLane =\n/*    */\n2;\nvar InputContinuousLane =\n/*            */\n4;\nvar DefaultHydrationLane =\n/*            */\n8;\nvar DefaultLane =\n/*                    */\n16;\nvar TransitionHydrationLane =\n/*                */\n32;\nvar TransitionLanes =\n/*                       */\n4194240;\nvar TransitionLane1 =\n/*                        */\n64;\nvar TransitionLane2 =\n/*                        */\n128;\nvar TransitionLane3 =\n/*                        */\n256;\nvar TransitionLane4 =\n/*                        */\n512;\nvar TransitionLane5 =\n/*                        */\n1024;\nvar TransitionLane6 =\n/*                        */\n2048;\nvar TransitionLane7 =\n/*                        */\n4096;\nvar TransitionLane8 =\n/*                        */\n8192;\nvar TransitionLane9 =\n/*                        */\n16384;\nvar TransitionLane10 =\n/*                       */\n32768;\nvar TransitionLane11 =\n/*                       */\n65536;\nvar TransitionLane12 =\n/*                       */\n131072;\nvar TransitionLane13 =\n/*                       */\n262144;\nvar TransitionLane14 =\n/*                       */\n524288;\nvar TransitionLane15 =\n/*                       */\n1048576;\nvar TransitionLane16 =\n/*                       */\n2097152;\nvar RetryLanes =\n/*                            */\n130023424;\nvar RetryLane1 =\n/*                             */\n4194304;\nvar RetryLane2 =\n/*                             */\n8388608;\nvar RetryLane3 =\n/*                             */\n16777216;\nvar RetryLane4 =\n/*                             */\n33554432;\nvar RetryLane5 =\n/*                             */\n67108864;\nvar SomeRetryLane = RetryLane1;\nvar SelectiveHydrationLane =\n/*          */\n134217728;\nvar NonIdleLanes =\n/*                                 */\n268435455;\nvar IdleHydrationLane =\n/*               */\n268435456;\nvar IdleLane =\n/*                       */\n536870912;\nvar OffscreenLane =\n/*                   */\n1073741824; // This function is used for the experimental timeline (react-devtools-timeline)\nvar NoTimestamp = -1;\nvar nextTransitionLane = TransitionLane1;\nvar nextRetryLane = RetryLane1;\n\nfunction getHighestPriorityLanes(lanes) {\n  switch (getHighestPriorityLane(lanes)) {\n    case SyncLane:\n      return SyncLane;\n\n    case InputContinuousHydrationLane:\n      return InputContinuousHydrationLane;\n\n    case InputContinuousLane:\n      return InputContinuousLane;\n\n    case DefaultHydrationLane:\n      return DefaultHydrationLane;\n\n    case DefaultLane:\n      return DefaultLane;\n\n    case TransitionHydrationLane:\n      return TransitionHydrationLane;\n\n    case TransitionLane1:\n    case TransitionLane2:\n    case TransitionLane3:\n    case TransitionLane4:\n    case TransitionLane5:\n    case TransitionLane6:\n    case TransitionLane7:\n    case TransitionLane8:\n    case TransitionLane9:\n    case TransitionLane10:\n    case TransitionLane11:\n    case TransitionLane12:\n    case TransitionLane13:\n    case TransitionLane14:\n    case TransitionLane15:\n    case TransitionLane16:\n      return lanes & TransitionLanes;\n\n    case RetryLane1:\n    case RetryLane2:\n    case RetryLane3:\n    case RetryLane4:\n    case RetryLane5:\n      return lanes & RetryLanes;\n\n    case SelectiveHydrationLane:\n      return SelectiveHydrationLane;\n\n    case IdleHydrationLane:\n      return IdleHydrationLane;\n\n    case IdleLane:\n      return IdleLane;\n\n    case OffscreenLane:\n      return OffscreenLane;\n\n    default:\n      {\n        error('Should have found matching lanes. This is a bug in React.');\n      } // This shouldn't be reachable, but as a fallback, return the entire bitmask.\n\n\n      return lanes;\n  }\n}\n\nfunction getNextLanes(root, wipLanes) {\n  // Early bailout if there's no pending work left.\n  var pendingLanes = root.pendingLanes;\n\n  if (pendingLanes === NoLanes) {\n    return NoLanes;\n  }\n\n  var nextLanes = NoLanes;\n  var suspendedLanes = root.suspendedLanes;\n  var pingedLanes = root.pingedLanes; // Do not work on any idle work until all the non-idle work has finished,\n  // even if the work is suspended.\n\n  var nonIdlePendingLanes = pendingLanes & NonIdleLanes;\n\n  if (nonIdlePendingLanes !== NoLanes) {\n    var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;\n\n    if (nonIdleUnblockedLanes !== NoLanes) {\n      nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);\n    } else {\n      var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;\n\n      if (nonIdlePingedLanes !== NoLanes) {\n        nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);\n      }\n    }\n  } else {\n    // The only remaining work is Idle.\n    var unblockedLanes = pendingLanes & ~suspendedLanes;\n\n    if (unblockedLanes !== NoLanes) {\n      nextLanes = getHighestPriorityLanes(unblockedLanes);\n    } else {\n      if (pingedLanes !== NoLanes) {\n        nextLanes = getHighestPriorityLanes(pingedLanes);\n      }\n    }\n  }\n\n  if (nextLanes === NoLanes) {\n    // This should only be reachable if we're suspended\n    // TODO: Consider warning in this path if a fallback timer is not scheduled.\n    return NoLanes;\n  } // If we're already in the middle of a render, switching lanes will interrupt\n  // it and we'll lose our progress. We should only do this if the new lanes are\n  // higher priority.\n\n\n  if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't\n  // bother waiting until the root is complete.\n  (wipLanes & suspendedLanes) === NoLanes) {\n    var nextLane = getHighestPriorityLane(nextLanes);\n    var wipLane = getHighestPriorityLane(wipLanes);\n\n    if ( // Tests whether the next lane is equal or lower priority than the wip\n    // one. This works because the bits decrease in priority as you go left.\n    nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The\n    // only difference between default updates and transition updates is that\n    // default updates do not support refresh transitions.\n    nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) {\n      // Keep working on the existing in-progress tree. Do not interrupt.\n      return wipLanes;\n    }\n  }\n\n  if ((nextLanes & InputContinuousLane) !== NoLanes) {\n    // When updates are sync by default, we entangle continuous priority updates\n    // and default updates, so they render in the same batch. The only reason\n    // they use separate lanes is because continuous updates should interrupt\n    // transitions, but default updates should not.\n    nextLanes |= pendingLanes & DefaultLane;\n  } // Check for entangled lanes and add them to the batch.\n  //\n  // A lane is said to be entangled with another when it's not allowed to render\n  // in a batch that does not also include the other lane. Typically we do this\n  // when multiple updates have the same source, and we only want to respond to\n  // the most recent event from that source.\n  //\n  // Note that we apply entanglements *after* checking for partial work above.\n  // This means that if a lane is entangled during an interleaved event while\n  // it's already rendering, we won't interrupt it. This is intentional, since\n  // entanglement is usually \"best effort\": we'll try our best to render the\n  // lanes in the same batch, but it's not worth throwing out partially\n  // completed work in order to do it.\n  // TODO: Reconsider this. The counter-argument is that the partial work\n  // represents an intermediate state, which we don't want to show to the user.\n  // And by spending extra time finishing it, we're increasing the amount of\n  // time it takes to show the final state, which is what they are actually\n  // waiting for.\n  //\n  // For those exceptions where entanglement is semantically important, like\n  // useMutableSource, we should ensure that there is no partial work at the\n  // time we apply the entanglement.\n\n\n  var entangledLanes = root.entangledLanes;\n\n  if (entangledLanes !== NoLanes) {\n    var entanglements = root.entanglements;\n    var lanes = nextLanes & entangledLanes;\n\n    while (lanes > 0) {\n      var index = pickArbitraryLaneIndex(lanes);\n      var lane = 1 << index;\n      nextLanes |= entanglements[index];\n      lanes &= ~lane;\n    }\n  }\n\n  return nextLanes;\n}\nfunction getMostRecentEventTime(root, lanes) {\n  var eventTimes = root.eventTimes;\n  var mostRecentEventTime = NoTimestamp;\n\n  while (lanes > 0) {\n    var index = pickArbitraryLaneIndex(lanes);\n    var lane = 1 << index;\n    var eventTime = eventTimes[index];\n\n    if (eventTime > mostRecentEventTime) {\n      mostRecentEventTime = eventTime;\n    }\n\n    lanes &= ~lane;\n  }\n\n  return mostRecentEventTime;\n}\n\nfunction computeExpirationTime(lane, currentTime) {\n  switch (lane) {\n    case SyncLane:\n    case InputContinuousHydrationLane:\n    case InputContinuousLane:\n      // User interactions should expire slightly more quickly.\n      //\n      // NOTE: This is set to the corresponding constant as in Scheduler.js.\n      // When we made it larger, a product metric in www regressed, suggesting\n      // there's a user interaction that's being starved by a series of\n      // synchronous updates. If that theory is correct, the proper solution is\n      // to fix the starvation. However, this scenario supports the idea that\n      // expiration times are an important safeguard when starvation\n      // does happen.\n      return currentTime + 250;\n\n    case DefaultHydrationLane:\n    case DefaultLane:\n    case TransitionHydrationLane:\n    case TransitionLane1:\n    case TransitionLane2:\n    case TransitionLane3:\n    case TransitionLane4:\n    case TransitionLane5:\n    case TransitionLane6:\n    case TransitionLane7:\n    case TransitionLane8:\n    case TransitionLane9:\n    case TransitionLane10:\n    case TransitionLane11:\n    case TransitionLane12:\n    case TransitionLane13:\n    case TransitionLane14:\n    case TransitionLane15:\n    case TransitionLane16:\n      return currentTime + 5000;\n\n    case RetryLane1:\n    case RetryLane2:\n    case RetryLane3:\n    case RetryLane4:\n    case RetryLane5:\n      // TODO: Retries should be allowed to expire if they are CPU bound for\n      // too long, but when I made this change it caused a spike in browser\n      // crashes. There must be some other underlying bug; not super urgent but\n      // ideally should figure out why and fix it. Unfortunately we don't have\n      // a repro for the crashes, only detected via production metrics.\n      return NoTimestamp;\n\n    case SelectiveHydrationLane:\n    case IdleHydrationLane:\n    case IdleLane:\n    case OffscreenLane:\n      // Anything idle priority or lower should never expire.\n      return NoTimestamp;\n\n    default:\n      {\n        error('Should have found matching lanes. This is a bug in React.');\n      }\n\n      return NoTimestamp;\n  }\n}\n\nfunction markStarvedLanesAsExpired(root, currentTime) {\n  // TODO: This gets called every time we yield. We can optimize by storing\n  // the earliest expiration time on the root. Then use that to quickly bail out\n  // of this function.\n  var pendingLanes = root.pendingLanes;\n  var suspendedLanes = root.suspendedLanes;\n  var pingedLanes = root.pingedLanes;\n  var expirationTimes = root.expirationTimes; // Iterate through the pending lanes and check if we've reached their\n  // expiration time. If so, we'll assume the update is being starved and mark\n  // it as expired to force it to finish.\n\n  var lanes = pendingLanes;\n\n  while (lanes > 0) {\n    var index = pickArbitraryLaneIndex(lanes);\n    var lane = 1 << index;\n    var expirationTime = expirationTimes[index];\n\n    if (expirationTime === NoTimestamp) {\n      // Found a pending lane with no expiration time. If it's not suspended, or\n      // if it's pinged, assume it's CPU-bound. Compute a new expiration time\n      // using the current time.\n      if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {\n        // Assumes timestamps are monotonically increasing.\n        expirationTimes[index] = computeExpirationTime(lane, currentTime);\n      }\n    } else if (expirationTime <= currentTime) {\n      // This lane expired\n      root.expiredLanes |= lane;\n    }\n\n    lanes &= ~lane;\n  }\n} // This returns the highest priority pending lanes regardless of whether they\nfunction getLanesToRetrySynchronouslyOnError(root) {\n  var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;\n\n  if (everythingButOffscreen !== NoLanes) {\n    return everythingButOffscreen;\n  }\n\n  if (everythingButOffscreen & OffscreenLane) {\n    return OffscreenLane;\n  }\n\n  return NoLanes;\n}\nfunction includesSyncLane(lanes) {\n  return (lanes & SyncLane) !== NoLanes;\n}\nfunction includesNonIdleWork(lanes) {\n  return (lanes & NonIdleLanes) !== NoLanes;\n}\nfunction includesOnlyRetries(lanes) {\n  return (lanes & RetryLanes) === lanes;\n}\nfunction includesOnlyTransitions(lanes) {\n  return (lanes & TransitionLanes) === lanes;\n}\nfunction includesBlockingLane(root, lanes) {\n\n  var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;\n  return (lanes & SyncDefaultLanes) !== NoLanes;\n}\nfunction includesExpiredLane(root, lanes) {\n  // This is a separate check from includesBlockingLane because a lane can\n  // expire after a render has already started.\n  return (lanes & root.expiredLanes) !== NoLanes;\n}\nfunction isTransitionLane(lane) {\n  return (lane & TransitionLanes) !== 0;\n}\nfunction claimNextTransitionLane() {\n  // Cycle through the lanes, assigning each new transition to the next lane.\n  // In most cases, this means every transition gets its own lane, until we\n  // run out of lanes and cycle back to the beginning.\n  var lane = nextTransitionLane;\n  nextTransitionLane <<= 1;\n\n  if ((nextTransitionLane & TransitionLanes) === 0) {\n    nextTransitionLane = TransitionLane1;\n  }\n\n  return lane;\n}\nfunction claimNextRetryLane() {\n  var lane = nextRetryLane;\n  nextRetryLane <<= 1;\n\n  if ((nextRetryLane & RetryLanes) === 0) {\n    nextRetryLane = RetryLane1;\n  }\n\n  return lane;\n}\nfunction getHighestPriorityLane(lanes) {\n  return lanes & -lanes;\n}\nfunction pickArbitraryLane(lanes) {\n  // This wrapper function gets inlined. Only exists so to communicate that it\n  // doesn't matter which bit is selected; you can pick any bit without\n  // affecting the algorithms where its used. Here I'm using\n  // getHighestPriorityLane because it requires the fewest operations.\n  return getHighestPriorityLane(lanes);\n}\n\nfunction pickArbitraryLaneIndex(lanes) {\n  return 31 - clz32(lanes);\n}\n\nfunction laneToIndex(lane) {\n  return pickArbitraryLaneIndex(lane);\n}\n\nfunction includesSomeLane(a, b) {\n  return (a & b) !== NoLanes;\n}\nfunction isSubsetOfLanes(set, subset) {\n  return (set & subset) === subset;\n}\nfunction mergeLanes(a, b) {\n  return a | b;\n}\nfunction removeLanes(set, subset) {\n  return set & ~subset;\n}\nfunction intersectLanes(a, b) {\n  return a & b;\n} // Seems redundant, but it changes the type from a single lane (used for\n// updates) to a group of lanes (used for flushing work).\n\nfunction laneToLanes(lane) {\n  return lane;\n}\nfunction createLaneMap(initial) {\n  // Intentionally pushing one by one.\n  // https://v8.dev/blog/elements-kinds#avoid-creating-holes\n  var laneMap = [];\n\n  for (var i = 0; i < TotalLanes; i++) {\n    laneMap.push(initial);\n  }\n\n  return laneMap;\n}\nfunction markRootUpdated(root, updateLane, eventTime) {\n  root.pendingLanes |= updateLane; // If there are any suspended transitions, it's possible this new update\n  // could unblock them. Clear the suspended lanes so that we can try rendering\n  // them again.\n  //\n  // TODO: We really only need to unsuspend only lanes that are in the\n  // `subtreeLanes` of the updated fiber, or the update lanes of the return\n  // path. This would exclude suspended updates in an unrelated sibling tree,\n  // since there's no way for this update to unblock it.\n  //\n  // We don't do this if the incoming update is idle, because we never process\n  // idle updates until after all the regular updates have finished; there's no\n  // way it could unblock a transition.\n\n  if (updateLane !== IdleLane) {\n    root.suspendedLanes = NoLanes;\n    root.pingedLanes = NoLanes;\n  }\n\n  var eventTimes = root.eventTimes;\n  var index = laneToIndex(updateLane); // We can always overwrite an existing timestamp because we prefer the most\n  // recent event, and we assume time is monotonically increasing.\n\n  eventTimes[index] = eventTime;\n}\nfunction markRootSuspended(root, suspendedLanes) {\n  root.suspendedLanes |= suspendedLanes;\n  root.pingedLanes &= ~suspendedLanes; // The suspended lanes are no longer CPU-bound. Clear their expiration times.\n\n  var expirationTimes = root.expirationTimes;\n  var lanes = suspendedLanes;\n\n  while (lanes > 0) {\n    var index = pickArbitraryLaneIndex(lanes);\n    var lane = 1 << index;\n    expirationTimes[index] = NoTimestamp;\n    lanes &= ~lane;\n  }\n}\nfunction markRootPinged(root, pingedLanes, eventTime) {\n  root.pingedLanes |= root.suspendedLanes & pingedLanes;\n}\nfunction markRootFinished(root, remainingLanes) {\n  var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;\n  root.pendingLanes = remainingLanes; // Let's try everything again\n\n  root.suspendedLanes = 0;\n  root.pingedLanes = 0;\n  root.expiredLanes &= remainingLanes;\n  root.mutableReadLanes &= remainingLanes;\n  root.entangledLanes &= remainingLanes;\n  var entanglements = root.entanglements;\n  var eventTimes = root.eventTimes;\n  var expirationTimes = root.expirationTimes; // Clear the lanes that no longer have pending work\n\n  var lanes = noLongerPendingLanes;\n\n  while (lanes > 0) {\n    var index = pickArbitraryLaneIndex(lanes);\n    var lane = 1 << index;\n    entanglements[index] = NoLanes;\n    eventTimes[index] = NoTimestamp;\n    expirationTimes[index] = NoTimestamp;\n    lanes &= ~lane;\n  }\n}\nfunction markRootEntangled(root, entangledLanes) {\n  // In addition to entangling each of the given lanes with each other, we also\n  // have to consider _transitive_ entanglements. For each lane that is already\n  // entangled with *any* of the given lanes, that lane is now transitively\n  // entangled with *all* the given lanes.\n  //\n  // Translated: If C is entangled with A, then entangling A with B also\n  // entangles C with B.\n  //\n  // If this is hard to grasp, it might help to intentionally break this\n  // function and look at the tests that fail in ReactTransition-test.js. Try\n  // commenting out one of the conditions below.\n  var rootEntangledLanes = root.entangledLanes |= entangledLanes;\n  var entanglements = root.entanglements;\n  var lanes = rootEntangledLanes;\n\n  while (lanes) {\n    var index = pickArbitraryLaneIndex(lanes);\n    var lane = 1 << index;\n\n    if ( // Is this one of the newly entangled lanes?\n    lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?\n    entanglements[index] & entangledLanes) {\n      entanglements[index] |= entangledLanes;\n    }\n\n    lanes &= ~lane;\n  }\n}\n\nvar DiscreteEventPriority = SyncLane;\nvar ContinuousEventPriority = InputContinuousLane;\nvar DefaultEventPriority = DefaultLane;\nvar IdleEventPriority = IdleLane;\nvar currentUpdatePriority = NoLane;\nfunction getCurrentUpdatePriority() {\n  return currentUpdatePriority;\n}\nfunction setCurrentUpdatePriority(newPriority) {\n  currentUpdatePriority = newPriority;\n}\nfunction higherEventPriority(a, b) {\n  return a !== 0 && a < b ? a : b;\n}\nfunction lowerEventPriority(a, b) {\n  return a === 0 || a > b ? a : b;\n}\nfunction isHigherEventPriority(a, b) {\n  return a !== 0 && a < b;\n}\nfunction lanesToEventPriority(lanes) {\n  var lane = getHighestPriorityLane(lanes);\n\n  if (!isHigherEventPriority(DiscreteEventPriority, lane)) {\n    return DiscreteEventPriority;\n  }\n\n  if (!isHigherEventPriority(ContinuousEventPriority, lane)) {\n    return ContinuousEventPriority;\n  }\n\n  if (includesNonIdleWork(lane)) {\n    return DefaultEventPriority;\n  }\n\n  return IdleEventPriority;\n}\n\n// Renderers that don't support hydration\n// can re-export everything from this module.\nfunction shim() {\n  throw new Error('The current renderer does not support hydration. ' + 'This error is likely caused by a bug in React. ' + 'Please file an issue.');\n} // Hydration (when unsupported)\nvar isSuspenseInstancePending = shim;\nvar isSuspenseInstanceFallback = shim;\nvar hydrateTextInstance = shim;\nvar errorHydratingContainer = shim;\n\nvar NO_CONTEXT = {};\nvar UPDATE_SIGNAL = {};\nvar nodeToInstanceMap = new WeakMap();\n\n{\n  Object.freeze(NO_CONTEXT);\n  Object.freeze(UPDATE_SIGNAL);\n}\n\nfunction getPublicInstance(inst) {\n  switch (inst.tag) {\n    case 'INSTANCE':\n      var createNodeMock = inst.rootContainerInstance.createNodeMock;\n      var mockNode = createNodeMock({\n        type: inst.type,\n        props: inst.props\n      });\n\n      if (typeof mockNode === 'object' && mockNode !== null) {\n        nodeToInstanceMap.set(mockNode, inst);\n      }\n\n      return mockNode;\n\n    default:\n      return inst;\n  }\n}\nfunction appendChild(parentInstance, child) {\n  {\n    if (!isArray(parentInstance.children)) {\n      error('An invalid container has been provided. ' + 'This may indicate that another renderer is being used in addition to the test renderer. ' + '(For example, ReactDOM.createPortal inside of a ReactTestRenderer tree.) ' + 'This is not supported.');\n    }\n  }\n\n  var index = parentInstance.children.indexOf(child);\n\n  if (index !== -1) {\n    parentInstance.children.splice(index, 1);\n  }\n\n  parentInstance.children.push(child);\n}\nfunction insertBefore(parentInstance, child, beforeChild) {\n  var index = parentInstance.children.indexOf(child);\n\n  if (index !== -1) {\n    parentInstance.children.splice(index, 1);\n  }\n\n  var beforeIndex = parentInstance.children.indexOf(beforeChild);\n  parentInstance.children.splice(beforeIndex, 0, child);\n}\nfunction removeChild(parentInstance, child) {\n  var index = parentInstance.children.indexOf(child);\n  parentInstance.children.splice(index, 1);\n}\nfunction clearContainer(container) {\n  container.children.splice(0);\n}\nfunction getRootHostContext(rootContainerInstance) {\n  return NO_CONTEXT;\n}\nfunction getChildHostContext(parentHostContext, type, rootContainerInstance) {\n  return NO_CONTEXT;\n}\nfunction prepareForCommit(containerInfo) {\n  // noop\n  return null;\n}\nfunction resetAfterCommit(containerInfo) {// noop\n}\nfunction createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {\n  return {\n    type: type,\n    props: props,\n    isHidden: false,\n    children: [],\n    internalInstanceHandle: internalInstanceHandle,\n    rootContainerInstance: rootContainerInstance,\n    tag: 'INSTANCE'\n  };\n}\nfunction appendInitialChild(parentInstance, child) {\n  var index = parentInstance.children.indexOf(child);\n\n  if (index !== -1) {\n    parentInstance.children.splice(index, 1);\n  }\n\n  parentInstance.children.push(child);\n}\nfunction prepareUpdate(testElement, type, oldProps, newProps, rootContainerInstance, hostContext) {\n  return UPDATE_SIGNAL;\n}\nfunction shouldSetTextContent(type, props) {\n  return false;\n}\nfunction createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {\n  return {\n    text: text,\n    isHidden: false,\n    tag: 'TEXT'\n  };\n}\nfunction getCurrentEventPriority() {\n  return DefaultEventPriority;\n}\nvar scheduleTimeout = setTimeout;\nvar cancelTimeout = clearTimeout;\nvar noTimeout = -1; // -------------------\nfunction commitUpdate(instance, updatePayload, type, oldProps, newProps, internalInstanceHandle) {\n  instance.type = type;\n  instance.props = newProps;\n}\nfunction commitTextUpdate(textInstance, oldText, newText) {\n  textInstance.text = newText;\n}\nfunction resetTextContent(testElement) {// noop\n}\nvar appendChildToContainer = appendChild;\nvar insertInContainerBefore = insertBefore;\nvar removeChildFromContainer = removeChild;\nfunction hideInstance(instance) {\n  instance.isHidden = true;\n}\nfunction hideTextInstance(textInstance) {\n  textInstance.isHidden = true;\n}\nfunction unhideInstance(instance, props) {\n  instance.isHidden = false;\n}\nfunction unhideTextInstance(textInstance, text) {\n  textInstance.isHidden = false;\n}\nfunction preparePortalMount(portalInstance) {// noop\n}\n\nvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, source, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if ( !fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  var control;\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n\n  try {\n    // This should throw.\n    if (construct) {\n      // Something should be setting the props in the constructor.\n      var Fake = function () {\n        throw Error();\n      }; // $FlowFixMe\n\n\n      Object.defineProperty(Fake.prototype, 'props', {\n        set: function () {\n          // We use a throwing setter instead of frozen or non-writable props\n          // because that won't throw in a non-strict mode function.\n          throw Error();\n        }\n      });\n\n      if (typeof Reflect === 'object' && Reflect.construct) {\n        // We construct a different control for this case to include any extra\n        // frames added by the construct call.\n        try {\n          Reflect.construct(Fake, []);\n        } catch (x) {\n          control = x;\n        }\n\n        Reflect.construct(fn, [], Fake);\n      } else {\n        try {\n          Fake.call();\n        } catch (x) {\n          control = x;\n        }\n\n        fn.call(Fake.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (x) {\n        control = x;\n      }\n\n      fn();\n    }\n  } catch (sample) {\n    // This is inlined manually because closure doesn't do it for us.\n    if (sample && control && typeof sample.stack === 'string') {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sample.stack.split('\\n');\n      var controlLines = control.stack.split('\\n');\n      var s = sampleLines.length - 1;\n      var c = controlLines.length - 1;\n\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n        // We expect at least one stack frame to be shared.\n        // Typically this will be the root most one. However, stack frames may be\n        // cut off due to maximum stack limits. In this case, one maybe cut off\n        // earlier than the other. We assume that the sample is longer or the same\n        // and there for cut off earlier. So we should find the root most frame in\n        // the sample somewhere in the control.\n        c--;\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n\n\n                if (fn.displayName && _frame.includes('<anonymous>')) {\n                  _frame = _frame.replace('<anonymous>', fn.displayName);\n                }\n\n                {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\n\nfunction describeClassComponentFrame(ctor, source, ownerFn) {\n  {\n    return describeNativeComponentFrame(ctor, true);\n  }\n}\nfunction describeFunctionComponentFrame(fn, source, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction shouldConstruct(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n\n  if (type == null) {\n    return '';\n  }\n\n  if (typeof type === 'function') {\n    {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    }\n  }\n\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type);\n  }\n\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList');\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render);\n\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar loggedTypeFailures = {};\nvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nfunction checkPropTypes(typeSpecs, values, location, componentName, element) {\n  {\n    // $FlowFixMe This is okay but Flow doesn't know it.\n    var has = Function.call.bind(hasOwnProperty);\n\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            // eslint-disable-next-line react-internal/prod-error-codes\n            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n\n          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\n        } catch (ex) {\n          error$1 = ex;\n        }\n\n        if (error$1 && !(error$1 instanceof Error)) {\n          setCurrentlyValidatingElement(element);\n\n          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\n\n          setCurrentlyValidatingElement(null);\n        }\n\n        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error$1.message] = true;\n          setCurrentlyValidatingElement(element);\n\n          error('Failed %s type: %s', location, error$1.message);\n\n          setCurrentlyValidatingElement(null);\n        }\n      }\n    }\n  }\n}\n\nvar valueStack = [];\nvar fiberStack;\n\n{\n  fiberStack = [];\n}\n\nvar index = -1;\n\nfunction createCursor(defaultValue) {\n  return {\n    current: defaultValue\n  };\n}\n\nfunction pop(cursor, fiber) {\n  if (index < 0) {\n    {\n      error('Unexpected pop.');\n    }\n\n    return;\n  }\n\n  {\n    if (fiber !== fiberStack[index]) {\n      error('Unexpected Fiber popped.');\n    }\n  }\n\n  cursor.current = valueStack[index];\n  valueStack[index] = null;\n\n  {\n    fiberStack[index] = null;\n  }\n\n  index--;\n}\n\nfunction push(cursor, value, fiber) {\n  index++;\n  valueStack[index] = cursor.current;\n\n  {\n    fiberStack[index] = fiber;\n  }\n\n  cursor.current = value;\n}\n\nvar warnedAboutMissingGetChildContext;\n\n{\n  warnedAboutMissingGetChildContext = {};\n}\n\nvar emptyContextObject = {};\n\n{\n  Object.freeze(emptyContextObject);\n} // A cursor to the current merged context object on the stack.\n\n\nvar contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.\n\nvar didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.\n// We use this to get access to the parent context after we have already\n// pushed the next context provider, and now need to merge their contexts.\n\nvar previousContext = emptyContextObject;\n\nfunction getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {\n  {\n    if (didPushOwnContextIfProvider && isContextProvider(Component)) {\n      // If the fiber is a context provider itself, when we read its context\n      // we may have already pushed its own child context on the stack. A context\n      // provider should not \"see\" its own child context. Therefore we read the\n      // previous (parent) context instead for a context provider.\n      return previousContext;\n    }\n\n    return contextStackCursor.current;\n  }\n}\n\nfunction cacheContext(workInProgress, unmaskedContext, maskedContext) {\n  {\n    var instance = workInProgress.stateNode;\n    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;\n    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;\n  }\n}\n\nfunction getMaskedContext(workInProgress, unmaskedContext) {\n  {\n    var type = workInProgress.type;\n    var contextTypes = type.contextTypes;\n\n    if (!contextTypes) {\n      return emptyContextObject;\n    } // Avoid recreating masked context unless unmasked context has changed.\n    // Failing to do this will result in unnecessary calls to componentWillReceiveProps.\n    // This may trigger infinite loops if componentWillReceiveProps calls setState.\n\n\n    var instance = workInProgress.stateNode;\n\n    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {\n      return instance.__reactInternalMemoizedMaskedChildContext;\n    }\n\n    var context = {};\n\n    for (var key in contextTypes) {\n      context[key] = unmaskedContext[key];\n    }\n\n    {\n      var name = getComponentNameFromFiber(workInProgress) || 'Unknown';\n      checkPropTypes(contextTypes, context, 'context', name);\n    } // Cache unmasked context so we can avoid recreating masked context unless necessary.\n    // Context is created before the class component is instantiated so check for instance.\n\n\n    if (instance) {\n      cacheContext(workInProgress, unmaskedContext, context);\n    }\n\n    return context;\n  }\n}\n\nfunction hasContextChanged() {\n  {\n    return didPerformWorkStackCursor.current;\n  }\n}\n\nfunction isContextProvider(type) {\n  {\n    var childContextTypes = type.childContextTypes;\n    return childContextTypes !== null && childContextTypes !== undefined;\n  }\n}\n\nfunction popContext(fiber) {\n  {\n    pop(didPerformWorkStackCursor, fiber);\n    pop(contextStackCursor, fiber);\n  }\n}\n\nfunction popTopLevelContextObject(fiber) {\n  {\n    pop(didPerformWorkStackCursor, fiber);\n    pop(contextStackCursor, fiber);\n  }\n}\n\nfunction pushTopLevelContextObject(fiber, context, didChange) {\n  {\n    if (contextStackCursor.current !== emptyContextObject) {\n      throw new Error('Unexpected context found on stack. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n    }\n\n    push(contextStackCursor, context, fiber);\n    push(didPerformWorkStackCursor, didChange, fiber);\n  }\n}\n\nfunction processChildContext(fiber, type, parentContext) {\n  {\n    var instance = fiber.stateNode;\n    var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.\n    // It has only been added in Fiber to match the (unintentional) behavior in Stack.\n\n    if (typeof instance.getChildContext !== 'function') {\n      {\n        var componentName = getComponentNameFromFiber(fiber) || 'Unknown';\n\n        if (!warnedAboutMissingGetChildContext[componentName]) {\n          warnedAboutMissingGetChildContext[componentName] = true;\n\n          error('%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);\n        }\n      }\n\n      return parentContext;\n    }\n\n    var childContext = instance.getChildContext();\n\n    for (var contextKey in childContext) {\n      if (!(contextKey in childContextTypes)) {\n        throw new Error((getComponentNameFromFiber(fiber) || 'Unknown') + \".getChildContext(): key \\\"\" + contextKey + \"\\\" is not defined in childContextTypes.\");\n      }\n    }\n\n    {\n      var name = getComponentNameFromFiber(fiber) || 'Unknown';\n      checkPropTypes(childContextTypes, childContext, 'child context', name);\n    }\n\n    return assign({}, parentContext, childContext);\n  }\n}\n\nfunction pushContextProvider(workInProgress) {\n  {\n    var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.\n    // If the instance does not exist yet, we will push null at first,\n    // and replace it on the stack later when invalidating the context.\n\n    var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.\n    // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.\n\n    previousContext = contextStackCursor.current;\n    push(contextStackCursor, memoizedMergedChildContext, workInProgress);\n    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);\n    return true;\n  }\n}\n\nfunction invalidateContextProvider(workInProgress, type, didChange) {\n  {\n    var instance = workInProgress.stateNode;\n\n    if (!instance) {\n      throw new Error('Expected to have an instance by this point. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n    }\n\n    if (didChange) {\n      // Merge parent and own context.\n      // Skip this if we're not updating due to sCU.\n      // This avoids unnecessarily recomputing memoized values.\n      var mergedContext = processChildContext(workInProgress, type, previousContext);\n      instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.\n      // It is important to unwind the context in the reverse order.\n\n      pop(didPerformWorkStackCursor, workInProgress);\n      pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.\n\n      push(contextStackCursor, mergedContext, workInProgress);\n      push(didPerformWorkStackCursor, didChange, workInProgress);\n    } else {\n      pop(didPerformWorkStackCursor, workInProgress);\n      push(didPerformWorkStackCursor, didChange, workInProgress);\n    }\n  }\n}\n\nfunction findCurrentUnmaskedContext(fiber) {\n  {\n    // Currently this is only used with renderSubtreeIntoContainer; not sure if it\n    // makes sense elsewhere\n    if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {\n      throw new Error('Expected subtree parent to be a mounted class component. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n    }\n\n    var node = fiber;\n\n    do {\n      switch (node.tag) {\n        case HostRoot:\n          return node.stateNode.context;\n\n        case ClassComponent:\n          {\n            var Component = node.type;\n\n            if (isContextProvider(Component)) {\n              return node.stateNode.__reactInternalMemoizedMergedChildContext;\n            }\n\n            break;\n          }\n      }\n\n      node = node.return;\n    } while (node !== null);\n\n    throw new Error('Found unexpected detached subtree parent. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n  }\n}\n\nvar LegacyRoot = 0;\nvar ConcurrentRoot = 1;\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction is(x, y) {\n  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare\n  ;\n}\n\nvar objectIs = typeof Object.is === 'function' ? Object.is : is;\n\nvar syncQueue = null;\nvar includesLegacySyncCallbacks = false;\nvar isFlushingSyncQueue = false;\nfunction scheduleSyncCallback(callback) {\n  // Push this callback into an internal queue. We'll flush these either in\n  // the next tick, or earlier if something calls `flushSyncCallbackQueue`.\n  if (syncQueue === null) {\n    syncQueue = [callback];\n  } else {\n    // Push onto existing queue. Don't need to schedule a callback because\n    // we already scheduled one when we created the queue.\n    syncQueue.push(callback);\n  }\n}\nfunction scheduleLegacySyncCallback(callback) {\n  includesLegacySyncCallbacks = true;\n  scheduleSyncCallback(callback);\n}\nfunction flushSyncCallbacksOnlyInLegacyMode() {\n  // Only flushes the queue if there's a legacy sync callback scheduled.\n  // TODO: There's only a single type of callback: performSyncOnWorkOnRoot. So\n  // it might make more sense for the queue to be a list of roots instead of a\n  // list of generic callbacks. Then we can have two: one for legacy roots, one\n  // for concurrent roots. And this method would only flush the legacy ones.\n  if (includesLegacySyncCallbacks) {\n    flushSyncCallbacks();\n  }\n}\nfunction flushSyncCallbacks() {\n  if (!isFlushingSyncQueue && syncQueue !== null) {\n    // Prevent re-entrance.\n    isFlushingSyncQueue = true;\n    var i = 0;\n    var previousUpdatePriority = getCurrentUpdatePriority();\n\n    try {\n      var isSync = true;\n      var queue = syncQueue; // TODO: Is this necessary anymore? The only user code that runs in this\n      // queue is in the render or commit phases.\n\n      setCurrentUpdatePriority(DiscreteEventPriority);\n\n      for (; i < queue.length; i++) {\n        var callback = queue[i];\n\n        do {\n          callback = callback(isSync);\n        } while (callback !== null);\n      }\n\n      syncQueue = null;\n      includesLegacySyncCallbacks = false;\n    } catch (error) {\n      // If something throws, leave the remaining callbacks on the queue.\n      if (syncQueue !== null) {\n        syncQueue = syncQueue.slice(i + 1);\n      } // Resume flushing in the next tick\n\n\n      scheduleCallback(ImmediatePriority, flushSyncCallbacks);\n      throw error;\n    } finally {\n      setCurrentUpdatePriority(previousUpdatePriority);\n      isFlushingSyncQueue = false;\n    }\n  }\n\n  return null;\n}\n\n// This is imported by the event replaying implementation in React DOM. It's\n// in a separate file to break a circular dependency between the renderer and\n// the reconciler.\nfunction isRootDehydrated(root) {\n  var currentState = root.current.memoizedState;\n  return currentState.isDehydrated;\n}\n\nvar ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;\nvar NoTransition = null;\nfunction requestCurrentTransition() {\n  return ReactCurrentBatchConfig.transition;\n}\n\n/**\n * Performs equality by iterating through keys on an object and returning false\n * when any key has values which are not strictly equal between the arguments.\n * Returns true when the values of all keys are strictly equal.\n */\n\nfunction shallowEqual(objA, objB) {\n  if (objectIs(objA, objB)) {\n    return true;\n  }\n\n  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  } // Test for A's keys different from B.\n\n\n  for (var i = 0; i < keysA.length; i++) {\n    var currentKey = keysA[i];\n\n    if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction describeFiber(fiber) {\n  var owner =  fiber._debugOwner ? fiber._debugOwner.type : null ;\n  var source =  fiber._debugSource ;\n\n  switch (fiber.tag) {\n    case HostComponent:\n      return describeBuiltInComponentFrame(fiber.type);\n\n    case LazyComponent:\n      return describeBuiltInComponentFrame('Lazy');\n\n    case SuspenseComponent:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case SuspenseListComponent:\n      return describeBuiltInComponentFrame('SuspenseList');\n\n    case FunctionComponent:\n    case IndeterminateComponent:\n    case SimpleMemoComponent:\n      return describeFunctionComponentFrame(fiber.type);\n\n    case ForwardRef:\n      return describeFunctionComponentFrame(fiber.type.render);\n\n    case ClassComponent:\n      return describeClassComponentFrame(fiber.type);\n\n    default:\n      return '';\n  }\n}\n\nfunction getStackByFiberInDevAndProd(workInProgress) {\n  try {\n    var info = '';\n    var node = workInProgress;\n\n    do {\n      info += describeFiber(node);\n      node = node.return;\n    } while (node);\n\n    return info;\n  } catch (x) {\n    return '\\nError generating stack: ' + x.message + '\\n' + x.stack;\n  }\n}\n\nvar ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\nvar current = null;\nvar isRendering = false;\nfunction getCurrentFiberOwnerNameInDevOrNull() {\n  {\n    if (current === null) {\n      return null;\n    }\n\n    var owner = current._debugOwner;\n\n    if (owner !== null && typeof owner !== 'undefined') {\n      return getComponentNameFromFiber(owner);\n    }\n  }\n\n  return null;\n}\n\nfunction getCurrentFiberStackInDev() {\n  {\n    if (current === null) {\n      return '';\n    } // Safe because if current fiber exists, we are reconciling,\n    // and it is guaranteed to be the work-in-progress version.\n\n\n    return getStackByFiberInDevAndProd(current);\n  }\n}\n\nfunction resetCurrentFiber() {\n  {\n    ReactDebugCurrentFrame$1.getCurrentStack = null;\n    current = null;\n    isRendering = false;\n  }\n}\nfunction setCurrentFiber(fiber) {\n  {\n    ReactDebugCurrentFrame$1.getCurrentStack = getCurrentFiberStackInDev;\n    current = fiber;\n    isRendering = false;\n  }\n}\nfunction setIsRendering(rendering) {\n  {\n    isRendering = rendering;\n  }\n}\n\nvar ReactStrictModeWarnings = {\n  recordUnsafeLifecycleWarnings: function (fiber, instance) {},\n  flushPendingUnsafeLifecycleWarnings: function () {},\n  recordLegacyContextWarning: function (fiber, instance) {},\n  flushLegacyContextWarning: function () {},\n  discardPendingWarnings: function () {}\n};\n\n{\n  var findStrictRoot = function (fiber) {\n    var maybeStrictRoot = null;\n    var node = fiber;\n\n    while (node !== null) {\n      if (node.mode & StrictLegacyMode) {\n        maybeStrictRoot = node;\n      }\n\n      node = node.return;\n    }\n\n    return maybeStrictRoot;\n  };\n\n  var setToSortedString = function (set) {\n    var array = [];\n    set.forEach(function (value) {\n      array.push(value);\n    });\n    return array.sort().join(', ');\n  };\n\n  var pendingComponentWillMountWarnings = [];\n  var pendingUNSAFE_ComponentWillMountWarnings = [];\n  var pendingComponentWillReceivePropsWarnings = [];\n  var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n  var pendingComponentWillUpdateWarnings = [];\n  var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.\n\n  var didWarnAboutUnsafeLifecycles = new Set();\n\n  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {\n    // Dedupe strategy: Warn once per component.\n    if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {\n      return;\n    }\n\n    if (typeof instance.componentWillMount === 'function' && // Don't warn about react-lifecycles-compat polyfilled components.\n    instance.componentWillMount.__suppressDeprecationWarning !== true) {\n      pendingComponentWillMountWarnings.push(fiber);\n    }\n\n    if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === 'function') {\n      pendingUNSAFE_ComponentWillMountWarnings.push(fiber);\n    }\n\n    if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {\n      pendingComponentWillReceivePropsWarnings.push(fiber);\n    }\n\n    if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n      pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);\n    }\n\n    if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {\n      pendingComponentWillUpdateWarnings.push(fiber);\n    }\n\n    if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === 'function') {\n      pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);\n    }\n  };\n\n  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {\n    // We do an initial pass to gather component names\n    var componentWillMountUniqueNames = new Set();\n\n    if (pendingComponentWillMountWarnings.length > 0) {\n      pendingComponentWillMountWarnings.forEach(function (fiber) {\n        componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingComponentWillMountWarnings = [];\n    }\n\n    var UNSAFE_componentWillMountUniqueNames = new Set();\n\n    if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {\n      pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {\n        UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingUNSAFE_ComponentWillMountWarnings = [];\n    }\n\n    var componentWillReceivePropsUniqueNames = new Set();\n\n    if (pendingComponentWillReceivePropsWarnings.length > 0) {\n      pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {\n        componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingComponentWillReceivePropsWarnings = [];\n    }\n\n    var UNSAFE_componentWillReceivePropsUniqueNames = new Set();\n\n    if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {\n      pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {\n        UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n    }\n\n    var componentWillUpdateUniqueNames = new Set();\n\n    if (pendingComponentWillUpdateWarnings.length > 0) {\n      pendingComponentWillUpdateWarnings.forEach(function (fiber) {\n        componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingComponentWillUpdateWarnings = [];\n    }\n\n    var UNSAFE_componentWillUpdateUniqueNames = new Set();\n\n    if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {\n      pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {\n        UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingUNSAFE_ComponentWillUpdateWarnings = [];\n    } // Finally, we flush all the warnings\n    // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'\n\n\n    if (UNSAFE_componentWillMountUniqueNames.size > 0) {\n      var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);\n\n      error('Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n' + '\\nPlease update the following components: %s', sortedNames);\n    }\n\n    if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {\n      var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);\n\n      error('Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + \"* If you're updating state whenever props change, \" + 'refactor your code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\\n' + '\\nPlease update the following components: %s', _sortedNames);\n    }\n\n    if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {\n      var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);\n\n      error('Using UNSAFE_componentWillUpdate in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + '\\nPlease update the following components: %s', _sortedNames2);\n    }\n\n    if (componentWillMountUniqueNames.size > 0) {\n      var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);\n\n      warn('componentWillMount has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n' + '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' + '\\nPlease update the following components: %s', _sortedNames3);\n    }\n\n    if (componentWillReceivePropsUniqueNames.size > 0) {\n      var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);\n\n      warn('componentWillReceiveProps has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + \"* If you're updating state whenever props change, refactor your \" + 'code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\\n' + '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' + '\\nPlease update the following components: %s', _sortedNames4);\n    }\n\n    if (componentWillUpdateUniqueNames.size > 0) {\n      var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);\n\n      warn('componentWillUpdate has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' + '\\nPlease update the following components: %s', _sortedNames5);\n    }\n  };\n\n  var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.\n\n  var didWarnAboutLegacyContext = new Set();\n\n  ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {\n    var strictRoot = findStrictRoot(fiber);\n\n    if (strictRoot === null) {\n      error('Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n\n      return;\n    } // Dedup strategy: Warn once per component.\n\n\n    if (didWarnAboutLegacyContext.has(fiber.type)) {\n      return;\n    }\n\n    var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);\n\n    if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {\n      if (warningsForRoot === undefined) {\n        warningsForRoot = [];\n        pendingLegacyContextWarning.set(strictRoot, warningsForRoot);\n      }\n\n      warningsForRoot.push(fiber);\n    }\n  };\n\n  ReactStrictModeWarnings.flushLegacyContextWarning = function () {\n    pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {\n      if (fiberArray.length === 0) {\n        return;\n      }\n\n      var firstFiber = fiberArray[0];\n      var uniqueNames = new Set();\n      fiberArray.forEach(function (fiber) {\n        uniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n        didWarnAboutLegacyContext.add(fiber.type);\n      });\n      var sortedNames = setToSortedString(uniqueNames);\n\n      try {\n        setCurrentFiber(firstFiber);\n\n        error('Legacy context API has been detected within a strict-mode tree.' + '\\n\\nThe old API will be supported in all 16.x releases, but applications ' + 'using it should migrate to the new version.' + '\\n\\nPlease update the following components: %s' + '\\n\\nLearn more about this warning here: https://reactjs.org/link/legacy-context', sortedNames);\n      } finally {\n        resetCurrentFiber();\n      }\n    });\n  };\n\n  ReactStrictModeWarnings.discardPendingWarnings = function () {\n    pendingComponentWillMountWarnings = [];\n    pendingUNSAFE_ComponentWillMountWarnings = [];\n    pendingComponentWillReceivePropsWarnings = [];\n    pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n    pendingComponentWillUpdateWarnings = [];\n    pendingUNSAFE_ComponentWillUpdateWarnings = [];\n    pendingLegacyContextWarning = new Map();\n  };\n}\n\n/*\n * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */\n// $FlowFixMe only called in DEV, so void return is not possible.\nfunction typeName(value) {\n  {\n    // toStringTag is needed for namespaced types like Temporal.Instant\n    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';\n    return type;\n  }\n} // $FlowFixMe only called in DEV, so void return is not possible.\n\n\nfunction willCoercionThrow(value) {\n  {\n    try {\n      testStringCoercion(value);\n      return false;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\nfunction testStringCoercion(value) {\n  // If you ended up here by following an exception call stack, here's what's\n  // happened: you supplied an object or symbol value to React (as a prop, key,\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n  // coerce it to a string using `'' + value`, an exception was thrown.\n  //\n  // The most common types that will cause this exception are `Symbol` instances\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n  // exception. (Library authors do this to prevent users from using built-in\n  // numeric operators like `+` or comparison operators like `>=` because custom\n  // methods are needed to perform accurate arithmetic or comparison.)\n  //\n  // To fix the problem, coerce this object or symbol value to a string before\n  // passing it to React. The most reliable way is usually `String(value)`.\n  //\n  // To find which value is throwing, check the browser or debugger console.\n  // Before this exception was thrown, there should be `console.error` output\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n  // problem and how that type was used: key, atrribute, input value prop, etc.\n  // In most cases, this console output also shows the component and its\n  // ancestor components where the exception happened.\n  //\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + value;\n}\nfunction checkPropStringCoercion(value, propName) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided `%s` prop is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', propName, typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nfunction resolveDefaultProps(Component, baseProps) {\n  if (Component && Component.defaultProps) {\n    // Resolve default props. Taken from ReactElement\n    var props = assign({}, baseProps);\n    var defaultProps = Component.defaultProps;\n\n    for (var propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n\n    return props;\n  }\n\n  return baseProps;\n}\n\nvar valueCursor = createCursor(null);\nvar rendererSigil;\n\n{\n  // Use this to detect multiple renderers using the same context\n  rendererSigil = {};\n}\n\nvar currentlyRenderingFiber = null;\nvar lastContextDependency = null;\nvar lastFullyObservedContext = null;\nvar isDisallowedContextReadInDEV = false;\nfunction resetContextDependencies() {\n  // This is called right before React yields execution, to ensure `readContext`\n  // cannot be called outside the render phase.\n  currentlyRenderingFiber = null;\n  lastContextDependency = null;\n  lastFullyObservedContext = null;\n\n  {\n    isDisallowedContextReadInDEV = false;\n  }\n}\nfunction enterDisallowedContextReadInDEV() {\n  {\n    isDisallowedContextReadInDEV = true;\n  }\n}\nfunction exitDisallowedContextReadInDEV() {\n  {\n    isDisallowedContextReadInDEV = false;\n  }\n}\nfunction pushProvider(providerFiber, context, nextValue) {\n  {\n    push(valueCursor, context._currentValue2, providerFiber);\n    context._currentValue2 = nextValue;\n\n    {\n      if (context._currentRenderer2 !== undefined && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil) {\n        error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');\n      }\n\n      context._currentRenderer2 = rendererSigil;\n    }\n  }\n}\nfunction popProvider(context, providerFiber) {\n  var currentValue = valueCursor.current;\n  pop(valueCursor, providerFiber);\n\n  {\n    {\n      context._currentValue2 = currentValue;\n    }\n  }\n}\nfunction scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {\n  // Update the child lanes of all the ancestors, including the alternates.\n  var node = parent;\n\n  while (node !== null) {\n    var alternate = node.alternate;\n\n    if (!isSubsetOfLanes(node.childLanes, renderLanes)) {\n      node.childLanes = mergeLanes(node.childLanes, renderLanes);\n\n      if (alternate !== null) {\n        alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n      }\n    } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) {\n      alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n    }\n\n    if (node === propagationRoot) {\n      break;\n    }\n\n    node = node.return;\n  }\n\n  {\n    if (node !== propagationRoot) {\n      error('Expected to find the propagation root when scheduling context work. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n    }\n  }\n}\nfunction propagateContextChange(workInProgress, context, renderLanes) {\n  {\n    propagateContextChange_eager(workInProgress, context, renderLanes);\n  }\n}\n\nfunction propagateContextChange_eager(workInProgress, context, renderLanes) {\n\n  var fiber = workInProgress.child;\n\n  if (fiber !== null) {\n    // Set the return pointer of the child to the work-in-progress fiber.\n    fiber.return = workInProgress;\n  }\n\n  while (fiber !== null) {\n    var nextFiber = void 0; // Visit this fiber.\n\n    var list = fiber.dependencies;\n\n    if (list !== null) {\n      nextFiber = fiber.child;\n      var dependency = list.firstContext;\n\n      while (dependency !== null) {\n        // Check if the context matches.\n        if (dependency.context === context) {\n          // Match! Schedule an update on this fiber.\n          if (fiber.tag === ClassComponent) {\n            // Schedule a force update on the work-in-progress.\n            var lane = pickArbitraryLane(renderLanes);\n            var update = createUpdate(NoTimestamp, lane);\n            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the\n            // update to the current fiber, too, which means it will persist even if\n            // this render is thrown away. Since it's a race condition, not sure it's\n            // worth fixing.\n            // Inlined `enqueueUpdate` to remove interleaved update check\n\n            var updateQueue = fiber.updateQueue;\n\n            if (updateQueue === null) ; else {\n              var sharedQueue = updateQueue.shared;\n              var pending = sharedQueue.pending;\n\n              if (pending === null) {\n                // This is the first update. Create a circular list.\n                update.next = update;\n              } else {\n                update.next = pending.next;\n                pending.next = update;\n              }\n\n              sharedQueue.pending = update;\n            }\n          }\n\n          fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n          var alternate = fiber.alternate;\n\n          if (alternate !== null) {\n            alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n          }\n\n          scheduleContextWorkOnParentPath(fiber.return, renderLanes, workInProgress); // Mark the updated lanes on the list, too.\n\n          list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the\n          // dependency list.\n\n          break;\n        }\n\n        dependency = dependency.next;\n      }\n    } else if (fiber.tag === ContextProvider) {\n      // Don't scan deeper if this is a matching provider\n      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;\n    } else {\n      // Traverse down.\n      nextFiber = fiber.child;\n    }\n\n    if (nextFiber !== null) {\n      // Set the return pointer of the child to the work-in-progress fiber.\n      nextFiber.return = fiber;\n    } else {\n      // No child. Traverse to next sibling.\n      nextFiber = fiber;\n\n      while (nextFiber !== null) {\n        if (nextFiber === workInProgress) {\n          // We're back to the root of this subtree. Exit.\n          nextFiber = null;\n          break;\n        }\n\n        var sibling = nextFiber.sibling;\n\n        if (sibling !== null) {\n          // Set the return pointer of the sibling to the work-in-progress fiber.\n          sibling.return = nextFiber.return;\n          nextFiber = sibling;\n          break;\n        } // No more siblings. Traverse up.\n\n\n        nextFiber = nextFiber.return;\n      }\n    }\n\n    fiber = nextFiber;\n  }\n}\nfunction prepareToReadContext(workInProgress, renderLanes) {\n  currentlyRenderingFiber = workInProgress;\n  lastContextDependency = null;\n  lastFullyObservedContext = null;\n  var dependencies = workInProgress.dependencies;\n\n  if (dependencies !== null) {\n    {\n      var firstContext = dependencies.firstContext;\n\n      if (firstContext !== null) {\n        if (includesSomeLane(dependencies.lanes, renderLanes)) {\n          // Context list has a pending update. Mark that this fiber performed work.\n          markWorkInProgressReceivedUpdate();\n        } // Reset the work-in-progress list\n\n\n        dependencies.firstContext = null;\n      }\n    }\n  }\n}\nfunction readContext(context) {\n  {\n    // This warning would fire if you read context inside a Hook like useMemo.\n    // Unlike the class check below, it's not enforced in production for perf.\n    if (isDisallowedContextReadInDEV) {\n      error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');\n    }\n  }\n\n  var value =  context._currentValue2;\n\n  if (lastFullyObservedContext === context) ; else {\n    var contextItem = {\n      context: context,\n      memoizedValue: value,\n      next: null\n    };\n\n    if (lastContextDependency === null) {\n      if (currentlyRenderingFiber === null) {\n        throw new Error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');\n      } // This is the first dependency for this component. Create a new list.\n\n\n      lastContextDependency = contextItem;\n      currentlyRenderingFiber.dependencies = {\n        lanes: NoLanes,\n        firstContext: contextItem\n      };\n    } else {\n      // Append a new context item.\n      lastContextDependency = lastContextDependency.next = contextItem;\n    }\n  }\n\n  return value;\n}\n\n// An array of all update queues that received updates during the current\n// render. When this render exits, either because it finishes or because it is\n// interrupted, the interleaved updates will be transferred onto the main part\n// of the queue.\nvar interleavedQueues = null;\nfunction pushInterleavedQueue(queue) {\n  if (interleavedQueues === null) {\n    interleavedQueues = [queue];\n  } else {\n    interleavedQueues.push(queue);\n  }\n}\nfunction enqueueInterleavedUpdates() {\n  // Transfer the interleaved updates onto the main queue. Each queue has a\n  // `pending` field and an `interleaved` field. When they are not null, they\n  // point to the last node in a circular linked list. We need to append the\n  // interleaved list to the end of the pending list by joining them into a\n  // single, circular list.\n  if (interleavedQueues !== null) {\n    for (var i = 0; i < interleavedQueues.length; i++) {\n      var queue = interleavedQueues[i];\n      var lastInterleavedUpdate = queue.interleaved;\n\n      if (lastInterleavedUpdate !== null) {\n        queue.interleaved = null;\n        var firstInterleavedUpdate = lastInterleavedUpdate.next;\n        var lastPendingUpdate = queue.pending;\n\n        if (lastPendingUpdate !== null) {\n          var firstPendingUpdate = lastPendingUpdate.next;\n          lastPendingUpdate.next = firstInterleavedUpdate;\n          lastInterleavedUpdate.next = firstPendingUpdate;\n        }\n\n        queue.pending = lastInterleavedUpdate;\n      }\n    }\n\n    interleavedQueues = null;\n  }\n}\n\nvar UpdateState = 0;\nvar ReplaceState = 1;\nvar ForceUpdate = 2;\nvar CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.\n// It should only be read right after calling `processUpdateQueue`, via\n// `checkHasForceUpdateAfterProcessing`.\n\nvar hasForceUpdate = false;\nvar didWarnUpdateInsideUpdate;\nvar currentlyProcessingQueue;\n\n{\n  didWarnUpdateInsideUpdate = false;\n  currentlyProcessingQueue = null;\n}\n\nfunction initializeUpdateQueue(fiber) {\n  var queue = {\n    baseState: fiber.memoizedState,\n    firstBaseUpdate: null,\n    lastBaseUpdate: null,\n    shared: {\n      pending: null,\n      interleaved: null,\n      lanes: NoLanes\n    },\n    effects: null\n  };\n  fiber.updateQueue = queue;\n}\nfunction cloneUpdateQueue(current, workInProgress) {\n  // Clone the update queue from current. Unless it's already a clone.\n  var queue = workInProgress.updateQueue;\n  var currentQueue = current.updateQueue;\n\n  if (queue === currentQueue) {\n    var clone = {\n      baseState: currentQueue.baseState,\n      firstBaseUpdate: currentQueue.firstBaseUpdate,\n      lastBaseUpdate: currentQueue.lastBaseUpdate,\n      shared: currentQueue.shared,\n      effects: currentQueue.effects\n    };\n    workInProgress.updateQueue = clone;\n  }\n}\nfunction createUpdate(eventTime, lane) {\n  var update = {\n    eventTime: eventTime,\n    lane: lane,\n    tag: UpdateState,\n    payload: null,\n    callback: null,\n    next: null\n  };\n  return update;\n}\nfunction enqueueUpdate(fiber, update, lane) {\n  var updateQueue = fiber.updateQueue;\n\n  if (updateQueue === null) {\n    // Only occurs if the fiber has been unmounted.\n    return;\n  }\n\n  var sharedQueue = updateQueue.shared;\n\n  if (isInterleavedUpdate(fiber)) {\n    var interleaved = sharedQueue.interleaved;\n\n    if (interleaved === null) {\n      // This is the first update. Create a circular list.\n      update.next = update; // At the end of the current render, this queue's interleaved updates will\n      // be transferred to the pending queue.\n\n      pushInterleavedQueue(sharedQueue);\n    } else {\n      update.next = interleaved.next;\n      interleaved.next = update;\n    }\n\n    sharedQueue.interleaved = update;\n  } else {\n    var pending = sharedQueue.pending;\n\n    if (pending === null) {\n      // This is the first update. Create a circular list.\n      update.next = update;\n    } else {\n      update.next = pending.next;\n      pending.next = update;\n    }\n\n    sharedQueue.pending = update;\n  }\n\n  {\n    if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {\n      error('An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');\n\n      didWarnUpdateInsideUpdate = true;\n    }\n  }\n}\nfunction entangleTransitions(root, fiber, lane) {\n  var updateQueue = fiber.updateQueue;\n\n  if (updateQueue === null) {\n    // Only occurs if the fiber has been unmounted.\n    return;\n  }\n\n  var sharedQueue = updateQueue.shared;\n\n  if (isTransitionLane(lane)) {\n    var queueLanes = sharedQueue.lanes; // If any entangled lanes are no longer pending on the root, then they must\n    // have finished. We can remove them from the shared queue, which represents\n    // a superset of the actually pending lanes. In some cases we may entangle\n    // more than we need to, but that's OK. In fact it's worse if we *don't*\n    // entangle when we should.\n\n    queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.\n\n    var newQueueLanes = mergeLanes(queueLanes, lane);\n    sharedQueue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if\n    // the lane finished since the last time we entangled it. So we need to\n    // entangle it again, just to be sure.\n\n    markRootEntangled(root, newQueueLanes);\n  }\n}\nfunction enqueueCapturedUpdate(workInProgress, capturedUpdate) {\n  // Captured updates are updates that are thrown by a child during the render\n  // phase. They should be discarded if the render is aborted. Therefore,\n  // we should only put them on the work-in-progress queue, not the current one.\n  var queue = workInProgress.updateQueue; // Check if the work-in-progress queue is a clone.\n\n  var current = workInProgress.alternate;\n\n  if (current !== null) {\n    var currentQueue = current.updateQueue;\n\n    if (queue === currentQueue) {\n      // The work-in-progress queue is the same as current. This happens when\n      // we bail out on a parent fiber that then captures an error thrown by\n      // a child. Since we want to append the update only to the work-in\n      // -progress queue, we need to clone the updates. We usually clone during\n      // processUpdateQueue, but that didn't happen in this case because we\n      // skipped over the parent when we bailed out.\n      var newFirst = null;\n      var newLast = null;\n      var firstBaseUpdate = queue.firstBaseUpdate;\n\n      if (firstBaseUpdate !== null) {\n        // Loop through the updates and clone them.\n        var update = firstBaseUpdate;\n\n        do {\n          var clone = {\n            eventTime: update.eventTime,\n            lane: update.lane,\n            tag: update.tag,\n            payload: update.payload,\n            callback: update.callback,\n            next: null\n          };\n\n          if (newLast === null) {\n            newFirst = newLast = clone;\n          } else {\n            newLast.next = clone;\n            newLast = clone;\n          }\n\n          update = update.next;\n        } while (update !== null); // Append the captured update the end of the cloned list.\n\n\n        if (newLast === null) {\n          newFirst = newLast = capturedUpdate;\n        } else {\n          newLast.next = capturedUpdate;\n          newLast = capturedUpdate;\n        }\n      } else {\n        // There are no base updates.\n        newFirst = newLast = capturedUpdate;\n      }\n\n      queue = {\n        baseState: currentQueue.baseState,\n        firstBaseUpdate: newFirst,\n        lastBaseUpdate: newLast,\n        shared: currentQueue.shared,\n        effects: currentQueue.effects\n      };\n      workInProgress.updateQueue = queue;\n      return;\n    }\n  } // Append the update to the end of the list.\n\n\n  var lastBaseUpdate = queue.lastBaseUpdate;\n\n  if (lastBaseUpdate === null) {\n    queue.firstBaseUpdate = capturedUpdate;\n  } else {\n    lastBaseUpdate.next = capturedUpdate;\n  }\n\n  queue.lastBaseUpdate = capturedUpdate;\n}\n\nfunction getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {\n  switch (update.tag) {\n    case ReplaceState:\n      {\n        var payload = update.payload;\n\n        if (typeof payload === 'function') {\n          // Updater function\n          {\n            enterDisallowedContextReadInDEV();\n          }\n\n          var nextState = payload.call(instance, prevState, nextProps);\n\n          {\n\n            exitDisallowedContextReadInDEV();\n          }\n\n          return nextState;\n        } // State object\n\n\n        return payload;\n      }\n\n    case CaptureUpdate:\n      {\n        workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;\n      }\n    // Intentional fallthrough\n\n    case UpdateState:\n      {\n        var _payload = update.payload;\n        var partialState;\n\n        if (typeof _payload === 'function') {\n          // Updater function\n          {\n            enterDisallowedContextReadInDEV();\n          }\n\n          partialState = _payload.call(instance, prevState, nextProps);\n\n          {\n\n            exitDisallowedContextReadInDEV();\n          }\n        } else {\n          // Partial state object\n          partialState = _payload;\n        }\n\n        if (partialState === null || partialState === undefined) {\n          // Null and undefined are treated as no-ops.\n          return prevState;\n        } // Merge the partial state and the previous state.\n\n\n        return assign({}, prevState, partialState);\n      }\n\n    case ForceUpdate:\n      {\n        hasForceUpdate = true;\n        return prevState;\n      }\n  }\n\n  return prevState;\n}\n\nfunction processUpdateQueue(workInProgress, props, instance, renderLanes) {\n  // This is always non-null on a ClassComponent or HostRoot\n  var queue = workInProgress.updateQueue;\n  hasForceUpdate = false;\n\n  {\n    currentlyProcessingQueue = queue.shared;\n  }\n\n  var firstBaseUpdate = queue.firstBaseUpdate;\n  var lastBaseUpdate = queue.lastBaseUpdate; // Check if there are pending updates. If so, transfer them to the base queue.\n\n  var pendingQueue = queue.shared.pending;\n\n  if (pendingQueue !== null) {\n    queue.shared.pending = null; // The pending queue is circular. Disconnect the pointer between first\n    // and last so that it's non-circular.\n\n    var lastPendingUpdate = pendingQueue;\n    var firstPendingUpdate = lastPendingUpdate.next;\n    lastPendingUpdate.next = null; // Append pending updates to base queue\n\n    if (lastBaseUpdate === null) {\n      firstBaseUpdate = firstPendingUpdate;\n    } else {\n      lastBaseUpdate.next = firstPendingUpdate;\n    }\n\n    lastBaseUpdate = lastPendingUpdate; // If there's a current queue, and it's different from the base queue, then\n    // we need to transfer the updates to that queue, too. Because the base\n    // queue is a singly-linked list with no cycles, we can append to both\n    // lists and take advantage of structural sharing.\n    // TODO: Pass `current` as argument\n\n    var current = workInProgress.alternate;\n\n    if (current !== null) {\n      // This is always non-null on a ClassComponent or HostRoot\n      var currentQueue = current.updateQueue;\n      var currentLastBaseUpdate = currentQueue.lastBaseUpdate;\n\n      if (currentLastBaseUpdate !== lastBaseUpdate) {\n        if (currentLastBaseUpdate === null) {\n          currentQueue.firstBaseUpdate = firstPendingUpdate;\n        } else {\n          currentLastBaseUpdate.next = firstPendingUpdate;\n        }\n\n        currentQueue.lastBaseUpdate = lastPendingUpdate;\n      }\n    }\n  } // These values may change as we process the queue.\n\n\n  if (firstBaseUpdate !== null) {\n    // Iterate through the list of updates to compute the result.\n    var newState = queue.baseState; // TODO: Don't need to accumulate this. Instead, we can remove renderLanes\n    // from the original lanes.\n\n    var newLanes = NoLanes;\n    var newBaseState = null;\n    var newFirstBaseUpdate = null;\n    var newLastBaseUpdate = null;\n    var update = firstBaseUpdate;\n\n    do {\n      var updateLane = update.lane;\n      var updateEventTime = update.eventTime;\n\n      if (!isSubsetOfLanes(renderLanes, updateLane)) {\n        // Priority is insufficient. Skip this update. If this is the first\n        // skipped update, the previous update/state is the new base\n        // update/state.\n        var clone = {\n          eventTime: updateEventTime,\n          lane: updateLane,\n          tag: update.tag,\n          payload: update.payload,\n          callback: update.callback,\n          next: null\n        };\n\n        if (newLastBaseUpdate === null) {\n          newFirstBaseUpdate = newLastBaseUpdate = clone;\n          newBaseState = newState;\n        } else {\n          newLastBaseUpdate = newLastBaseUpdate.next = clone;\n        } // Update the remaining priority in the queue.\n\n\n        newLanes = mergeLanes(newLanes, updateLane);\n      } else {\n        // This update does have sufficient priority.\n        if (newLastBaseUpdate !== null) {\n          var _clone = {\n            eventTime: updateEventTime,\n            // This update is going to be committed so we never want uncommit\n            // it. Using NoLane works because 0 is a subset of all bitmasks, so\n            // this will never be skipped by the check above.\n            lane: NoLane,\n            tag: update.tag,\n            payload: update.payload,\n            callback: update.callback,\n            next: null\n          };\n          newLastBaseUpdate = newLastBaseUpdate.next = _clone;\n        } // Process this update.\n\n\n        newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);\n        var callback = update.callback;\n\n        if (callback !== null && // If the update was already committed, we should not queue its\n        // callback again.\n        update.lane !== NoLane) {\n          workInProgress.flags |= Callback;\n          var effects = queue.effects;\n\n          if (effects === null) {\n            queue.effects = [update];\n          } else {\n            effects.push(update);\n          }\n        }\n      }\n\n      update = update.next;\n\n      if (update === null) {\n        pendingQueue = queue.shared.pending;\n\n        if (pendingQueue === null) {\n          break;\n        } else {\n          // An update was scheduled from inside a reducer. Add the new\n          // pending updates to the end of the list and keep processing.\n          var _lastPendingUpdate = pendingQueue; // Intentionally unsound. Pending updates form a circular list, but we\n          // unravel them when transferring them to the base queue.\n\n          var _firstPendingUpdate = _lastPendingUpdate.next;\n          _lastPendingUpdate.next = null;\n          update = _firstPendingUpdate;\n          queue.lastBaseUpdate = _lastPendingUpdate;\n          queue.shared.pending = null;\n        }\n      }\n    } while (true);\n\n    if (newLastBaseUpdate === null) {\n      newBaseState = newState;\n    }\n\n    queue.baseState = newBaseState;\n    queue.firstBaseUpdate = newFirstBaseUpdate;\n    queue.lastBaseUpdate = newLastBaseUpdate; // Interleaved updates are stored on a separate queue. We aren't going to\n    // process them during this render, but we do need to track which lanes\n    // are remaining.\n\n    var lastInterleaved = queue.shared.interleaved;\n\n    if (lastInterleaved !== null) {\n      var interleaved = lastInterleaved;\n\n      do {\n        newLanes = mergeLanes(newLanes, interleaved.lane);\n        interleaved = interleaved.next;\n      } while (interleaved !== lastInterleaved);\n    } else if (firstBaseUpdate === null) {\n      // `queue.lanes` is used for entangling transitions. We can set it back to\n      // zero once the queue is empty.\n      queue.shared.lanes = NoLanes;\n    } // Set the remaining expiration time to be whatever is remaining in the queue.\n    // This should be fine because the only two other things that contribute to\n    // expiration time are props and context. We're already in the middle of the\n    // begin phase by the time we start processing the queue, so we've already\n    // dealt with the props. Context in components that specify\n    // shouldComponentUpdate is tricky; but we'll have to account for\n    // that regardless.\n\n\n    markSkippedUpdateLanes(newLanes);\n    workInProgress.lanes = newLanes;\n    workInProgress.memoizedState = newState;\n  }\n\n  {\n    currentlyProcessingQueue = null;\n  }\n}\n\nfunction callCallback(callback, context) {\n  if (typeof callback !== 'function') {\n    throw new Error('Invalid argument passed as callback. Expected a function. Instead ' + (\"received: \" + callback));\n  }\n\n  callback.call(context);\n}\n\nfunction resetHasForceUpdateBeforeProcessing() {\n  hasForceUpdate = false;\n}\nfunction checkHasForceUpdateAfterProcessing() {\n  return hasForceUpdate;\n}\nfunction commitUpdateQueue(finishedWork, finishedQueue, instance) {\n  // Commit the effects\n  var effects = finishedQueue.effects;\n  finishedQueue.effects = null;\n\n  if (effects !== null) {\n    for (var i = 0; i < effects.length; i++) {\n      var effect = effects[i];\n      var callback = effect.callback;\n\n      if (callback !== null) {\n        effect.callback = null;\n        callCallback(callback, instance);\n      }\n    }\n  }\n}\n\nvar fakeInternalInstance = {}; // React.Component uses a shared frozen object by default.\n// We'll use it to determine whether we need to initialize legacy refs.\n\nvar emptyRefsObject = new React.Component().refs;\nvar didWarnAboutStateAssignmentForComponent;\nvar didWarnAboutUninitializedState;\nvar didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;\nvar didWarnAboutLegacyLifecyclesAndDerivedState;\nvar didWarnAboutUndefinedDerivedState;\nvar warnOnUndefinedDerivedState;\nvar warnOnInvalidCallback;\nvar didWarnAboutDirectlyAssigningPropsToState;\nvar didWarnAboutContextTypeAndContextTypes;\nvar didWarnAboutInvalidateContextType;\n\n{\n  didWarnAboutStateAssignmentForComponent = new Set();\n  didWarnAboutUninitializedState = new Set();\n  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();\n  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();\n  didWarnAboutDirectlyAssigningPropsToState = new Set();\n  didWarnAboutUndefinedDerivedState = new Set();\n  didWarnAboutContextTypeAndContextTypes = new Set();\n  didWarnAboutInvalidateContextType = new Set();\n  var didWarnOnInvalidCallback = new Set();\n\n  warnOnInvalidCallback = function (callback, callerName) {\n    if (callback === null || typeof callback === 'function') {\n      return;\n    }\n\n    var key = callerName + '_' + callback;\n\n    if (!didWarnOnInvalidCallback.has(key)) {\n      didWarnOnInvalidCallback.add(key);\n\n      error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);\n    }\n  };\n\n  warnOnUndefinedDerivedState = function (type, partialState) {\n    if (partialState === undefined) {\n      var componentName = getComponentNameFromType(type) || 'Component';\n\n      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {\n        didWarnAboutUndefinedDerivedState.add(componentName);\n\n        error('%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);\n      }\n    }\n  }; // This is so gross but it's at least non-critical and can be removed if\n  // it causes problems. This is meant to give a nicer error message for\n  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,\n  // ...)) which otherwise throws a \"_processChildContext is not a function\"\n  // exception.\n\n\n  Object.defineProperty(fakeInternalInstance, '_processChildContext', {\n    enumerable: false,\n    value: function () {\n      throw new Error('_processChildContext is not available in React 16+. This likely ' + 'means you have multiple copies of React and are attempting to nest ' + 'a React 15 tree inside a React 16 tree using ' + \"unstable_renderSubtreeIntoContainer, which isn't supported. Try \" + 'to make sure you have only one copy of React (and ideally, switch ' + 'to ReactDOM.createPortal).');\n    }\n  });\n  Object.freeze(fakeInternalInstance);\n}\n\nfunction applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {\n  var prevState = workInProgress.memoizedState;\n  var partialState = getDerivedStateFromProps(nextProps, prevState);\n\n  {\n\n    warnOnUndefinedDerivedState(ctor, partialState);\n  } // Merge the partial state and the previous state.\n\n\n  var memoizedState = partialState === null || partialState === undefined ? prevState : assign({}, prevState, partialState);\n  workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the\n  // base state.\n\n  if (workInProgress.lanes === NoLanes) {\n    // Queue is always non-null for classes\n    var updateQueue = workInProgress.updateQueue;\n    updateQueue.baseState = memoizedState;\n  }\n}\n\nvar classComponentUpdater = {\n  isMounted: isMounted,\n  enqueueSetState: function (inst, payload, callback) {\n    var fiber = get(inst);\n    var eventTime = requestEventTime();\n    var lane = requestUpdateLane(fiber);\n    var update = createUpdate(eventTime, lane);\n    update.payload = payload;\n\n    if (callback !== undefined && callback !== null) {\n      {\n        warnOnInvalidCallback(callback, 'setState');\n      }\n\n      update.callback = callback;\n    }\n\n    enqueueUpdate(fiber, update);\n    var root = scheduleUpdateOnFiber(fiber, lane, eventTime);\n\n    if (root !== null) {\n      entangleTransitions(root, fiber, lane);\n    }\n  },\n  enqueueReplaceState: function (inst, payload, callback) {\n    var fiber = get(inst);\n    var eventTime = requestEventTime();\n    var lane = requestUpdateLane(fiber);\n    var update = createUpdate(eventTime, lane);\n    update.tag = ReplaceState;\n    update.payload = payload;\n\n    if (callback !== undefined && callback !== null) {\n      {\n        warnOnInvalidCallback(callback, 'replaceState');\n      }\n\n      update.callback = callback;\n    }\n\n    enqueueUpdate(fiber, update);\n    var root = scheduleUpdateOnFiber(fiber, lane, eventTime);\n\n    if (root !== null) {\n      entangleTransitions(root, fiber, lane);\n    }\n  },\n  enqueueForceUpdate: function (inst, callback) {\n    var fiber = get(inst);\n    var eventTime = requestEventTime();\n    var lane = requestUpdateLane(fiber);\n    var update = createUpdate(eventTime, lane);\n    update.tag = ForceUpdate;\n\n    if (callback !== undefined && callback !== null) {\n      {\n        warnOnInvalidCallback(callback, 'forceUpdate');\n      }\n\n      update.callback = callback;\n    }\n\n    enqueueUpdate(fiber, update);\n    var root = scheduleUpdateOnFiber(fiber, lane, eventTime);\n\n    if (root !== null) {\n      entangleTransitions(root, fiber, lane);\n    }\n  }\n};\n\nfunction checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {\n  var instance = workInProgress.stateNode;\n\n  if (typeof instance.shouldComponentUpdate === 'function') {\n    var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);\n\n    {\n\n      if (shouldUpdate === undefined) {\n        error('%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentNameFromType(ctor) || 'Component');\n      }\n    }\n\n    return shouldUpdate;\n  }\n\n  if (ctor.prototype && ctor.prototype.isPureReactComponent) {\n    return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);\n  }\n\n  return true;\n}\n\nfunction checkClassInstance(workInProgress, ctor, newProps) {\n  var instance = workInProgress.stateNode;\n\n  {\n    var name = getComponentNameFromType(ctor) || 'Component';\n    var renderPresent = instance.render;\n\n    if (!renderPresent) {\n      if (ctor.prototype && typeof ctor.prototype.render === 'function') {\n        error('%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);\n      } else {\n        error('%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);\n      }\n    }\n\n    if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {\n      error('getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);\n    }\n\n    if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {\n      error('getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);\n    }\n\n    if (instance.propTypes) {\n      error('propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);\n    }\n\n    if (instance.contextType) {\n      error('contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name);\n    }\n\n    {\n      if (instance.contextTypes) {\n        error('contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);\n      }\n\n      if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {\n        didWarnAboutContextTypeAndContextTypes.add(ctor);\n\n        error('%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);\n      }\n    }\n\n    if (typeof instance.componentShouldUpdate === 'function') {\n      error('%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);\n    }\n\n    if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {\n      error('%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentNameFromType(ctor) || 'A pure component');\n    }\n\n    if (typeof instance.componentDidUnmount === 'function') {\n      error('%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);\n    }\n\n    if (typeof instance.componentDidReceiveProps === 'function') {\n      error('%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);\n    }\n\n    if (typeof instance.componentWillRecieveProps === 'function') {\n      error('%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);\n    }\n\n    if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {\n      error('%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name);\n    }\n\n    var hasMutatedProps = instance.props !== newProps;\n\n    if (instance.props !== undefined && hasMutatedProps) {\n      error('%s(...): When calling super() in `%s`, make sure to pass ' + \"up the same props that your component's constructor was passed.\", name, name);\n    }\n\n    if (instance.defaultProps) {\n      error('Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);\n    }\n\n    if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {\n      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);\n\n      error('%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentNameFromType(ctor));\n    }\n\n    if (typeof instance.getDerivedStateFromProps === 'function') {\n      error('%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);\n    }\n\n    if (typeof instance.getDerivedStateFromError === 'function') {\n      error('%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);\n    }\n\n    if (typeof ctor.getSnapshotBeforeUpdate === 'function') {\n      error('%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name);\n    }\n\n    var _state = instance.state;\n\n    if (_state && (typeof _state !== 'object' || isArray(_state))) {\n      error('%s.state: must be set to an object or null', name);\n    }\n\n    if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') {\n      error('%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name);\n    }\n  }\n}\n\nfunction adoptClassInstance(workInProgress, instance) {\n  instance.updater = classComponentUpdater;\n  workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates\n\n  set(instance, workInProgress);\n\n  {\n    instance._reactInternalInstance = fakeInternalInstance;\n  }\n}\n\nfunction constructClassInstance(workInProgress, ctor, props) {\n  var isLegacyContextConsumer = false;\n  var unmaskedContext = emptyContextObject;\n  var context = emptyContextObject;\n  var contextType = ctor.contextType;\n\n  {\n    if ('contextType' in ctor) {\n      var isValid = // Allow null for conditional declaration\n      contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>\n\n      if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {\n        didWarnAboutInvalidateContextType.add(ctor);\n        var addendum = '';\n\n        if (contextType === undefined) {\n          addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';\n        } else if (typeof contextType !== 'object') {\n          addendum = ' However, it is set to a ' + typeof contextType + '.';\n        } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {\n          addendum = ' Did you accidentally pass the Context.Provider instead?';\n        } else if (contextType._context !== undefined) {\n          // <Context.Consumer>\n          addendum = ' Did you accidentally pass the Context.Consumer instead?';\n        } else {\n          addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';\n        }\n\n        error('%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentNameFromType(ctor) || 'Component', addendum);\n      }\n    }\n  }\n\n  if (typeof contextType === 'object' && contextType !== null) {\n    context = readContext(contextType);\n  } else {\n    unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    var contextTypes = ctor.contextTypes;\n    isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;\n    context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;\n  }\n\n  var instance = new ctor(props, context); // Instantiate twice to help detect side-effects.\n\n  var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;\n  adoptClassInstance(workInProgress, instance);\n\n  {\n    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {\n      var componentName = getComponentNameFromType(ctor) || 'Component';\n\n      if (!didWarnAboutUninitializedState.has(componentName)) {\n        didWarnAboutUninitializedState.add(componentName);\n\n        error('`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);\n      }\n    } // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n    // Warn about these lifecycles if they are present.\n    // Don't warn about react-lifecycles-compat polyfilled methods though.\n\n\n    if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {\n      var foundWillMountName = null;\n      var foundWillReceivePropsName = null;\n      var foundWillUpdateName = null;\n\n      if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {\n        foundWillMountName = 'componentWillMount';\n      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {\n        foundWillMountName = 'UNSAFE_componentWillMount';\n      }\n\n      if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {\n        foundWillReceivePropsName = 'componentWillReceiveProps';\n      } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';\n      }\n\n      if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {\n        foundWillUpdateName = 'componentWillUpdate';\n      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n        foundWillUpdateName = 'UNSAFE_componentWillUpdate';\n      }\n\n      if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {\n        var _componentName = getComponentNameFromType(ctor) || 'Component';\n\n        var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';\n\n        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {\n          didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);\n\n          error('Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\\n\\n' + 'The above lifecycles should be removed. Learn more about this warning here:\\n' + 'https://reactjs.org/link/unsafe-component-lifecycles', _componentName, newApiName, foundWillMountName !== null ? \"\\n  \" + foundWillMountName : '', foundWillReceivePropsName !== null ? \"\\n  \" + foundWillReceivePropsName : '', foundWillUpdateName !== null ? \"\\n  \" + foundWillUpdateName : '');\n        }\n      }\n    }\n  } // Cache unmasked context so we can avoid recreating masked context unless necessary.\n  // ReactFiberContext usually updates this cache but can't for newly-created instances.\n\n\n  if (isLegacyContextConsumer) {\n    cacheContext(workInProgress, unmaskedContext, context);\n  }\n\n  return instance;\n}\n\nfunction callComponentWillMount(workInProgress, instance) {\n  var oldState = instance.state;\n\n  if (typeof instance.componentWillMount === 'function') {\n    instance.componentWillMount();\n  }\n\n  if (typeof instance.UNSAFE_componentWillMount === 'function') {\n    instance.UNSAFE_componentWillMount();\n  }\n\n  if (oldState !== instance.state) {\n    {\n      error('%s.componentWillMount(): Assigning directly to this.state is ' + \"deprecated (except inside a component's \" + 'constructor). Use setState instead.', getComponentNameFromFiber(workInProgress) || 'Component');\n    }\n\n    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n  }\n}\n\nfunction callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {\n  var oldState = instance.state;\n\n  if (typeof instance.componentWillReceiveProps === 'function') {\n    instance.componentWillReceiveProps(newProps, nextContext);\n  }\n\n  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);\n  }\n\n  if (instance.state !== oldState) {\n    {\n      var componentName = getComponentNameFromFiber(workInProgress) || 'Component';\n\n      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {\n        didWarnAboutStateAssignmentForComponent.add(componentName);\n\n        error('%s.componentWillReceiveProps(): Assigning directly to ' + \"this.state is deprecated (except inside a component's \" + 'constructor). Use setState instead.', componentName);\n      }\n    }\n\n    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n  }\n} // Invokes the mount life-cycles on a previously never rendered instance.\n\n\nfunction mountClassInstance(workInProgress, ctor, newProps, renderLanes) {\n  {\n    checkClassInstance(workInProgress, ctor, newProps);\n  }\n\n  var instance = workInProgress.stateNode;\n  instance.props = newProps;\n  instance.state = workInProgress.memoizedState;\n  instance.refs = emptyRefsObject;\n  initializeUpdateQueue(workInProgress);\n  var contextType = ctor.contextType;\n\n  if (typeof contextType === 'object' && contextType !== null) {\n    instance.context = readContext(contextType);\n  } else {\n    var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    instance.context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  {\n    if (instance.state === newProps) {\n      var componentName = getComponentNameFromType(ctor) || 'Component';\n\n      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {\n        didWarnAboutDirectlyAssigningPropsToState.add(componentName);\n\n        error('%s: It is not recommended to assign props directly to state ' + \"because updates to props won't be reflected in state. \" + 'In most cases, it is better to use props directly.', componentName);\n      }\n    }\n\n    if (workInProgress.mode & StrictLegacyMode) {\n      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);\n    }\n\n    {\n      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);\n    }\n  }\n\n  instance.state = workInProgress.memoizedState;\n  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n    instance.state = workInProgress.memoizedState;\n  } // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n\n\n  if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {\n    callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's\n    // process them now.\n\n    processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n    instance.state = workInProgress.memoizedState;\n  }\n\n  if (typeof instance.componentDidMount === 'function') {\n    var fiberFlags = Update;\n\n    workInProgress.flags |= fiberFlags;\n  }\n}\n\nfunction resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {\n  var instance = workInProgress.stateNode;\n  var oldProps = workInProgress.memoizedProps;\n  instance.props = oldProps;\n  var oldContext = instance.context;\n  var contextType = ctor.contextType;\n  var nextContext = emptyContextObject;\n\n  if (typeof contextType === 'object' && contextType !== null) {\n    nextContext = readContext(contextType);\n  } else {\n    var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);\n  }\n\n  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what\n  // ever the previously attempted to render - not the \"current\". However,\n  // during componentDidUpdate we pass the \"current\" props.\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n\n  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {\n    if (oldProps !== newProps || oldContext !== nextContext) {\n      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);\n    }\n  }\n\n  resetHasForceUpdateBeforeProcessing();\n  var oldState = workInProgress.memoizedState;\n  var newState = instance.state = oldState;\n  processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n  newState = workInProgress.memoizedState;\n\n  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidMount === 'function') {\n      var fiberFlags = Update;\n\n      workInProgress.flags |= fiberFlags;\n    }\n\n    return false;\n  }\n\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n    newState = workInProgress.memoizedState;\n  }\n\n  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);\n\n  if (shouldUpdate) {\n    // In order to support react-lifecycles-compat polyfilled components,\n    // Unsafe lifecycles should not be invoked for components using the new APIs.\n    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {\n      if (typeof instance.componentWillMount === 'function') {\n        instance.componentWillMount();\n      }\n\n      if (typeof instance.UNSAFE_componentWillMount === 'function') {\n        instance.UNSAFE_componentWillMount();\n      }\n    }\n\n    if (typeof instance.componentDidMount === 'function') {\n      var _fiberFlags = Update;\n\n      workInProgress.flags |= _fiberFlags;\n    }\n  } else {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidMount === 'function') {\n      var _fiberFlags2 = Update;\n\n      workInProgress.flags |= _fiberFlags2;\n    } // If shouldComponentUpdate returned false, we should still update the\n    // memoized state to indicate that this work can be reused.\n\n\n    workInProgress.memoizedProps = newProps;\n    workInProgress.memoizedState = newState;\n  } // Update the existing instance's state, props, and context pointers even\n  // if shouldComponentUpdate returns false.\n\n\n  instance.props = newProps;\n  instance.state = newState;\n  instance.context = nextContext;\n  return shouldUpdate;\n} // Invokes the update life-cycles and returns false if it shouldn't rerender.\n\n\nfunction updateClassInstance(current, workInProgress, ctor, newProps, renderLanes) {\n  var instance = workInProgress.stateNode;\n  cloneUpdateQueue(current, workInProgress);\n  var unresolvedOldProps = workInProgress.memoizedProps;\n  var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);\n  instance.props = oldProps;\n  var unresolvedNewProps = workInProgress.pendingProps;\n  var oldContext = instance.context;\n  var contextType = ctor.contextType;\n  var nextContext = emptyContextObject;\n\n  if (typeof contextType === 'object' && contextType !== null) {\n    nextContext = readContext(contextType);\n  } else {\n    var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);\n  }\n\n  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what\n  // ever the previously attempted to render - not the \"current\". However,\n  // during componentDidUpdate we pass the \"current\" props.\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n\n  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {\n    if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {\n      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);\n    }\n  }\n\n  resetHasForceUpdateBeforeProcessing();\n  var oldState = workInProgress.memoizedState;\n  var newState = instance.state = oldState;\n  processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n  newState = workInProgress.memoizedState;\n\n  if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !(enableLazyContextPropagation   )) {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidUpdate === 'function') {\n      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n        workInProgress.flags |= Update;\n      }\n    }\n\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n        workInProgress.flags |= Snapshot;\n      }\n    }\n\n    return false;\n  }\n\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n    newState = workInProgress.memoizedState;\n  }\n\n  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,\n  // both before and after `shouldComponentUpdate` has been called. Not ideal,\n  // but I'm loath to refactor this function. This only happens for memoized\n  // components so it's not that common.\n  enableLazyContextPropagation   ;\n\n  if (shouldUpdate) {\n    // In order to support react-lifecycles-compat polyfilled components,\n    // Unsafe lifecycles should not be invoked for components using the new APIs.\n    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {\n      if (typeof instance.componentWillUpdate === 'function') {\n        instance.componentWillUpdate(newProps, newState, nextContext);\n      }\n\n      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);\n      }\n    }\n\n    if (typeof instance.componentDidUpdate === 'function') {\n      workInProgress.flags |= Update;\n    }\n\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      workInProgress.flags |= Snapshot;\n    }\n  } else {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidUpdate === 'function') {\n      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n        workInProgress.flags |= Update;\n      }\n    }\n\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n        workInProgress.flags |= Snapshot;\n      }\n    } // If shouldComponentUpdate returned false, we should still update the\n    // memoized props/state to indicate that this work can be reused.\n\n\n    workInProgress.memoizedProps = newProps;\n    workInProgress.memoizedState = newState;\n  } // Update the existing instance's state, props, and context pointers even\n  // if shouldComponentUpdate returns false.\n\n\n  instance.props = newProps;\n  instance.state = newState;\n  instance.context = nextContext;\n  return shouldUpdate;\n}\n\n// TODO: Use the unified fiber stack module instead of this local one?\n// Intentionally not using it yet to derisk the initial implementation, because\n// the way we push/pop these values is a bit unusual. If there's a mistake, I'd\n// rather the ids be wrong than crash the whole reconciler.\nvar forkStack = [];\nvar forkStackIndex = 0;\nvar treeForkProvider = null;\nvar treeForkCount = 0;\nvar idStack = [];\nvar idStackIndex = 0;\nvar treeContextProvider = null;\nvar treeContextId = 1;\nvar treeContextOverflow = '';\n\nfunction popTreeContext(workInProgress) {\n  // Restore the previous values.\n  // This is a bit more complicated than other context-like modules in Fiber\n  // because the same Fiber may appear on the stack multiple times and for\n  // different reasons. We have to keep popping until the work-in-progress is\n  // no longer at the top of the stack.\n  while (workInProgress === treeForkProvider) {\n    treeForkProvider = forkStack[--forkStackIndex];\n    forkStack[forkStackIndex] = null;\n    treeForkCount = forkStack[--forkStackIndex];\n    forkStack[forkStackIndex] = null;\n  }\n\n  while (workInProgress === treeContextProvider) {\n    treeContextProvider = idStack[--idStackIndex];\n    idStack[idStackIndex] = null;\n    treeContextOverflow = idStack[--idStackIndex];\n    idStack[idStackIndex] = null;\n    treeContextId = idStack[--idStackIndex];\n    idStack[idStackIndex] = null;\n  }\n}\n\nvar isHydrating = false;\n\nfunction prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {\n  {\n    throw new Error('Expected prepareToHydrateHostInstance() to never be called. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n  }\n}\n\nfunction prepareToHydrateHostTextInstance(fiber) {\n  {\n    throw new Error('Expected prepareToHydrateHostTextInstance() to never be called. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n  }\n  var shouldUpdate = hydrateTextInstance();\n}\n\nfunction popHydrationState(fiber) {\n  {\n    return false;\n  }\n}\n\nfunction getIsHydrating() {\n  return isHydrating;\n}\n\nvar didWarnAboutMaps;\nvar didWarnAboutGenerators;\nvar didWarnAboutStringRefs;\nvar ownerHasKeyUseWarning;\nvar ownerHasFunctionTypeWarning;\n\nvar warnForMissingKey = function (child, returnFiber) {};\n\n{\n  didWarnAboutMaps = false;\n  didWarnAboutGenerators = false;\n  didWarnAboutStringRefs = {};\n  /**\n   * Warn if there's no key explicitly set on dynamic arrays of children or\n   * object keys are not valid. This allows us to keep track of children between\n   * updates.\n   */\n\n  ownerHasKeyUseWarning = {};\n  ownerHasFunctionTypeWarning = {};\n\n  warnForMissingKey = function (child, returnFiber) {\n    if (child === null || typeof child !== 'object') {\n      return;\n    }\n\n    if (!child._store || child._store.validated || child.key != null) {\n      return;\n    }\n\n    if (typeof child._store !== 'object') {\n      throw new Error('React Component in warnForMissingKey should have a _store. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n    }\n\n    child._store.validated = true;\n    var componentName = getComponentNameFromFiber(returnFiber) || 'Component';\n\n    if (ownerHasKeyUseWarning[componentName]) {\n      return;\n    }\n\n    ownerHasKeyUseWarning[componentName] = true;\n\n    error('Each child in a list should have a unique ' + '\"key\" prop. See https://reactjs.org/link/warning-keys for ' + 'more information.');\n  };\n}\n\nfunction coerceRef(returnFiber, current, element) {\n  var mixedRef = element.ref;\n\n  if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {\n    {\n      // TODO: Clean this up once we turn on the string ref warning for\n      // everyone, because the strict mode case will no longer be relevant\n      if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs\n      // because these cannot be automatically converted to an arrow function\n      // using a codemod. Therefore, we don't have to warn about string refs again.\n      !(element._owner && element._self && element._owner.stateNode !== element._self)) {\n        var componentName = getComponentNameFromFiber(returnFiber) || 'Component';\n\n        if (!didWarnAboutStringRefs[componentName]) {\n          {\n            error('A string ref, \"%s\", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', mixedRef);\n          }\n\n          didWarnAboutStringRefs[componentName] = true;\n        }\n      }\n    }\n\n    if (element._owner) {\n      var owner = element._owner;\n      var inst;\n\n      if (owner) {\n        var ownerFiber = owner;\n\n        if (ownerFiber.tag !== ClassComponent) {\n          throw new Error('Function components cannot have string refs. ' + 'We recommend using useRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref');\n        }\n\n        inst = ownerFiber.stateNode;\n      }\n\n      if (!inst) {\n        throw new Error(\"Missing owner for string ref \" + mixedRef + \". This error is likely caused by a \" + 'bug in React. Please file an issue.');\n      } // Assigning this to a const so Flow knows it won't change in the closure\n\n\n      var resolvedInst = inst;\n\n      {\n        checkPropStringCoercion(mixedRef, 'ref');\n      }\n\n      var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref\n\n      if (current !== null && current.ref !== null && typeof current.ref === 'function' && current.ref._stringRef === stringRef) {\n        return current.ref;\n      }\n\n      var ref = function (value) {\n        var refs = resolvedInst.refs;\n\n        if (refs === emptyRefsObject) {\n          // This is a lazy pooled frozen object, so we need to initialize.\n          refs = resolvedInst.refs = {};\n        }\n\n        if (value === null) {\n          delete refs[stringRef];\n        } else {\n          refs[stringRef] = value;\n        }\n      };\n\n      ref._stringRef = stringRef;\n      return ref;\n    } else {\n      if (typeof mixedRef !== 'string') {\n        throw new Error('Expected ref to be a function, a string, an object returned by React.createRef(), or null.');\n      }\n\n      if (!element._owner) {\n        throw new Error(\"Element ref was specified as a string (\" + mixedRef + \") but no owner was set. This could happen for one of\" + ' the following reasons:\\n' + '1. You may be adding a ref to a function component\\n' + \"2. You may be adding a ref to a component that was not created inside a component's render method\\n\" + '3. You have multiple copies of React loaded\\n' + 'See https://reactjs.org/link/refs-must-have-owner for more information.');\n      }\n    }\n  }\n\n  return mixedRef;\n}\n\nfunction throwOnInvalidObjectType(returnFiber, newChild) {\n  var childString = Object.prototype.toString.call(newChild);\n  throw new Error(\"Objects are not valid as a React child (found: \" + (childString === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : childString) + \"). \" + 'If you meant to render a collection of children, use an array ' + 'instead.');\n}\n\nfunction warnOnFunctionType(returnFiber) {\n  {\n    var componentName = getComponentNameFromFiber(returnFiber) || 'Component';\n\n    if (ownerHasFunctionTypeWarning[componentName]) {\n      return;\n    }\n\n    ownerHasFunctionTypeWarning[componentName] = true;\n\n    error('Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');\n  }\n}\n// to be able to optimize each path individually by branching early. This needs\n// a compiler or we can do it manually. Helpers that don't need this branching\n// live outside of this function.\n\n\nfunction ChildReconciler(shouldTrackSideEffects) {\n  function deleteChild(returnFiber, childToDelete) {\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return;\n    }\n\n    var deletions = returnFiber.deletions;\n\n    if (deletions === null) {\n      returnFiber.deletions = [childToDelete];\n      returnFiber.flags |= ChildDeletion;\n    } else {\n      deletions.push(childToDelete);\n    }\n  }\n\n  function deleteRemainingChildren(returnFiber, currentFirstChild) {\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return null;\n    } // TODO: For the shouldClone case, this could be micro-optimized a bit by\n    // assuming that after the first child we've already added everything.\n\n\n    var childToDelete = currentFirstChild;\n\n    while (childToDelete !== null) {\n      deleteChild(returnFiber, childToDelete);\n      childToDelete = childToDelete.sibling;\n    }\n\n    return null;\n  }\n\n  function mapRemainingChildren(returnFiber, currentFirstChild) {\n    // Add the remaining children to a temporary map so that we can find them by\n    // keys quickly. Implicit (null) keys get added to this set with their index\n    // instead.\n    var existingChildren = new Map();\n    var existingChild = currentFirstChild;\n\n    while (existingChild !== null) {\n      if (existingChild.key !== null) {\n        existingChildren.set(existingChild.key, existingChild);\n      } else {\n        existingChildren.set(existingChild.index, existingChild);\n      }\n\n      existingChild = existingChild.sibling;\n    }\n\n    return existingChildren;\n  }\n\n  function useFiber(fiber, pendingProps) {\n    // We currently set sibling to null and index to 0 here because it is easy\n    // to forget to do before returning it. E.g. for the single child case.\n    var clone = createWorkInProgress(fiber, pendingProps);\n    clone.index = 0;\n    clone.sibling = null;\n    return clone;\n  }\n\n  function placeChild(newFiber, lastPlacedIndex, newIndex) {\n    newFiber.index = newIndex;\n\n    if (!shouldTrackSideEffects) {\n      // During hydration, the useId algorithm needs to know which fibers are\n      // part of a list of children (arrays, iterators).\n      newFiber.flags |= Forked;\n      return lastPlacedIndex;\n    }\n\n    var current = newFiber.alternate;\n\n    if (current !== null) {\n      var oldIndex = current.index;\n\n      if (oldIndex < lastPlacedIndex) {\n        // This is a move.\n        newFiber.flags |= Placement;\n        return lastPlacedIndex;\n      } else {\n        // This item can stay in place.\n        return oldIndex;\n      }\n    } else {\n      // This is an insertion.\n      newFiber.flags |= Placement;\n      return lastPlacedIndex;\n    }\n  }\n\n  function placeSingleChild(newFiber) {\n    // This is simpler for the single child case. We only need to do a\n    // placement for inserting new children.\n    if (shouldTrackSideEffects && newFiber.alternate === null) {\n      newFiber.flags |= Placement;\n    }\n\n    return newFiber;\n  }\n\n  function updateTextNode(returnFiber, current, textContent, lanes) {\n    if (current === null || current.tag !== HostText) {\n      // Insert\n      var created = createFiberFromText(textContent, returnFiber.mode, lanes);\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      var existing = useFiber(current, textContent);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function updateElement(returnFiber, current, element, lanes) {\n    var elementType = element.type;\n\n    if (elementType === REACT_FRAGMENT_TYPE) {\n      return updateFragment(returnFiber, current, element.props.children, lanes, element.key);\n    }\n\n    if (current !== null) {\n      if (current.elementType === elementType || ( // Keep this check inline so it only runs on the false path:\n       isCompatibleFamilyForHotReloading(current, element) ) || // Lazy types should reconcile their resolved type.\n      // We need to do this after the Hot Reloading check above,\n      // because hot reloading has different semantics than prod because\n      // it doesn't resuspend. So we can't let the call below suspend.\n      enableLazyElements    ) {\n        // Move based on index\n        var existing = useFiber(current, element.props);\n        existing.ref = coerceRef(returnFiber, current, element);\n        existing.return = returnFiber;\n\n        {\n          existing._debugSource = element._source;\n          existing._debugOwner = element._owner;\n        }\n\n        return existing;\n      }\n    } // Insert\n\n\n    var created = createFiberFromElement(element, returnFiber.mode, lanes);\n    created.ref = coerceRef(returnFiber, current, element);\n    created.return = returnFiber;\n    return created;\n  }\n\n  function updatePortal(returnFiber, current, portal, lanes) {\n    if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {\n      // Insert\n      var created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      var existing = useFiber(current, portal.children || []);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function updateFragment(returnFiber, current, fragment, lanes, key) {\n    if (current === null || current.tag !== Fragment) {\n      // Insert\n      var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      var existing = useFiber(current, fragment);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function createChild(returnFiber, newChild, lanes) {\n    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {\n      // Text nodes don't have keys. If the previous node is implicitly keyed\n      // we can continue to replace it without aborting even if it is not a text\n      // node.\n      var created = createFiberFromText('' + newChild, returnFiber.mode, lanes);\n      created.return = returnFiber;\n      return created;\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n          {\n            var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);\n\n            _created.ref = coerceRef(returnFiber, null, newChild);\n            _created.return = returnFiber;\n            return _created;\n          }\n\n        case REACT_PORTAL_TYPE:\n          {\n            var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);\n\n            _created2.return = returnFiber;\n            return _created2;\n          }\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);\n\n        _created3.return = returnFiber;\n        return _created3;\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n\n  function updateSlot(returnFiber, oldFiber, newChild, lanes) {\n    // Update the fiber if the keys match, otherwise return null.\n    var key = oldFiber !== null ? oldFiber.key : null;\n\n    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {\n      // Text nodes don't have keys. If the previous node is implicitly keyed\n      // we can continue to replace it without aborting even if it is not a text\n      // node.\n      if (key !== null) {\n        return null;\n      }\n\n      return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n          {\n            if (newChild.key === key) {\n              return updateElement(returnFiber, oldFiber, newChild, lanes);\n            } else {\n              return null;\n            }\n          }\n\n        case REACT_PORTAL_TYPE:\n          {\n            if (newChild.key === key) {\n              return updatePortal(returnFiber, oldFiber, newChild, lanes);\n            } else {\n              return null;\n            }\n          }\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        if (key !== null) {\n          return null;\n        }\n\n        return updateFragment(returnFiber, oldFiber, newChild, lanes, null);\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n\n  function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {\n    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {\n      // Text nodes don't have keys, so we neither have to check the old nor\n      // new node for the key. If both are text nodes, they match.\n      var matchedFiber = existingChildren.get(newIdx) || null;\n      return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n          {\n            var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;\n\n            return updateElement(returnFiber, _matchedFiber, newChild, lanes);\n          }\n\n        case REACT_PORTAL_TYPE:\n          {\n            var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;\n\n            return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);\n          }\n\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        var _matchedFiber3 = existingChildren.get(newIdx) || null;\n\n        return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Warns if there is a duplicate or missing key\n   */\n\n\n  function warnOnInvalidKey(child, knownKeys, returnFiber) {\n    {\n      if (typeof child !== 'object' || child === null) {\n        return knownKeys;\n      }\n\n      switch (child.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n        case REACT_PORTAL_TYPE:\n          warnForMissingKey(child, returnFiber);\n          var key = child.key;\n\n          if (typeof key !== 'string') {\n            break;\n          }\n\n          if (knownKeys === null) {\n            knownKeys = new Set();\n            knownKeys.add(key);\n            break;\n          }\n\n          if (!knownKeys.has(key)) {\n            knownKeys.add(key);\n            break;\n          }\n\n          error('Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);\n\n          break;\n      }\n    }\n\n    return knownKeys;\n  }\n\n  function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {\n    // This algorithm can't optimize by searching from both ends since we\n    // don't have backpointers on fibers. I'm trying to see how far we can get\n    // with that model. If it ends up not being worth the tradeoffs, we can\n    // add it later.\n    // Even with a two ended optimization, we'd want to optimize for the case\n    // where there are few changes and brute force the comparison instead of\n    // going for the Map. It'd like to explore hitting that path first in\n    // forward-only mode and only go for the Map once we notice that we need\n    // lots of look ahead. This doesn't handle reversal as well as two ended\n    // search but that's unusual. Besides, for the two ended optimization to\n    // work on Iterables, we'd need to copy the whole set.\n    // In this first iteration, we'll just live with hitting the bad case\n    // (adding everything to a Map) in for every insert/move.\n    // If you change this code, also update reconcileChildrenIterator() which\n    // uses the same algorithm.\n    {\n      // First, validate keys.\n      var knownKeys = null;\n\n      for (var i = 0; i < newChildren.length; i++) {\n        var child = newChildren[i];\n        knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n      }\n    }\n\n    var resultingFirstChild = null;\n    var previousNewFiber = null;\n    var oldFiber = currentFirstChild;\n    var lastPlacedIndex = 0;\n    var newIdx = 0;\n    var nextOldFiber = null;\n\n    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {\n      if (oldFiber.index > newIdx) {\n        nextOldFiber = oldFiber;\n        oldFiber = null;\n      } else {\n        nextOldFiber = oldFiber.sibling;\n      }\n\n      var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);\n\n      if (newFiber === null) {\n        // TODO: This breaks on empty slots like null children. That's\n        // unfortunate because it triggers the slow path all the time. We need\n        // a better way to communicate whether this was a miss or null,\n        // boolean, undefined, etc.\n        if (oldFiber === null) {\n          oldFiber = nextOldFiber;\n        }\n\n        break;\n      }\n\n      if (shouldTrackSideEffects) {\n        if (oldFiber && newFiber.alternate === null) {\n          // We matched the slot, but we didn't reuse the existing fiber, so we\n          // need to delete the existing child.\n          deleteChild(returnFiber, oldFiber);\n        }\n      }\n\n      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n\n      if (previousNewFiber === null) {\n        // TODO: Move out of the loop. This only happens for the first run.\n        resultingFirstChild = newFiber;\n      } else {\n        // TODO: Defer siblings if we're not at the right index for this slot.\n        // I.e. if we had null values before, then we want to defer this\n        // for each null value. However, we also don't want to call updateSlot\n        // with the previous one.\n        previousNewFiber.sibling = newFiber;\n      }\n\n      previousNewFiber = newFiber;\n      oldFiber = nextOldFiber;\n    }\n\n    if (newIdx === newChildren.length) {\n      // We've reached the end of the new children. We can delete the rest.\n      deleteRemainingChildren(returnFiber, oldFiber);\n\n      return resultingFirstChild;\n    }\n\n    if (oldFiber === null) {\n      // If we don't have any more existing children we can choose a fast path\n      // since the rest will all be insertions.\n      for (; newIdx < newChildren.length; newIdx++) {\n        var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);\n\n        if (_newFiber === null) {\n          continue;\n        }\n\n        lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);\n\n        if (previousNewFiber === null) {\n          // TODO: Move out of the loop. This only happens for the first run.\n          resultingFirstChild = _newFiber;\n        } else {\n          previousNewFiber.sibling = _newFiber;\n        }\n\n        previousNewFiber = _newFiber;\n      }\n\n      return resultingFirstChild;\n    } // Add all children to a key map for quick lookups.\n\n\n    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.\n\n    for (; newIdx < newChildren.length; newIdx++) {\n      var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);\n\n      if (_newFiber2 !== null) {\n        if (shouldTrackSideEffects) {\n          if (_newFiber2.alternate !== null) {\n            // The new fiber is a work in progress, but if there exists a\n            // current, that means that we reused the fiber. We need to delete\n            // it from the child list so that we don't add it to the deletion\n            // list.\n            existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);\n          }\n        }\n\n        lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);\n\n        if (previousNewFiber === null) {\n          resultingFirstChild = _newFiber2;\n        } else {\n          previousNewFiber.sibling = _newFiber2;\n        }\n\n        previousNewFiber = _newFiber2;\n      }\n    }\n\n    if (shouldTrackSideEffects) {\n      // Any existing children that weren't consumed above were deleted. We need\n      // to add them to the deletion list.\n      existingChildren.forEach(function (child) {\n        return deleteChild(returnFiber, child);\n      });\n    }\n\n    return resultingFirstChild;\n  }\n\n  function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {\n    // This is the same implementation as reconcileChildrenArray(),\n    // but using the iterator instead.\n    var iteratorFn = getIteratorFn(newChildrenIterable);\n\n    if (typeof iteratorFn !== 'function') {\n      throw new Error('An object is not an iterable. This error is likely caused by a bug in ' + 'React. Please file an issue.');\n    }\n\n    {\n      // We don't support rendering Generators because it's a mutation.\n      // See https://github.com/facebook/react/issues/12995\n      if (typeof Symbol === 'function' && // $FlowFixMe Flow doesn't know about toStringTag\n      newChildrenIterable[Symbol.toStringTag] === 'Generator') {\n        if (!didWarnAboutGenerators) {\n          error('Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.');\n        }\n\n        didWarnAboutGenerators = true;\n      } // Warn about using Maps as children\n\n\n      if (newChildrenIterable.entries === iteratorFn) {\n        if (!didWarnAboutMaps) {\n          error('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');\n        }\n\n        didWarnAboutMaps = true;\n      } // First, validate keys.\n      // We'll get a different iterator later for the main pass.\n\n\n      var _newChildren = iteratorFn.call(newChildrenIterable);\n\n      if (_newChildren) {\n        var knownKeys = null;\n\n        var _step = _newChildren.next();\n\n        for (; !_step.done; _step = _newChildren.next()) {\n          var child = _step.value;\n          knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n        }\n      }\n    }\n\n    var newChildren = iteratorFn.call(newChildrenIterable);\n\n    if (newChildren == null) {\n      throw new Error('An iterable object provided no iterator.');\n    }\n\n    var resultingFirstChild = null;\n    var previousNewFiber = null;\n    var oldFiber = currentFirstChild;\n    var lastPlacedIndex = 0;\n    var newIdx = 0;\n    var nextOldFiber = null;\n    var step = newChildren.next();\n\n    for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {\n      if (oldFiber.index > newIdx) {\n        nextOldFiber = oldFiber;\n        oldFiber = null;\n      } else {\n        nextOldFiber = oldFiber.sibling;\n      }\n\n      var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);\n\n      if (newFiber === null) {\n        // TODO: This breaks on empty slots like null children. That's\n        // unfortunate because it triggers the slow path all the time. We need\n        // a better way to communicate whether this was a miss or null,\n        // boolean, undefined, etc.\n        if (oldFiber === null) {\n          oldFiber = nextOldFiber;\n        }\n\n        break;\n      }\n\n      if (shouldTrackSideEffects) {\n        if (oldFiber && newFiber.alternate === null) {\n          // We matched the slot, but we didn't reuse the existing fiber, so we\n          // need to delete the existing child.\n          deleteChild(returnFiber, oldFiber);\n        }\n      }\n\n      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n\n      if (previousNewFiber === null) {\n        // TODO: Move out of the loop. This only happens for the first run.\n        resultingFirstChild = newFiber;\n      } else {\n        // TODO: Defer siblings if we're not at the right index for this slot.\n        // I.e. if we had null values before, then we want to defer this\n        // for each null value. However, we also don't want to call updateSlot\n        // with the previous one.\n        previousNewFiber.sibling = newFiber;\n      }\n\n      previousNewFiber = newFiber;\n      oldFiber = nextOldFiber;\n    }\n\n    if (step.done) {\n      // We've reached the end of the new children. We can delete the rest.\n      deleteRemainingChildren(returnFiber, oldFiber);\n\n      return resultingFirstChild;\n    }\n\n    if (oldFiber === null) {\n      // If we don't have any more existing children we can choose a fast path\n      // since the rest will all be insertions.\n      for (; !step.done; newIdx++, step = newChildren.next()) {\n        var _newFiber3 = createChild(returnFiber, step.value, lanes);\n\n        if (_newFiber3 === null) {\n          continue;\n        }\n\n        lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);\n\n        if (previousNewFiber === null) {\n          // TODO: Move out of the loop. This only happens for the first run.\n          resultingFirstChild = _newFiber3;\n        } else {\n          previousNewFiber.sibling = _newFiber3;\n        }\n\n        previousNewFiber = _newFiber3;\n      }\n\n      return resultingFirstChild;\n    } // Add all children to a key map for quick lookups.\n\n\n    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.\n\n    for (; !step.done; newIdx++, step = newChildren.next()) {\n      var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);\n\n      if (_newFiber4 !== null) {\n        if (shouldTrackSideEffects) {\n          if (_newFiber4.alternate !== null) {\n            // The new fiber is a work in progress, but if there exists a\n            // current, that means that we reused the fiber. We need to delete\n            // it from the child list so that we don't add it to the deletion\n            // list.\n            existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);\n          }\n        }\n\n        lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);\n\n        if (previousNewFiber === null) {\n          resultingFirstChild = _newFiber4;\n        } else {\n          previousNewFiber.sibling = _newFiber4;\n        }\n\n        previousNewFiber = _newFiber4;\n      }\n    }\n\n    if (shouldTrackSideEffects) {\n      // Any existing children that weren't consumed above were deleted. We need\n      // to add them to the deletion list.\n      existingChildren.forEach(function (child) {\n        return deleteChild(returnFiber, child);\n      });\n    }\n\n    return resultingFirstChild;\n  }\n\n  function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {\n    // There's no need to check for keys on text nodes since we don't have a\n    // way to define them.\n    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {\n      // We already have an existing node so let's just update it and delete\n      // the rest.\n      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);\n      var existing = useFiber(currentFirstChild, textContent);\n      existing.return = returnFiber;\n      return existing;\n    } // The existing first child is not a text node so we need to create one\n    // and delete the existing ones.\n\n\n    deleteRemainingChildren(returnFiber, currentFirstChild);\n    var created = createFiberFromText(textContent, returnFiber.mode, lanes);\n    created.return = returnFiber;\n    return created;\n  }\n\n  function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {\n    var key = element.key;\n    var child = currentFirstChild;\n\n    while (child !== null) {\n      // TODO: If key === null and child.key === null, then this only applies to\n      // the first item in the list.\n      if (child.key === key) {\n        var elementType = element.type;\n\n        if (elementType === REACT_FRAGMENT_TYPE) {\n          if (child.tag === Fragment) {\n            deleteRemainingChildren(returnFiber, child.sibling);\n            var existing = useFiber(child, element.props.children);\n            existing.return = returnFiber;\n\n            {\n              existing._debugSource = element._source;\n              existing._debugOwner = element._owner;\n            }\n\n            return existing;\n          }\n        } else {\n          if (child.elementType === elementType || ( // Keep this check inline so it only runs on the false path:\n           isCompatibleFamilyForHotReloading(child, element) ) || // Lazy types should reconcile their resolved type.\n          // We need to do this after the Hot Reloading check above,\n          // because hot reloading has different semantics than prod because\n          // it doesn't resuspend. So we can't let the call below suspend.\n          enableLazyElements    ) {\n            deleteRemainingChildren(returnFiber, child.sibling);\n\n            var _existing = useFiber(child, element.props);\n\n            _existing.ref = coerceRef(returnFiber, child, element);\n            _existing.return = returnFiber;\n\n            {\n              _existing._debugSource = element._source;\n              _existing._debugOwner = element._owner;\n            }\n\n            return _existing;\n          }\n        } // Didn't match.\n\n\n        deleteRemainingChildren(returnFiber, child);\n        break;\n      } else {\n        deleteChild(returnFiber, child);\n      }\n\n      child = child.sibling;\n    }\n\n    if (element.type === REACT_FRAGMENT_TYPE) {\n      var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);\n      created.return = returnFiber;\n      return created;\n    } else {\n      var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);\n\n      _created4.ref = coerceRef(returnFiber, currentFirstChild, element);\n      _created4.return = returnFiber;\n      return _created4;\n    }\n  }\n\n  function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {\n    var key = portal.key;\n    var child = currentFirstChild;\n\n    while (child !== null) {\n      // TODO: If key === null and child.key === null, then this only applies to\n      // the first item in the list.\n      if (child.key === key) {\n        if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {\n          deleteRemainingChildren(returnFiber, child.sibling);\n          var existing = useFiber(child, portal.children || []);\n          existing.return = returnFiber;\n          return existing;\n        } else {\n          deleteRemainingChildren(returnFiber, child);\n          break;\n        }\n      } else {\n        deleteChild(returnFiber, child);\n      }\n\n      child = child.sibling;\n    }\n\n    var created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n    created.return = returnFiber;\n    return created;\n  } // This API will tag the children with the side-effect of the reconciliation\n  // itself. They will be added to the side-effect list as we pass through the\n  // children and the parent.\n\n\n  function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {\n    // This function is not recursive.\n    // If the top level item is an array, we treat it as a set of children,\n    // not as a fragment. Nested arrays on the other hand will be treated as\n    // fragment nodes. Recursion happens at the normal flow.\n    // Handle top level unkeyed fragments as if they were arrays.\n    // This leads to an ambiguity between <>{[...]}</> and <>...</>.\n    // We treat the ambiguous cases above the same.\n    var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;\n\n    if (isUnkeyedTopLevelFragment) {\n      newChild = newChild.props.children;\n    } // Handle object types\n\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n          return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));\n\n        case REACT_PORTAL_TYPE:\n          return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));\n\n      }\n\n      if (isArray(newChild)) {\n        return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);\n      }\n\n      if (getIteratorFn(newChild)) {\n        return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {\n      return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, lanes));\n    }\n\n    {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    } // Remaining cases are all treated as empty.\n\n\n    return deleteRemainingChildren(returnFiber, currentFirstChild);\n  }\n\n  return reconcileChildFibers;\n}\n\nvar reconcileChildFibers = ChildReconciler(true);\nvar mountChildFibers = ChildReconciler(false);\nfunction cloneChildFibers(current, workInProgress) {\n  if (current !== null && workInProgress.child !== current.child) {\n    throw new Error('Resuming work not yet implemented.');\n  }\n\n  if (workInProgress.child === null) {\n    return;\n  }\n\n  var currentChild = workInProgress.child;\n  var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);\n  workInProgress.child = newChild;\n  newChild.return = workInProgress;\n\n  while (currentChild.sibling !== null) {\n    currentChild = currentChild.sibling;\n    newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);\n    newChild.return = workInProgress;\n  }\n\n  newChild.sibling = null;\n} // Reset a workInProgress child set to prepare it for a second pass.\n\nfunction resetChildFibers(workInProgress, lanes) {\n  var child = workInProgress.child;\n\n  while (child !== null) {\n    resetWorkInProgress(child, lanes);\n    child = child.sibling;\n  }\n}\n\nvar NO_CONTEXT$1 = {};\nvar contextStackCursor$1 = createCursor(NO_CONTEXT$1);\nvar contextFiberStackCursor = createCursor(NO_CONTEXT$1);\nvar rootInstanceStackCursor = createCursor(NO_CONTEXT$1);\n\nfunction requiredContext(c) {\n  if (c === NO_CONTEXT$1) {\n    throw new Error('Expected host context to exist. This error is likely caused by a bug ' + 'in React. Please file an issue.');\n  }\n\n  return c;\n}\n\nfunction getRootHostContainer() {\n  var rootInstance = requiredContext(rootInstanceStackCursor.current);\n  return rootInstance;\n}\n\nfunction pushHostContainer(fiber, nextRootInstance) {\n  // Push current root instance onto the stack;\n  // This allows us to reset root when portals are popped.\n  push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.\n  // This enables us to pop only Fibers that provide unique contexts.\n\n  push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.\n  // However, we can't just call getRootHostContext() and push it because\n  // we'd have a different number of entries on the stack depending on\n  // whether getRootHostContext() throws somewhere in renderer code or not.\n  // So we push an empty value first. This lets us safely unwind on errors.\n\n  push(contextStackCursor$1, NO_CONTEXT$1, fiber);\n  var nextRootContext = getRootHostContext(); // Now that we know this function doesn't throw, replace it.\n\n  pop(contextStackCursor$1, fiber);\n  push(contextStackCursor$1, nextRootContext, fiber);\n}\n\nfunction popHostContainer(fiber) {\n  pop(contextStackCursor$1, fiber);\n  pop(contextFiberStackCursor, fiber);\n  pop(rootInstanceStackCursor, fiber);\n}\n\nfunction getHostContext() {\n  var context = requiredContext(contextStackCursor$1.current);\n  return context;\n}\n\nfunction pushHostContext(fiber) {\n  var rootInstance = requiredContext(rootInstanceStackCursor.current);\n  var context = requiredContext(contextStackCursor$1.current);\n  var nextContext = getChildHostContext(context, fiber.type); // Don't push this Fiber's context unless it's unique.\n\n  if (context === nextContext) {\n    return;\n  } // Track the context and the Fiber that provided it.\n  // This enables us to pop only Fibers that provide unique contexts.\n\n\n  push(contextFiberStackCursor, fiber, fiber);\n  push(contextStackCursor$1, nextContext, fiber);\n}\n\nfunction popHostContext(fiber) {\n  // Do not pop unless this Fiber provided the current context.\n  // pushHostContext() only pushes Fibers that provide unique contexts.\n  if (contextFiberStackCursor.current !== fiber) {\n    return;\n  }\n\n  pop(contextStackCursor$1, fiber);\n  pop(contextFiberStackCursor, fiber);\n}\n\nvar DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is\n// inherited deeply down the subtree. The upper bits only affect\n// this immediate suspense boundary and gets reset each new\n// boundary or suspense list.\n\nvar SubtreeSuspenseContextMask = 1; // Subtree Flags:\n// InvisibleParentSuspenseContext indicates that one of our parent Suspense\n// boundaries is not currently showing visible main content.\n// Either because it is already showing a fallback or is not mounted at all.\n// We can use this to determine if it is desirable to trigger a fallback at\n// the parent. If not, then we might need to trigger undesirable boundaries\n// and/or suspend the commit to avoid hiding the parent content.\n\nvar InvisibleParentSuspenseContext = 1; // Shallow Flags:\n// ForceSuspenseFallback can be used by SuspenseList to force newly added\n// items into their fallback state during one of the render passes.\n\nvar ForceSuspenseFallback = 2;\nvar suspenseStackCursor = createCursor(DefaultSuspenseContext);\nfunction hasSuspenseContext(parentContext, flag) {\n  return (parentContext & flag) !== 0;\n}\nfunction setDefaultShallowSuspenseContext(parentContext) {\n  return parentContext & SubtreeSuspenseContextMask;\n}\nfunction setShallowSuspenseContext(parentContext, shallowContext) {\n  return parentContext & SubtreeSuspenseContextMask | shallowContext;\n}\nfunction addSubtreeSuspenseContext(parentContext, subtreeContext) {\n  return parentContext | subtreeContext;\n}\nfunction pushSuspenseContext(fiber, newContext) {\n  push(suspenseStackCursor, newContext, fiber);\n}\nfunction popSuspenseContext(fiber) {\n  pop(suspenseStackCursor, fiber);\n}\n\nfunction shouldCaptureSuspense(workInProgress, hasInvisibleParent) {\n  // If it was the primary children that just suspended, capture and render the\n  // fallback. Otherwise, don't capture and bubble to the next boundary.\n  var nextState = workInProgress.memoizedState;\n\n  if (nextState !== null) {\n    if (nextState.dehydrated !== null) {\n      // A dehydrated boundary always captures.\n      return true;\n    }\n\n    return false;\n  }\n\n  var props = workInProgress.memoizedProps; // Regular boundaries always capture.\n\n  {\n    return true;\n  } // If it's a boundary we should avoid, then we prefer to bubble up to the\n}\nfunction findFirstSuspended(row) {\n  var node = row;\n\n  while (node !== null) {\n    if (node.tag === SuspenseComponent) {\n      var state = node.memoizedState;\n\n      if (state !== null) {\n        var dehydrated = state.dehydrated;\n\n        if (dehydrated === null || isSuspenseInstancePending() || isSuspenseInstanceFallback()) {\n          return node;\n        }\n      }\n    } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't\n    // keep track of whether it suspended or not.\n    node.memoizedProps.revealOrder !== undefined) {\n      var didSuspend = (node.flags & DidCapture) !== NoFlags;\n\n      if (didSuspend) {\n        return node;\n      }\n    } else if (node.child !== null) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n\n    if (node === row) {\n      return null;\n    }\n\n    while (node.sibling === null) {\n      if (node.return === null || node.return === row) {\n        return null;\n      }\n\n      node = node.return;\n    }\n\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n\n  return null;\n}\n\nvar NoFlags$1 =\n/*   */\n0; // Represents whether effect should fire.\n\nvar HasEffect =\n/* */\n1; // Represents the phase in which the effect (not the clean-up) fires.\n\nvar Insertion =\n/*  */\n2;\nvar Layout =\n/*    */\n4;\nvar Passive$1 =\n/*   */\n8;\n\n// and should be reset before starting a new render.\n// This tracks which mutable sources need to be reset after a render.\n\nvar workInProgressSources = [];\nfunction resetWorkInProgressVersions() {\n  for (var i = 0; i < workInProgressSources.length; i++) {\n    var mutableSource = workInProgressSources[i];\n\n    {\n      mutableSource._workInProgressVersionSecondary = null;\n    }\n  }\n\n  workInProgressSources.length = 0;\n}\n\nvar ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,\n    ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;\nvar didWarnAboutMismatchedHooksForComponent;\nvar didWarnUncachedGetSnapshot;\n\n{\n  didWarnAboutMismatchedHooksForComponent = new Set();\n}\n\n// These are set right before calling the component.\nvar renderLanes = NoLanes; // The work-in-progress fiber. I've named it differently to distinguish it from\n// the work-in-progress hook.\n\nvar currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The\n// current hook list is the list that belongs to the current fiber. The\n// work-in-progress hook list is a new list that will be added to the\n// work-in-progress fiber.\n\nvar currentHook = null;\nvar workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This\n// does not get reset if we do another render pass; only when we're completely\n// finished evaluating this component. This is an optimization so we know\n// whether we need to clear render phase updates after a throw.\n\nvar didScheduleRenderPhaseUpdate = false; // Where an update was scheduled only during the current render pass. This\n// gets reset after each attempt.\n// TODO: Maybe there's some way to consolidate this with\n// `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.\n\nvar didScheduleRenderPhaseUpdateDuringThisPass = false; // Counts the number of useId hooks in this component.\n// hydration). This counter is global, so client ids are not stable across\n// render attempts.\n\nvar globalClientIdCounter = 0;\nvar RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook\n\nvar currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.\n// The list stores the order of hooks used during the initial render (mount).\n// Subsequent renders (updates) reference this list.\n\nvar hookTypesDev = null;\nvar hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore\n// the dependencies for Hooks that need them (e.g. useEffect or useMemo).\n// When true, such Hooks will always be \"remounted\". Only used during hot reload.\n\nvar ignorePreviousDependencies = false;\n\nfunction mountHookTypesDev() {\n  {\n    var hookName = currentHookNameInDev;\n\n    if (hookTypesDev === null) {\n      hookTypesDev = [hookName];\n    } else {\n      hookTypesDev.push(hookName);\n    }\n  }\n}\n\nfunction updateHookTypesDev() {\n  {\n    var hookName = currentHookNameInDev;\n\n    if (hookTypesDev !== null) {\n      hookTypesUpdateIndexDev++;\n\n      if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {\n        warnOnHookMismatchInDev(hookName);\n      }\n    }\n  }\n}\n\nfunction checkDepsAreArrayDev(deps) {\n  {\n    if (deps !== undefined && deps !== null && !isArray(deps)) {\n      // Verify deps, but only on mount to avoid extra checks.\n      // It's unlikely their type would change as usually you define them inline.\n      error('%s received a final argument that is not an array (instead, received `%s`). When ' + 'specified, the final argument must be an array.', currentHookNameInDev, typeof deps);\n    }\n  }\n}\n\nfunction warnOnHookMismatchInDev(currentHookName) {\n  {\n    var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);\n\n    if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {\n      didWarnAboutMismatchedHooksForComponent.add(componentName);\n\n      if (hookTypesDev !== null) {\n        var table = '';\n        var secondColumnStart = 30;\n\n        for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {\n          var oldHookName = hookTypesDev[i];\n          var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;\n          var row = i + 1 + \". \" + oldHookName; // Extra space so second column lines up\n          // lol @ IE not supporting String#repeat\n\n          while (row.length < secondColumnStart) {\n            row += ' ';\n          }\n\n          row += newHookName + '\\n';\n          table += row;\n        }\n\n        error('React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\\n\\n' + '   Previous render            Next render\\n' + '   ------------------------------------------------------\\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n', componentName, table);\n      }\n    }\n  }\n}\n\nfunction throwInvalidHookError() {\n  throw new Error('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' + ' one of the following reasons:\\n' + '1. You might have mismatching versions of React and the renderer (such as React DOM)\\n' + '2. You might be breaking the Rules of Hooks\\n' + '3. You might have more than one copy of React in the same app\\n' + 'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.');\n}\n\nfunction areHookInputsEqual(nextDeps, prevDeps) {\n  {\n    if (ignorePreviousDependencies) {\n      // Only true when this component is being hot reloaded.\n      return false;\n    }\n  }\n\n  if (prevDeps === null) {\n    {\n      error('%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);\n    }\n\n    return false;\n  }\n\n  {\n    // Don't bother comparing lengths in prod because these arrays should be\n    // passed inline.\n    if (nextDeps.length !== prevDeps.length) {\n      error('The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\\n\\n' + 'Previous: %s\\n' + 'Incoming: %s', currentHookNameInDev, \"[\" + prevDeps.join(', ') + \"]\", \"[\" + nextDeps.join(', ') + \"]\");\n    }\n  }\n\n  for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {\n    if (objectIs(nextDeps[i], prevDeps[i])) {\n      continue;\n    }\n\n    return false;\n  }\n\n  return true;\n}\n\nfunction renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {\n  renderLanes = nextRenderLanes;\n  currentlyRenderingFiber$1 = workInProgress;\n\n  {\n    hookTypesDev = current !== null ? current._debugHookTypes : null;\n    hookTypesUpdateIndexDev = -1; // Used for hot reloading:\n\n    ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;\n  }\n\n  workInProgress.memoizedState = null;\n  workInProgress.updateQueue = null;\n  workInProgress.lanes = NoLanes; // The following should have already been reset\n  // currentHook = null;\n  // workInProgressHook = null;\n  // didScheduleRenderPhaseUpdate = false;\n  // localIdCounter = 0;\n  // TODO Warn if no hooks are used at all during mount, then some are used during update.\n  // Currently we will identify the update render as a mount because memoizedState === null.\n  // This is tricky because it's valid for certain types of components (e.g. React.lazy)\n  // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.\n  // Non-stateful hooks (e.g. context) don't get added to memoizedState,\n  // so memoizedState would be null during updates and mounts.\n\n  {\n    if (current !== null && current.memoizedState !== null) {\n      ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;\n    } else if (hookTypesDev !== null) {\n      // This dispatcher handles an edge case where a component is updating,\n      // but no stateful hooks have been used.\n      // We want to match the production code behavior (which will use HooksDispatcherOnMount),\n      // but with the extra DEV validation to ensure hooks ordering hasn't changed.\n      // This dispatcher does that.\n      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;\n    } else {\n      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;\n    }\n  }\n\n  var children = Component(props, secondArg); // Check if there was a render phase update\n\n  if (didScheduleRenderPhaseUpdateDuringThisPass) {\n    // Keep rendering in a loop for as long as render phase updates continue to\n    // be scheduled. Use a counter to prevent infinite loops.\n    var numberOfReRenders = 0;\n\n    do {\n      didScheduleRenderPhaseUpdateDuringThisPass = false;\n\n      if (numberOfReRenders >= RE_RENDER_LIMIT) {\n        throw new Error('Too many re-renders. React limits the number of renders to prevent ' + 'an infinite loop.');\n      }\n\n      numberOfReRenders += 1;\n\n      {\n        // Even when hot reloading, allow dependencies to stabilize\n        // after first render to prevent infinite render phase updates.\n        ignorePreviousDependencies = false;\n      } // Start over from the beginning of the list\n\n\n      currentHook = null;\n      workInProgressHook = null;\n      workInProgress.updateQueue = null;\n\n      {\n        // Also validate hook order for cascading updates.\n        hookTypesUpdateIndexDev = -1;\n      }\n\n      ReactCurrentDispatcher$1.current =  HooksDispatcherOnRerenderInDEV ;\n      children = Component(props, secondArg);\n    } while (didScheduleRenderPhaseUpdateDuringThisPass);\n  } // We can assume the previous dispatcher is always this one, since we set it\n  // at the beginning of the render phase and there's no re-entrance.\n\n\n  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;\n\n  {\n    workInProgress._debugHookTypes = hookTypesDev;\n  } // This check uses currentHook so that it works the same in DEV and prod bundles.\n  // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.\n\n\n  var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;\n  renderLanes = NoLanes;\n  currentlyRenderingFiber$1 = null;\n  currentHook = null;\n  workInProgressHook = null;\n\n  {\n    currentHookNameInDev = null;\n    hookTypesDev = null;\n    hookTypesUpdateIndexDev = -1; // Confirm that a static flag was not added or removed since the last\n    // render. If this fires, it suggests that we incorrectly reset the static\n    // flags in some other part of the codebase. This has happened before, for\n    // example, in the SuspenseList implementation.\n\n    if (current !== null && (current.flags & StaticMask) !== (workInProgress.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird\n    // and creates false positives. To make this work in legacy mode, we'd\n    // need to mark fibers that commit in an incomplete state, somehow. For\n    // now I'll disable the warning that most of the bugs that would trigger\n    // it are either exclusive to concurrent mode or exist in both.\n    (current.mode & ConcurrentMode) !== NoMode) {\n      error('Internal React error: Expected static flag was missing. Please ' + 'notify the React team.');\n    }\n  }\n\n  didScheduleRenderPhaseUpdate = false; // This is reset by checkDidRenderIdHook\n  // localIdCounter = 0;\n\n  if (didRenderTooFewHooks) {\n    throw new Error('Rendered fewer hooks than expected. This may be caused by an accidental ' + 'early return statement.');\n  }\n\n  return children;\n}\nfunction bailoutHooks(current, workInProgress, lanes) {\n  workInProgress.updateQueue = current.updateQueue; // TODO: Don't need to reset the flags here, because they're reset in the\n  // complete phase (bubbleProperties).\n\n  {\n    workInProgress.flags &= ~(Passive | Update);\n  }\n\n  current.lanes = removeLanes(current.lanes, lanes);\n}\nfunction resetHooksAfterThrow() {\n  // We can assume the previous dispatcher is always this one, since we set it\n  // at the beginning of the render phase and there's no re-entrance.\n  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;\n\n  if (didScheduleRenderPhaseUpdate) {\n    // There were render phase updates. These are only valid for this render\n    // phase, which we are now aborting. Remove the updates from the queues so\n    // they do not persist to the next render. Do not remove updates from hooks\n    // that weren't processed.\n    //\n    // Only reset the updates from the queue if it has a clone. If it does\n    // not have a clone, that means it wasn't processed, and the updates were\n    // scheduled before we entered the render phase.\n    var hook = currentlyRenderingFiber$1.memoizedState;\n\n    while (hook !== null) {\n      var queue = hook.queue;\n\n      if (queue !== null) {\n        queue.pending = null;\n      }\n\n      hook = hook.next;\n    }\n\n    didScheduleRenderPhaseUpdate = false;\n  }\n\n  renderLanes = NoLanes;\n  currentlyRenderingFiber$1 = null;\n  currentHook = null;\n  workInProgressHook = null;\n\n  {\n    hookTypesDev = null;\n    hookTypesUpdateIndexDev = -1;\n    currentHookNameInDev = null;\n    isUpdatingOpaqueValueInRenderPhase = false;\n  }\n\n  didScheduleRenderPhaseUpdateDuringThisPass = false;\n}\n\nfunction mountWorkInProgressHook() {\n  var hook = {\n    memoizedState: null,\n    baseState: null,\n    baseQueue: null,\n    queue: null,\n    next: null\n  };\n\n  if (workInProgressHook === null) {\n    // This is the first hook in the list\n    currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;\n  } else {\n    // Append to the end of the list\n    workInProgressHook = workInProgressHook.next = hook;\n  }\n\n  return workInProgressHook;\n}\n\nfunction updateWorkInProgressHook() {\n  // This function is used both for updates and for re-renders triggered by a\n  // render phase update. It assumes there is either a current hook we can\n  // clone, or a work-in-progress hook from a previous render pass that we can\n  // use as a base. When we reach the end of the base list, we must switch to\n  // the dispatcher used for mounts.\n  var nextCurrentHook;\n\n  if (currentHook === null) {\n    var current = currentlyRenderingFiber$1.alternate;\n\n    if (current !== null) {\n      nextCurrentHook = current.memoizedState;\n    } else {\n      nextCurrentHook = null;\n    }\n  } else {\n    nextCurrentHook = currentHook.next;\n  }\n\n  var nextWorkInProgressHook;\n\n  if (workInProgressHook === null) {\n    nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;\n  } else {\n    nextWorkInProgressHook = workInProgressHook.next;\n  }\n\n  if (nextWorkInProgressHook !== null) {\n    // There's already a work-in-progress. Reuse it.\n    workInProgressHook = nextWorkInProgressHook;\n    nextWorkInProgressHook = workInProgressHook.next;\n    currentHook = nextCurrentHook;\n  } else {\n    // Clone from the current hook.\n    if (nextCurrentHook === null) {\n      throw new Error('Rendered more hooks than during the previous render.');\n    }\n\n    currentHook = nextCurrentHook;\n    var newHook = {\n      memoizedState: currentHook.memoizedState,\n      baseState: currentHook.baseState,\n      baseQueue: currentHook.baseQueue,\n      queue: currentHook.queue,\n      next: null\n    };\n\n    if (workInProgressHook === null) {\n      // This is the first hook in the list.\n      currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;\n    } else {\n      // Append to the end of the list.\n      workInProgressHook = workInProgressHook.next = newHook;\n    }\n  }\n\n  return workInProgressHook;\n}\n\nfunction createFunctionComponentUpdateQueue() {\n  return {\n    lastEffect: null,\n    stores: null\n  };\n}\n\nfunction basicStateReducer(state, action) {\n  // $FlowFixMe: Flow doesn't like mixed types\n  return typeof action === 'function' ? action(state) : action;\n}\n\nfunction mountReducer(reducer, initialArg, init) {\n  var hook = mountWorkInProgressHook();\n  var initialState;\n\n  if (init !== undefined) {\n    initialState = init(initialArg);\n  } else {\n    initialState = initialArg;\n  }\n\n  hook.memoizedState = hook.baseState = initialState;\n  var queue = {\n    pending: null,\n    interleaved: null,\n    lanes: NoLanes,\n    dispatch: null,\n    lastRenderedReducer: reducer,\n    lastRenderedState: initialState\n  };\n  hook.queue = queue;\n  var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);\n  return [hook.memoizedState, dispatch];\n}\n\nfunction updateReducer(reducer, initialArg, init) {\n  var hook = updateWorkInProgressHook();\n  var queue = hook.queue;\n\n  if (queue === null) {\n    throw new Error('Should have a queue. This is likely a bug in React. Please file an issue.');\n  }\n\n  queue.lastRenderedReducer = reducer;\n  var current = currentHook; // The last rebase update that is NOT part of the base state.\n\n  var baseQueue = current.baseQueue; // The last pending update that hasn't been processed yet.\n\n  var pendingQueue = queue.pending;\n\n  if (pendingQueue !== null) {\n    // We have new updates that haven't been processed yet.\n    // We'll add them to the base queue.\n    if (baseQueue !== null) {\n      // Merge the pending queue and the base queue.\n      var baseFirst = baseQueue.next;\n      var pendingFirst = pendingQueue.next;\n      baseQueue.next = pendingFirst;\n      pendingQueue.next = baseFirst;\n    }\n\n    {\n      if (current.baseQueue !== baseQueue) {\n        // Internal invariant that should never happen, but feasibly could in\n        // the future if we implement resuming, or some form of that.\n        error('Internal error: Expected work-in-progress queue to be a clone. ' + 'This is a bug in React.');\n      }\n    }\n\n    current.baseQueue = baseQueue = pendingQueue;\n    queue.pending = null;\n  }\n\n  if (baseQueue !== null) {\n    // We have a queue to process.\n    var first = baseQueue.next;\n    var newState = current.baseState;\n    var newBaseState = null;\n    var newBaseQueueFirst = null;\n    var newBaseQueueLast = null;\n    var update = first;\n\n    do {\n      var updateLane = update.lane;\n\n      if (!isSubsetOfLanes(renderLanes, updateLane)) {\n        // Priority is insufficient. Skip this update. If this is the first\n        // skipped update, the previous update/state is the new base\n        // update/state.\n        var clone = {\n          lane: updateLane,\n          action: update.action,\n          hasEagerState: update.hasEagerState,\n          eagerState: update.eagerState,\n          next: null\n        };\n\n        if (newBaseQueueLast === null) {\n          newBaseQueueFirst = newBaseQueueLast = clone;\n          newBaseState = newState;\n        } else {\n          newBaseQueueLast = newBaseQueueLast.next = clone;\n        } // Update the remaining priority in the queue.\n        // TODO: Don't need to accumulate this. Instead, we can remove\n        // renderLanes from the original lanes.\n\n\n        currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);\n        markSkippedUpdateLanes(updateLane);\n      } else {\n        // This update does have sufficient priority.\n        if (newBaseQueueLast !== null) {\n          var _clone = {\n            // This update is going to be committed so we never want uncommit\n            // it. Using NoLane works because 0 is a subset of all bitmasks, so\n            // this will never be skipped by the check above.\n            lane: NoLane,\n            action: update.action,\n            hasEagerState: update.hasEagerState,\n            eagerState: update.eagerState,\n            next: null\n          };\n          newBaseQueueLast = newBaseQueueLast.next = _clone;\n        } // Process this update.\n\n\n        if (update.hasEagerState) {\n          // If this update is a state update (not a reducer) and was processed eagerly,\n          // we can use the eagerly computed state\n          newState = update.eagerState;\n        } else {\n          var action = update.action;\n          newState = reducer(newState, action);\n        }\n      }\n\n      update = update.next;\n    } while (update !== null && update !== first);\n\n    if (newBaseQueueLast === null) {\n      newBaseState = newState;\n    } else {\n      newBaseQueueLast.next = newBaseQueueFirst;\n    } // Mark that the fiber performed work, but only if the new state is\n    // different from the current state.\n\n\n    if (!objectIs(newState, hook.memoizedState)) {\n      markWorkInProgressReceivedUpdate();\n    }\n\n    hook.memoizedState = newState;\n    hook.baseState = newBaseState;\n    hook.baseQueue = newBaseQueueLast;\n    queue.lastRenderedState = newState;\n  } // Interleaved updates are stored on a separate queue. We aren't going to\n  // process them during this render, but we do need to track which lanes\n  // are remaining.\n\n\n  var lastInterleaved = queue.interleaved;\n\n  if (lastInterleaved !== null) {\n    var interleaved = lastInterleaved;\n\n    do {\n      var interleavedLane = interleaved.lane;\n      currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);\n      markSkippedUpdateLanes(interleavedLane);\n      interleaved = interleaved.next;\n    } while (interleaved !== lastInterleaved);\n  } else if (baseQueue === null) {\n    // `queue.lanes` is used for entangling transitions. We can set it back to\n    // zero once the queue is empty.\n    queue.lanes = NoLanes;\n  }\n\n  var dispatch = queue.dispatch;\n  return [hook.memoizedState, dispatch];\n}\n\nfunction rerenderReducer(reducer, initialArg, init) {\n  var hook = updateWorkInProgressHook();\n  var queue = hook.queue;\n\n  if (queue === null) {\n    throw new Error('Should have a queue. This is likely a bug in React. Please file an issue.');\n  }\n\n  queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous\n  // work-in-progress hook.\n\n  var dispatch = queue.dispatch;\n  var lastRenderPhaseUpdate = queue.pending;\n  var newState = hook.memoizedState;\n\n  if (lastRenderPhaseUpdate !== null) {\n    // The queue doesn't persist past this render pass.\n    queue.pending = null;\n    var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;\n    var update = firstRenderPhaseUpdate;\n\n    do {\n      // Process this render phase update. We don't have to check the\n      // priority because it will always be the same as the current\n      // render's.\n      var action = update.action;\n      newState = reducer(newState, action);\n      update = update.next;\n    } while (update !== firstRenderPhaseUpdate); // Mark that the fiber performed work, but only if the new state is\n    // different from the current state.\n\n\n    if (!objectIs(newState, hook.memoizedState)) {\n      markWorkInProgressReceivedUpdate();\n    }\n\n    hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to\n    // the base state unless the queue is empty.\n    // TODO: Not sure if this is the desired semantics, but it's what we\n    // do for gDSFP. I can't remember why.\n\n    if (hook.baseQueue === null) {\n      hook.baseState = newState;\n    }\n\n    queue.lastRenderedState = newState;\n  }\n\n  return [newState, dispatch];\n}\n\nfunction mountMutableSource(source, getSnapshot, subscribe) {\n  {\n    return undefined;\n  }\n}\n\nfunction updateMutableSource(source, getSnapshot, subscribe) {\n  {\n    return undefined;\n  }\n}\n\nfunction mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n  var fiber = currentlyRenderingFiber$1;\n  var hook = mountWorkInProgressHook();\n  var nextSnapshot;\n\n  {\n    nextSnapshot = getSnapshot();\n\n    {\n      if (!didWarnUncachedGetSnapshot) {\n        var cachedSnapshot = getSnapshot();\n\n        if (!objectIs(nextSnapshot, cachedSnapshot)) {\n          error('The result of getSnapshot should be cached to avoid an infinite loop');\n\n          didWarnUncachedGetSnapshot = true;\n        }\n      }\n    } // Unless we're rendering a blocking lane, schedule a consistency check.\n    // Right before committing, we will walk the tree and check if any of the\n    // stores were mutated.\n    //\n    // We won't do this if we're hydrating server-rendered content, because if\n    // the content is stale, it's already visible anyway. Instead we'll patch\n    // it up in a passive effect.\n\n\n    var root = getWorkInProgressRoot();\n\n    if (root === null) {\n      throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');\n    }\n\n    if (!includesBlockingLane(root, renderLanes)) {\n      pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\n    }\n  } // Read the current snapshot from the store on every render. This breaks the\n  // normal rules of React, and only works because store updates are\n  // always synchronous.\n\n\n  hook.memoizedState = nextSnapshot;\n  var inst = {\n    value: nextSnapshot,\n    getSnapshot: getSnapshot\n  };\n  hook.queue = inst; // Schedule an effect to subscribe to the store.\n\n  mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]); // Schedule an effect to update the mutable instance fields. We will update\n  // this whenever subscribe, getSnapshot, or value changes. Because there's no\n  // clean-up function, and we track the deps correctly, we can call pushEffect\n  // directly, without storing any additional state. For the same reason, we\n  // don't need to set a static flag, either.\n  // TODO: We can move this to the passive phase once we add a pre-commit\n  // consistency check. See the next comment.\n\n  fiber.flags |= Passive;\n  pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null);\n  return nextSnapshot;\n}\n\nfunction updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n  var fiber = currentlyRenderingFiber$1;\n  var hook = updateWorkInProgressHook(); // Read the current snapshot from the store on every render. This breaks the\n  // normal rules of React, and only works because store updates are\n  // always synchronous.\n\n  var nextSnapshot = getSnapshot();\n\n  {\n    if (!didWarnUncachedGetSnapshot) {\n      var cachedSnapshot = getSnapshot();\n\n      if (!objectIs(nextSnapshot, cachedSnapshot)) {\n        error('The result of getSnapshot should be cached to avoid an infinite loop');\n\n        didWarnUncachedGetSnapshot = true;\n      }\n    }\n  }\n\n  var prevSnapshot = hook.memoizedState;\n  var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);\n\n  if (snapshotChanged) {\n    hook.memoizedState = nextSnapshot;\n    markWorkInProgressReceivedUpdate();\n  }\n\n  var inst = hook.queue;\n  updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]); // Whenever getSnapshot or subscribe changes, we need to check in the\n  // commit phase if there was an interleaved mutation. In concurrent mode\n  // this can happen all the time, but even in synchronous mode, an earlier\n  // effect may have mutated the store.\n\n  if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by\n  // checking whether we scheduled a subscription effect above.\n  workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {\n    fiber.flags |= Passive;\n    pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null); // Unless we're rendering a blocking lane, schedule a consistency check.\n    // Right before committing, we will walk the tree and check if any of the\n    // stores were mutated.\n\n    var root = getWorkInProgressRoot();\n\n    if (root === null) {\n      throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');\n    }\n\n    if (!includesBlockingLane(root, renderLanes)) {\n      pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\n    }\n  }\n\n  return nextSnapshot;\n}\n\nfunction pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {\n  fiber.flags |= StoreConsistency;\n  var check = {\n    getSnapshot: getSnapshot,\n    value: renderedSnapshot\n  };\n  var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;\n\n  if (componentUpdateQueue === null) {\n    componentUpdateQueue = createFunctionComponentUpdateQueue();\n    currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;\n    componentUpdateQueue.stores = [check];\n  } else {\n    var stores = componentUpdateQueue.stores;\n\n    if (stores === null) {\n      componentUpdateQueue.stores = [check];\n    } else {\n      stores.push(check);\n    }\n  }\n}\n\nfunction updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {\n  // These are updated in the passive phase\n  inst.value = nextSnapshot;\n  inst.getSnapshot = getSnapshot; // Something may have been mutated in between render and commit. This could\n  // have been in an event that fired before the passive effects, or it could\n  // have been in a layout effect. In that case, we would have used the old\n  // snapsho and getSnapshot values to bail out. We need to check one more time.\n\n  if (checkIfSnapshotChanged(inst)) {\n    // Force a re-render.\n    forceStoreRerender(fiber);\n  }\n}\n\nfunction subscribeToStore(fiber, inst, subscribe) {\n  var handleStoreChange = function () {\n    // The store changed. Check if the snapshot changed since the last time we\n    // read from the store.\n    if (checkIfSnapshotChanged(inst)) {\n      // Force a re-render.\n      forceStoreRerender(fiber);\n    }\n  }; // Subscribe to the store and return a clean-up function.\n\n\n  return subscribe(handleStoreChange);\n}\n\nfunction checkIfSnapshotChanged(inst) {\n  var latestGetSnapshot = inst.getSnapshot;\n  var prevValue = inst.value;\n\n  try {\n    var nextValue = latestGetSnapshot();\n    return !objectIs(prevValue, nextValue);\n  } catch (error) {\n    return true;\n  }\n}\n\nfunction forceStoreRerender(fiber) {\n  scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n}\n\nfunction mountState(initialState) {\n  var hook = mountWorkInProgressHook();\n\n  if (typeof initialState === 'function') {\n    // $FlowFixMe: Flow doesn't like mixed types\n    initialState = initialState();\n  }\n\n  hook.memoizedState = hook.baseState = initialState;\n  var queue = {\n    pending: null,\n    interleaved: null,\n    lanes: NoLanes,\n    dispatch: null,\n    lastRenderedReducer: basicStateReducer,\n    lastRenderedState: initialState\n  };\n  hook.queue = queue;\n  var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);\n  return [hook.memoizedState, dispatch];\n}\n\nfunction updateState(initialState) {\n  return updateReducer(basicStateReducer);\n}\n\nfunction rerenderState(initialState) {\n  return rerenderReducer(basicStateReducer);\n}\n\nfunction pushEffect(tag, create, destroy, deps) {\n  var effect = {\n    tag: tag,\n    create: create,\n    destroy: destroy,\n    deps: deps,\n    // Circular\n    next: null\n  };\n  var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;\n\n  if (componentUpdateQueue === null) {\n    componentUpdateQueue = createFunctionComponentUpdateQueue();\n    currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;\n    componentUpdateQueue.lastEffect = effect.next = effect;\n  } else {\n    var lastEffect = componentUpdateQueue.lastEffect;\n\n    if (lastEffect === null) {\n      componentUpdateQueue.lastEffect = effect.next = effect;\n    } else {\n      var firstEffect = lastEffect.next;\n      lastEffect.next = effect;\n      effect.next = firstEffect;\n      componentUpdateQueue.lastEffect = effect;\n    }\n  }\n\n  return effect;\n}\n\nfunction mountRef(initialValue) {\n  var hook = mountWorkInProgressHook();\n\n  {\n    var _ref2 = {\n      current: initialValue\n    };\n    hook.memoizedState = _ref2;\n    return _ref2;\n  }\n}\n\nfunction updateRef(initialValue) {\n  var hook = updateWorkInProgressHook();\n  return hook.memoizedState;\n}\n\nfunction mountEffectImpl(fiberFlags, hookFlags, create, deps) {\n  var hook = mountWorkInProgressHook();\n  var nextDeps = deps === undefined ? null : deps;\n  currentlyRenderingFiber$1.flags |= fiberFlags;\n  hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);\n}\n\nfunction updateEffectImpl(fiberFlags, hookFlags, create, deps) {\n  var hook = updateWorkInProgressHook();\n  var nextDeps = deps === undefined ? null : deps;\n  var destroy = undefined;\n\n  if (currentHook !== null) {\n    var prevEffect = currentHook.memoizedState;\n    destroy = prevEffect.destroy;\n\n    if (nextDeps !== null) {\n      var prevDeps = prevEffect.deps;\n\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);\n        return;\n      }\n    }\n  }\n\n  currentlyRenderingFiber$1.flags |= fiberFlags;\n  hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);\n}\n\nfunction mountEffect(create, deps) {\n  {\n    return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);\n  }\n}\n\nfunction updateEffect(create, deps) {\n  return updateEffectImpl(Passive, Passive$1, create, deps);\n}\n\nfunction mountInsertionEffect(create, deps) {\n  return mountEffectImpl(Update, Insertion, create, deps);\n}\n\nfunction updateInsertionEffect(create, deps) {\n  return updateEffectImpl(Update, Insertion, create, deps);\n}\n\nfunction mountLayoutEffect(create, deps) {\n  var fiberFlags = Update;\n\n  return mountEffectImpl(fiberFlags, Layout, create, deps);\n}\n\nfunction updateLayoutEffect(create, deps) {\n  return updateEffectImpl(Update, Layout, create, deps);\n}\n\nfunction imperativeHandleEffect(create, ref) {\n  if (typeof ref === 'function') {\n    var refCallback = ref;\n\n    var _inst = create();\n\n    refCallback(_inst);\n    return function () {\n      refCallback(null);\n    };\n  } else if (ref !== null && ref !== undefined) {\n    var refObject = ref;\n\n    {\n      if (!refObject.hasOwnProperty('current')) {\n        error('Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}');\n      }\n    }\n\n    var _inst2 = create();\n\n    refObject.current = _inst2;\n    return function () {\n      refObject.current = null;\n    };\n  }\n}\n\nfunction mountImperativeHandle(ref, create, deps) {\n  {\n    if (typeof create !== 'function') {\n      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');\n    }\n  } // TODO: If deps are provided, should we skip comparing the ref itself?\n\n\n  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n  var fiberFlags = Update;\n\n  return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);\n}\n\nfunction updateImperativeHandle(ref, create, deps) {\n  {\n    if (typeof create !== 'function') {\n      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');\n    }\n  } // TODO: If deps are provided, should we skip comparing the ref itself?\n\n\n  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n  return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);\n}\n\nfunction mountDebugValue(value, formatterFn) {// This hook is normally a no-op.\n  // The react-debug-hooks package injects its own implementation\n  // so that e.g. DevTools can display custom hook values.\n}\n\nvar updateDebugValue = mountDebugValue;\n\nfunction mountCallback(callback, deps) {\n  var hook = mountWorkInProgressHook();\n  var nextDeps = deps === undefined ? null : deps;\n  hook.memoizedState = [callback, nextDeps];\n  return callback;\n}\n\nfunction updateCallback(callback, deps) {\n  var hook = updateWorkInProgressHook();\n  var nextDeps = deps === undefined ? null : deps;\n  var prevState = hook.memoizedState;\n\n  if (prevState !== null) {\n    if (nextDeps !== null) {\n      var prevDeps = prevState[1];\n\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        return prevState[0];\n      }\n    }\n  }\n\n  hook.memoizedState = [callback, nextDeps];\n  return callback;\n}\n\nfunction mountMemo(nextCreate, deps) {\n  var hook = mountWorkInProgressHook();\n  var nextDeps = deps === undefined ? null : deps;\n  var nextValue = nextCreate();\n  hook.memoizedState = [nextValue, nextDeps];\n  return nextValue;\n}\n\nfunction updateMemo(nextCreate, deps) {\n  var hook = updateWorkInProgressHook();\n  var nextDeps = deps === undefined ? null : deps;\n  var prevState = hook.memoizedState;\n\n  if (prevState !== null) {\n    // Assume these are defined. If they're not, areHookInputsEqual will warn.\n    if (nextDeps !== null) {\n      var prevDeps = prevState[1];\n\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        return prevState[0];\n      }\n    }\n  }\n\n  var nextValue = nextCreate();\n  hook.memoizedState = [nextValue, nextDeps];\n  return nextValue;\n}\n\nfunction mountDeferredValue(value) {\n  var _mountState = mountState(value),\n      prevValue = _mountState[0],\n      setValue = _mountState[1];\n\n  mountEffect(function () {\n    var prevTransition = ReactCurrentBatchConfig$1.transition;\n    ReactCurrentBatchConfig$1.transition = {};\n\n    try {\n      setValue(value);\n    } finally {\n      ReactCurrentBatchConfig$1.transition = prevTransition;\n    }\n  }, [value]);\n  return prevValue;\n}\n\nfunction updateDeferredValue(value) {\n  var _updateState = updateState(),\n      prevValue = _updateState[0],\n      setValue = _updateState[1];\n\n  updateEffect(function () {\n    var prevTransition = ReactCurrentBatchConfig$1.transition;\n    ReactCurrentBatchConfig$1.transition = {};\n\n    try {\n      setValue(value);\n    } finally {\n      ReactCurrentBatchConfig$1.transition = prevTransition;\n    }\n  }, [value]);\n  return prevValue;\n}\n\nfunction rerenderDeferredValue(value) {\n  var _rerenderState = rerenderState(),\n      prevValue = _rerenderState[0],\n      setValue = _rerenderState[1];\n\n  updateEffect(function () {\n    var prevTransition = ReactCurrentBatchConfig$1.transition;\n    ReactCurrentBatchConfig$1.transition = {};\n\n    try {\n      setValue(value);\n    } finally {\n      ReactCurrentBatchConfig$1.transition = prevTransition;\n    }\n  }, [value]);\n  return prevValue;\n}\n\nfunction startTransition(setPending, callback, options) {\n  var previousPriority = getCurrentUpdatePriority();\n  setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));\n  setPending(true);\n  var prevTransition = ReactCurrentBatchConfig$1.transition;\n  ReactCurrentBatchConfig$1.transition = {};\n  var currentTransition = ReactCurrentBatchConfig$1.transition;\n\n  {\n    ReactCurrentBatchConfig$1.transition._updatedFibers = new Set();\n  }\n\n  try {\n    setPending(false);\n    callback();\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig$1.transition = prevTransition;\n\n    {\n      if (prevTransition === null && currentTransition._updatedFibers) {\n        var updatedFibersCount = currentTransition._updatedFibers.size;\n\n        if (updatedFibersCount > 10) {\n          warn('Detected a large number of updates inside startTransition. ' + 'If this is due to a subscription please re-write it to use React provided hooks. ' + 'Otherwise concurrent mode guarantees are off the table.');\n        }\n\n        currentTransition._updatedFibers.clear();\n      }\n    }\n  }\n}\n\nfunction mountTransition() {\n  var _mountState2 = mountState(false),\n      isPending = _mountState2[0],\n      setPending = _mountState2[1]; // The `start` method never changes.\n\n\n  var start = startTransition.bind(null, setPending);\n  var hook = mountWorkInProgressHook();\n  hook.memoizedState = start;\n  return [isPending, start];\n}\n\nfunction updateTransition() {\n  var _updateState2 = updateState(),\n      isPending = _updateState2[0];\n\n  var hook = updateWorkInProgressHook();\n  var start = hook.memoizedState;\n  return [isPending, start];\n}\n\nfunction rerenderTransition() {\n  var _rerenderState2 = rerenderState(),\n      isPending = _rerenderState2[0];\n\n  var hook = updateWorkInProgressHook();\n  var start = hook.memoizedState;\n  return [isPending, start];\n}\n\nvar isUpdatingOpaqueValueInRenderPhase = false;\nfunction getIsUpdatingOpaqueValueInRenderPhaseInDEV() {\n  {\n    return isUpdatingOpaqueValueInRenderPhase;\n  }\n}\n\nfunction mountId() {\n  var hook = mountWorkInProgressHook();\n  var root = getWorkInProgressRoot(); // TODO: In Fizz, id generation is specific to each server config. Maybe we\n  // should do this in Fiber, too? Deferring this decision for now because\n  // there's no other place to store the prefix except for an internal field on\n  // the public createRoot object, which the fiber tree does not currently have\n  // a reference to.\n\n  var identifierPrefix = root.identifierPrefix;\n  var id;\n\n  {\n    // Use a lowercase r prefix for client-generated ids.\n    var globalClientId = globalClientIdCounter++;\n    id = ':' + identifierPrefix + 'r' + globalClientId.toString(32) + ':';\n  }\n\n  hook.memoizedState = id;\n  return id;\n}\n\nfunction updateId() {\n  var hook = updateWorkInProgressHook();\n  var id = hook.memoizedState;\n  return id;\n}\n\nfunction dispatchReducerAction(fiber, queue, action) {\n  {\n    if (typeof arguments[3] === 'function') {\n      error(\"State updates from the useState() and useReducer() Hooks don't support the \" + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');\n    }\n  }\n\n  var lane = requestUpdateLane(fiber);\n  var update = {\n    lane: lane,\n    action: action,\n    hasEagerState: false,\n    eagerState: null,\n    next: null\n  };\n\n  if (isRenderPhaseUpdate(fiber)) {\n    enqueueRenderPhaseUpdate(queue, update);\n  } else {\n    enqueueUpdate$1(fiber, queue, update);\n    var eventTime = requestEventTime();\n    var root = scheduleUpdateOnFiber(fiber, lane, eventTime);\n\n    if (root !== null) {\n      entangleTransitionUpdate(root, queue, lane);\n    }\n  }\n}\n\nfunction dispatchSetState(fiber, queue, action) {\n  {\n    if (typeof arguments[3] === 'function') {\n      error(\"State updates from the useState() and useReducer() Hooks don't support the \" + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');\n    }\n  }\n\n  var lane = requestUpdateLane(fiber);\n  var update = {\n    lane: lane,\n    action: action,\n    hasEagerState: false,\n    eagerState: null,\n    next: null\n  };\n\n  if (isRenderPhaseUpdate(fiber)) {\n    enqueueRenderPhaseUpdate(queue, update);\n  } else {\n    enqueueUpdate$1(fiber, queue, update);\n    var alternate = fiber.alternate;\n\n    if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {\n      // The queue is currently empty, which means we can eagerly compute the\n      // next state before entering the render phase. If the new state is the\n      // same as the current state, we may be able to bail out entirely.\n      var lastRenderedReducer = queue.lastRenderedReducer;\n\n      if (lastRenderedReducer !== null) {\n        var prevDispatcher;\n\n        {\n          prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n        }\n\n        try {\n          var currentState = queue.lastRenderedState;\n          var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute\n          // it, on the update object. If the reducer hasn't changed by the\n          // time we enter the render phase, then the eager state can be used\n          // without calling the reducer again.\n\n          update.hasEagerState = true;\n          update.eagerState = eagerState;\n\n          if (objectIs(eagerState, currentState)) {\n            // Fast path. We can bail out without scheduling React to re-render.\n            // It's still possible that we'll need to rebase this update later,\n            // if the component re-renders for a different reason and by that\n            // time the reducer has changed.\n            return;\n          }\n        } catch (error) {// Suppress the error. It will throw again in the render phase.\n        } finally {\n          {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        }\n      }\n    }\n\n    var eventTime = requestEventTime();\n    var root = scheduleUpdateOnFiber(fiber, lane, eventTime);\n\n    if (root !== null) {\n      entangleTransitionUpdate(root, queue, lane);\n    }\n  }\n}\n\nfunction isRenderPhaseUpdate(fiber) {\n  var alternate = fiber.alternate;\n  return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;\n}\n\nfunction enqueueRenderPhaseUpdate(queue, update) {\n  // This is a render phase update. Stash it in a lazily-created map of\n  // queue -> linked list of updates. After this render pass, we'll restart\n  // and apply the stashed updates on top of the work-in-progress hook.\n  didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;\n  var pending = queue.pending;\n\n  if (pending === null) {\n    // This is the first update. Create a circular list.\n    update.next = update;\n  } else {\n    update.next = pending.next;\n    pending.next = update;\n  }\n\n  queue.pending = update;\n}\n\nfunction enqueueUpdate$1(fiber, queue, update, lane) {\n  if (isInterleavedUpdate(fiber)) {\n    var interleaved = queue.interleaved;\n\n    if (interleaved === null) {\n      // This is the first update. Create a circular list.\n      update.next = update; // At the end of the current render, this queue's interleaved updates will\n      // be transferred to the pending queue.\n\n      pushInterleavedQueue(queue);\n    } else {\n      update.next = interleaved.next;\n      interleaved.next = update;\n    }\n\n    queue.interleaved = update;\n  } else {\n    var pending = queue.pending;\n\n    if (pending === null) {\n      // This is the first update. Create a circular list.\n      update.next = update;\n    } else {\n      update.next = pending.next;\n      pending.next = update;\n    }\n\n    queue.pending = update;\n  }\n}\n\nfunction entangleTransitionUpdate(root, queue, lane) {\n  if (isTransitionLane(lane)) {\n    var queueLanes = queue.lanes; // If any entangled lanes are no longer pending on the root, then they\n    // must have finished. We can remove them from the shared queue, which\n    // represents a superset of the actually pending lanes. In some cases we\n    // may entangle more than we need to, but that's OK. In fact it's worse if\n    // we *don't* entangle when we should.\n\n    queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.\n\n    var newQueueLanes = mergeLanes(queueLanes, lane);\n    queue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if\n    // the lane finished since the last time we entangled it. So we need to\n    // entangle it again, just to be sure.\n\n    markRootEntangled(root, newQueueLanes);\n  }\n}\n\nvar ContextOnlyDispatcher = {\n  readContext: readContext,\n  useCallback: throwInvalidHookError,\n  useContext: throwInvalidHookError,\n  useEffect: throwInvalidHookError,\n  useImperativeHandle: throwInvalidHookError,\n  useInsertionEffect: throwInvalidHookError,\n  useLayoutEffect: throwInvalidHookError,\n  useMemo: throwInvalidHookError,\n  useReducer: throwInvalidHookError,\n  useRef: throwInvalidHookError,\n  useState: throwInvalidHookError,\n  useDebugValue: throwInvalidHookError,\n  useDeferredValue: throwInvalidHookError,\n  useTransition: throwInvalidHookError,\n  useMutableSource: throwInvalidHookError,\n  useSyncExternalStore: throwInvalidHookError,\n  useId: throwInvalidHookError,\n  unstable_isNewReconciler: enableNewReconciler\n};\n\nvar HooksDispatcherOnMountInDEV = null;\nvar HooksDispatcherOnMountWithHookTypesInDEV = null;\nvar HooksDispatcherOnUpdateInDEV = null;\nvar HooksDispatcherOnRerenderInDEV = null;\nvar InvalidNestedHooksDispatcherOnMountInDEV = null;\nvar InvalidNestedHooksDispatcherOnUpdateInDEV = null;\nvar InvalidNestedHooksDispatcherOnRerenderInDEV = null;\n\n{\n  var warnInvalidContextAccess = function () {\n    error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');\n  };\n\n  var warnInvalidHookAccess = function () {\n    error('Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://reactjs.org/link/rules-of-hooks');\n  };\n\n  HooksDispatcherOnMountInDEV = {\n    readContext: function (context) {\n      return readContext(context);\n    },\n    useCallback: function (callback, deps) {\n      currentHookNameInDev = 'useCallback';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountCallback(callback, deps);\n    },\n    useContext: function (context) {\n      currentHookNameInDev = 'useContext';\n      mountHookTypesDev();\n      return readContext(context);\n    },\n    useEffect: function (create, deps) {\n      currentHookNameInDev = 'useEffect';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle: function (ref, create, deps) {\n      currentHookNameInDev = 'useImperativeHandle';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect: function (create, deps) {\n      currentHookNameInDev = 'useInsertionEffect';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountInsertionEffect(create, deps);\n    },\n    useLayoutEffect: function (create, deps) {\n      currentHookNameInDev = 'useLayoutEffect';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo: function (create, deps) {\n      currentHookNameInDev = 'useMemo';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useReducer: function (reducer, initialArg, init) {\n      currentHookNameInDev = 'useReducer';\n      mountHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useRef: function (initialValue) {\n      currentHookNameInDev = 'useRef';\n      mountHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState: function (initialState) {\n      currentHookNameInDev = 'useState';\n      mountHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useDebugValue: function (value, formatterFn) {\n      currentHookNameInDev = 'useDebugValue';\n      mountHookTypesDev();\n      return mountDebugValue();\n    },\n    useDeferredValue: function (value) {\n      currentHookNameInDev = 'useDeferredValue';\n      mountHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition: function () {\n      currentHookNameInDev = 'useTransition';\n      mountHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource: function (source, getSnapshot, subscribe) {\n      currentHookNameInDev = 'useMutableSource';\n      mountHookTypesDev();\n      return mountMutableSource();\n    },\n    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n      currentHookNameInDev = 'useSyncExternalStore';\n      mountHookTypesDev();\n      return mountSyncExternalStore(subscribe, getSnapshot);\n    },\n    useId: function () {\n      currentHookNameInDev = 'useId';\n      mountHookTypesDev();\n      return mountId();\n    },\n    unstable_isNewReconciler: enableNewReconciler\n  };\n\n  HooksDispatcherOnMountWithHookTypesInDEV = {\n    readContext: function (context) {\n      return readContext(context);\n    },\n    useCallback: function (callback, deps) {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return mountCallback(callback, deps);\n    },\n    useContext: function (context) {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect: function (create, deps) {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle: function (ref, create, deps) {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect: function (create, deps) {\n      currentHookNameInDev = 'useInsertionEffect';\n      updateHookTypesDev();\n      return mountInsertionEffect(create, deps);\n    },\n    useLayoutEffect: function (create, deps) {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo: function (create, deps) {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useReducer: function (reducer, initialArg, init) {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useRef: function (initialValue) {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState: function (initialState) {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useDebugValue: function (value, formatterFn) {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return mountDebugValue();\n    },\n    useDeferredValue: function (value) {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition: function () {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource: function (source, getSnapshot, subscribe) {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return mountMutableSource();\n    },\n    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n      currentHookNameInDev = 'useSyncExternalStore';\n      updateHookTypesDev();\n      return mountSyncExternalStore(subscribe, getSnapshot);\n    },\n    useId: function () {\n      currentHookNameInDev = 'useId';\n      updateHookTypesDev();\n      return mountId();\n    },\n    unstable_isNewReconciler: enableNewReconciler\n  };\n\n  HooksDispatcherOnUpdateInDEV = {\n    readContext: function (context) {\n      return readContext(context);\n    },\n    useCallback: function (callback, deps) {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext: function (context) {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect: function (create, deps) {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle: function (ref, create, deps) {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect: function (create, deps) {\n      currentHookNameInDev = 'useInsertionEffect';\n      updateHookTypesDev();\n      return updateInsertionEffect(create, deps);\n    },\n    useLayoutEffect: function (create, deps) {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo: function (create, deps) {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useReducer: function (reducer, initialArg, init) {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return updateReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useRef: function (initialValue) {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return updateRef();\n    },\n    useState: function (initialState) {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return updateState(initialState);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useDebugValue: function (value, formatterFn) {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return updateDebugValue();\n    },\n    useDeferredValue: function (value) {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return updateDeferredValue(value);\n    },\n    useTransition: function () {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return updateTransition();\n    },\n    useMutableSource: function (source, getSnapshot, subscribe) {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return updateMutableSource();\n    },\n    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n      currentHookNameInDev = 'useSyncExternalStore';\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot);\n    },\n    useId: function () {\n      currentHookNameInDev = 'useId';\n      updateHookTypesDev();\n      return updateId();\n    },\n    unstable_isNewReconciler: enableNewReconciler\n  };\n\n  HooksDispatcherOnRerenderInDEV = {\n    readContext: function (context) {\n      return readContext(context);\n    },\n    useCallback: function (callback, deps) {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext: function (context) {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect: function (create, deps) {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle: function (ref, create, deps) {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect: function (create, deps) {\n      currentHookNameInDev = 'useInsertionEffect';\n      updateHookTypesDev();\n      return updateInsertionEffect(create, deps);\n    },\n    useLayoutEffect: function (create, deps) {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo: function (create, deps) {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useReducer: function (reducer, initialArg, init) {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n\n      try {\n        return rerenderReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useRef: function (initialValue) {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return updateRef();\n    },\n    useState: function (initialState) {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n\n      try {\n        return rerenderState(initialState);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useDebugValue: function (value, formatterFn) {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return updateDebugValue();\n    },\n    useDeferredValue: function (value) {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return rerenderDeferredValue(value);\n    },\n    useTransition: function () {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return rerenderTransition();\n    },\n    useMutableSource: function (source, getSnapshot, subscribe) {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return updateMutableSource();\n    },\n    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n      currentHookNameInDev = 'useSyncExternalStore';\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot);\n    },\n    useId: function () {\n      currentHookNameInDev = 'useId';\n      updateHookTypesDev();\n      return updateId();\n    },\n    unstable_isNewReconciler: enableNewReconciler\n  };\n\n  InvalidNestedHooksDispatcherOnMountInDEV = {\n    readContext: function (context) {\n      warnInvalidContextAccess();\n      return readContext(context);\n    },\n    useCallback: function (callback, deps) {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountCallback(callback, deps);\n    },\n    useContext: function (context) {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return readContext(context);\n    },\n    useEffect: function (create, deps) {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle: function (ref, create, deps) {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect: function (create, deps) {\n      currentHookNameInDev = 'useInsertionEffect';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountInsertionEffect(create, deps);\n    },\n    useLayoutEffect: function (create, deps) {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo: function (create, deps) {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useReducer: function (reducer, initialArg, init) {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useRef: function (initialValue) {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState: function (initialState) {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useDebugValue: function (value, formatterFn) {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountDebugValue();\n    },\n    useDeferredValue: function (value) {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition: function () {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource: function (source, getSnapshot, subscribe) {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountMutableSource();\n    },\n    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n      currentHookNameInDev = 'useSyncExternalStore';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountSyncExternalStore(subscribe, getSnapshot);\n    },\n    useId: function () {\n      currentHookNameInDev = 'useId';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountId();\n    },\n    unstable_isNewReconciler: enableNewReconciler\n  };\n\n  InvalidNestedHooksDispatcherOnUpdateInDEV = {\n    readContext: function (context) {\n      warnInvalidContextAccess();\n      return readContext(context);\n    },\n    useCallback: function (callback, deps) {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext: function (context) {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect: function (create, deps) {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle: function (ref, create, deps) {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect: function (create, deps) {\n      currentHookNameInDev = 'useInsertionEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateInsertionEffect(create, deps);\n    },\n    useLayoutEffect: function (create, deps) {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo: function (create, deps) {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useReducer: function (reducer, initialArg, init) {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return updateReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useRef: function (initialValue) {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateRef();\n    },\n    useState: function (initialState) {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return updateState(initialState);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useDebugValue: function (value, formatterFn) {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDebugValue();\n    },\n    useDeferredValue: function (value) {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDeferredValue(value);\n    },\n    useTransition: function () {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateTransition();\n    },\n    useMutableSource: function (source, getSnapshot, subscribe) {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateMutableSource();\n    },\n    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n      currentHookNameInDev = 'useSyncExternalStore';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot);\n    },\n    useId: function () {\n      currentHookNameInDev = 'useId';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateId();\n    },\n    unstable_isNewReconciler: enableNewReconciler\n  };\n\n  InvalidNestedHooksDispatcherOnRerenderInDEV = {\n    readContext: function (context) {\n      warnInvalidContextAccess();\n      return readContext(context);\n    },\n    useCallback: function (callback, deps) {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext: function (context) {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect: function (create, deps) {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle: function (ref, create, deps) {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect: function (create, deps) {\n      currentHookNameInDev = 'useInsertionEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateInsertionEffect(create, deps);\n    },\n    useLayoutEffect: function (create, deps) {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo: function (create, deps) {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useReducer: function (reducer, initialArg, init) {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return rerenderReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useRef: function (initialValue) {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateRef();\n    },\n    useState: function (initialState) {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return rerenderState(initialState);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useDebugValue: function (value, formatterFn) {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDebugValue();\n    },\n    useDeferredValue: function (value) {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return rerenderDeferredValue(value);\n    },\n    useTransition: function () {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return rerenderTransition();\n    },\n    useMutableSource: function (source, getSnapshot, subscribe) {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateMutableSource();\n    },\n    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n      currentHookNameInDev = 'useSyncExternalStore';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot);\n    },\n    useId: function () {\n      currentHookNameInDev = 'useId';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateId();\n    },\n    unstable_isNewReconciler: enableNewReconciler\n  };\n}\n\nvar now$1 = Scheduler$1.unstable_now;\nvar commitTime = 0;\nvar layoutEffectStartTime = -1;\nvar profilerStartTime = -1;\nvar passiveEffectStartTime = -1;\n/**\n * Tracks whether the current update was a nested/cascading update (scheduled from a layout effect).\n *\n * The overall sequence is:\n *   1. render\n *   2. commit (and call `onRender`, `onCommit`)\n *   3. check for nested updates\n *   4. flush passive effects (and call `onPostCommit`)\n *\n * Nested updates are identified in step 3 above,\n * but step 4 still applies to the work that was just committed.\n * We use two flags to track nested updates then:\n * one tracks whether the upcoming update is a nested update,\n * and the other tracks whether the current update was a nested update.\n * The first value gets synced to the second at the start of the render phase.\n */\n\nvar currentUpdateIsNested = false;\nvar nestedUpdateScheduled = false;\n\nfunction isCurrentUpdateNested() {\n  return currentUpdateIsNested;\n}\n\nfunction markNestedUpdateScheduled() {\n  {\n    nestedUpdateScheduled = true;\n  }\n}\n\nfunction resetNestedUpdateFlag() {\n  {\n    currentUpdateIsNested = false;\n    nestedUpdateScheduled = false;\n  }\n}\n\nfunction syncNestedUpdateFlag() {\n  {\n    currentUpdateIsNested = nestedUpdateScheduled;\n    nestedUpdateScheduled = false;\n  }\n}\n\nfunction getCommitTime() {\n  return commitTime;\n}\n\nfunction recordCommitTime() {\n\n  commitTime = now$1();\n}\n\nfunction startProfilerTimer(fiber) {\n\n  profilerStartTime = now$1();\n\n  if (fiber.actualStartTime < 0) {\n    fiber.actualStartTime = now$1();\n  }\n}\n\nfunction stopProfilerTimerIfRunning(fiber) {\n\n  profilerStartTime = -1;\n}\n\nfunction stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {\n\n  if (profilerStartTime >= 0) {\n    var elapsedTime = now$1() - profilerStartTime;\n    fiber.actualDuration += elapsedTime;\n\n    if (overrideBaseTime) {\n      fiber.selfBaseDuration = elapsedTime;\n    }\n\n    profilerStartTime = -1;\n  }\n}\n\nfunction recordLayoutEffectDuration(fiber) {\n\n  if (layoutEffectStartTime >= 0) {\n    var elapsedTime = now$1() - layoutEffectStartTime;\n    layoutEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor\n    // Or the root (for the DevTools Profiler to read)\n\n    var parentFiber = fiber.return;\n\n    while (parentFiber !== null) {\n      switch (parentFiber.tag) {\n        case HostRoot:\n          var root = parentFiber.stateNode;\n          root.effectDuration += elapsedTime;\n          return;\n\n        case Profiler:\n          var parentStateNode = parentFiber.stateNode;\n          parentStateNode.effectDuration += elapsedTime;\n          return;\n      }\n\n      parentFiber = parentFiber.return;\n    }\n  }\n}\n\nfunction recordPassiveEffectDuration(fiber) {\n\n  if (passiveEffectStartTime >= 0) {\n    var elapsedTime = now$1() - passiveEffectStartTime;\n    passiveEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor\n    // Or the root (for the DevTools Profiler to read)\n\n    var parentFiber = fiber.return;\n\n    while (parentFiber !== null) {\n      switch (parentFiber.tag) {\n        case HostRoot:\n          var root = parentFiber.stateNode;\n\n          if (root !== null) {\n            root.passiveEffectDuration += elapsedTime;\n          }\n\n          return;\n\n        case Profiler:\n          var parentStateNode = parentFiber.stateNode;\n\n          if (parentStateNode !== null) {\n            // Detached fibers have their state node cleared out.\n            // In this case, the return pointer is also cleared out,\n            // so we won't be able to report the time spent in this Profiler's subtree.\n            parentStateNode.passiveEffectDuration += elapsedTime;\n          }\n\n          return;\n      }\n\n      parentFiber = parentFiber.return;\n    }\n  }\n}\n\nfunction startLayoutEffectTimer() {\n\n  layoutEffectStartTime = now$1();\n}\n\nfunction startPassiveEffectTimer() {\n\n  passiveEffectStartTime = now$1();\n}\n\nfunction transferActualDuration(fiber) {\n  // Transfer time spent rendering these children so we don't lose it\n  // after we rerender. This is used as a helper in special cases\n  // where we should count the work of multiple passes.\n  var child = fiber.child;\n\n  while (child) {\n    fiber.actualDuration += child.actualDuration;\n    child = child.sibling;\n  }\n}\n\nfunction createCapturedValue(value, source) {\n  // If the value is an error, call this function immediately after it is thrown\n  // so the stack is accurate.\n  return {\n    value: value,\n    source: source,\n    stack: getStackByFiberInDevAndProd(source)\n  };\n}\n\n// This module is forked in different environments.\n// By default, return `true` to log errors to the console.\n// Forks can return `false` if this isn't desirable.\nfunction showErrorDialog(boundary, errorInfo) {\n  return true;\n}\n\nfunction logCapturedError(boundary, errorInfo) {\n  try {\n    var logError = showErrorDialog(boundary, errorInfo); // Allow injected showErrorDialog() to prevent default console.error logging.\n    // This enables renderers like ReactNative to better manage redbox behavior.\n\n    if (logError === false) {\n      return;\n    }\n\n    var error = errorInfo.value;\n\n    if (true) {\n      var source = errorInfo.source;\n      var stack = errorInfo.stack;\n      var componentStack = stack !== null ? stack : ''; // Browsers support silencing uncaught errors by calling\n      // `preventDefault()` in window `error` handler.\n      // We record this information as an expando on the error.\n\n      if (error != null && error._suppressLogging) {\n        if (boundary.tag === ClassComponent) {\n          // The error is recoverable and was silenced.\n          // Ignore it and don't print the stack addendum.\n          // This is handy for testing error boundaries without noise.\n          return;\n        } // The error is fatal. Since the silencing might have\n        // been accidental, we'll surface it anyway.\n        // However, the browser would have silenced the original error\n        // so we'll print it first, and then print the stack addendum.\n\n\n        console['error'](error); // Don't transform to our wrapper\n        // For a more detailed description of this block, see:\n        // https://github.com/facebook/react/pull/13384\n      }\n\n      var componentName = source ? getComponentNameFromFiber(source) : null;\n      var componentNameMessage = componentName ? \"The above error occurred in the <\" + componentName + \"> component:\" : 'The above error occurred in one of your React components:';\n      var errorBoundaryMessage;\n\n      if (boundary.tag === HostRoot) {\n        errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\\n' + 'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';\n      } else {\n        var errorBoundaryName = getComponentNameFromFiber(boundary) || 'Anonymous';\n        errorBoundaryMessage = \"React will try to recreate this component tree from scratch \" + (\"using the error boundary you provided, \" + errorBoundaryName + \".\");\n      }\n\n      var combinedMessage = componentNameMessage + \"\\n\" + componentStack + \"\\n\\n\" + (\"\" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.\n      // We don't include the original error message and JS stack because the browser\n      // has already printed it. Even if the application swallows the error, it is still\n      // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.\n\n      console['error'](combinedMessage); // Don't transform to our wrapper\n    } else {\n      // In production, we print the error directly.\n      // This will include the message, the JS stack, and anything the browser wants to show.\n      // We pass the error object instead of custom message so that the browser displays the error natively.\n      console['error'](error); // Don't transform to our wrapper\n    }\n  } catch (e) {\n    // This method must not throw, or React internal state will get messed up.\n    // If console.error is overridden, or logCapturedError() shows a dialog that throws,\n    // we want to report this error outside of the normal stack as a last resort.\n    // https://github.com/facebook/react/issues/13188\n    setTimeout(function () {\n      throw e;\n    });\n  }\n}\n\nvar PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;\n\nfunction createRootErrorUpdate(fiber, errorInfo, lane) {\n  var update = createUpdate(NoTimestamp, lane); // Unmount the root by rendering null.\n\n  update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n\n  update.payload = {\n    element: null\n  };\n  var error = errorInfo.value;\n\n  update.callback = function () {\n    onUncaughtError(error);\n    logCapturedError(fiber, errorInfo);\n  };\n\n  return update;\n}\n\nfunction createClassErrorUpdate(fiber, errorInfo, lane) {\n  var update = createUpdate(NoTimestamp, lane);\n  update.tag = CaptureUpdate;\n  var getDerivedStateFromError = fiber.type.getDerivedStateFromError;\n\n  if (typeof getDerivedStateFromError === 'function') {\n    var error$1 = errorInfo.value;\n\n    update.payload = function () {\n      return getDerivedStateFromError(error$1);\n    };\n\n    update.callback = function () {\n      {\n        markFailedErrorBoundaryForHotReloading(fiber);\n      }\n\n      logCapturedError(fiber, errorInfo);\n    };\n  }\n\n  var inst = fiber.stateNode;\n\n  if (inst !== null && typeof inst.componentDidCatch === 'function') {\n    update.callback = function callback() {\n      {\n        markFailedErrorBoundaryForHotReloading(fiber);\n      }\n\n      logCapturedError(fiber, errorInfo);\n\n      if (typeof getDerivedStateFromError !== 'function') {\n        // To preserve the preexisting retry behavior of error boundaries,\n        // we keep track of which ones already failed during this batch.\n        // This gets reset before we yield back to the browser.\n        // TODO: Warn in strict mode if getDerivedStateFromError is\n        // not defined.\n        markLegacyErrorBoundaryAsFailed(this);\n      }\n\n      var error$1 = errorInfo.value;\n      var stack = errorInfo.stack;\n      this.componentDidCatch(error$1, {\n        componentStack: stack !== null ? stack : ''\n      });\n\n      {\n        if (typeof getDerivedStateFromError !== 'function') {\n          // If componentDidCatch is the only error boundary method defined,\n          // then it needs to call setState to recover from errors.\n          // If no state update is scheduled then the boundary will swallow the error.\n          if (!includesSomeLane(fiber.lanes, SyncLane)) {\n            error('%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentNameFromFiber(fiber) || 'Unknown');\n          }\n        }\n      }\n    };\n  }\n\n  return update;\n}\n\nfunction attachPingListener(root, wakeable, lanes) {\n  // Attach a ping listener\n  //\n  // The data might resolve before we have a chance to commit the fallback. Or,\n  // in the case of a refresh, we'll never commit a fallback. So we need to\n  // attach a listener now. When it resolves (\"pings\"), we can decide whether to\n  // try rendering the tree again.\n  //\n  // Only attach a listener if one does not already exist for the lanes\n  // we're currently rendering (which acts like a \"thread ID\" here).\n  //\n  // We only need to do this in concurrent mode. Legacy Suspense always\n  // commits fallbacks synchronously, so there are no pings.\n  var pingCache = root.pingCache;\n  var threadIDs;\n\n  if (pingCache === null) {\n    pingCache = root.pingCache = new PossiblyWeakMap$1();\n    threadIDs = new Set();\n    pingCache.set(wakeable, threadIDs);\n  } else {\n    threadIDs = pingCache.get(wakeable);\n\n    if (threadIDs === undefined) {\n      threadIDs = new Set();\n      pingCache.set(wakeable, threadIDs);\n    }\n  }\n\n  if (!threadIDs.has(lanes)) {\n    // Memoize using the thread ID to prevent redundant listeners.\n    threadIDs.add(lanes);\n    var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);\n\n    wakeable.then(ping, ping);\n  }\n}\n\nfunction attachRetryListener(suspenseBoundary, root, wakeable, lanes) {\n  // Retry listener\n  //\n  // If the fallback does commit, we need to attach a different type of\n  // listener. This one schedules an update on the Suspense boundary to turn\n  // the fallback state off.\n  //\n  // Stash the wakeable on the boundary fiber so we can access it in the\n  // commit phase.\n  //\n  // When the wakeable resolves, we'll attempt to render the boundary\n  // again (\"retry\").\n  var wakeables = suspenseBoundary.updateQueue;\n\n  if (wakeables === null) {\n    var updateQueue = new Set();\n    updateQueue.add(wakeable);\n    suspenseBoundary.updateQueue = updateQueue;\n  } else {\n    wakeables.add(wakeable);\n  }\n}\n\nfunction resetSuspendedComponent(sourceFiber, rootRenderLanes) {\n  // A legacy mode Suspense quirk, only relevant to hook components.\n\n\n  var tag = sourceFiber.tag;\n\n  if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {\n    var currentSource = sourceFiber.alternate;\n\n    if (currentSource) {\n      sourceFiber.updateQueue = currentSource.updateQueue;\n      sourceFiber.memoizedState = currentSource.memoizedState;\n      sourceFiber.lanes = currentSource.lanes;\n    } else {\n      sourceFiber.updateQueue = null;\n      sourceFiber.memoizedState = null;\n    }\n  }\n}\n\nfunction getNearestSuspenseBoundaryToCapture(returnFiber) {\n  var node = returnFiber;\n\n  do {\n    if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {\n      return node;\n    } // This boundary already captured during this render. Continue to the next\n    // boundary.\n\n\n    node = node.return;\n  } while (node !== null);\n\n  return null;\n}\n\nfunction markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes) {\n  // This marks a Suspense boundary so that when we're unwinding the stack,\n  // it captures the suspended \"exception\" and does a second (fallback) pass.\n  if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {\n    // Legacy Mode Suspense\n    //\n    // If the boundary is in legacy mode, we should *not*\n    // suspend the commit. Pretend as if the suspended component rendered\n    // null and keep rendering. When the Suspense boundary completes,\n    // we'll do a second pass to render the fallback.\n    if (suspenseBoundary === returnFiber) {\n      // Special case where we suspended while reconciling the children of\n      // a Suspense boundary's inner Offscreen wrapper fiber. This happens\n      // when a React.lazy component is a direct child of a\n      // Suspense boundary.\n      //\n      // Suspense boundaries are implemented as multiple fibers, but they\n      // are a single conceptual unit. The legacy mode behavior where we\n      // pretend the suspended fiber committed as `null` won't work,\n      // because in this case the \"suspended\" fiber is the inner\n      // Offscreen wrapper.\n      //\n      // Because the contents of the boundary haven't started rendering\n      // yet (i.e. nothing in the tree has partially rendered) we can\n      // switch to the regular, concurrent mode behavior: mark the\n      // boundary with ShouldCapture and enter the unwind phase.\n      suspenseBoundary.flags |= ShouldCapture;\n    } else {\n      suspenseBoundary.flags |= DidCapture;\n      sourceFiber.flags |= ForceUpdateForLegacySuspense; // We're going to commit this fiber even though it didn't complete.\n      // But we shouldn't call any lifecycle methods or callbacks. Remove\n      // all lifecycle effect tags.\n\n      sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);\n\n      if (sourceFiber.tag === ClassComponent) {\n        var currentSourceFiber = sourceFiber.alternate;\n\n        if (currentSourceFiber === null) {\n          // This is a new mount. Change the tag so it's not mistaken for a\n          // completed class component. For example, we should not call\n          // componentWillUnmount if it is deleted.\n          sourceFiber.tag = IncompleteClassComponent;\n        } else {\n          // When we try rendering again, we should not reuse the current fiber,\n          // since it's known to be in an inconsistent state. Use a force update to\n          // prevent a bail out.\n          var update = createUpdate(NoTimestamp, SyncLane);\n          update.tag = ForceUpdate;\n          enqueueUpdate(sourceFiber, update);\n        }\n      } // The source fiber did not complete. Mark it with Sync priority to\n      // indicate that it still has pending work.\n\n\n      sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);\n    }\n\n    return suspenseBoundary;\n  } // Confirmed that the boundary is in a concurrent mode tree. Continue\n  // with the normal suspend path.\n  //\n  // After this we'll use a set of heuristics to determine whether this\n  // render pass will run to completion or restart or \"suspend\" the commit.\n  // The actual logic for this is spread out in different places.\n  //\n  // This first principle is that if we're going to suspend when we complete\n  // a root, then we should also restart if we get an update or ping that\n  // might unsuspend it, and vice versa. The only reason to suspend is\n  // because you think you might want to restart before committing. However,\n  // it doesn't make sense to restart only while in the period we're suspended.\n  //\n  // Restarting too aggressively is also not good because it starves out any\n  // intermediate loading state. So we use heuristics to determine when.\n  // Suspense Heuristics\n  //\n  // If nothing threw a Promise or all the same fallbacks are already showing,\n  // then don't suspend/restart.\n  //\n  // If this is an initial render of a new tree of Suspense boundaries and\n  // those trigger a fallback, then don't suspend/restart. We want to ensure\n  // that we can show the initial loading state as quickly as possible.\n  //\n  // If we hit a \"Delayed\" case, such as when we'd switch from content back into\n  // a fallback, then we should always suspend/restart. Transitions apply\n  // to this case. If none is defined, JND is used instead.\n  //\n  // If we're already showing a fallback and it gets \"retried\", allowing us to show\n  // another level, but there's still an inner boundary that would show a fallback,\n  // then we suspend/restart for 500ms since the last time we showed a fallback\n  // anywhere in the tree. This effectively throttles progressive loading into a\n  // consistent train of commits. This also gives us an opportunity to restart to\n  // get to the completed state slightly earlier.\n  //\n  // If there's ambiguity due to batching it's resolved in preference of:\n  // 1) \"delayed\", 2) \"initial render\", 3) \"retry\".\n  //\n  // We want to ensure that a \"busy\" state doesn't get force committed. We want to\n  // ensure that new initial loading states can commit as soon as possible.\n\n\n  suspenseBoundary.flags |= ShouldCapture; // TODO: I think we can remove this, since we now use `DidCapture` in\n  // the begin phase to prevent an early bailout.\n\n  suspenseBoundary.lanes = rootRenderLanes;\n  return suspenseBoundary;\n}\n\nfunction throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {\n  // The source fiber did not complete.\n  sourceFiber.flags |= Incomplete;\n\n  if (value !== null && typeof value === 'object' && typeof value.then === 'function') {\n    // This is a wakeable. The component suspended.\n    var wakeable = value;\n    resetSuspendedComponent(sourceFiber);\n\n\n    var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);\n\n    if (suspenseBoundary !== null) {\n      suspenseBoundary.flags &= ~ForceClientRender;\n      markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // We only attach ping listeners in concurrent mode. Legacy Suspense always\n      // commits fallbacks synchronously, so there are no pings.\n\n      if (suspenseBoundary.mode & ConcurrentMode) {\n        attachPingListener(root, wakeable, rootRenderLanes);\n      }\n\n      attachRetryListener(suspenseBoundary, root, wakeable);\n      return;\n    } else {\n      // No boundary was found. Unless this is a sync update, this is OK.\n      // We can suspend and wait for more data to arrive.\n      if (!includesSyncLane(rootRenderLanes)) {\n        // This is not a sync update. Suspend. Since we're not activating a\n        // Suspense boundary, this will unwind all the way to the root without\n        // performing a second pass to render a fallback. (This is arguably how\n        // refresh transitions should work, too, since we're not going to commit\n        // the fallbacks anyway.)\n        //\n        // This case also applies to initial hydration.\n        attachPingListener(root, wakeable, rootRenderLanes);\n        renderDidSuspendDelayIfPossible();\n        return;\n      } // This is a sync/discrete update. We treat this case like an error\n      // because discrete renders are expected to produce a complete tree\n      // synchronously to maintain consistency with external state.\n\n\n      var uncaughtSuspenseError = new Error('A component suspended while responding to synchronous input. This ' + 'will cause the UI to be replaced with a loading indicator. To ' + 'fix, updates that suspend should be wrapped ' + 'with startTransition.'); // If we're outside a transition, fall through to the regular error path.\n      // The error will be caught by the nearest suspense boundary.\n\n      value = uncaughtSuspenseError;\n    }\n  } // We didn't find a boundary that could handle this type of exception. Start\n  // over and traverse parent path again, this time treating the exception\n  // as an error.\n\n\n  renderDidError(value);\n  value = createCapturedValue(value, sourceFiber);\n  var workInProgress = returnFiber;\n\n  do {\n    switch (workInProgress.tag) {\n      case HostRoot:\n        {\n          var _errorInfo = value;\n          workInProgress.flags |= ShouldCapture;\n          var lane = pickArbitraryLane(rootRenderLanes);\n          workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n          var update = createRootErrorUpdate(workInProgress, _errorInfo, lane);\n          enqueueCapturedUpdate(workInProgress, update);\n          return;\n        }\n\n      case ClassComponent:\n        // Capture and retry\n        var errorInfo = value;\n        var ctor = workInProgress.type;\n        var instance = workInProgress.stateNode;\n\n        if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {\n          workInProgress.flags |= ShouldCapture;\n\n          var _lane = pickArbitraryLane(rootRenderLanes);\n\n          workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane); // Schedule the error boundary to re-render using updated state\n\n          var _update = createClassErrorUpdate(workInProgress, errorInfo, _lane);\n\n          enqueueCapturedUpdate(workInProgress, _update);\n          return;\n        }\n\n        break;\n    }\n\n    workInProgress = workInProgress.return;\n  } while (workInProgress !== null);\n}\n\nfunction getSuspendedCache() {\n  {\n    return null;\n  } // This function is called when a Suspense boundary suspends. It returns the\n}\n\nfunction markUpdate(workInProgress) {\n  // Tag the fiber with an update effect. This turns a Placement into\n  // a PlacementAndUpdate.\n  workInProgress.flags |= Update;\n}\n\nfunction markRef(workInProgress) {\n  workInProgress.flags |= Ref;\n}\n\nvar appendAllChildren;\nvar updateHostContainer;\nvar updateHostComponent;\nvar updateHostText;\n\n{\n  // Mutation mode\n  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    var node = workInProgress.child;\n\n    while (node !== null) {\n      if (node.tag === HostComponent || node.tag === HostText) {\n        appendInitialChild(parent, node.stateNode);\n      } else if (node.tag === HostPortal) ; else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n\n      if (node === workInProgress) {\n        return;\n      }\n\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n\n        node = node.return;\n      }\n\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  };\n\n  updateHostContainer = function (current, workInProgress) {// Noop\n  };\n\n  updateHostComponent = function (current, workInProgress, type, newProps, rootContainerInstance) {\n    // If we have an alternate, that means this is an update and we need to\n    // schedule a side-effect to do the updates.\n    var oldProps = current.memoizedProps;\n\n    if (oldProps === newProps) {\n      // In mutation mode, this is sufficient for a bailout because\n      // we won't touch this node even if children changed.\n      return;\n    } // If we get updated because one of our children updated, we don't\n    // have newProps so we'll have to reuse them.\n    // TODO: Split the update API as separate for the props vs. children.\n    // Even better would be if children weren't special cased at all tho.\n\n\n    var instance = workInProgress.stateNode;\n    var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host\n    // component is hitting the resume path. Figure out why. Possibly\n    // related to `hidden`.\n\n    var updatePayload = prepareUpdate(); // TODO: Type this specific to this type of component.\n\n    workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there\n    // is a new ref we mark this as an update. All the work is done in commitWork.\n\n    if (updatePayload) {\n      markUpdate(workInProgress);\n    }\n  };\n\n  updateHostText = function (current, workInProgress, oldText, newText) {\n    // If the text differs, mark it as an update. All the work in done in commitWork.\n    if (oldText !== newText) {\n      markUpdate(workInProgress);\n    }\n  };\n}\n\nfunction cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {\n\n  switch (renderState.tailMode) {\n    case 'hidden':\n      {\n        // Any insertions at the end of the tail list after this point\n        // should be invisible. If there are already mounted boundaries\n        // anything before them are not considered for collapsing.\n        // Therefore we need to go through the whole tail to find if\n        // there are any.\n        var tailNode = renderState.tail;\n        var lastTailNode = null;\n\n        while (tailNode !== null) {\n          if (tailNode.alternate !== null) {\n            lastTailNode = tailNode;\n          }\n\n          tailNode = tailNode.sibling;\n        } // Next we're simply going to delete all insertions after the\n        // last rendered item.\n\n\n        if (lastTailNode === null) {\n          // All remaining items in the tail are insertions.\n          renderState.tail = null;\n        } else {\n          // Detach the insertion after the last node that was already\n          // inserted.\n          lastTailNode.sibling = null;\n        }\n\n        break;\n      }\n\n    case 'collapsed':\n      {\n        // Any insertions at the end of the tail list after this point\n        // should be invisible. If there are already mounted boundaries\n        // anything before them are not considered for collapsing.\n        // Therefore we need to go through the whole tail to find if\n        // there are any.\n        var _tailNode = renderState.tail;\n        var _lastTailNode = null;\n\n        while (_tailNode !== null) {\n          if (_tailNode.alternate !== null) {\n            _lastTailNode = _tailNode;\n          }\n\n          _tailNode = _tailNode.sibling;\n        } // Next we're simply going to delete all insertions after the\n        // last rendered item.\n\n\n        if (_lastTailNode === null) {\n          // All remaining items in the tail are insertions.\n          if (!hasRenderedATailFallback && renderState.tail !== null) {\n            // We suspended during the head. We want to show at least one\n            // row at the tail. So we'll keep on and cut off the rest.\n            renderState.tail.sibling = null;\n          } else {\n            renderState.tail = null;\n          }\n        } else {\n          // Detach the insertion after the last node that was already\n          // inserted.\n          _lastTailNode.sibling = null;\n        }\n\n        break;\n      }\n  }\n}\n\nfunction bubbleProperties(completedWork) {\n  var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;\n  var newChildLanes = NoLanes;\n  var subtreeFlags = NoFlags;\n\n  if (!didBailout) {\n    // Bubble up the earliest expiration time.\n    if ( (completedWork.mode & ProfileMode) !== NoMode) {\n      // In profiling mode, resetChildExpirationTime is also used to reset\n      // profiler durations.\n      var actualDuration = completedWork.actualDuration;\n      var treeBaseDuration = completedWork.selfBaseDuration;\n      var child = completedWork.child;\n\n      while (child !== null) {\n        newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));\n        subtreeFlags |= child.subtreeFlags;\n        subtreeFlags |= child.flags; // When a fiber is cloned, its actualDuration is reset to 0. This value will\n        // only be updated if work is done on the fiber (i.e. it doesn't bailout).\n        // When work is done, it should bubble to the parent's actualDuration. If\n        // the fiber has not been cloned though, (meaning no work was done), then\n        // this value will reflect the amount of time spent working on a previous\n        // render. In that case it should not bubble. We determine whether it was\n        // cloned by comparing the child pointer.\n\n        actualDuration += child.actualDuration;\n        treeBaseDuration += child.treeBaseDuration;\n        child = child.sibling;\n      }\n\n      completedWork.actualDuration = actualDuration;\n      completedWork.treeBaseDuration = treeBaseDuration;\n    } else {\n      var _child = completedWork.child;\n\n      while (_child !== null) {\n        newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));\n        subtreeFlags |= _child.subtreeFlags;\n        subtreeFlags |= _child.flags; // Update the return pointer so the tree is consistent. This is a code\n        // smell because it assumes the commit phase is never concurrent with\n        // the render phase. Will address during refactor to alternate model.\n\n        _child.return = completedWork;\n        _child = _child.sibling;\n      }\n    }\n\n    completedWork.subtreeFlags |= subtreeFlags;\n  } else {\n    // Bubble up the earliest expiration time.\n    if ( (completedWork.mode & ProfileMode) !== NoMode) {\n      // In profiling mode, resetChildExpirationTime is also used to reset\n      // profiler durations.\n      var _treeBaseDuration = completedWork.selfBaseDuration;\n      var _child2 = completedWork.child;\n\n      while (_child2 !== null) {\n        newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes)); // \"Static\" flags share the lifetime of the fiber/hook they belong to,\n        // so we should bubble those up even during a bailout. All the other\n        // flags have a lifetime only of a single render + commit, so we should\n        // ignore them.\n\n        subtreeFlags |= _child2.subtreeFlags & StaticMask;\n        subtreeFlags |= _child2.flags & StaticMask;\n        _treeBaseDuration += _child2.treeBaseDuration;\n        _child2 = _child2.sibling;\n      }\n\n      completedWork.treeBaseDuration = _treeBaseDuration;\n    } else {\n      var _child3 = completedWork.child;\n\n      while (_child3 !== null) {\n        newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes)); // \"Static\" flags share the lifetime of the fiber/hook they belong to,\n        // so we should bubble those up even during a bailout. All the other\n        // flags have a lifetime only of a single render + commit, so we should\n        // ignore them.\n\n        subtreeFlags |= _child3.subtreeFlags & StaticMask;\n        subtreeFlags |= _child3.flags & StaticMask; // Update the return pointer so the tree is consistent. This is a code\n        // smell because it assumes the commit phase is never concurrent with\n        // the render phase. Will address during refactor to alternate model.\n\n        _child3.return = completedWork;\n        _child3 = _child3.sibling;\n      }\n    }\n\n    completedWork.subtreeFlags |= subtreeFlags;\n  }\n\n  completedWork.childLanes = newChildLanes;\n  return didBailout;\n}\n\nfunction completeWork(current, workInProgress, renderLanes) {\n  var newProps = workInProgress.pendingProps; // Note: This intentionally doesn't check if we're hydrating because comparing\n  // to the current tree provider fiber is just as fast and less error-prone.\n  // Ideally we would have a special version of the work loop only\n  // for hydration.\n\n  popTreeContext(workInProgress);\n\n  switch (workInProgress.tag) {\n    case IndeterminateComponent:\n    case LazyComponent:\n    case SimpleMemoComponent:\n    case FunctionComponent:\n    case ForwardRef:\n    case Fragment:\n    case Mode:\n    case Profiler:\n    case ContextConsumer:\n    case MemoComponent:\n      bubbleProperties(workInProgress);\n      return null;\n\n    case ClassComponent:\n      {\n        var Component = workInProgress.type;\n\n        if (isContextProvider(Component)) {\n          popContext(workInProgress);\n        }\n\n        bubbleProperties(workInProgress);\n        return null;\n      }\n\n    case HostRoot:\n      {\n        var fiberRoot = workInProgress.stateNode;\n\n        popHostContainer(workInProgress);\n        popTopLevelContextObject(workInProgress);\n        resetWorkInProgressVersions();\n\n        if (fiberRoot.pendingContext) {\n          fiberRoot.context = fiberRoot.pendingContext;\n          fiberRoot.pendingContext = null;\n        }\n\n        if (current === null || current.child === null) {\n          // If we hydrated, pop so that we can delete any remaining children\n          // that weren't hydrated.\n          var wasHydrated = popHydrationState();\n\n          if (wasHydrated) {\n            // If we hydrated, then we'll need to schedule an update for\n            // the commit side-effects on the root.\n            markUpdate(workInProgress);\n          } else {\n            if (current !== null) {\n              var prevState = current.memoizedState;\n\n              if ( // Check if this is a client root\n              !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)\n              (workInProgress.flags & ForceClientRender) !== NoFlags) {\n                // Schedule an effect to clear this container at the start of the\n                // next commit. This handles the case of React rendering into a\n                // container with previous children. It's also safe to do for\n                // updates too, because current.child would only be null if the\n                // previous render was null (so the container would already\n                // be empty).\n                workInProgress.flags |= Snapshot; // If this was a forced client render, there may have been\n              }\n            }\n          }\n        }\n\n        updateHostContainer(current, workInProgress);\n        bubbleProperties(workInProgress);\n        return null;\n      }\n\n    case HostComponent:\n      {\n        popHostContext(workInProgress);\n        var rootContainerInstance = getRootHostContainer();\n        var type = workInProgress.type;\n\n        if (current !== null && workInProgress.stateNode != null) {\n          updateHostComponent(current, workInProgress, type, newProps, rootContainerInstance);\n\n          if (current.ref !== workInProgress.ref) {\n            markRef(workInProgress);\n          }\n        } else {\n          if (!newProps) {\n            if (workInProgress.stateNode === null) {\n              throw new Error('We must have new props for new mounts. This error is likely ' + 'caused by a bug in React. Please file an issue.');\n            } // This can happen when we abort work.\n\n\n            bubbleProperties(workInProgress);\n            return null;\n          }\n\n          var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context\n          // \"stack\" as the parent. Then append children as we go in beginWork\n          // or completeWork depending on whether we want to add them top->down or\n          // bottom->up. Top->down is faster in IE11.\n\n          var _wasHydrated = popHydrationState();\n\n          if (_wasHydrated) {\n            // TODO: Move this and createInstance step into the beginPhase\n            // to consolidate.\n            if (prepareToHydrateHostInstance()) {\n              // If changes to the hydrated node need to be applied at the\n              // commit-phase we mark this as such.\n              markUpdate(workInProgress);\n            }\n          } else {\n            var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);\n            appendAllChildren(instance, workInProgress, false, false);\n            workInProgress.stateNode = instance; // Certain renderers require commit-time effects for initial mount.\n          }\n\n          if (workInProgress.ref !== null) {\n            // If there is a ref on a host node we need to schedule a callback\n            markRef(workInProgress);\n          }\n        }\n\n        bubbleProperties(workInProgress);\n        return null;\n      }\n\n    case HostText:\n      {\n        var newText = newProps;\n\n        if (current && workInProgress.stateNode != null) {\n          var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need\n          // to schedule a side-effect to do the updates.\n\n          updateHostText(current, workInProgress, oldText, newText);\n        } else {\n          if (typeof newText !== 'string') {\n            if (workInProgress.stateNode === null) {\n              throw new Error('We must have new props for new mounts. This error is likely ' + 'caused by a bug in React. Please file an issue.');\n            } // This can happen when we abort work.\n\n          }\n\n          var _rootContainerInstance = getRootHostContainer();\n\n          var _currentHostContext = getHostContext();\n\n          var _wasHydrated2 = popHydrationState();\n\n          if (_wasHydrated2) {\n            if (prepareToHydrateHostTextInstance()) {\n              markUpdate(workInProgress);\n            }\n          } else {\n            workInProgress.stateNode = createTextInstance(newText);\n          }\n        }\n\n        bubbleProperties(workInProgress);\n        return null;\n      }\n\n    case SuspenseComponent:\n      {\n        popSuspenseContext(workInProgress);\n        var nextState = workInProgress.memoizedState;\n\n        if ((workInProgress.flags & DidCapture) !== NoFlags) {\n          // Something suspended. Re-render with the fallback children.\n          workInProgress.lanes = renderLanes; // Do not reset the effect list.\n\n          if ( (workInProgress.mode & ProfileMode) !== NoMode) {\n            transferActualDuration(workInProgress);\n          } // Don't bubble properties in this case.\n\n\n          return workInProgress;\n        }\n\n        var nextDidTimeout = nextState !== null;\n        var prevDidTimeout = false;\n\n        if (current === null) ; else {\n          var _prevState = current.memoizedState;\n          prevDidTimeout = _prevState !== null;\n        }\n        // an effect to toggle the subtree's visibility. When we switch from\n        // fallback -> primary, the inner Offscreen fiber schedules this effect\n        // as part of its normal complete phase. But when we switch from\n        // primary -> fallback, the inner Offscreen fiber does not have a complete\n        // phase. So we need to schedule its effect here.\n        //\n        // We also use this flag to connect/disconnect the effects, but the same\n        // logic applies: when re-connecting, the Offscreen fiber's complete\n        // phase will handle scheduling the effect. It's only when the fallback\n        // is active that we have to do anything special.\n\n\n        if (nextDidTimeout && !prevDidTimeout) {\n          var _offscreenFiber = workInProgress.child;\n          _offscreenFiber.flags |= Visibility; // TODO: This will still suspend a synchronous tree if anything\n          // in the concurrent tree already suspended during this render.\n          // This is a known bug.\n\n          if ((workInProgress.mode & ConcurrentMode) !== NoMode) {\n            // TODO: Move this back to throwException because this is too late\n            // if this is a large tree which is common for initial loads. We\n            // don't know if we should restart a render or not until we get\n            // this marker, and this is too late.\n            // If this render already had a ping or lower pri updates,\n            // and this is the first time we know we're going to suspend we\n            // should be able to immediately restart from within throwException.\n            var hasInvisibleChildContext = current === null && (workInProgress.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);\n\n            if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {\n              // If this was in an invisible tree or a new render, then showing\n              // this boundary is ok.\n              renderDidSuspend();\n            } else {\n              // Otherwise, we're going to have to hide content so we should\n              // suspend for longer if possible.\n              renderDidSuspendDelayIfPossible();\n            }\n          }\n        }\n\n        var wakeables = workInProgress.updateQueue;\n\n        if (wakeables !== null) {\n          // Schedule an effect to attach a retry listener to the promise.\n          // TODO: Move to passive phase\n          workInProgress.flags |= Update;\n        }\n\n        bubbleProperties(workInProgress);\n\n        {\n          if ((workInProgress.mode & ProfileMode) !== NoMode) {\n            if (nextDidTimeout) {\n              // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n              var _primaryChildFragment2 = workInProgress.child;\n\n              if (_primaryChildFragment2 !== null) {\n                // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n                workInProgress.treeBaseDuration -= _primaryChildFragment2.treeBaseDuration;\n              }\n            }\n          }\n        }\n\n        return null;\n      }\n\n    case HostPortal:\n      popHostContainer(workInProgress);\n      updateHostContainer(current, workInProgress);\n\n      if (current === null) {\n        preparePortalMount(workInProgress.stateNode.containerInfo);\n      }\n\n      bubbleProperties(workInProgress);\n      return null;\n\n    case ContextProvider:\n      // Pop provider fiber\n      var context = workInProgress.type._context;\n      popProvider(context, workInProgress);\n      bubbleProperties(workInProgress);\n      return null;\n\n    case IncompleteClassComponent:\n      {\n        // Same as class component case. I put it down here so that the tags are\n        // sequential to ensure this switch is compiled to a jump table.\n        var _Component = workInProgress.type;\n\n        if (isContextProvider(_Component)) {\n          popContext(workInProgress);\n        }\n\n        bubbleProperties(workInProgress);\n        return null;\n      }\n\n    case SuspenseListComponent:\n      {\n        popSuspenseContext(workInProgress);\n        var renderState = workInProgress.memoizedState;\n\n        if (renderState === null) {\n          // We're running in the default, \"independent\" mode.\n          // We don't do anything in this mode.\n          bubbleProperties(workInProgress);\n          return null;\n        }\n\n        var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;\n        var renderedTail = renderState.rendering;\n\n        if (renderedTail === null) {\n          // We just rendered the head.\n          if (!didSuspendAlready) {\n            // This is the first pass. We need to figure out if anything is still\n            // suspended in the rendered set.\n            // If new content unsuspended, but there's still some content that\n            // didn't. Then we need to do a second pass that forces everything\n            // to keep showing their fallbacks.\n            // We might be suspended if something in this render pass suspended, or\n            // something in the previous committed pass suspended. Otherwise,\n            // there's no chance so we can skip the expensive call to\n            // findFirstSuspended.\n            var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.flags & DidCapture) === NoFlags);\n\n            if (!cannotBeSuspended) {\n              var row = workInProgress.child;\n\n              while (row !== null) {\n                var suspended = findFirstSuspended(row);\n\n                if (suspended !== null) {\n                  didSuspendAlready = true;\n                  workInProgress.flags |= DidCapture;\n                  cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as\n                  // part of the second pass. In that case nothing will subscribe to\n                  // its thenables. Instead, we'll transfer its thenables to the\n                  // SuspenseList so that it can retry if they resolve.\n                  // There might be multiple of these in the list but since we're\n                  // going to wait for all of them anyway, it doesn't really matter\n                  // which ones gets to ping. In theory we could get clever and keep\n                  // track of how many dependencies remain but it gets tricky because\n                  // in the meantime, we can add/remove/change items and dependencies.\n                  // We might bail out of the loop before finding any but that\n                  // doesn't matter since that means that the other boundaries that\n                  // we did find already has their listeners attached.\n\n                  var newThenables = suspended.updateQueue;\n\n                  if (newThenables !== null) {\n                    workInProgress.updateQueue = newThenables;\n                    workInProgress.flags |= Update;\n                  } // Rerender the whole list, but this time, we'll force fallbacks\n                  // to stay in place.\n                  // Reset the effect flags before doing the second pass since that's now invalid.\n                  // Reset the child fibers to their original state.\n\n\n                  workInProgress.subtreeFlags = NoFlags;\n                  resetChildFibers(workInProgress, renderLanes); // Set up the Suspense Context to force suspense and immediately\n                  // rerender the children.\n\n                  pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback)); // Don't bubble properties in this case.\n\n                  return workInProgress.child;\n                }\n\n                row = row.sibling;\n              }\n            }\n\n            if (renderState.tail !== null && now() > getRenderTargetTime()) {\n              // We have already passed our CPU deadline but we still have rows\n              // left in the tail. We'll just give up further attempts to render\n              // the main content and only render fallbacks.\n              workInProgress.flags |= DidCapture;\n              didSuspendAlready = true;\n              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this\n              // to get it started back up to attempt the next item. While in terms\n              // of priority this work has the same priority as this current render,\n              // it's not part of the same transition once the transition has\n              // committed. If it's sync, we still want to yield so that it can be\n              // painted. Conceptually, this is really the same as pinging.\n              // We can use any RetryLane even if it's the one currently rendering\n              // since we're leaving it behind on this node.\n\n              workInProgress.lanes = SomeRetryLane;\n            }\n          } else {\n            cutOffTailIfNeeded(renderState, false);\n          } // Next we're going to render the tail.\n\n        } else {\n          // Append the rendered row to the child list.\n          if (!didSuspendAlready) {\n            var _suspended = findFirstSuspended(renderedTail);\n\n            if (_suspended !== null) {\n              workInProgress.flags |= DidCapture;\n              didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't\n              // get lost if this row ends up dropped during a second pass.\n\n              var _newThenables = _suspended.updateQueue;\n\n              if (_newThenables !== null) {\n                workInProgress.updateQueue = _newThenables;\n                workInProgress.flags |= Update;\n              }\n\n              cutOffTailIfNeeded(renderState, true); // This might have been modified.\n\n              if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate && !getIsHydrating() // We don't cut it if we're hydrating.\n              ) {\n                  // We're done.\n                  bubbleProperties(workInProgress);\n                  return null;\n                }\n            } else if ( // The time it took to render last row is greater than the remaining\n            // time we have to render. So rendering one more row would likely\n            // exceed it.\n            now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes !== OffscreenLane) {\n              // We have now passed our CPU deadline and we'll just give up further\n              // attempts to render the main content and only render fallbacks.\n              // The assumption is that this is usually faster.\n              workInProgress.flags |= DidCapture;\n              didSuspendAlready = true;\n              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this\n              // to get it started back up to attempt the next item. While in terms\n              // of priority this work has the same priority as this current render,\n              // it's not part of the same transition once the transition has\n              // committed. If it's sync, we still want to yield so that it can be\n              // painted. Conceptually, this is really the same as pinging.\n              // We can use any RetryLane even if it's the one currently rendering\n              // since we're leaving it behind on this node.\n\n              workInProgress.lanes = SomeRetryLane;\n            }\n          }\n\n          if (renderState.isBackwards) {\n            // The effect list of the backwards tail will have been added\n            // to the end. This breaks the guarantee that life-cycles fire in\n            // sibling order but that isn't a strong guarantee promised by React.\n            // Especially since these might also just pop in during future commits.\n            // Append to the beginning of the list.\n            renderedTail.sibling = workInProgress.child;\n            workInProgress.child = renderedTail;\n          } else {\n            var previousSibling = renderState.last;\n\n            if (previousSibling !== null) {\n              previousSibling.sibling = renderedTail;\n            } else {\n              workInProgress.child = renderedTail;\n            }\n\n            renderState.last = renderedTail;\n          }\n        }\n\n        if (renderState.tail !== null) {\n          // We still have tail rows to render.\n          // Pop a row.\n          var next = renderState.tail;\n          renderState.rendering = next;\n          renderState.tail = next.sibling;\n          renderState.renderingStartTime = now();\n          next.sibling = null; // Restore the context.\n          // TODO: We can probably just avoid popping it instead and only\n          // setting it the first time we go from not suspended to suspended.\n\n          var suspenseContext = suspenseStackCursor.current;\n\n          if (didSuspendAlready) {\n            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);\n          } else {\n            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n          }\n\n          pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.\n          // Don't bubble properties in this case.\n\n          return next;\n        }\n\n        bubbleProperties(workInProgress);\n        return null;\n      }\n\n    case ScopeComponent:\n      {\n\n        break;\n      }\n\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      {\n        popRenderLanes(workInProgress);\n        var _nextState = workInProgress.memoizedState;\n        var nextIsHidden = _nextState !== null;\n\n        if (current !== null) {\n          var _prevState2 = current.memoizedState;\n          var prevIsHidden = _prevState2 !== null;\n\n          if (prevIsHidden !== nextIsHidden && ( // LegacyHidden doesn't do any hiding — it only pre-renders.\n          !enableLegacyHidden )) {\n            workInProgress.flags |= Visibility;\n          }\n        }\n\n        if (!nextIsHidden || (workInProgress.mode & ConcurrentMode) === NoMode) {\n          bubbleProperties(workInProgress);\n        } else {\n          // Don't bubble properties for hidden children unless we're rendering\n          // at offscreen priority.\n          if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {\n            bubbleProperties(workInProgress);\n\n            {\n              // Check if there was an insertion or update in the hidden subtree.\n              // If so, we need to hide those nodes in the commit phase, so\n              // schedule a visibility effect.\n              if ( workInProgress.subtreeFlags & (Placement | Update)) {\n                workInProgress.flags |= Visibility;\n              }\n            }\n          }\n        }\n\n        return null;\n      }\n\n    case CacheComponent:\n      {\n\n        return null;\n      }\n\n    case TracingMarkerComponent:\n      {\n\n        return null;\n      }\n  }\n\n  throw new Error(\"Unknown unit of work tag (\" + workInProgress.tag + \"). This error is likely caused by a bug in \" + 'React. Please file an issue.');\n}\n\nvar ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\nvar didReceiveUpdate = false;\nvar didWarnAboutBadClass;\nvar didWarnAboutModulePatternComponent;\nvar didWarnAboutContextTypeOnFunctionComponent;\nvar didWarnAboutGetDerivedStateOnFunctionComponent;\nvar didWarnAboutFunctionRefs;\nvar didWarnAboutReassigningProps;\nvar didWarnAboutRevealOrder;\nvar didWarnAboutTailOptions;\n\n{\n  didWarnAboutBadClass = {};\n  didWarnAboutModulePatternComponent = {};\n  didWarnAboutContextTypeOnFunctionComponent = {};\n  didWarnAboutGetDerivedStateOnFunctionComponent = {};\n  didWarnAboutFunctionRefs = {};\n  didWarnAboutReassigningProps = false;\n  didWarnAboutRevealOrder = {};\n  didWarnAboutTailOptions = {};\n}\n\nfunction reconcileChildren(current, workInProgress, nextChildren, renderLanes) {\n  if (current === null) {\n    // If this is a fresh new component that hasn't been rendered yet, we\n    // won't update its child set by applying minimal side-effects. Instead,\n    // we will add them all to the child before it gets rendered. That means\n    // we can optimize this reconciliation pass by not tracking side-effects.\n    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);\n  } else {\n    // If the current child is the same as the work in progress, it means that\n    // we haven't yet started any work on these children. Therefore, we use\n    // the clone algorithm to create a copy of all the current children.\n    // If we had any progressed work already, that is invalid at this point so\n    // let's throw it out.\n    workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);\n  }\n}\n\nfunction forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes) {\n  // This function is fork of reconcileChildren. It's used in cases where we\n  // want to reconcile without matching against the existing set. This has the\n  // effect of all current children being unmounted; even if the type and key\n  // are the same, the old child is unmounted and a new child is created.\n  //\n  // To do this, we're going to go through the reconcile algorithm twice. In\n  // the first pass, we schedule a deletion for all the current children by\n  // passing null.\n  workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes); // In the second pass, we mount the new children. The trick here is that we\n  // pass null in place of where we usually pass the current child set. This has\n  // the effect of remounting all children regardless of whether their\n  // identities match.\n\n  workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);\n}\n\nfunction updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {\n  // TODO: current can be non-null here even if the component\n  // hasn't yet mounted. This happens after the first render suspends.\n  // We'll need to figure out if this is fine or can cause issues.\n  {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      var innerPropTypes = Component.propTypes;\n\n      if (innerPropTypes) {\n        checkPropTypes(innerPropTypes, nextProps, // Resolved props\n        'prop', getComponentNameFromType(Component));\n      }\n    }\n  }\n\n  var render = Component.render;\n  var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent\n\n  var nextChildren;\n  prepareToReadContext(workInProgress, renderLanes);\n\n  {\n    ReactCurrentOwner$1.current = workInProgress;\n    setIsRendering(true);\n    nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);\n\n    setIsRendering(false);\n  }\n\n  if (current !== null && !didReceiveUpdate) {\n    bailoutHooks(current, workInProgress, renderLanes);\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {\n  if (current === null) {\n    var type = Component.type;\n\n    if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.\n    Component.defaultProps === undefined) {\n      var resolvedType = type;\n\n      {\n        resolvedType = resolveFunctionForHotReloading(type);\n      } // If this is a plain function component without default props,\n      // and with only the default shallow comparison, we upgrade it\n      // to a SimpleMemoComponent to allow fast path updates.\n\n\n      workInProgress.tag = SimpleMemoComponent;\n      workInProgress.type = resolvedType;\n\n      {\n        validateFunctionComponentInDev(workInProgress, type);\n      }\n\n      return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, renderLanes);\n    }\n\n    {\n      var innerPropTypes = type.propTypes;\n\n      if (innerPropTypes) {\n        // Inner memo component props aren't currently validated in createElement.\n        // We could move it there, but we'd still need this for lazy code path.\n        checkPropTypes(innerPropTypes, nextProps, // Resolved props\n        'prop', getComponentNameFromType(type));\n      }\n    }\n\n    var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);\n    child.ref = workInProgress.ref;\n    child.return = workInProgress;\n    workInProgress.child = child;\n    return child;\n  }\n\n  {\n    var _type = Component.type;\n    var _innerPropTypes = _type.propTypes;\n\n    if (_innerPropTypes) {\n      // Inner memo component props aren't currently validated in createElement.\n      // We could move it there, but we'd still need this for lazy code path.\n      checkPropTypes(_innerPropTypes, nextProps, // Resolved props\n      'prop', getComponentNameFromType(_type));\n    }\n  }\n\n  var currentChild = current.child; // This is always exactly one child\n\n  var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);\n\n  if (!hasScheduledUpdateOrContext) {\n    // This will be the props with resolved defaultProps,\n    // unlike current.memoizedProps which will be the unresolved ones.\n    var prevProps = currentChild.memoizedProps; // Default to shallow comparison\n\n    var compare = Component.compare;\n    compare = compare !== null ? compare : shallowEqual;\n\n    if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {\n      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n    }\n  } // React DevTools reads this flag.\n\n\n  workInProgress.flags |= PerformedWork;\n  var newChild = createWorkInProgress(currentChild, nextProps);\n  newChild.ref = workInProgress.ref;\n  newChild.return = workInProgress;\n  workInProgress.child = newChild;\n  return newChild;\n}\n\nfunction updateSimpleMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {\n  // TODO: current can be non-null here even if the component\n  // hasn't yet mounted. This happens when the inner render suspends.\n  // We'll need to figure out if this is fine or can cause issues.\n  {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      var outerMemoType = workInProgress.elementType;\n\n      if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {\n        // We warn when you define propTypes on lazy()\n        // so let's just skip over it to find memo() outer wrapper.\n        // Inner props for memo are validated later.\n        var lazyComponent = outerMemoType;\n        var payload = lazyComponent._payload;\n        var init = lazyComponent._init;\n\n        try {\n          outerMemoType = init(payload);\n        } catch (x) {\n          outerMemoType = null;\n        } // Inner propTypes will be validated in the function component path.\n\n\n        var outerPropTypes = outerMemoType && outerMemoType.propTypes;\n\n        if (outerPropTypes) {\n          checkPropTypes(outerPropTypes, nextProps, // Resolved (SimpleMemoComponent has no defaultProps)\n          'prop', getComponentNameFromType(outerMemoType));\n        }\n      }\n    }\n  }\n\n  if (current !== null) {\n    var prevProps = current.memoizedProps;\n\n    if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && ( // Prevent bailout if the implementation changed due to hot reload.\n     workInProgress.type === current.type )) {\n      didReceiveUpdate = false;\n\n      if (!checkScheduledUpdateOrContext(current, renderLanes)) {\n        // The pending lanes were cleared at the beginning of beginWork. We're\n        // about to bail out, but there might be other lanes that weren't\n        // included in the current render. Usually, the priority level of the\n        // remaining updates is accumulated during the evaluation of the\n        // component (i.e. when processing the update queue). But since since\n        // we're bailing out early *without* evaluating the component, we need\n        // to account for it here, too. Reset to the value of the current fiber.\n        // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,\n        // because a MemoComponent fiber does not have hooks or an update queue;\n        // rather, it wraps around an inner component, which may or may not\n        // contains hooks.\n        // TODO: Move the reset at in beginWork out of the common path so that\n        // this is no longer necessary.\n        workInProgress.lanes = current.lanes;\n        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n      } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\n        // This is a special case that only exists for legacy mode.\n        // See https://github.com/facebook/react/pull/19216.\n        didReceiveUpdate = true;\n      }\n    }\n  }\n\n  return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);\n}\n\nfunction updateOffscreenComponent(current, workInProgress, renderLanes) {\n  var nextProps = workInProgress.pendingProps;\n  var nextChildren = nextProps.children;\n  var prevState = current !== null ? current.memoizedState : null;\n\n  if (nextProps.mode === 'hidden' || enableLegacyHidden ) {\n    // Rendering a hidden tree.\n    if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n      // In legacy sync mode, don't defer the subtree. Render it now.\n      var nextState = {\n        baseLanes: NoLanes,\n        cachePool: null\n      };\n      workInProgress.memoizedState = nextState;\n\n      pushRenderLanes(workInProgress, renderLanes);\n    } else if (!includesSomeLane(renderLanes, OffscreenLane)) {\n      var spawnedCachePool = null; // We're hidden, and we're not rendering at Offscreen. We will bail out\n      // and resume this tree later.\n\n      var nextBaseLanes;\n\n      if (prevState !== null) {\n        var prevBaseLanes = prevState.baseLanes;\n        nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);\n      } else {\n        nextBaseLanes = renderLanes;\n      } // Schedule this fiber to re-render at offscreen priority. Then bailout.\n\n\n      workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);\n      var _nextState = {\n        baseLanes: nextBaseLanes,\n        cachePool: spawnedCachePool\n      };\n      workInProgress.memoizedState = _nextState;\n      workInProgress.updateQueue = null;\n      // to avoid a push/pop misalignment.\n\n\n      pushRenderLanes(workInProgress, nextBaseLanes);\n\n      return null;\n    } else {\n      // This is the second render. The surrounding visible content has already\n      // committed. Now we resume rendering the hidden tree.\n      // Rendering at offscreen, so we can clear the base lanes.\n      var _nextState2 = {\n        baseLanes: NoLanes,\n        cachePool: null\n      };\n      workInProgress.memoizedState = _nextState2; // Push the lanes that were skipped when we bailed out.\n\n      var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes;\n\n      pushRenderLanes(workInProgress, subtreeRenderLanes);\n    }\n  } else {\n    // Rendering a visible tree.\n    var _subtreeRenderLanes;\n\n    if (prevState !== null) {\n      // We're going from hidden -> visible.\n      _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes);\n\n\n      workInProgress.memoizedState = null;\n    } else {\n      // We weren't previously hidden, and we still aren't, so there's nothing\n      // special to do. Need to push to the stack regardless, though, to avoid\n      // a push/pop misalignment.\n      _subtreeRenderLanes = renderLanes;\n    }\n\n    pushRenderLanes(workInProgress, _subtreeRenderLanes);\n  }\n\n  {\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n    return workInProgress.child;\n  }\n}\n\nfunction updateFragment(current, workInProgress, renderLanes) {\n  var nextChildren = workInProgress.pendingProps;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateMode(current, workInProgress, renderLanes) {\n  var nextChildren = workInProgress.pendingProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateProfiler(current, workInProgress, renderLanes) {\n  {\n    workInProgress.flags |= Update;\n\n    {\n      // Reset effect durations for the next eventual effect phase.\n      // These are reset during render to allow the DevTools commit hook a chance to read them,\n      var stateNode = workInProgress.stateNode;\n      stateNode.effectDuration = 0;\n      stateNode.passiveEffectDuration = 0;\n    }\n  }\n\n  var nextProps = workInProgress.pendingProps;\n  var nextChildren = nextProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction markRef$1(current, workInProgress) {\n  var ref = workInProgress.ref;\n\n  if (current === null && ref !== null || current !== null && current.ref !== ref) {\n    // Schedule a Ref effect\n    workInProgress.flags |= Ref;\n  }\n}\n\nfunction updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {\n  {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      var innerPropTypes = Component.propTypes;\n\n      if (innerPropTypes) {\n        checkPropTypes(innerPropTypes, nextProps, // Resolved props\n        'prop', getComponentNameFromType(Component));\n      }\n    }\n  }\n\n  var context;\n\n  {\n    var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);\n    context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  var nextChildren;\n  prepareToReadContext(workInProgress, renderLanes);\n\n  {\n    ReactCurrentOwner$1.current = workInProgress;\n    setIsRendering(true);\n    nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);\n\n    setIsRendering(false);\n  }\n\n  if (current !== null && !didReceiveUpdate) {\n    bailoutHooks(current, workInProgress, renderLanes);\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {\n  {\n    // This is used by DevTools to force a boundary to error.\n    switch (shouldError(workInProgress)) {\n      case false:\n        {\n          var _instance = workInProgress.stateNode;\n          var ctor = workInProgress.type; // TODO This way of resetting the error boundary state is a hack.\n          // Is there a better way to do this?\n\n          var tempInstance = new ctor(workInProgress.memoizedProps, _instance.context);\n          var state = tempInstance.state;\n\n          _instance.updater.enqueueSetState(_instance, state, null);\n\n          break;\n        }\n\n      case true:\n        {\n          workInProgress.flags |= DidCapture;\n          workInProgress.flags |= ShouldCapture; // eslint-disable-next-line react-internal/prod-error-codes\n\n          var error$1 = new Error('Simulated error coming from DevTools');\n          var lane = pickArbitraryLane(renderLanes);\n          workInProgress.lanes = mergeLanes(workInProgress.lanes, lane); // Schedule the error boundary to re-render using updated state\n\n          var update = createClassErrorUpdate(workInProgress, createCapturedValue(error$1, workInProgress), lane);\n          enqueueCapturedUpdate(workInProgress, update);\n          break;\n        }\n    }\n\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      var innerPropTypes = Component.propTypes;\n\n      if (innerPropTypes) {\n        checkPropTypes(innerPropTypes, nextProps, // Resolved props\n        'prop', getComponentNameFromType(Component));\n      }\n    }\n  } // Push context providers early to prevent context stack mismatches.\n  // During mounting we don't know the child context yet as the instance doesn't exist.\n  // We will invalidate the child context in finishClassComponent() right after rendering.\n\n\n  var hasContext;\n\n  if (isContextProvider(Component)) {\n    hasContext = true;\n    pushContextProvider(workInProgress);\n  } else {\n    hasContext = false;\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  var instance = workInProgress.stateNode;\n  var shouldUpdate;\n\n  if (instance === null) {\n    if (current !== null) {\n      // A class component without an instance only mounts if it suspended\n      // inside a non-concurrent tree, in an inconsistent state. We want to\n      // treat it like a new mount, even though an empty version of it already\n      // committed. Disconnect the alternate pointers.\n      current.alternate = null;\n      workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect\n\n      workInProgress.flags |= Placement;\n    } // In the initial pass we might need to construct the instance.\n\n\n    constructClassInstance(workInProgress, Component, nextProps);\n    mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n    shouldUpdate = true;\n  } else if (current === null) {\n    // In a resume, we'll already have an instance we can reuse.\n    shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes);\n  } else {\n    shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderLanes);\n  }\n\n  var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes);\n\n  {\n    var inst = workInProgress.stateNode;\n\n    if (shouldUpdate && inst.props !== nextProps) {\n      if (!didWarnAboutReassigningProps) {\n        error('It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentNameFromFiber(workInProgress) || 'a component');\n      }\n\n      didWarnAboutReassigningProps = true;\n    }\n  }\n\n  return nextUnitOfWork;\n}\n\nfunction finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {\n  // Refs should update even if shouldComponentUpdate returns false\n  markRef$1(current, workInProgress);\n  var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;\n\n  if (!shouldUpdate && !didCaptureError) {\n    // Context providers should defer to sCU for rendering\n    if (hasContext) {\n      invalidateContextProvider(workInProgress, Component, false);\n    }\n\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  var instance = workInProgress.stateNode; // Rerender\n\n  ReactCurrentOwner$1.current = workInProgress;\n  var nextChildren;\n\n  if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {\n    // If we captured an error, but getDerivedStateFromError is not defined,\n    // unmount all the children. componentDidCatch will schedule an update to\n    // re-render a fallback. This is temporary until we migrate everyone to\n    // the new API.\n    // TODO: Warn in a future release.\n    nextChildren = null;\n\n    {\n      stopProfilerTimerIfRunning();\n    }\n  } else {\n\n    {\n      setIsRendering(true);\n      nextChildren = instance.render();\n\n      setIsRendering(false);\n    }\n  } // React DevTools reads this flag.\n\n\n  workInProgress.flags |= PerformedWork;\n\n  if (current !== null && didCaptureError) {\n    // If we're recovering from an error, reconcile without reusing any of\n    // the existing children. Conceptually, the normal children and the children\n    // that are shown on error are two different sets, so we shouldn't reuse\n    // normal children even if their identities match.\n    forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes);\n  } else {\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  } // Memoize state using the values we just used to render.\n  // TODO: Restructure so we never read values from the instance.\n\n\n  workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.\n\n  if (hasContext) {\n    invalidateContextProvider(workInProgress, Component, true);\n  }\n\n  return workInProgress.child;\n}\n\nfunction pushHostRootContext(workInProgress) {\n  var root = workInProgress.stateNode;\n\n  if (root.pendingContext) {\n    pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);\n  } else if (root.context) {\n    // Should always be set\n    pushTopLevelContextObject(workInProgress, root.context, false);\n  }\n\n  pushHostContainer(workInProgress, root.containerInfo);\n}\n\nfunction updateHostRoot(current, workInProgress, renderLanes) {\n  pushHostRootContext(workInProgress);\n\n  if (current === null) {\n    throw new Error('Should have a current fiber. This is a bug in React.');\n  }\n\n  var nextProps = workInProgress.pendingProps;\n  var prevState = workInProgress.memoizedState;\n  var prevChildren = prevState.element;\n  cloneUpdateQueue(current, workInProgress);\n  processUpdateQueue(workInProgress, nextProps, null, renderLanes);\n  var nextState = workInProgress.memoizedState;\n  var root = workInProgress.stateNode;\n  // being called \"element\".\n\n\n  var nextChildren = nextState.element;\n\n  {\n\n    if (nextChildren === prevChildren) {\n      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n    }\n\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  }\n\n  return workInProgress.child;\n}\n\nfunction updateHostComponent$1(current, workInProgress, renderLanes) {\n  pushHostContext(workInProgress);\n\n  var type = workInProgress.type;\n  var nextProps = workInProgress.pendingProps;\n  var prevProps = current !== null ? current.memoizedProps : null;\n  var nextChildren = nextProps.children;\n\n  if (prevProps !== null && shouldSetTextContent()) {\n    // If we're switching from a direct text child to a normal child, or to\n    // empty, we need to schedule the text content to be reset.\n    workInProgress.flags |= ContentReset;\n  }\n\n  markRef$1(current, workInProgress);\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateHostText$1(current, workInProgress) {\n  // immediately after.\n\n\n  return null;\n}\n\nfunction mountLazyComponent(_current, workInProgress, elementType, renderLanes) {\n  if (_current !== null) {\n    // A lazy component only mounts if it suspended inside a non-\n    // concurrent tree, in an inconsistent state. We want to treat it like\n    // a new mount, even though an empty version of it already committed.\n    // Disconnect the alternate pointers.\n    _current.alternate = null;\n    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect\n\n    workInProgress.flags |= Placement;\n  }\n\n  var props = workInProgress.pendingProps;\n  var lazyComponent = elementType;\n  var payload = lazyComponent._payload;\n  var init = lazyComponent._init;\n  var Component = init(payload); // Store the unwrapped component in the type.\n\n  workInProgress.type = Component;\n  var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);\n  var resolvedProps = resolveDefaultProps(Component, props);\n  var child;\n\n  switch (resolvedTag) {\n    case FunctionComponent:\n      {\n        {\n          validateFunctionComponentInDev(workInProgress, Component);\n          workInProgress.type = Component = resolveFunctionForHotReloading(Component);\n        }\n\n        child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes);\n        return child;\n      }\n\n    case ClassComponent:\n      {\n        {\n          workInProgress.type = Component = resolveClassForHotReloading(Component);\n        }\n\n        child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes);\n        return child;\n      }\n\n    case ForwardRef:\n      {\n        {\n          workInProgress.type = Component = resolveForwardRefForHotReloading(Component);\n        }\n\n        child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes);\n        return child;\n      }\n\n    case MemoComponent:\n      {\n        {\n          if (workInProgress.type !== workInProgress.elementType) {\n            var outerPropTypes = Component.propTypes;\n\n            if (outerPropTypes) {\n              checkPropTypes(outerPropTypes, resolvedProps, // Resolved for outer only\n              'prop', getComponentNameFromType(Component));\n            }\n          }\n        }\n\n        child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too\n        renderLanes);\n        return child;\n      }\n  }\n\n  var hint = '';\n\n  {\n    if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {\n      hint = ' Did you wrap a component in React.lazy() more than once?';\n    }\n  } // This message intentionally doesn't mention ForwardRef or MemoComponent\n  // because the fact that it's a separate type of work is an\n  // implementation detail.\n\n\n  throw new Error(\"Element type is invalid. Received a promise that resolves to: \" + Component + \". \" + (\"Lazy element type must resolve to a class or function.\" + hint));\n}\n\nfunction mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes) {\n  if (_current !== null) {\n    // An incomplete component only mounts if it suspended inside a non-\n    // concurrent tree, in an inconsistent state. We want to treat it like\n    // a new mount, even though an empty version of it already committed.\n    // Disconnect the alternate pointers.\n    _current.alternate = null;\n    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect\n\n    workInProgress.flags |= Placement;\n  } // Promote the fiber to a class and try rendering again.\n\n\n  workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`\n  // Push context providers early to prevent context stack mismatches.\n  // During mounting we don't know the child context yet as the instance doesn't exist.\n  // We will invalidate the child context in finishClassComponent() right after rendering.\n\n  var hasContext;\n\n  if (isContextProvider(Component)) {\n    hasContext = true;\n    pushContextProvider(workInProgress);\n  } else {\n    hasContext = false;\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  constructClassInstance(workInProgress, Component, nextProps);\n  mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n  return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);\n}\n\nfunction mountIndeterminateComponent(_current, workInProgress, Component, renderLanes) {\n  if (_current !== null) {\n    // An indeterminate component only mounts if it suspended inside a non-\n    // concurrent tree, in an inconsistent state. We want to treat it like\n    // a new mount, even though an empty version of it already committed.\n    // Disconnect the alternate pointers.\n    _current.alternate = null;\n    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect\n\n    workInProgress.flags |= Placement;\n  }\n\n  var props = workInProgress.pendingProps;\n  var context;\n\n  {\n    var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);\n    context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  var value;\n\n  {\n    if (Component.prototype && typeof Component.prototype.render === 'function') {\n      var componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutBadClass[componentName]) {\n        error(\"The <%s /> component appears to have a render method, but doesn't extend React.Component. \" + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);\n\n        didWarnAboutBadClass[componentName] = true;\n      }\n    }\n\n    if (workInProgress.mode & StrictLegacyMode) {\n      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);\n    }\n\n    setIsRendering(true);\n    ReactCurrentOwner$1.current = workInProgress;\n    value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);\n    setIsRendering(false);\n  }\n\n\n  workInProgress.flags |= PerformedWork;\n\n  {\n    // Support for module components is deprecated and is removed behind a flag.\n    // Whether or not it would crash later, we want to show a good message in DEV first.\n    if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {\n      var _componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutModulePatternComponent[_componentName]) {\n        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + \"If you can't use a class try assigning the prototype on the function as a workaround. \" + \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" + 'cannot be called with `new` by React.', _componentName, _componentName, _componentName);\n\n        didWarnAboutModulePatternComponent[_componentName] = true;\n      }\n    }\n  }\n\n  if ( // Run these checks in production only if the flag is off.\n  // Eventually we'll delete this branch altogether.\n   typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {\n    {\n      var _componentName2 = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutModulePatternComponent[_componentName2]) {\n        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + \"If you can't use a class try assigning the prototype on the function as a workaround. \" + \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" + 'cannot be called with `new` by React.', _componentName2, _componentName2, _componentName2);\n\n        didWarnAboutModulePatternComponent[_componentName2] = true;\n      }\n    } // Proceed under the assumption that this is a class instance\n\n\n    workInProgress.tag = ClassComponent; // Throw out any hooks that were used.\n\n    workInProgress.memoizedState = null;\n    workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.\n    // During mounting we don't know the child context yet as the instance doesn't exist.\n    // We will invalidate the child context in finishClassComponent() right after rendering.\n\n    var hasContext = false;\n\n    if (isContextProvider(Component)) {\n      hasContext = true;\n      pushContextProvider(workInProgress);\n    } else {\n      hasContext = false;\n    }\n\n    workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;\n    initializeUpdateQueue(workInProgress);\n    adoptClassInstance(workInProgress, value);\n    mountClassInstance(workInProgress, Component, props, renderLanes);\n    return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);\n  } else {\n    // Proceed under the assumption that this is a function component\n    workInProgress.tag = FunctionComponent;\n\n    reconcileChildren(null, workInProgress, value, renderLanes);\n\n    {\n      validateFunctionComponentInDev(workInProgress, Component);\n    }\n\n    return workInProgress.child;\n  }\n}\n\nfunction validateFunctionComponentInDev(workInProgress, Component) {\n  {\n    if (Component) {\n      if (Component.childContextTypes) {\n        error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');\n      }\n    }\n\n    if (workInProgress.ref !== null) {\n      var info = '';\n      var ownerName = getCurrentFiberOwnerNameInDevOrNull();\n\n      if (ownerName) {\n        info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n      }\n\n      var warningKey = ownerName || '';\n      var debugSource = workInProgress._debugSource;\n\n      if (debugSource) {\n        warningKey = debugSource.fileName + ':' + debugSource.lineNumber;\n      }\n\n      if (!didWarnAboutFunctionRefs[warningKey]) {\n        didWarnAboutFunctionRefs[warningKey] = true;\n\n        error('Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);\n      }\n    }\n\n    if (typeof Component.getDerivedStateFromProps === 'function') {\n      var _componentName3 = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {\n        error('%s: Function components do not support getDerivedStateFromProps.', _componentName3);\n\n        didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;\n      }\n    }\n\n    if (typeof Component.contextType === 'object' && Component.contextType !== null) {\n      var _componentName4 = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {\n        error('%s: Function components do not support contextType.', _componentName4);\n\n        didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;\n      }\n    }\n  }\n}\n\nvar SUSPENDED_MARKER = {\n  dehydrated: null,\n  treeContext: null,\n  retryLane: NoLane\n};\n\nfunction mountSuspenseOffscreenState(renderLanes) {\n  return {\n    baseLanes: renderLanes,\n    cachePool: getSuspendedCache()\n  };\n}\n\nfunction updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {\n  var cachePool = null;\n\n  return {\n    baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes),\n    cachePool: cachePool\n  };\n} // TODO: Probably should inline this back\n\n\nfunction shouldRemainOnFallback(suspenseContext, current, workInProgress, renderLanes) {\n  // If we're already showing a fallback, there are cases where we need to\n  // remain on that fallback regardless of whether the content has resolved.\n  // For example, SuspenseList coordinates when nested content appears.\n  if (current !== null) {\n    var suspenseState = current.memoizedState;\n\n    if (suspenseState === null) {\n      // Currently showing content. Don't hide it, even if ForceSuspenseFallback\n      // is true. More precise name might be \"ForceRemainSuspenseFallback\".\n      // Note: This is a factoring smell. Can't remain on a fallback if there's\n      // no fallback to remain on.\n      return false;\n    }\n  } // Not currently showing content. Consult the Suspense context.\n\n\n  return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);\n}\n\nfunction getRemainingWorkInPrimaryTree(current, renderLanes) {\n  // TODO: Should not remove render lanes that were pinged during this render\n  return removeLanes(current.childLanes, renderLanes);\n}\n\nfunction updateSuspenseComponent(current, workInProgress, renderLanes) {\n  var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.\n\n  {\n    if (shouldSuspend(workInProgress)) {\n      workInProgress.flags |= DidCapture;\n    }\n  }\n\n  var suspenseContext = suspenseStackCursor.current;\n  var showFallback = false;\n  var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;\n\n  if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {\n    // Something in this boundary's subtree already suspended. Switch to\n    // rendering the fallback children.\n    showFallback = true;\n    workInProgress.flags &= ~DidCapture;\n  } else {\n    // Attempting the main content\n    if (current === null || current.memoizedState !== null) {\n      // This is a new mount or this boundary is already showing a fallback state.\n      // Mark this subtree context as having at least one invisible parent that could\n      // handle the fallback state.\n      // Avoided boundaries are not considered since they cannot handle preferred fallback states.\n      {\n        suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);\n      }\n    }\n  }\n\n  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n  pushSuspenseContext(workInProgress, suspenseContext); // OK, the next part is confusing. We're about to reconcile the Suspense\n  // boundary's children. This involves some custom reconciliation logic. Two\n  // main reasons this is so complicated.\n  //\n  // First, Legacy Mode has different semantics for backwards compatibility. The\n  // primary tree will commit in an inconsistent state, so when we do the\n  // second pass to render the fallback, we do some exceedingly, uh, clever\n  // hacks to make that not totally break. Like transferring effects and\n  // deletions from hidden tree. In Concurrent Mode, it's much simpler,\n  // because we bailout on the primary tree completely and leave it in its old\n  // state, no effects. Same as what we do for Offscreen (except that\n  // Offscreen doesn't have the first render pass).\n  //\n  // Second is hydration. During hydration, the Suspense fiber has a slightly\n  // different layout, where the child points to a dehydrated fragment, which\n  // contains the DOM rendered by the server.\n  //\n  // Third, even if you set all that aside, Suspense is like error boundaries in\n  // that we first we try to render one tree, and if that fails, we render again\n  // and switch to a different tree. Like a try/catch block. So we have to track\n  // which branch we're currently rendering. Ideally we would model this using\n  // a stack.\n\n  if (current === null) {\n\n    var nextPrimaryChildren = nextProps.children;\n    var nextFallbackChildren = nextProps.fallback;\n\n    if (showFallback) {\n      var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);\n      var primaryChildFragment = workInProgress.child;\n      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n      return fallbackFragment;\n    } else {\n      return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren);\n    }\n  } else {\n    // This is an update.\n    // If the current fiber has a SuspenseState, that means it's already showing\n    // a fallback.\n    var prevState = current.memoizedState;\n\n    if (prevState !== null) {\n\n      if (showFallback) {\n        var _nextFallbackChildren2 = nextProps.fallback;\n        var _nextPrimaryChildren2 = nextProps.children;\n\n        var _fallbackChildFragment = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes);\n\n        var _primaryChildFragment3 = workInProgress.child;\n        var prevOffscreenState = current.child.memoizedState;\n        _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);\n        _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes);\n        workInProgress.memoizedState = SUSPENDED_MARKER;\n        return _fallbackChildFragment;\n      } else {\n        var _nextPrimaryChildren3 = nextProps.children;\n\n        var _primaryChildFragment4 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren3, renderLanes);\n\n        workInProgress.memoizedState = null;\n        return _primaryChildFragment4;\n      }\n    } else {\n      // The current tree is not already showing a fallback.\n      if (showFallback) {\n        // Timed out.\n        var _nextFallbackChildren3 = nextProps.fallback;\n        var _nextPrimaryChildren4 = nextProps.children;\n\n        var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes);\n\n        var _primaryChildFragment5 = workInProgress.child;\n        var _prevOffscreenState = current.child.memoizedState;\n        _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes);\n        _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes); // Skip the primary children, and continue working on the\n        // fallback children.\n\n        workInProgress.memoizedState = SUSPENDED_MARKER;\n        return _fallbackChildFragment2;\n      } else {\n        // Still haven't timed out. Continue rendering the children, like we\n        // normally do.\n        var _nextPrimaryChildren5 = nextProps.children;\n\n        var _primaryChildFragment6 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren5, renderLanes);\n\n        workInProgress.memoizedState = null;\n        return _primaryChildFragment6;\n      }\n    }\n  }\n}\n\nfunction mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes) {\n  var mode = workInProgress.mode;\n  var primaryChildProps = {\n    mode: 'visible',\n    children: primaryChildren\n  };\n  var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);\n  primaryChildFragment.return = workInProgress;\n  workInProgress.child = primaryChildFragment;\n  return primaryChildFragment;\n}\n\nfunction mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes) {\n  var mode = workInProgress.mode;\n  var progressedPrimaryFragment = workInProgress.child;\n  var primaryChildProps = {\n    mode: 'hidden',\n    children: primaryChildren\n  };\n  var primaryChildFragment;\n  var fallbackChildFragment;\n\n  if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {\n    // In legacy mode, we commit the primary tree as if it successfully\n    // completed, even though it's in an inconsistent state.\n    primaryChildFragment = progressedPrimaryFragment;\n    primaryChildFragment.childLanes = NoLanes;\n    primaryChildFragment.pendingProps = primaryChildProps;\n\n    if ( workInProgress.mode & ProfileMode) {\n      // Reset the durations from the first pass so they aren't included in the\n      // final amounts. This seems counterintuitive, since we're intentionally\n      // not measuring part of the render phase, but this makes it match what we\n      // do in Concurrent Mode.\n      primaryChildFragment.actualDuration = 0;\n      primaryChildFragment.actualStartTime = -1;\n      primaryChildFragment.selfBaseDuration = 0;\n      primaryChildFragment.treeBaseDuration = 0;\n    }\n\n    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);\n  } else {\n    primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);\n    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);\n  }\n\n  primaryChildFragment.return = workInProgress;\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n  return fallbackChildFragment;\n}\n\nfunction mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes) {\n  // The props argument to `createFiberFromOffscreen` is `any` typed, so we use\n  // this wrapper function to constrain it.\n  return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);\n}\n\nfunction updateWorkInProgressOffscreenFiber(current, offscreenProps) {\n  // The props argument to `createWorkInProgress` is `any` typed, so we use this\n  // wrapper function to constrain it.\n  return createWorkInProgress(current, offscreenProps);\n}\n\nfunction updateSuspensePrimaryChildren(current, workInProgress, primaryChildren, renderLanes) {\n  var currentPrimaryChildFragment = current.child;\n  var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;\n  var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {\n    mode: 'visible',\n    children: primaryChildren\n  });\n\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    primaryChildFragment.lanes = renderLanes;\n  }\n\n  primaryChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = null;\n\n  if (currentFallbackChildFragment !== null) {\n    // Delete the fallback child fragment\n    var deletions = workInProgress.deletions;\n\n    if (deletions === null) {\n      workInProgress.deletions = [currentFallbackChildFragment];\n      workInProgress.flags |= ChildDeletion;\n    } else {\n      deletions.push(currentFallbackChildFragment);\n    }\n  }\n\n  workInProgress.child = primaryChildFragment;\n  return primaryChildFragment;\n}\n\nfunction updateSuspenseFallbackChildren(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {\n  var mode = workInProgress.mode;\n  var currentPrimaryChildFragment = current.child;\n  var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;\n  var primaryChildProps = {\n    mode: 'hidden',\n    children: primaryChildren\n  };\n  var primaryChildFragment;\n\n  if ( // In legacy mode, we commit the primary tree as if it successfully\n  // completed, even though it's in an inconsistent state.\n  (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was\n  // already cloned. In legacy mode, the only case where this isn't true is\n  // when DevTools forces us to display a fallback; we skip the first render\n  // pass entirely and go straight to rendering the fallback. (In Concurrent\n  // Mode, SuspenseList can also trigger this scenario, but this is a legacy-\n  // only codepath.)\n  workInProgress.child !== currentPrimaryChildFragment) {\n    var progressedPrimaryFragment = workInProgress.child;\n    primaryChildFragment = progressedPrimaryFragment;\n    primaryChildFragment.childLanes = NoLanes;\n    primaryChildFragment.pendingProps = primaryChildProps;\n\n    if ( workInProgress.mode & ProfileMode) {\n      // Reset the durations from the first pass so they aren't included in the\n      // final amounts. This seems counterintuitive, since we're intentionally\n      // not measuring part of the render phase, but this makes it match what we\n      // do in Concurrent Mode.\n      primaryChildFragment.actualDuration = 0;\n      primaryChildFragment.actualStartTime = -1;\n      primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;\n      primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;\n    }\n    // However, since we're going to remain on the fallback, we no longer want\n    // to delete it.\n\n\n    workInProgress.deletions = null;\n  } else {\n    primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);\n    // (We don't do this in legacy mode, because in legacy mode we don't re-use\n    // the current tree; see previous branch.)\n\n\n    primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;\n  }\n\n  var fallbackChildFragment;\n\n  if (currentFallbackChildFragment !== null) {\n    fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);\n  } else {\n    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null); // Needs a placement effect because the parent (the Suspense boundary) already\n    // mounted but this is a new fiber.\n\n    fallbackChildFragment.flags |= Placement;\n  }\n\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n  return fallbackChildFragment;\n}\n\nfunction scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {\n  fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n  var alternate = fiber.alternate;\n\n  if (alternate !== null) {\n    alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n  }\n\n  scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);\n}\n\nfunction propagateSuspenseContextChange(workInProgress, firstChild, renderLanes) {\n  // Mark any Suspense boundaries with fallbacks as having work to do.\n  // If they were previously forced into fallbacks, they may now be able\n  // to unblock.\n  var node = firstChild;\n\n  while (node !== null) {\n    if (node.tag === SuspenseComponent) {\n      var state = node.memoizedState;\n\n      if (state !== null) {\n        scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);\n      }\n    } else if (node.tag === SuspenseListComponent) {\n      // If the tail is hidden there might not be an Suspense boundaries\n      // to schedule work on. In this case we have to schedule it on the\n      // list itself.\n      // We don't have to traverse to the children of the list since\n      // the list will propagate the change when it rerenders.\n      scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);\n    } else if (node.child !== null) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n\n    if (node === workInProgress) {\n      return;\n    }\n\n    while (node.sibling === null) {\n      if (node.return === null || node.return === workInProgress) {\n        return;\n      }\n\n      node = node.return;\n    }\n\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n}\n\nfunction findLastContentRow(firstChild) {\n  // This is going to find the last row among these children that is already\n  // showing content on the screen, as opposed to being in fallback state or\n  // new. If a row has multiple Suspense boundaries, any of them being in the\n  // fallback state, counts as the whole row being in a fallback state.\n  // Note that the \"rows\" will be workInProgress, but any nested children\n  // will still be current since we haven't rendered them yet. The mounted\n  // order may not be the same as the new order. We use the new order.\n  var row = firstChild;\n  var lastContentRow = null;\n\n  while (row !== null) {\n    var currentRow = row.alternate; // New rows can't be content rows.\n\n    if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n      lastContentRow = row;\n    }\n\n    row = row.sibling;\n  }\n\n  return lastContentRow;\n}\n\nfunction validateRevealOrder(revealOrder) {\n  {\n    if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {\n      didWarnAboutRevealOrder[revealOrder] = true;\n\n      if (typeof revealOrder === 'string') {\n        switch (revealOrder.toLowerCase()) {\n          case 'together':\n          case 'forwards':\n          case 'backwards':\n            {\n              error('\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase \"%s\" instead.', revealOrder, revealOrder.toLowerCase());\n\n              break;\n            }\n\n          case 'forward':\n          case 'backward':\n            {\n              error('\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use \"%ss\" instead.', revealOrder, revealOrder.toLowerCase());\n\n              break;\n            }\n\n          default:\n            error('\"%s\" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean \"together\", \"forwards\" or \"backwards\"?', revealOrder);\n\n            break;\n        }\n      } else {\n        error('%s is not a supported value for revealOrder on <SuspenseList />. ' + 'Did you mean \"together\", \"forwards\" or \"backwards\"?', revealOrder);\n      }\n    }\n  }\n}\n\nfunction validateTailOptions(tailMode, revealOrder) {\n  {\n    if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {\n      if (tailMode !== 'collapsed' && tailMode !== 'hidden') {\n        didWarnAboutTailOptions[tailMode] = true;\n\n        error('\"%s\" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean \"collapsed\" or \"hidden\"?', tailMode);\n      } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {\n        didWarnAboutTailOptions[tailMode] = true;\n\n        error('<SuspenseList tail=\"%s\" /> is only valid if revealOrder is ' + '\"forwards\" or \"backwards\". ' + 'Did you mean to specify revealOrder=\"forwards\"?', tailMode);\n      }\n    }\n  }\n}\n\nfunction validateSuspenseListNestedChild(childSlot, index) {\n  {\n    var isAnArray = isArray(childSlot);\n    var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === 'function';\n\n    if (isAnArray || isIterable) {\n      var type = isAnArray ? 'array' : 'iterable';\n\n      error('A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' + 'an additional SuspenseList to configure its revealOrder: ' + '<SuspenseList revealOrder=...> ... ' + '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' + '</SuspenseList>', type, index, type);\n\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction validateSuspenseListChildren(children, revealOrder) {\n  {\n    if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {\n      if (isArray(children)) {\n        for (var i = 0; i < children.length; i++) {\n          if (!validateSuspenseListNestedChild(children[i], i)) {\n            return;\n          }\n        }\n      } else {\n        var iteratorFn = getIteratorFn(children);\n\n        if (typeof iteratorFn === 'function') {\n          var childrenIterator = iteratorFn.call(children);\n\n          if (childrenIterator) {\n            var step = childrenIterator.next();\n            var _i = 0;\n\n            for (; !step.done; step = childrenIterator.next()) {\n              if (!validateSuspenseListNestedChild(step.value, _i)) {\n                return;\n              }\n\n              _i++;\n            }\n          }\n        } else {\n          error('A single row was passed to a <SuspenseList revealOrder=\"%s\" />. ' + 'This is not useful since it needs multiple rows. ' + 'Did you mean to pass multiple children or an array?', revealOrder);\n        }\n      }\n    }\n  }\n}\n\nfunction initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {\n  var renderState = workInProgress.memoizedState;\n\n  if (renderState === null) {\n    workInProgress.memoizedState = {\n      isBackwards: isBackwards,\n      rendering: null,\n      renderingStartTime: 0,\n      last: lastContentRow,\n      tail: tail,\n      tailMode: tailMode\n    };\n  } else {\n    // We can reuse the existing object from previous renders.\n    renderState.isBackwards = isBackwards;\n    renderState.rendering = null;\n    renderState.renderingStartTime = 0;\n    renderState.last = lastContentRow;\n    renderState.tail = tail;\n    renderState.tailMode = tailMode;\n  }\n} // This can end up rendering this component multiple passes.\n// The first pass splits the children fibers into two sets. A head and tail.\n// We first render the head. If anything is in fallback state, we do another\n// pass through beginWork to rerender all children (including the tail) with\n// the force suspend context. If the first render didn't have anything in\n// in fallback state. Then we render each row in the tail one-by-one.\n// That happens in the completeWork phase without going back to beginWork.\n\n\nfunction updateSuspenseListComponent(current, workInProgress, renderLanes) {\n  var nextProps = workInProgress.pendingProps;\n  var revealOrder = nextProps.revealOrder;\n  var tailMode = nextProps.tail;\n  var newChildren = nextProps.children;\n  validateRevealOrder(revealOrder);\n  validateTailOptions(tailMode, revealOrder);\n  validateSuspenseListChildren(newChildren, revealOrder);\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n  var suspenseContext = suspenseStackCursor.current;\n  var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);\n\n  if (shouldForceFallback) {\n    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);\n    workInProgress.flags |= DidCapture;\n  } else {\n    var didSuspendBefore = current !== null && (current.flags & DidCapture) !== NoFlags;\n\n    if (didSuspendBefore) {\n      // If we previously forced a fallback, we need to schedule work\n      // on any nested boundaries to let them know to try to render\n      // again. This is the same as context updating.\n      propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes);\n    }\n\n    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n  }\n\n  pushSuspenseContext(workInProgress, suspenseContext);\n\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    // In legacy mode, SuspenseList doesn't work so we just\n    // use make it a noop by treating it as the default revealOrder.\n    workInProgress.memoizedState = null;\n  } else {\n    switch (revealOrder) {\n      case 'forwards':\n        {\n          var lastContentRow = findLastContentRow(workInProgress.child);\n          var tail;\n\n          if (lastContentRow === null) {\n            // The whole list is part of the tail.\n            // TODO: We could fast path by just rendering the tail now.\n            tail = workInProgress.child;\n            workInProgress.child = null;\n          } else {\n            // Disconnect the tail rows after the content row.\n            // We're going to render them separately later.\n            tail = lastContentRow.sibling;\n            lastContentRow.sibling = null;\n          }\n\n          initSuspenseListRenderState(workInProgress, false, // isBackwards\n          tail, lastContentRow, tailMode);\n          break;\n        }\n\n      case 'backwards':\n        {\n          // We're going to find the first row that has existing content.\n          // At the same time we're going to reverse the list of everything\n          // we pass in the meantime. That's going to be our tail in reverse\n          // order.\n          var _tail = null;\n          var row = workInProgress.child;\n          workInProgress.child = null;\n\n          while (row !== null) {\n            var currentRow = row.alternate; // New rows can't be content rows.\n\n            if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n              // This is the beginning of the main content.\n              workInProgress.child = row;\n              break;\n            }\n\n            var nextRow = row.sibling;\n            row.sibling = _tail;\n            _tail = row;\n            row = nextRow;\n          } // TODO: If workInProgress.child is null, we can continue on the tail immediately.\n\n\n          initSuspenseListRenderState(workInProgress, true, // isBackwards\n          _tail, null, // last\n          tailMode);\n          break;\n        }\n\n      case 'together':\n        {\n          initSuspenseListRenderState(workInProgress, false, // isBackwards\n          null, // tail\n          null, // last\n          undefined);\n          break;\n        }\n\n      default:\n        {\n          // The default reveal order is the same as not having\n          // a boundary.\n          workInProgress.memoizedState = null;\n        }\n    }\n  }\n\n  return workInProgress.child;\n}\n\nfunction updatePortalComponent(current, workInProgress, renderLanes) {\n  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n  var nextChildren = workInProgress.pendingProps;\n\n  if (current === null) {\n    // Portals are special because we don't append the children during mount\n    // but at commit. Therefore we need to track insertions which the normal\n    // flow doesn't do during mount. This doesn't happen at the root because\n    // the root always starts with a \"current\" with a null child.\n    // TODO: Consider unifying this with how the root works.\n    workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);\n  } else {\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  }\n\n  return workInProgress.child;\n}\n\nvar hasWarnedAboutUsingNoValuePropOnContextProvider = false;\n\nfunction updateContextProvider(current, workInProgress, renderLanes) {\n  var providerType = workInProgress.type;\n  var context = providerType._context;\n  var newProps = workInProgress.pendingProps;\n  var oldProps = workInProgress.memoizedProps;\n  var newValue = newProps.value;\n\n  {\n    if (!('value' in newProps)) {\n      if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {\n        hasWarnedAboutUsingNoValuePropOnContextProvider = true;\n\n        error('The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?');\n      }\n    }\n\n    var providerPropTypes = workInProgress.type.propTypes;\n\n    if (providerPropTypes) {\n      checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');\n    }\n  }\n\n  pushProvider(workInProgress, context, newValue);\n\n  {\n    if (oldProps !== null) {\n      var oldValue = oldProps.value;\n\n      if (objectIs(oldValue, newValue)) {\n        // No change. Bailout early if children are the same.\n        if (oldProps.children === newProps.children && !hasContextChanged()) {\n          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n        }\n      } else {\n        // The context value changed. Search for matching consumers and schedule\n        // them to update.\n        propagateContextChange(workInProgress, context, renderLanes);\n      }\n    }\n  }\n\n  var newChildren = newProps.children;\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n  return workInProgress.child;\n}\n\nvar hasWarnedAboutUsingContextAsConsumer = false;\n\nfunction updateContextConsumer(current, workInProgress, renderLanes) {\n  var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In\n  // DEV mode, we create a separate object for Context.Consumer that acts\n  // like a proxy to Context. This proxy object adds unnecessary code in PROD\n  // so we use the old behaviour (Context.Consumer references Context) to\n  // reduce size and overhead. The separate object references context via\n  // a property called \"_context\", which also gives us the ability to check\n  // in DEV mode if this property exists or not and warn if it does not.\n\n  {\n    if (context._context === undefined) {\n      // This may be because it's a Context (rather than a Consumer).\n      // Or it may be because it's older React where they're the same thing.\n      // We only want to warn if we're sure it's a new React.\n      if (context !== context.Consumer) {\n        if (!hasWarnedAboutUsingContextAsConsumer) {\n          hasWarnedAboutUsingContextAsConsumer = true;\n\n          error('Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');\n        }\n      }\n    } else {\n      context = context._context;\n    }\n  }\n\n  var newProps = workInProgress.pendingProps;\n  var render = newProps.children;\n\n  {\n    if (typeof render !== 'function') {\n      error('A context consumer was rendered with multiple children, or a child ' + \"that isn't a function. A context consumer expects a single child \" + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.');\n    }\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  var newValue = readContext(context);\n\n  var newChildren;\n\n  {\n    ReactCurrentOwner$1.current = workInProgress;\n    setIsRendering(true);\n    newChildren = render(newValue);\n    setIsRendering(false);\n  }\n\n\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction markWorkInProgressReceivedUpdate() {\n  didReceiveUpdate = true;\n}\n\nfunction bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {\n  if (current !== null) {\n    // Reuse previous dependencies\n    workInProgress.dependencies = current.dependencies;\n  }\n\n  {\n    // Don't update \"base\" render times for bailouts.\n    stopProfilerTimerIfRunning();\n  }\n\n  markSkippedUpdateLanes(workInProgress.lanes); // Check if the children have any pending work.\n\n  if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {\n    // The children don't have any work either. We can skip them.\n    // TODO: Once we add back resuming, we should check if the children are\n    // a work-in-progress set. If so, we need to transfer their effects.\n    {\n      return null;\n    }\n  } // This fiber doesn't have work, but its subtree does. Clone the child\n  // fibers and continue.\n\n\n  cloneChildFibers(current, workInProgress);\n  return workInProgress.child;\n}\n\nfunction remountFiber(current, oldWorkInProgress, newWorkInProgress) {\n  {\n    var returnFiber = oldWorkInProgress.return;\n\n    if (returnFiber === null) {\n      // eslint-disable-next-line react-internal/prod-error-codes\n      throw new Error('Cannot swap the root fiber.');\n    } // Disconnect from the old current.\n    // It will get deleted.\n\n\n    current.alternate = null;\n    oldWorkInProgress.alternate = null; // Connect to the new tree.\n\n    newWorkInProgress.index = oldWorkInProgress.index;\n    newWorkInProgress.sibling = oldWorkInProgress.sibling;\n    newWorkInProgress.return = oldWorkInProgress.return;\n    newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.\n\n    if (oldWorkInProgress === returnFiber.child) {\n      returnFiber.child = newWorkInProgress;\n    } else {\n      var prevSibling = returnFiber.child;\n\n      if (prevSibling === null) {\n        // eslint-disable-next-line react-internal/prod-error-codes\n        throw new Error('Expected parent to have a child.');\n      }\n\n      while (prevSibling.sibling !== oldWorkInProgress) {\n        prevSibling = prevSibling.sibling;\n\n        if (prevSibling === null) {\n          // eslint-disable-next-line react-internal/prod-error-codes\n          throw new Error('Expected to find the previous sibling.');\n        }\n      }\n\n      prevSibling.sibling = newWorkInProgress;\n    } // Delete the old fiber and place the new one.\n    // Since the old fiber is disconnected, we have to schedule it manually.\n\n\n    var deletions = returnFiber.deletions;\n\n    if (deletions === null) {\n      returnFiber.deletions = [current];\n      returnFiber.flags |= ChildDeletion;\n    } else {\n      deletions.push(current);\n    }\n\n    newWorkInProgress.flags |= Placement; // Restart work from the new fiber.\n\n    return newWorkInProgress;\n  }\n}\n\nfunction checkScheduledUpdateOrContext(current, renderLanes) {\n  // Before performing an early bailout, we must check if there are pending\n  // updates or context.\n  var updateLanes = current.lanes;\n\n  if (includesSomeLane(updateLanes, renderLanes)) {\n    return true;\n  } // No pending update, but because context is propagated lazily, we need\n\n  return false;\n}\n\nfunction attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes) {\n  // This fiber does not have any pending work. Bailout without entering\n  // the begin phase. There's still some bookkeeping we that needs to be done\n  // in this optimized path, mostly pushing stuff onto the stack.\n  switch (workInProgress.tag) {\n    case HostRoot:\n      pushHostRootContext(workInProgress);\n      var root = workInProgress.stateNode;\n      break;\n\n    case HostComponent:\n      pushHostContext(workInProgress);\n      break;\n\n    case ClassComponent:\n      {\n        var Component = workInProgress.type;\n\n        if (isContextProvider(Component)) {\n          pushContextProvider(workInProgress);\n        }\n\n        break;\n      }\n\n    case HostPortal:\n      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n      break;\n\n    case ContextProvider:\n      {\n        var newValue = workInProgress.memoizedProps.value;\n        var context = workInProgress.type._context;\n        pushProvider(workInProgress, context, newValue);\n        break;\n      }\n\n    case Profiler:\n      {\n        // Profiler should only call onRender when one of its descendants actually rendered.\n        var hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);\n\n        if (hasChildWork) {\n          workInProgress.flags |= Update;\n        }\n\n        {\n          // Reset effect durations for the next eventual effect phase.\n          // These are reset during render to allow the DevTools commit hook a chance to read them,\n          var stateNode = workInProgress.stateNode;\n          stateNode.effectDuration = 0;\n          stateNode.passiveEffectDuration = 0;\n        }\n      }\n\n      break;\n\n    case SuspenseComponent:\n      {\n        var state = workInProgress.memoizedState;\n\n        if (state !== null) {\n          // whether to retry the primary children, or to skip over it and\n          // go straight to the fallback. Check the priority of the primary\n          // child fragment.\n\n\n          var primaryChildFragment = workInProgress.child;\n          var primaryChildLanes = primaryChildFragment.childLanes;\n\n          if (includesSomeLane(renderLanes, primaryChildLanes)) {\n            // The primary children have pending work. Use the normal path\n            // to attempt to render the primary children again.\n            return updateSuspenseComponent(current, workInProgress, renderLanes);\n          } else {\n            // The primary child fragment does not have pending work marked\n            // on it\n            pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient\n            // priority. Bailout.\n\n            var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n\n            if (child !== null) {\n              // The fallback children have pending work. Skip over the\n              // primary children and work on the fallback.\n              return child.sibling;\n            } else {\n              // Note: We can return `null` here because we already checked\n              // whether there were nested context consumers, via the call to\n              // `bailoutOnAlreadyFinishedWork` above.\n              return null;\n            }\n          }\n        } else {\n          pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));\n        }\n\n        break;\n      }\n\n    case SuspenseListComponent:\n      {\n        var didSuspendBefore = (current.flags & DidCapture) !== NoFlags;\n\n        var _hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);\n\n        if (didSuspendBefore) {\n          if (_hasChildWork) {\n            // If something was in fallback state last time, and we have all the\n            // same children then we're still in progressive loading state.\n            // Something might get unblocked by state updates or retries in the\n            // tree which will affect the tail. So we need to use the normal\n            // path to compute the correct tail.\n            return updateSuspenseListComponent(current, workInProgress, renderLanes);\n          } // If none of the children had any work, that means that none of\n          // them got retried so they'll still be blocked in the same way\n          // as before. We can fast bail out.\n\n\n          workInProgress.flags |= DidCapture;\n        } // If nothing suspended before and we're rendering the same children,\n        // then the tail doesn't matter. Anything new that suspends will work\n        // in the \"together\" mode, so we can continue from the state we had.\n\n\n        var renderState = workInProgress.memoizedState;\n\n        if (renderState !== null) {\n          // Reset to the \"together\" mode in case we've started a different\n          // update in the past but didn't complete it.\n          renderState.rendering = null;\n          renderState.tail = null;\n          renderState.lastEffect = null;\n        }\n\n        pushSuspenseContext(workInProgress, suspenseStackCursor.current);\n\n        if (_hasChildWork) {\n          break;\n        } else {\n          // If none of the children had any work, that means that none of\n          // them got retried so they'll still be blocked in the same way\n          // as before. We can fast bail out.\n          return null;\n        }\n      }\n\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      {\n        // Need to check if the tree still needs to be deferred. This is\n        // almost identical to the logic used in the normal update path,\n        // so we'll just enter that. The only difference is we'll bail out\n        // at the next level instead of this one, because the child props\n        // have not changed. Which is fine.\n        // TODO: Probably should refactor `beginWork` to split the bailout\n        // path from the normal path. I'm tempted to do a labeled break here\n        // but I won't :)\n        workInProgress.lanes = NoLanes;\n        return updateOffscreenComponent(current, workInProgress, renderLanes);\n      }\n  }\n\n  return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n}\n\nfunction beginWork(current, workInProgress, renderLanes) {\n  {\n    if (workInProgress._debugNeedsRemount && current !== null) {\n      // This will restart the begin phase with a new fiber.\n      return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));\n    }\n  }\n\n  if (current !== null) {\n    var oldProps = current.memoizedProps;\n    var newProps = workInProgress.pendingProps;\n\n    if (oldProps !== newProps || hasContextChanged() || ( // Force a re-render if the implementation changed due to hot reload:\n     workInProgress.type !== current.type )) {\n      // If props or context changed, mark the fiber as having performed work.\n      // This may be unset if the props are determined to be equal later (memo).\n      didReceiveUpdate = true;\n    } else {\n      // Neither props nor legacy context changes. Check if there's a pending\n      // update or context change.\n      var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);\n\n      if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there\n      // may not be work scheduled on `current`, so we check for this flag.\n      (workInProgress.flags & DidCapture) === NoFlags) {\n        // No pending updates or context. Bail out now.\n        didReceiveUpdate = false;\n        return attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes);\n      }\n\n      if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\n        // This is a special case that only exists for legacy mode.\n        // See https://github.com/facebook/react/pull/19216.\n        didReceiveUpdate = true;\n      } else {\n        // An update was scheduled on this fiber, but there are no new props\n        // nor legacy context. Set this to false. If an update queue or context\n        // consumer produces a changed value, it will set this to true. Otherwise,\n        // the component will assume the children have not changed and bail out.\n        didReceiveUpdate = false;\n      }\n    }\n  } else {\n    didReceiveUpdate = false;\n  } // Before entering the begin phase, clear pending update priority.\n  // TODO: This assumes that we're about to evaluate the component and process\n  // the update queue. However, there's an exception: SimpleMemoComponent\n  // sometimes bails out later in the begin phase. This indicates that we should\n  // move this assignment out of the common path and into each branch.\n\n\n  workInProgress.lanes = NoLanes;\n\n  switch (workInProgress.tag) {\n    case IndeterminateComponent:\n      {\n        return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes);\n      }\n\n    case LazyComponent:\n      {\n        var elementType = workInProgress.elementType;\n        return mountLazyComponent(current, workInProgress, elementType, renderLanes);\n      }\n\n    case FunctionComponent:\n      {\n        var Component = workInProgress.type;\n        var unresolvedProps = workInProgress.pendingProps;\n        var resolvedProps = workInProgress.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);\n        return updateFunctionComponent(current, workInProgress, Component, resolvedProps, renderLanes);\n      }\n\n    case ClassComponent:\n      {\n        var _Component = workInProgress.type;\n        var _unresolvedProps = workInProgress.pendingProps;\n\n        var _resolvedProps = workInProgress.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);\n\n        return updateClassComponent(current, workInProgress, _Component, _resolvedProps, renderLanes);\n      }\n\n    case HostRoot:\n      return updateHostRoot(current, workInProgress, renderLanes);\n\n    case HostComponent:\n      return updateHostComponent$1(current, workInProgress, renderLanes);\n\n    case HostText:\n      return updateHostText$1();\n\n    case SuspenseComponent:\n      return updateSuspenseComponent(current, workInProgress, renderLanes);\n\n    case HostPortal:\n      return updatePortalComponent(current, workInProgress, renderLanes);\n\n    case ForwardRef:\n      {\n        var type = workInProgress.type;\n        var _unresolvedProps2 = workInProgress.pendingProps;\n\n        var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);\n\n        return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderLanes);\n      }\n\n    case Fragment:\n      return updateFragment(current, workInProgress, renderLanes);\n\n    case Mode:\n      return updateMode(current, workInProgress, renderLanes);\n\n    case Profiler:\n      return updateProfiler(current, workInProgress, renderLanes);\n\n    case ContextProvider:\n      return updateContextProvider(current, workInProgress, renderLanes);\n\n    case ContextConsumer:\n      return updateContextConsumer(current, workInProgress, renderLanes);\n\n    case MemoComponent:\n      {\n        var _type2 = workInProgress.type;\n        var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.\n\n        var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);\n\n        {\n          if (workInProgress.type !== workInProgress.elementType) {\n            var outerPropTypes = _type2.propTypes;\n\n            if (outerPropTypes) {\n              checkPropTypes(outerPropTypes, _resolvedProps3, // Resolved for outer only\n              'prop', getComponentNameFromType(_type2));\n            }\n          }\n        }\n\n        _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);\n        return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, renderLanes);\n      }\n\n    case SimpleMemoComponent:\n      {\n        return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);\n      }\n\n    case IncompleteClassComponent:\n      {\n        var _Component2 = workInProgress.type;\n        var _unresolvedProps4 = workInProgress.pendingProps;\n\n        var _resolvedProps4 = workInProgress.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);\n\n        return mountIncompleteClassComponent(current, workInProgress, _Component2, _resolvedProps4, renderLanes);\n      }\n\n    case SuspenseListComponent:\n      {\n        return updateSuspenseListComponent(current, workInProgress, renderLanes);\n      }\n\n    case ScopeComponent:\n      {\n\n        break;\n      }\n\n    case OffscreenComponent:\n      {\n        return updateOffscreenComponent(current, workInProgress, renderLanes);\n      }\n  }\n\n  throw new Error(\"Unknown unit of work tag (\" + workInProgress.tag + \"). This error is likely caused by a bug in \" + 'React. Please file an issue.');\n}\n\nfunction unwindWork(current, workInProgress, renderLanes) {\n  // Note: This intentionally doesn't check if we're hydrating because comparing\n  // to the current tree provider fiber is just as fast and less error-prone.\n  // Ideally we would have a special version of the work loop only\n  // for hydration.\n  popTreeContext(workInProgress);\n\n  switch (workInProgress.tag) {\n    case ClassComponent:\n      {\n        var Component = workInProgress.type;\n\n        if (isContextProvider(Component)) {\n          popContext(workInProgress);\n        }\n\n        var flags = workInProgress.flags;\n\n        if (flags & ShouldCapture) {\n          workInProgress.flags = flags & ~ShouldCapture | DidCapture;\n\n          if ( (workInProgress.mode & ProfileMode) !== NoMode) {\n            transferActualDuration(workInProgress);\n          }\n\n          return workInProgress;\n        }\n\n        return null;\n      }\n\n    case HostRoot:\n      {\n\n        popHostContainer(workInProgress);\n        popTopLevelContextObject(workInProgress);\n        resetWorkInProgressVersions();\n        var _flags = workInProgress.flags;\n\n        if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {\n          // There was an error during render that wasn't captured by a suspense\n          // boundary. Do a second pass on the root to unmount the children.\n          workInProgress.flags = _flags & ~ShouldCapture | DidCapture;\n          return workInProgress;\n        } // We unwound to the root without completing it. Exit.\n\n\n        return null;\n      }\n\n    case HostComponent:\n      {\n        // TODO: popHydrationState\n        popHostContext(workInProgress);\n        return null;\n      }\n\n    case SuspenseComponent:\n      {\n        popSuspenseContext(workInProgress);\n\n        var _flags2 = workInProgress.flags;\n\n        if (_flags2 & ShouldCapture) {\n          workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.\n\n          if ( (workInProgress.mode & ProfileMode) !== NoMode) {\n            transferActualDuration(workInProgress);\n          }\n\n          return workInProgress;\n        }\n\n        return null;\n      }\n\n    case SuspenseListComponent:\n      {\n        popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been\n        // caught by a nested boundary. If not, it should bubble through.\n\n        return null;\n      }\n\n    case HostPortal:\n      popHostContainer(workInProgress);\n      return null;\n\n    case ContextProvider:\n      var context = workInProgress.type._context;\n      popProvider(context, workInProgress);\n      return null;\n\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      popRenderLanes(workInProgress);\n\n      return null;\n\n    case CacheComponent:\n\n      return null;\n\n    default:\n      return null;\n  }\n}\n\nfunction unwindInterruptedWork(current, interruptedWork, renderLanes) {\n  // Note: This intentionally doesn't check if we're hydrating because comparing\n  // to the current tree provider fiber is just as fast and less error-prone.\n  // Ideally we would have a special version of the work loop only\n  // for hydration.\n  popTreeContext(interruptedWork);\n\n  switch (interruptedWork.tag) {\n    case ClassComponent:\n      {\n        var childContextTypes = interruptedWork.type.childContextTypes;\n\n        if (childContextTypes !== null && childContextTypes !== undefined) {\n          popContext(interruptedWork);\n        }\n\n        break;\n      }\n\n    case HostRoot:\n      {\n\n        popHostContainer(interruptedWork);\n        popTopLevelContextObject(interruptedWork);\n        resetWorkInProgressVersions();\n        break;\n      }\n\n    case HostComponent:\n      {\n        popHostContext(interruptedWork);\n        break;\n      }\n\n    case HostPortal:\n      popHostContainer(interruptedWork);\n      break;\n\n    case SuspenseComponent:\n      popSuspenseContext(interruptedWork);\n      break;\n\n    case SuspenseListComponent:\n      popSuspenseContext(interruptedWork);\n      break;\n\n    case ContextProvider:\n      var context = interruptedWork.type._context;\n      popProvider(context, interruptedWork);\n      break;\n\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      popRenderLanes(interruptedWork);\n\n      break;\n  }\n}\n\nfunction invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {\n  var funcArgs = Array.prototype.slice.call(arguments, 3);\n\n  try {\n    func.apply(context, funcArgs);\n  } catch (error) {\n    this.onError(error);\n  }\n}\n\nvar invokeGuardedCallbackImpl = invokeGuardedCallbackProd;\n\n{\n  // In DEV mode, we swap out invokeGuardedCallback for a special version\n  // that plays more nicely with the browser's DevTools. The idea is to preserve\n  // \"Pause on exceptions\" behavior. Because React wraps all user-provided\n  // functions in invokeGuardedCallback, and the production version of\n  // invokeGuardedCallback uses a try-catch, all user exceptions are treated\n  // like caught exceptions, and the DevTools won't pause unless the developer\n  // takes the extra step of enabling pause on caught exceptions. This is\n  // unintuitive, though, because even though React has caught the error, from\n  // the developer's perspective, the error is uncaught.\n  //\n  // To preserve the expected \"Pause on exceptions\" behavior, we don't use a\n  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake\n  // DOM node, and call the user-provided callback from inside an event handler\n  // for that fake event. If the callback throws, the error is \"captured\" using\n  // a global event handler. But because the error happens in a different\n  // event loop context, it does not interrupt the normal program flow.\n  // Effectively, this gives us try-catch behavior without actually using\n  // try-catch. Neat!\n  // Check that the browser supports the APIs we need to implement our special\n  // DEV version of invokeGuardedCallback\n  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {\n    var fakeNode = document.createElement('react');\n\n    invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {\n      // If document doesn't exist we know for sure we will crash in this method\n      // when we call document.createEvent(). However this can cause confusing\n      // errors: https://github.com/facebook/create-react-app/issues/3482\n      // So we preemptively throw with a better message instead.\n      if (typeof document === 'undefined' || document === null) {\n        throw new Error('The `document` global was defined when React was initialized, but is not ' + 'defined anymore. This can happen in a test environment if a component ' + 'schedules an update from an asynchronous callback, but the test has already ' + 'finished running. To solve this, you can either unmount the component at ' + 'the end of your test (and ensure that any asynchronous operations get ' + 'canceled in `componentWillUnmount`), or you can change the test itself ' + 'to be asynchronous.');\n      }\n\n      var evt = document.createEvent('Event');\n      var didCall = false; // Keeps track of whether the user-provided callback threw an error. We\n      // set this to true at the beginning, then set it to false right after\n      // calling the function. If the function errors, `didError` will never be\n      // set to false. This strategy works even if the browser is flaky and\n      // fails to call our global error handler, because it doesn't rely on\n      // the error event at all.\n\n      var didError = true; // Keeps track of the value of window.event so that we can reset it\n      // during the callback to let user code access window.event in the\n      // browsers that support it.\n\n      var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event\n      // dispatching: https://github.com/facebook/react/issues/13688\n\n      var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');\n\n      function restoreAfterDispatch() {\n        // We immediately remove the callback from event listeners so that\n        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a\n        // nested call would trigger the fake event handlers of any call higher\n        // in the stack.\n        fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the\n        // window.event assignment in both IE <= 10 as they throw an error\n        // \"Member not found\" in strict mode, and in Firefox which does not\n        // support window.event.\n\n        if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {\n          window.event = windowEvent;\n        }\n      } // Create an event handler for our fake event. We will synchronously\n      // dispatch our fake event using `dispatchEvent`. Inside the handler, we\n      // call the user-provided callback.\n\n\n      var funcArgs = Array.prototype.slice.call(arguments, 3);\n\n      function callCallback() {\n        didCall = true;\n        restoreAfterDispatch();\n        func.apply(context, funcArgs);\n        didError = false;\n      } // Create a global error event handler. We use this to capture the value\n      // that was thrown. It's possible that this error handler will fire more\n      // than once; for example, if non-React code also calls `dispatchEvent`\n      // and a handler for that event throws. We should be resilient to most of\n      // those cases. Even if our error event handler fires more than once, the\n      // last error event is always used. If the callback actually does error,\n      // we know that the last error event is the correct one, because it's not\n      // possible for anything else to have happened in between our callback\n      // erroring and the code that follows the `dispatchEvent` call below. If\n      // the callback doesn't error, but the error event was fired, we know to\n      // ignore it because `didError` will be false, as described above.\n\n\n      var error; // Use this to track whether the error event is ever called.\n\n      var didSetError = false;\n      var isCrossOriginError = false;\n\n      function handleWindowError(event) {\n        error = event.error;\n        didSetError = true;\n\n        if (error === null && event.colno === 0 && event.lineno === 0) {\n          isCrossOriginError = true;\n        }\n\n        if (event.defaultPrevented) {\n          // Some other error handler has prevented default.\n          // Browsers silence the error report if this happens.\n          // We'll remember this to later decide whether to log it or not.\n          if (error != null && typeof error === 'object') {\n            try {\n              error._suppressLogging = true;\n            } catch (inner) {// Ignore.\n            }\n          }\n        }\n      } // Create a fake event type.\n\n\n      var evtType = \"react-\" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers\n\n      window.addEventListener('error', handleWindowError);\n      fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function\n      // errors, it will trigger our global error handler.\n\n      evt.initEvent(evtType, false, false);\n      fakeNode.dispatchEvent(evt);\n\n      if (windowEventDescriptor) {\n        Object.defineProperty(window, 'event', windowEventDescriptor);\n      }\n\n      if (didCall && didError) {\n        if (!didSetError) {\n          // The callback errored, but the error event never fired.\n          // eslint-disable-next-line react-internal/prod-error-codes\n          error = new Error('An error was thrown inside one of your components, but React ' + \"doesn't know what it was. This is likely due to browser \" + 'flakiness. React does its best to preserve the \"Pause on ' + 'exceptions\" behavior of the DevTools, which requires some ' + \"DEV-mode only tricks. It's possible that these don't work in \" + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');\n        } else if (isCrossOriginError) {\n          // eslint-disable-next-line react-internal/prod-error-codes\n          error = new Error(\"A cross-origin error was thrown. React doesn't have access to \" + 'the actual error object in development. ' + 'See https://reactjs.org/link/crossorigin-error for more information.');\n        }\n\n        this.onError(error);\n      } // Remove our event listeners\n\n\n      window.removeEventListener('error', handleWindowError);\n\n      if (!didCall) {\n        // Something went really wrong, and our event was not dispatched.\n        // https://github.com/facebook/react/issues/16734\n        // https://github.com/facebook/react/issues/16585\n        // Fall back to the production implementation.\n        restoreAfterDispatch();\n        return invokeGuardedCallbackProd.apply(this, arguments);\n      }\n    };\n  }\n}\n\nvar invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;\n\nvar hasError = false;\nvar caughtError = null; // Used by event system to capture/rethrow the first error.\nvar reporter = {\n  onError: function (error) {\n    hasError = true;\n    caughtError = error;\n  }\n};\n/**\n * Call a function while guarding against errors that happens within it.\n * Returns an error if it throws, otherwise null.\n *\n * In production, this is implemented using a try-catch. The reason we don't\n * use a try-catch directly is so that we can swap out a different\n * implementation in DEV mode.\n *\n * @param {String} name of the guard to use for logging or debugging\n * @param {Function} func The function to invoke\n * @param {*} context The context to use when calling the function\n * @param {...*} args Arguments for function\n */\n\nfunction invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {\n  hasError = false;\n  caughtError = null;\n  invokeGuardedCallbackImpl$1.apply(reporter, arguments);\n}\nfunction clearCaughtError() {\n  if (hasError) {\n    var error = caughtError;\n    hasError = false;\n    caughtError = null;\n    return error;\n  } else {\n    throw new Error('clearCaughtError was called but no error was captured. This error ' + 'is likely caused by a bug in React. Please file an issue.');\n  }\n}\n\nvar didWarnAboutUndefinedSnapshotBeforeUpdate = null;\n\n{\n  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();\n} // Used during the commit phase to track the state of the Offscreen component stack.\nvar PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;\nvar nextEffect = null; // Used for Profiling builds to track updaters.\n\nfunction reportUncaughtErrorInDEV(error) {\n  // Wrapping each small part of the commit phase into a guarded\n  // callback is a bit too slow (https://github.com/facebook/react/pull/21666).\n  // But we rely on it to surface errors to DEV tools like overlays\n  // (https://github.com/facebook/react/issues/21712).\n  // As a compromise, rethrow only caught errors in a guard.\n  {\n    invokeGuardedCallback(null, function () {\n      throw error;\n    });\n    clearCaughtError();\n  }\n}\n\nvar callComponentWillUnmountWithTimer = function (current, instance) {\n  instance.props = current.memoizedProps;\n  instance.state = current.memoizedState;\n\n  if ( current.mode & ProfileMode) {\n    try {\n      startLayoutEffectTimer();\n      instance.componentWillUnmount();\n    } finally {\n      recordLayoutEffectDuration(current);\n    }\n  } else {\n    instance.componentWillUnmount();\n  }\n}; // Capture errors so they don't interrupt mounting.\n\n\nfunction safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance) {\n  try {\n    callComponentWillUnmountWithTimer(current, instance);\n  } catch (error) {\n    reportUncaughtErrorInDEV(error);\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n} // Capture errors so they don't interrupt mounting.\n\nfunction safelyDetachRef(current, nearestMountedAncestor) {\n  var ref = current.ref;\n\n  if (ref !== null) {\n    if (typeof ref === 'function') {\n      var retVal;\n\n      try {\n        if (enableProfilerTimer && enableProfilerCommitHooks && current.mode & ProfileMode) {\n          try {\n            startLayoutEffectTimer();\n            retVal = ref(null);\n          } finally {\n            recordLayoutEffectDuration(current);\n          }\n        } else {\n          retVal = ref(null);\n        }\n      } catch (error) {\n        reportUncaughtErrorInDEV(error);\n        captureCommitPhaseError(current, nearestMountedAncestor, error);\n      }\n\n      {\n        if (typeof retVal === 'function') {\n          error('Unexpected return value from a callback ref in %s. ' + 'A callback ref should not return a function.', getComponentNameFromFiber(current));\n        }\n      }\n    } else {\n      ref.current = null;\n    }\n  }\n}\n\nfunction safelyCallDestroy(current, nearestMountedAncestor, destroy) {\n  try {\n    destroy();\n  } catch (error) {\n    reportUncaughtErrorInDEV(error);\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n}\n\nvar focusedInstanceHandle = null;\nvar shouldFireAfterActiveInstanceBlur = false;\nfunction commitBeforeMutationEffects(root, firstChild) {\n  focusedInstanceHandle = prepareForCommit(root.containerInfo);\n  nextEffect = firstChild;\n  commitBeforeMutationEffects_begin(); // We no longer need to track the active instance fiber\n\n  var shouldFire = shouldFireAfterActiveInstanceBlur;\n  shouldFireAfterActiveInstanceBlur = false;\n  focusedInstanceHandle = null;\n  return shouldFire;\n}\n\nfunction commitBeforeMutationEffects_begin() {\n  while (nextEffect !== null) {\n    var fiber = nextEffect; // This phase is only used for beforeActiveInstanceBlur.\n\n    var child = fiber.child;\n\n    if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {\n      ensureCorrectReturnPointer(child, fiber);\n      nextEffect = child;\n    } else {\n      commitBeforeMutationEffects_complete();\n    }\n  }\n}\n\nfunction commitBeforeMutationEffects_complete() {\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n    setCurrentFiber(fiber);\n\n    try {\n      commitBeforeMutationEffectsOnFiber(fiber);\n    } catch (error) {\n      reportUncaughtErrorInDEV(error);\n      captureCommitPhaseError(fiber, fiber.return, error);\n    }\n\n    resetCurrentFiber();\n    var sibling = fiber.sibling;\n\n    if (sibling !== null) {\n      ensureCorrectReturnPointer(sibling, fiber.return);\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction commitBeforeMutationEffectsOnFiber(finishedWork) {\n  var current = finishedWork.alternate;\n  var flags = finishedWork.flags;\n\n  if ((flags & Snapshot) !== NoFlags) {\n    setCurrentFiber(finishedWork);\n\n    switch (finishedWork.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent:\n        {\n          break;\n        }\n\n      case ClassComponent:\n        {\n          if (current !== null) {\n            var prevProps = current.memoizedProps;\n            var prevState = current.memoizedState;\n            var instance = finishedWork.stateNode; // We could update instance props and state here,\n            // but instead we rely on them being set during last render.\n            // TODO: revisit this when we implement resuming.\n\n            {\n              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n                if (instance.props !== finishedWork.memoizedProps) {\n                  error('Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                }\n\n                if (instance.state !== finishedWork.memoizedState) {\n                  error('Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                }\n              }\n            }\n\n            var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);\n\n            {\n              var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;\n\n              if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {\n                didWarnSet.add(finishedWork.type);\n\n                error('%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentNameFromFiber(finishedWork));\n              }\n            }\n\n            instance.__reactInternalSnapshotBeforeUpdate = snapshot;\n          }\n\n          break;\n        }\n\n      case HostRoot:\n        {\n          {\n            var root = finishedWork.stateNode;\n            clearContainer(root.containerInfo);\n          }\n\n          break;\n        }\n\n      case HostComponent:\n      case HostText:\n      case HostPortal:\n      case IncompleteClassComponent:\n        // Nothing to do for these component types\n        break;\n\n      default:\n        {\n          throw new Error('This unit of work tag should not have side-effects. This error is ' + 'likely caused by a bug in React. Please file an issue.');\n        }\n    }\n\n    resetCurrentFiber();\n  }\n}\n\nfunction commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {\n  var updateQueue = finishedWork.updateQueue;\n  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n\n  if (lastEffect !== null) {\n    var firstEffect = lastEffect.next;\n    var effect = firstEffect;\n\n    do {\n      if ((effect.tag & flags) === flags) {\n        // Unmount\n        var destroy = effect.destroy;\n        effect.destroy = undefined;\n\n        if (destroy !== undefined) {\n\n          safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);\n        }\n      }\n\n      effect = effect.next;\n    } while (effect !== firstEffect);\n  }\n}\n\nfunction commitHookEffectListMount(flags, finishedWork) {\n  var updateQueue = finishedWork.updateQueue;\n  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n\n  if (lastEffect !== null) {\n    var firstEffect = lastEffect.next;\n    var effect = firstEffect;\n\n    do {\n      if ((effect.tag & flags) === flags) {\n\n\n        var create = effect.create;\n        effect.destroy = create();\n\n        {\n          var destroy = effect.destroy;\n\n          if (destroy !== undefined && typeof destroy !== 'function') {\n            var hookName = void 0;\n\n            if ((effect.tag & Layout) !== NoFlags) {\n              hookName = 'useLayoutEffect';\n            } else if ((effect.tag & Insertion) !== NoFlags) {\n              hookName = 'useInsertionEffect';\n            } else {\n              hookName = 'useEffect';\n            }\n\n            var addendum = void 0;\n\n            if (destroy === null) {\n              addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';\n            } else if (typeof destroy.then === 'function') {\n              addendum = '\\n\\nIt looks like you wrote ' + hookName + '(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\\n\\n' + hookName + '(() => {\\n' + '  async function fetchData() {\\n' + '    // You can await here\\n' + '    const response = await MyAPI.getData(someId);\\n' + '    // ...\\n' + '  }\\n' + '  fetchData();\\n' + \"}, [someId]); // Or [] if effect doesn't need props or state\\n\\n\" + 'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching';\n            } else {\n              addendum = ' You returned: ' + destroy;\n            }\n\n            error('%s must not return anything besides a function, ' + 'which is used for clean-up.%s', hookName, addendum);\n          }\n        }\n      }\n\n      effect = effect.next;\n    } while (effect !== firstEffect);\n  }\n}\n\nfunction commitPassiveEffectDurations(finishedRoot, finishedWork) {\n  {\n    // Only Profilers with work in their subtree will have an Update effect scheduled.\n    if ((finishedWork.flags & Update) !== NoFlags) {\n      switch (finishedWork.tag) {\n        case Profiler:\n          {\n            var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;\n            var _finishedWork$memoize = finishedWork.memoizedProps,\n                id = _finishedWork$memoize.id,\n                onPostCommit = _finishedWork$memoize.onPostCommit; // This value will still reflect the previous commit phase.\n            // It does not get reset until the start of the next commit phase.\n\n            var commitTime = getCommitTime();\n            var phase = finishedWork.alternate === null ? 'mount' : 'update';\n\n            {\n              if (isCurrentUpdateNested()) {\n                phase = 'nested-update';\n              }\n            }\n\n            if (typeof onPostCommit === 'function') {\n              onPostCommit(id, phase, passiveEffectDuration, commitTime);\n            } // Bubble times to the next nearest ancestor Profiler.\n            // After we process that Profiler, we'll bubble further up.\n\n\n            var parentFiber = finishedWork.return;\n\n            outer: while (parentFiber !== null) {\n              switch (parentFiber.tag) {\n                case HostRoot:\n                  var root = parentFiber.stateNode;\n                  root.passiveEffectDuration += passiveEffectDuration;\n                  break outer;\n\n                case Profiler:\n                  var parentStateNode = parentFiber.stateNode;\n                  parentStateNode.passiveEffectDuration += passiveEffectDuration;\n                  break outer;\n              }\n\n              parentFiber = parentFiber.return;\n            }\n\n            break;\n          }\n      }\n    }\n  }\n}\n\nfunction commitLayoutEffectOnFiber(finishedRoot, current, finishedWork, committedLanes) {\n  if ((finishedWork.flags & LayoutMask) !== NoFlags) {\n    switch (finishedWork.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent:\n        {\n          {\n            // At this point layout effects have already been destroyed (during mutation phase).\n            // This is done to prevent sibling component effects from interfering with each other,\n            // e.g. a destroy function in one component should never override a ref set\n            // by a create function in another component during the same commit.\n            if ( finishedWork.mode & ProfileMode) {\n              try {\n                startLayoutEffectTimer();\n                commitHookEffectListMount(Layout | HasEffect, finishedWork);\n              } finally {\n                recordLayoutEffectDuration(finishedWork);\n              }\n            } else {\n              commitHookEffectListMount(Layout | HasEffect, finishedWork);\n            }\n          }\n\n          break;\n        }\n\n      case ClassComponent:\n        {\n          var instance = finishedWork.stateNode;\n\n          if (finishedWork.flags & Update) {\n            {\n              if (current === null) {\n                // We could update instance props and state here,\n                // but instead we rely on them being set during last render.\n                // TODO: revisit this when we implement resuming.\n                {\n                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n                    if (instance.props !== finishedWork.memoizedProps) {\n                      error('Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                    }\n\n                    if (instance.state !== finishedWork.memoizedState) {\n                      error('Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                    }\n                  }\n                }\n\n                if ( finishedWork.mode & ProfileMode) {\n                  try {\n                    startLayoutEffectTimer();\n                    instance.componentDidMount();\n                  } finally {\n                    recordLayoutEffectDuration(finishedWork);\n                  }\n                } else {\n                  instance.componentDidMount();\n                }\n              } else {\n                var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);\n                var prevState = current.memoizedState; // We could update instance props and state here,\n                // but instead we rely on them being set during last render.\n                // TODO: revisit this when we implement resuming.\n\n                {\n                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n                    if (instance.props !== finishedWork.memoizedProps) {\n                      error('Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                    }\n\n                    if (instance.state !== finishedWork.memoizedState) {\n                      error('Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                    }\n                  }\n                }\n\n                if ( finishedWork.mode & ProfileMode) {\n                  try {\n                    startLayoutEffectTimer();\n                    instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);\n                  } finally {\n                    recordLayoutEffectDuration(finishedWork);\n                  }\n                } else {\n                  instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);\n                }\n              }\n            }\n          } // TODO: I think this is now always non-null by the time it reaches the\n          // commit phase. Consider removing the type check.\n\n\n          var updateQueue = finishedWork.updateQueue;\n\n          if (updateQueue !== null) {\n            {\n              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n                if (instance.props !== finishedWork.memoizedProps) {\n                  error('Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                }\n\n                if (instance.state !== finishedWork.memoizedState) {\n                  error('Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                }\n              }\n            } // We could update instance props and state here,\n            // but instead we rely on them being set during last render.\n            // TODO: revisit this when we implement resuming.\n\n\n            commitUpdateQueue(finishedWork, updateQueue, instance);\n          }\n\n          break;\n        }\n\n      case HostRoot:\n        {\n          // TODO: I think this is now always non-null by the time it reaches the\n          // commit phase. Consider removing the type check.\n          var _updateQueue = finishedWork.updateQueue;\n\n          if (_updateQueue !== null) {\n            var _instance = null;\n\n            if (finishedWork.child !== null) {\n              switch (finishedWork.child.tag) {\n                case HostComponent:\n                  _instance = getPublicInstance(finishedWork.child.stateNode);\n                  break;\n\n                case ClassComponent:\n                  _instance = finishedWork.child.stateNode;\n                  break;\n              }\n            }\n\n            commitUpdateQueue(finishedWork, _updateQueue, _instance);\n          }\n\n          break;\n        }\n\n      case HostComponent:\n        {\n          var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted\n          // (eg DOM renderer may schedule auto-focus for inputs and form controls).\n          // These effects should only be committed when components are first mounted,\n          // aka when there is no current/alternate.\n\n          if (current === null && finishedWork.flags & Update) {\n            var type = finishedWork.type;\n            var props = finishedWork.memoizedProps;\n          }\n\n          break;\n        }\n\n      case HostText:\n        {\n          // We have no life-cycles associated with text.\n          break;\n        }\n\n      case HostPortal:\n        {\n          // We have no life-cycles associated with portals.\n          break;\n        }\n\n      case Profiler:\n        {\n          {\n            var _finishedWork$memoize2 = finishedWork.memoizedProps,\n                onCommit = _finishedWork$memoize2.onCommit,\n                onRender = _finishedWork$memoize2.onRender;\n            var effectDuration = finishedWork.stateNode.effectDuration;\n            var commitTime = getCommitTime();\n            var phase = current === null ? 'mount' : 'update';\n\n            {\n              if (isCurrentUpdateNested()) {\n                phase = 'nested-update';\n              }\n            }\n\n            if (typeof onRender === 'function') {\n              onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime);\n            }\n\n            {\n              if (typeof onCommit === 'function') {\n                onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime);\n              } // Schedule a passive effect for this Profiler to call onPostCommit hooks.\n              // This effect should be scheduled even if there is no onPostCommit callback for this Profiler,\n              // because the effect is also where times bubble to parent Profilers.\n\n\n              enqueuePendingPassiveProfilerEffect(finishedWork); // Propagate layout effect durations to the next nearest Profiler ancestor.\n              // Do not reset these values until the next render so DevTools has a chance to read them first.\n\n              var parentFiber = finishedWork.return;\n\n              outer: while (parentFiber !== null) {\n                switch (parentFiber.tag) {\n                  case HostRoot:\n                    var root = parentFiber.stateNode;\n                    root.effectDuration += effectDuration;\n                    break outer;\n\n                  case Profiler:\n                    var parentStateNode = parentFiber.stateNode;\n                    parentStateNode.effectDuration += effectDuration;\n                    break outer;\n                }\n\n                parentFiber = parentFiber.return;\n              }\n            }\n          }\n\n          break;\n        }\n\n      case SuspenseComponent:\n        {\n          break;\n        }\n\n      case SuspenseListComponent:\n      case IncompleteClassComponent:\n      case ScopeComponent:\n      case OffscreenComponent:\n      case LegacyHiddenComponent:\n        {\n          break;\n        }\n\n      default:\n        throw new Error('This unit of work tag should not have side-effects. This error is ' + 'likely caused by a bug in React. Please file an issue.');\n    }\n  }\n\n  {\n    {\n      if (finishedWork.flags & Ref) {\n        commitAttachRef(finishedWork);\n      }\n    }\n  }\n}\n\nfunction hideOrUnhideAllChildren(finishedWork, isHidden) {\n  // Only hide or unhide the top-most host nodes.\n  var hostSubtreeRoot = null;\n\n  {\n    // We only have the top Fiber that was inserted but we need to recurse down its\n    // children to find all the terminal nodes.\n    var node = finishedWork;\n\n    while (true) {\n      if (node.tag === HostComponent) {\n        if (hostSubtreeRoot === null) {\n          hostSubtreeRoot = node;\n          var instance = node.stateNode;\n\n          if (isHidden) {\n            hideInstance(instance);\n          } else {\n            unhideInstance(node.stateNode, node.memoizedProps);\n          }\n        }\n      } else if (node.tag === HostText) {\n        if (hostSubtreeRoot === null) {\n          var _instance3 = node.stateNode;\n\n          if (isHidden) {\n            hideTextInstance(_instance3);\n          } else {\n            unhideTextInstance(_instance3, node.memoizedProps);\n          }\n        }\n      } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ; else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n\n      if (node === finishedWork) {\n        return;\n      }\n\n      while (node.sibling === null) {\n        if (node.return === null || node.return === finishedWork) {\n          return;\n        }\n\n        if (hostSubtreeRoot === node) {\n          hostSubtreeRoot = null;\n        }\n\n        node = node.return;\n      }\n\n      if (hostSubtreeRoot === node) {\n        hostSubtreeRoot = null;\n      }\n\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  }\n}\n\nfunction commitAttachRef(finishedWork) {\n  var ref = finishedWork.ref;\n\n  if (ref !== null) {\n    var instance = finishedWork.stateNode;\n    var instanceToUse;\n\n    switch (finishedWork.tag) {\n      case HostComponent:\n        instanceToUse = getPublicInstance(instance);\n        break;\n\n      default:\n        instanceToUse = instance;\n    } // Moved outside to ensure DCE works with this flag\n\n    if (typeof ref === 'function') {\n      var retVal;\n\n      if ( finishedWork.mode & ProfileMode) {\n        try {\n          startLayoutEffectTimer();\n          retVal = ref(instanceToUse);\n        } finally {\n          recordLayoutEffectDuration(finishedWork);\n        }\n      } else {\n        retVal = ref(instanceToUse);\n      }\n\n      {\n        if (typeof retVal === 'function') {\n          error('Unexpected return value from a callback ref in %s. ' + 'A callback ref should not return a function.', getComponentNameFromFiber(finishedWork));\n        }\n      }\n    } else {\n      {\n        if (!ref.hasOwnProperty('current')) {\n          error('Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().', getComponentNameFromFiber(finishedWork));\n        }\n      }\n\n      ref.current = instanceToUse;\n    }\n  }\n}\n\nfunction commitDetachRef(current) {\n  var currentRef = current.ref;\n\n  if (currentRef !== null) {\n    if (typeof currentRef === 'function') {\n      if ( current.mode & ProfileMode) {\n        try {\n          startLayoutEffectTimer();\n          currentRef(null);\n        } finally {\n          recordLayoutEffectDuration(current);\n        }\n      } else {\n        currentRef(null);\n      }\n    } else {\n      currentRef.current = null;\n    }\n  }\n} // User-originating errors (lifecycles and refs) should not interrupt\n// deletion, so don't let them throw. Host-originating errors should\n// interrupt deletion, so it's okay\n\n\nfunction commitUnmount(finishedRoot, current, nearestMountedAncestor) {\n  onCommitUnmount(current);\n\n  switch (current.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case MemoComponent:\n    case SimpleMemoComponent:\n      {\n        var updateQueue = current.updateQueue;\n\n        if (updateQueue !== null) {\n          var lastEffect = updateQueue.lastEffect;\n\n          if (lastEffect !== null) {\n            var firstEffect = lastEffect.next;\n            var effect = firstEffect;\n\n            do {\n              var _effect = effect,\n                  destroy = _effect.destroy,\n                  tag = _effect.tag;\n\n              if (destroy !== undefined) {\n                if ((tag & Insertion) !== NoFlags$1) {\n                  safelyCallDestroy(current, nearestMountedAncestor, destroy);\n                } else if ((tag & Layout) !== NoFlags$1) {\n\n                  if ( current.mode & ProfileMode) {\n                    startLayoutEffectTimer();\n                    safelyCallDestroy(current, nearestMountedAncestor, destroy);\n                    recordLayoutEffectDuration(current);\n                  } else {\n                    safelyCallDestroy(current, nearestMountedAncestor, destroy);\n                  }\n                }\n              }\n\n              effect = effect.next;\n            } while (effect !== firstEffect);\n          }\n        }\n\n        return;\n      }\n\n    case ClassComponent:\n      {\n        safelyDetachRef(current, nearestMountedAncestor);\n        var instance = current.stateNode;\n\n        if (typeof instance.componentWillUnmount === 'function') {\n          safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance);\n        }\n\n        return;\n      }\n\n    case HostComponent:\n      {\n        safelyDetachRef(current, nearestMountedAncestor);\n        return;\n      }\n\n    case HostPortal:\n      {\n        // TODO: this is recursive.\n        // We are also not using this parent because\n        // the portal will get pushed immediately.\n        {\n          unmountHostComponents(finishedRoot, current, nearestMountedAncestor);\n        }\n\n        return;\n      }\n\n    case DehydratedFragment:\n      {\n\n        return;\n      }\n\n    case ScopeComponent:\n      {\n\n        return;\n      }\n  }\n}\n\nfunction commitNestedUnmounts(finishedRoot, root, nearestMountedAncestor) {\n  // While we're inside a removed host node we don't want to call\n  // removeChild on the inner nodes because they're removed by the top\n  // call anyway. We also want to call componentWillUnmount on all\n  // composites before this host node is removed from the tree. Therefore\n  // we do an inner loop while we're still inside the host node.\n  var node = root;\n\n  while (true) {\n    commitUnmount(finishedRoot, node, nearestMountedAncestor); // Visit children because they may contain more composite or host nodes.\n    // Skip portals because commitUnmount() currently visits them recursively.\n\n    if (node.child !== null && ( // If we use mutation we drill down into portals using commitUnmount above.\n    // If we don't use mutation we drill down into portals here instead.\n     node.tag !== HostPortal)) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n\n    if (node === root) {\n      return;\n    }\n\n    while (node.sibling === null) {\n      if (node.return === null || node.return === root) {\n        return;\n      }\n\n      node = node.return;\n    }\n\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n}\n\nfunction detachFiberMutation(fiber) {\n  // Cut off the return pointer to disconnect it from the tree.\n  // This enables us to detect and warn against state updates on an unmounted component.\n  // It also prevents events from bubbling from within disconnected components.\n  //\n  // Ideally, we should also clear the child pointer of the parent alternate to let this\n  // get GC:ed but we don't know which for sure which parent is the current\n  // one so we'll settle for GC:ing the subtree of this child.\n  // This child itself will be GC:ed when the parent updates the next time.\n  //\n  // Note that we can't clear child or sibling pointers yet.\n  // They're needed for passive effects and for findDOMNode.\n  // We defer those fields, and all other cleanup, to the passive phase (see detachFiberAfterEffects).\n  //\n  // Don't reset the alternate yet, either. We need that so we can detach the\n  // alternate's fields in the passive phase. Clearing the return pointer is\n  // sufficient for findDOMNode semantics.\n  var alternate = fiber.alternate;\n\n  if (alternate !== null) {\n    alternate.return = null;\n  }\n\n  fiber.return = null;\n}\n\nfunction detachFiberAfterEffects(fiber) {\n  var alternate = fiber.alternate;\n\n  if (alternate !== null) {\n    fiber.alternate = null;\n    detachFiberAfterEffects(alternate);\n  } // Note: Defensively using negation instead of < in case\n  // `deletedTreeCleanUpLevel` is undefined.\n\n\n  {\n    // Clear cyclical Fiber fields. This level alone is designed to roughly\n    // approximate the planned Fiber refactor. In that world, `setState` will be\n    // bound to a special \"instance\" object instead of a Fiber. The Instance\n    // object will not have any of these fields. It will only be connected to\n    // the fiber tree via a single link at the root. So if this level alone is\n    // sufficient to fix memory issues, that bodes well for our plans.\n    fiber.child = null;\n    fiber.deletions = null;\n    fiber.sibling = null; // The `stateNode` is cyclical because on host nodes it points to the host\n    // tree, which has its own pointers to children, parents, and siblings.\n    // The other host nodes also point back to fibers, so we should detach that\n    // one, too.\n\n    if (fiber.tag === HostComponent) {\n      var hostInstance = fiber.stateNode;\n    }\n\n    fiber.stateNode = null; // I'm intentionally not clearing the `return` field in this level. We\n    // already disconnect the `return` pointer at the root of the deleted\n    // subtree (in `detachFiberMutation`). Besides, `return` by itself is not\n    // cyclical — it's only cyclical when combined with `child`, `sibling`, and\n    // `alternate`. But we'll clear it in the next level anyway, just in case.\n\n    {\n      fiber._debugOwner = null;\n    }\n\n    {\n      // Theoretically, nothing in here should be necessary, because we already\n      // disconnected the fiber from the tree. So even if something leaks this\n      // particular fiber, it won't leak anything else\n      //\n      // The purpose of this branch is to be super aggressive so we can measure\n      // if there's any difference in memory impact. If there is, that could\n      // indicate a React leak we don't know about.\n      fiber.return = null;\n      fiber.dependencies = null;\n      fiber.memoizedProps = null;\n      fiber.memoizedState = null;\n      fiber.pendingProps = null;\n      fiber.stateNode = null; // TODO: Move to `commitPassiveUnmountInsideDeletedTreeOnFiber` instead.\n\n      fiber.updateQueue = null;\n    }\n  }\n}\n\nfunction getHostParentFiber(fiber) {\n  var parent = fiber.return;\n\n  while (parent !== null) {\n    if (isHostParent(parent)) {\n      return parent;\n    }\n\n    parent = parent.return;\n  }\n\n  throw new Error('Expected to find a host parent. This error is likely caused by a bug ' + 'in React. Please file an issue.');\n}\n\nfunction isHostParent(fiber) {\n  return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;\n}\n\nfunction getHostSibling(fiber) {\n  // We're going to search forward into the tree until we find a sibling host\n  // node. Unfortunately, if multiple insertions are done in a row we have to\n  // search past them. This leads to exponential search for the next sibling.\n  // TODO: Find a more efficient way to do this.\n  var node = fiber;\n\n  siblings: while (true) {\n    // If we didn't find anything, let's try the next sibling.\n    while (node.sibling === null) {\n      if (node.return === null || isHostParent(node.return)) {\n        // If we pop out of the root or hit the parent the fiber we are the\n        // last sibling.\n        return null;\n      }\n\n      node = node.return;\n    }\n\n    node.sibling.return = node.return;\n    node = node.sibling;\n\n    while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {\n      // If it is not host node and, we might have a host node inside it.\n      // Try to search down until we find one.\n      if (node.flags & Placement) {\n        // If we don't have a child, try the siblings instead.\n        continue siblings;\n      } // If we don't have a child, try the siblings instead.\n      // We also skip portals because they are not part of this host tree.\n\n\n      if (node.child === null || node.tag === HostPortal) {\n        continue siblings;\n      } else {\n        node.child.return = node;\n        node = node.child;\n      }\n    } // Check if this host node is stable or about to be placed.\n\n\n    if (!(node.flags & Placement)) {\n      // Found it!\n      return node.stateNode;\n    }\n  }\n}\n\nfunction commitPlacement(finishedWork) {\n\n\n  var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.\n\n  switch (parentFiber.tag) {\n    case HostComponent:\n      {\n        var parent = parentFiber.stateNode;\n\n        if (parentFiber.flags & ContentReset) {\n\n          parentFiber.flags &= ~ContentReset;\n        }\n\n        var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its\n        // children to find all the terminal nodes.\n\n        insertOrAppendPlacementNode(finishedWork, before, parent);\n        break;\n      }\n\n    case HostRoot:\n    case HostPortal:\n      {\n        var _parent = parentFiber.stateNode.containerInfo;\n\n        var _before = getHostSibling(finishedWork);\n\n        insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);\n        break;\n      }\n    // eslint-disable-next-line-no-fallthrough\n\n    default:\n      throw new Error('Invalid host parent fiber. This error is likely caused by a bug ' + 'in React. Please file an issue.');\n  }\n}\n\nfunction insertOrAppendPlacementNodeIntoContainer(node, before, parent) {\n  var tag = node.tag;\n  var isHost = tag === HostComponent || tag === HostText;\n\n  if (isHost) {\n    var stateNode = node.stateNode;\n\n    if (before) {\n      insertInContainerBefore(parent, stateNode, before);\n    } else {\n      appendChildToContainer(parent, stateNode);\n    }\n  } else if (tag === HostPortal) ; else {\n    var child = node.child;\n\n    if (child !== null) {\n      insertOrAppendPlacementNodeIntoContainer(child, before, parent);\n      var sibling = child.sibling;\n\n      while (sibling !== null) {\n        insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);\n        sibling = sibling.sibling;\n      }\n    }\n  }\n}\n\nfunction insertOrAppendPlacementNode(node, before, parent) {\n  var tag = node.tag;\n  var isHost = tag === HostComponent || tag === HostText;\n\n  if (isHost) {\n    var stateNode = node.stateNode;\n\n    if (before) {\n      insertBefore(parent, stateNode, before);\n    } else {\n      appendChild(parent, stateNode);\n    }\n  } else if (tag === HostPortal) ; else {\n    var child = node.child;\n\n    if (child !== null) {\n      insertOrAppendPlacementNode(child, before, parent);\n      var sibling = child.sibling;\n\n      while (sibling !== null) {\n        insertOrAppendPlacementNode(sibling, before, parent);\n        sibling = sibling.sibling;\n      }\n    }\n  }\n}\n\nfunction unmountHostComponents(finishedRoot, current, nearestMountedAncestor) {\n  // We only have the top Fiber that was deleted but we need to recurse down its\n  // children to find all the terminal nodes.\n  var node = current; // Each iteration, currentParent is populated with node's host parent if not\n  // currentParentIsValid.\n\n  var currentParentIsValid = false; // Note: these two variables *must* always be updated together.\n\n  var currentParent;\n  var currentParentIsContainer;\n\n  while (true) {\n    if (!currentParentIsValid) {\n      var parent = node.return;\n\n      findParent: while (true) {\n        if (parent === null) {\n          throw new Error('Expected to find a host parent. This error is likely caused by ' + 'a bug in React. Please file an issue.');\n        }\n\n        var parentStateNode = parent.stateNode;\n\n        switch (parent.tag) {\n          case HostComponent:\n            currentParent = parentStateNode;\n            currentParentIsContainer = false;\n            break findParent;\n\n          case HostRoot:\n            currentParent = parentStateNode.containerInfo;\n            currentParentIsContainer = true;\n            break findParent;\n\n          case HostPortal:\n            currentParent = parentStateNode.containerInfo;\n            currentParentIsContainer = true;\n            break findParent;\n        }\n\n        parent = parent.return;\n      }\n\n      currentParentIsValid = true;\n    }\n\n    if (node.tag === HostComponent || node.tag === HostText) {\n      commitNestedUnmounts(finishedRoot, node, nearestMountedAncestor); // After all the children have unmounted, it is now safe to remove the\n      // node from the tree.\n\n      if (currentParentIsContainer) {\n        removeChildFromContainer(currentParent, node.stateNode);\n      } else {\n        removeChild(currentParent, node.stateNode);\n      } // Don't visit children because we already visited them.\n\n    } else if (node.tag === HostPortal) {\n      if (node.child !== null) {\n        // When we go into a portal, it becomes the parent to remove from.\n        // We will reassign it back when we pop the portal on the way up.\n        currentParent = node.stateNode.containerInfo;\n        currentParentIsContainer = true; // Visit children because portals might contain host components.\n\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n    } else {\n      commitUnmount(finishedRoot, node, nearestMountedAncestor); // Visit children because we may find more host components below.\n\n      if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n    }\n\n    if (node === current) {\n      return;\n    }\n\n    while (node.sibling === null) {\n      if (node.return === null || node.return === current) {\n        return;\n      }\n\n      node = node.return;\n\n      if (node.tag === HostPortal) {\n        // When we go out of the portal, we need to restore the parent.\n        // Since we don't keep a stack of them, we will search for it.\n        currentParentIsValid = false;\n      }\n    }\n\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n}\n\nfunction commitDeletion(finishedRoot, current, nearestMountedAncestor) {\n  {\n    // Recursively delete all host nodes from the parent.\n    // Detach refs and call componentWillUnmount() on the whole subtree.\n    unmountHostComponents(finishedRoot, current, nearestMountedAncestor);\n  }\n\n  detachFiberMutation(current);\n}\n\nfunction commitWork(current, finishedWork) {\n\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case MemoComponent:\n    case SimpleMemoComponent:\n      {\n        commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);\n        commitHookEffectListMount(Insertion | HasEffect, finishedWork); // Layout effects are destroyed during the mutation phase so that all\n        // destroy functions for all fibers are called before any create functions.\n        // This prevents sibling component effects from interfering with each other,\n        // e.g. a destroy function in one component should never override a ref set\n        // by a create function in another component during the same commit.\n\n        if ( finishedWork.mode & ProfileMode) {\n          try {\n            startLayoutEffectTimer();\n            commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);\n          } finally {\n            recordLayoutEffectDuration(finishedWork);\n          }\n        } else {\n          commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);\n        }\n\n        return;\n      }\n\n    case ClassComponent:\n      {\n        return;\n      }\n\n    case HostComponent:\n      {\n        var instance = finishedWork.stateNode;\n\n        if (instance != null) {\n          // Commit the work prepared earlier.\n          var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps\n          // as the newProps. The updatePayload will contain the real change in\n          // this case.\n\n          var oldProps = current !== null ? current.memoizedProps : newProps;\n          var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.\n\n          var updatePayload = finishedWork.updateQueue;\n          finishedWork.updateQueue = null;\n\n          if (updatePayload !== null) {\n            commitUpdate(instance, updatePayload, type, oldProps, newProps);\n          }\n        }\n\n        return;\n      }\n\n    case HostText:\n      {\n        if (finishedWork.stateNode === null) {\n          throw new Error('This should have a text node initialized. This error is likely ' + 'caused by a bug in React. Please file an issue.');\n        }\n\n        var textInstance = finishedWork.stateNode;\n        var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps\n        // as the newProps. The updatePayload will contain the real change in\n        // this case.\n\n        var oldText = current !== null ? current.memoizedProps : newText;\n        commitTextUpdate(textInstance, oldText, newText);\n        return;\n      }\n\n    case HostRoot:\n      {\n\n        return;\n      }\n\n    case Profiler:\n      {\n        return;\n      }\n\n    case SuspenseComponent:\n      {\n        commitSuspenseCallback(finishedWork);\n        attachSuspenseRetryListeners(finishedWork);\n        return;\n      }\n\n    case SuspenseListComponent:\n      {\n        attachSuspenseRetryListeners(finishedWork);\n        return;\n      }\n\n    case IncompleteClassComponent:\n      {\n        return;\n      }\n  }\n\n  throw new Error('This unit of work tag should not have side-effects. This error is ' + 'likely caused by a bug in React. Please file an issue.');\n}\n\nfunction commitSuspenseCallback(finishedWork) {\n  // TODO: Move this to passive phase\n  var newState = finishedWork.memoizedState;\n}\n\nfunction attachSuspenseRetryListeners(finishedWork) {\n  // If this boundary just timed out, then it will have a set of wakeables.\n  // For each wakeable, attach a listener so that when it resolves, React\n  // attempts to re-render the boundary in the primary (pre-timeout) state.\n  var wakeables = finishedWork.updateQueue;\n\n  if (wakeables !== null) {\n    finishedWork.updateQueue = null;\n    var retryCache = finishedWork.stateNode;\n\n    if (retryCache === null) {\n      retryCache = finishedWork.stateNode = new PossiblyWeakSet();\n    }\n\n    wakeables.forEach(function (wakeable) {\n      // Memoize using the boundary fiber to prevent redundant listeners.\n      var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);\n\n      if (!retryCache.has(wakeable)) {\n        retryCache.add(wakeable);\n\n        wakeable.then(retry, retry);\n      }\n    });\n  }\n} // This function detects when a Suspense boundary goes from visible to hidden.\n\nfunction commitResetTextContent(current) {\n\n  resetTextContent(current.stateNode);\n}\n\nfunction commitMutationEffects(root, firstChild, committedLanes) {\n  nextEffect = firstChild;\n  commitMutationEffects_begin(root, committedLanes);\n}\n\nfunction commitMutationEffects_begin(root, lanes) {\n  while (nextEffect !== null) {\n    var fiber = nextEffect; // TODO: Should wrap this in flags check, too, as optimization\n\n    var deletions = fiber.deletions;\n\n    if (deletions !== null) {\n      for (var i = 0; i < deletions.length; i++) {\n        var childToDelete = deletions[i];\n\n        try {\n          commitDeletion(root, childToDelete, fiber);\n        } catch (error) {\n          reportUncaughtErrorInDEV(error);\n          captureCommitPhaseError(childToDelete, fiber, error);\n        }\n      }\n    }\n\n    var child = fiber.child;\n\n    if ((fiber.subtreeFlags & MutationMask) !== NoFlags && child !== null) {\n      ensureCorrectReturnPointer(child, fiber);\n      nextEffect = child;\n    } else {\n      commitMutationEffects_complete(root, lanes);\n    }\n  }\n}\n\nfunction commitMutationEffects_complete(root, lanes) {\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n    setCurrentFiber(fiber);\n\n    try {\n      commitMutationEffectsOnFiber(fiber, root, lanes);\n    } catch (error) {\n      reportUncaughtErrorInDEV(error);\n      captureCommitPhaseError(fiber, fiber.return, error);\n    }\n\n    resetCurrentFiber();\n    var sibling = fiber.sibling;\n\n    if (sibling !== null) {\n      ensureCorrectReturnPointer(sibling, fiber.return);\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction commitMutationEffectsOnFiber(finishedWork, root, lanes) {\n  // TODO: The factoring of this phase could probably be improved. Consider\n  // switching on the type of work before checking the flags. That's what\n  // we do in all the other phases. I think this one is only different\n  // because of the shared reconciliation logic below.\n  var flags = finishedWork.flags;\n\n  if (flags & ContentReset) {\n    commitResetTextContent(finishedWork);\n  }\n\n  if (flags & Ref) {\n    var current = finishedWork.alternate;\n\n    if (current !== null) {\n      commitDetachRef(current);\n    }\n  }\n\n  if (flags & Visibility) {\n    switch (finishedWork.tag) {\n      case SuspenseComponent:\n        {\n          var newState = finishedWork.memoizedState;\n          var isHidden = newState !== null;\n\n          if (isHidden) {\n            var _current = finishedWork.alternate;\n            var wasHidden = _current !== null && _current.memoizedState !== null;\n\n            if (!wasHidden) {\n              // TODO: Move to passive phase\n              markCommitTimeOfFallback();\n            }\n          }\n\n          break;\n        }\n\n      case OffscreenComponent:\n        {\n          var _newState = finishedWork.memoizedState;\n\n          var _isHidden = _newState !== null;\n\n          var _current2 = finishedWork.alternate;\n\n          var _wasHidden = _current2 !== null && _current2.memoizedState !== null;\n\n          var offscreenBoundary = finishedWork;\n\n          {\n            // TODO: This needs to run whenever there's an insertion or update\n            // inside a hidden Offscreen tree.\n            hideOrUnhideAllChildren(offscreenBoundary, _isHidden);\n          }\n        }\n    }\n  } // The following switch statement is only concerned about placement,\n  // updates, and deletions. To avoid needing to add a case for every possible\n  // bitmap value, we remove the secondary effects from the effect tag and\n  // switch on that value.\n\n\n  var primaryFlags = flags & (Placement | Update | Hydrating);\n\n   switch (primaryFlags) {\n    case Placement:\n      {\n        commitPlacement(finishedWork); // Clear the \"placement\" from effect tag so that we know that this is\n        // inserted, before any life-cycles like componentDidMount gets called.\n        // TODO: findDOMNode doesn't rely on this any more but isMounted does\n        // and isMounted is deprecated anyway so we should be able to kill this.\n\n        finishedWork.flags &= ~Placement;\n        break;\n      }\n\n    case PlacementAndUpdate:\n      {\n        // Placement\n        commitPlacement(finishedWork); // Clear the \"placement\" from effect tag so that we know that this is\n        // inserted, before any life-cycles like componentDidMount gets called.\n\n        finishedWork.flags &= ~Placement; // Update\n\n        var _current3 = finishedWork.alternate;\n        commitWork(_current3, finishedWork);\n        break;\n      }\n\n    case Hydrating:\n      {\n        finishedWork.flags &= ~Hydrating;\n        break;\n      }\n\n    case HydratingAndUpdate:\n      {\n        finishedWork.flags &= ~Hydrating; // Update\n\n        var _current4 = finishedWork.alternate;\n        commitWork(_current4, finishedWork);\n        break;\n      }\n\n    case Update:\n      {\n        var _current5 = finishedWork.alternate;\n        commitWork(_current5, finishedWork);\n        break;\n      }\n  }\n}\n\nfunction commitLayoutEffects(finishedWork, root, committedLanes) {\n  nextEffect = finishedWork;\n  commitLayoutEffects_begin(finishedWork, root, committedLanes);\n}\n\nfunction commitLayoutEffects_begin(subtreeRoot, root, committedLanes) {\n  // Suspense layout effects semantics don't change for legacy roots.\n  var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;\n\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n    var firstChild = fiber.child;\n\n    if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {\n      ensureCorrectReturnPointer(firstChild, fiber);\n      nextEffect = firstChild;\n    } else {\n      commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\n    }\n  }\n}\n\nfunction commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes) {\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n\n    if ((fiber.flags & LayoutMask) !== NoFlags) {\n      var current = fiber.alternate;\n      setCurrentFiber(fiber);\n\n      try {\n        commitLayoutEffectOnFiber(root, current, fiber, committedLanes);\n      } catch (error) {\n        reportUncaughtErrorInDEV(error);\n        captureCommitPhaseError(fiber, fiber.return, error);\n      }\n\n      resetCurrentFiber();\n    }\n\n    if (fiber === subtreeRoot) {\n      nextEffect = null;\n      return;\n    }\n\n    var sibling = fiber.sibling;\n\n    if (sibling !== null) {\n      ensureCorrectReturnPointer(sibling, fiber.return);\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction commitPassiveMountEffects(root, finishedWork) {\n  nextEffect = finishedWork;\n  commitPassiveMountEffects_begin(finishedWork, root);\n}\n\nfunction commitPassiveMountEffects_begin(subtreeRoot, root) {\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n    var firstChild = fiber.child;\n\n    if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {\n      ensureCorrectReturnPointer(firstChild, fiber);\n      nextEffect = firstChild;\n    } else {\n      commitPassiveMountEffects_complete(subtreeRoot, root);\n    }\n  }\n}\n\nfunction commitPassiveMountEffects_complete(subtreeRoot, root) {\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n\n    if ((fiber.flags & Passive) !== NoFlags) {\n      setCurrentFiber(fiber);\n\n      try {\n        commitPassiveMountOnFiber(root, fiber);\n      } catch (error) {\n        reportUncaughtErrorInDEV(error);\n        captureCommitPhaseError(fiber, fiber.return, error);\n      }\n\n      resetCurrentFiber();\n    }\n\n    if (fiber === subtreeRoot) {\n      nextEffect = null;\n      return;\n    }\n\n    var sibling = fiber.sibling;\n\n    if (sibling !== null) {\n      ensureCorrectReturnPointer(sibling, fiber.return);\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction commitPassiveMountOnFiber(finishedRoot, finishedWork) {\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent:\n      {\n        if ( finishedWork.mode & ProfileMode) {\n          startPassiveEffectTimer();\n\n          try {\n            commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);\n          } finally {\n            recordPassiveEffectDuration(finishedWork);\n          }\n        } else {\n          commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);\n        }\n\n        break;\n      }\n  }\n}\n\nfunction commitPassiveUnmountEffects(firstChild) {\n  nextEffect = firstChild;\n  commitPassiveUnmountEffects_begin();\n}\n\nfunction commitPassiveUnmountEffects_begin() {\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n    var child = fiber.child;\n\n    if ((nextEffect.flags & ChildDeletion) !== NoFlags) {\n      var deletions = fiber.deletions;\n\n      if (deletions !== null) {\n        for (var i = 0; i < deletions.length; i++) {\n          var fiberToDelete = deletions[i];\n          nextEffect = fiberToDelete;\n          commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);\n        }\n\n        {\n          // A fiber was deleted from this parent fiber, but it's still part of\n          // the previous (alternate) parent fiber's list of children. Because\n          // children are a linked list, an earlier sibling that's still alive\n          // will be connected to the deleted fiber via its `alternate`:\n          //\n          //   live fiber\n          //   --alternate--> previous live fiber\n          //   --sibling--> deleted fiber\n          //\n          // We can't disconnect `alternate` on nodes that haven't been deleted\n          // yet, but we can disconnect the `sibling` and `child` pointers.\n          var previousFiber = fiber.alternate;\n\n          if (previousFiber !== null) {\n            var detachedChild = previousFiber.child;\n\n            if (detachedChild !== null) {\n              previousFiber.child = null;\n\n              do {\n                var detachedSibling = detachedChild.sibling;\n                detachedChild.sibling = null;\n                detachedChild = detachedSibling;\n              } while (detachedChild !== null);\n            }\n          }\n        }\n\n        nextEffect = fiber;\n      }\n    }\n\n    if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {\n      ensureCorrectReturnPointer(child, fiber);\n      nextEffect = child;\n    } else {\n      commitPassiveUnmountEffects_complete();\n    }\n  }\n}\n\nfunction commitPassiveUnmountEffects_complete() {\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n\n    if ((fiber.flags & Passive) !== NoFlags) {\n      setCurrentFiber(fiber);\n      commitPassiveUnmountOnFiber(fiber);\n      resetCurrentFiber();\n    }\n\n    var sibling = fiber.sibling;\n\n    if (sibling !== null) {\n      ensureCorrectReturnPointer(sibling, fiber.return);\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction commitPassiveUnmountOnFiber(finishedWork) {\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent:\n      {\n        if ( finishedWork.mode & ProfileMode) {\n          startPassiveEffectTimer();\n          commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);\n          recordPassiveEffectDuration(finishedWork);\n        } else {\n          commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);\n        }\n\n        break;\n      }\n  }\n}\n\nfunction commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {\n  while (nextEffect !== null) {\n    var fiber = nextEffect; // Deletion effects fire in parent -> child order\n    // TODO: Check if fiber has a PassiveStatic flag\n\n    setCurrentFiber(fiber);\n    commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);\n    resetCurrentFiber();\n    var child = fiber.child; // TODO: Only traverse subtree if it has a PassiveStatic flag. (But, if we\n    // do this, still need to handle `deletedTreeCleanUpLevel` correctly.)\n\n    if (child !== null) {\n      ensureCorrectReturnPointer(child, fiber);\n      nextEffect = child;\n    } else {\n      commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);\n    }\n  }\n}\n\nfunction commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n    var sibling = fiber.sibling;\n    var returnFiber = fiber.return;\n\n    {\n      // Recursively traverse the entire deleted tree and clean up fiber fields.\n      // This is more aggressive than ideal, and the long term goal is to only\n      // have to detach the deleted tree at the root.\n      detachFiberAfterEffects(fiber);\n\n      if (fiber === deletedSubtreeRoot) {\n        nextEffect = null;\n        return;\n      }\n    }\n\n    if (sibling !== null) {\n      ensureCorrectReturnPointer(sibling, returnFiber);\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = returnFiber;\n  }\n}\n\nfunction commitPassiveUnmountInsideDeletedTreeOnFiber(current, nearestMountedAncestor) {\n  switch (current.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent:\n      {\n        if ( current.mode & ProfileMode) {\n          startPassiveEffectTimer();\n          commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);\n          recordPassiveEffectDuration(current);\n        } else {\n          commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);\n        }\n\n        break;\n      }\n  }\n}\n\nvar didWarnWrongReturnPointer = false;\n\nfunction ensureCorrectReturnPointer(fiber, expectedReturnFiber) {\n  {\n    if (!didWarnWrongReturnPointer && fiber.return !== expectedReturnFiber) {\n      didWarnWrongReturnPointer = true;\n\n      error('Internal React error: Return pointer is inconsistent ' + 'with parent.');\n    }\n  } // TODO: Remove this assignment once we're confident that it won't break\n  // anything, by checking the warning logs for the above invariant\n\n\n  fiber.return = expectedReturnFiber;\n} // TODO: Reuse reappearLayoutEffects traversal here?\n\nvar COMPONENT_TYPE = 0;\nvar HAS_PSEUDO_CLASS_TYPE = 1;\nvar ROLE_TYPE = 2;\nvar TEST_NAME_TYPE = 3;\nvar TEXT_TYPE = 4;\n\nif (typeof Symbol === 'function' && Symbol.for) {\n  var symbolFor = Symbol.for;\n  COMPONENT_TYPE = symbolFor('selector.component');\n  HAS_PSEUDO_CLASS_TYPE = symbolFor('selector.has_pseudo_class');\n  ROLE_TYPE = symbolFor('selector.role');\n  TEST_NAME_TYPE = symbolFor('selector.test_id');\n  TEXT_TYPE = symbolFor('selector.text');\n}\n\nvar ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;\nfunction isLegacyActEnvironment(fiber) {\n  {\n    // Legacy mode. We preserve the behavior of React 17's act. It assumes an\n    // act environment whenever `jest` is defined, but you can still turn off\n    // spurious warnings by setting IS_REACT_ACT_ENVIRONMENT explicitly\n    // to false.\n    var isReactActEnvironmentGlobal = // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global\n    typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined' ? IS_REACT_ACT_ENVIRONMENT : undefined; // $FlowExpectedError - Flow doesn't know about jest\n\n    var jestIsDefined = typeof jest !== 'undefined';\n    return  jestIsDefined && isReactActEnvironmentGlobal !== false;\n  }\n}\nfunction isConcurrentActEnvironment() {\n  {\n    var isReactActEnvironmentGlobal = // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global\n    typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined' ? IS_REACT_ACT_ENVIRONMENT : undefined;\n\n    if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {\n      // TODO: Include link to relevant documentation page.\n      error('The current testing environment is not configured to support ' + 'act(...)');\n    }\n\n    return isReactActEnvironmentGlobal;\n  }\n}\n\nvar ceil = Math.ceil;\nvar ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher,\n    ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,\n    ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig,\n    ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;\nvar NoContext =\n/*             */\n0;\nvar BatchedContext =\n/*               */\n1;\nvar RenderContext =\n/*                */\n2;\nvar CommitContext =\n/*                */\n4;\nvar RootInProgress = 0;\nvar RootFatalErrored = 1;\nvar RootErrored = 2;\nvar RootSuspended = 3;\nvar RootSuspendedWithDelay = 4;\nvar RootCompleted = 5;\nvar RootDidNotComplete = 6; // Describes where we are in the React execution stack\n\nvar executionContext = NoContext; // The root we're working on\n\nvar workInProgressRoot = null; // The fiber we're working on\n\nvar workInProgress = null; // The lanes we're rendering\n\nvar workInProgressRootRenderLanes = NoLanes; // Stack that allows components to change the render lanes for its subtree\n// This is a superset of the lanes we started working on at the root. The only\n// case where it's different from `workInProgressRootRenderLanes` is when we\n// enter a subtree that is hidden and needs to be unhidden: Suspense and\n// Offscreen component.\n//\n// Most things in the work loop should deal with workInProgressRootRenderLanes.\n// Most things in begin/complete phases should deal with subtreeRenderLanes.\n\nvar subtreeRenderLanes = NoLanes;\nvar subtreeRenderLanesCursor = createCursor(NoLanes); // Whether to root completed, errored, suspended, etc.\n\nvar workInProgressRootExitStatus = RootInProgress; // A fatal error, if one is thrown\n\nvar workInProgressRootFatalError = null; // \"Included\" lanes refer to lanes that were worked on during this render. It's\n// slightly different than `renderLanes` because `renderLanes` can change as you\n// enter and exit an Offscreen tree. This value is the combination of all render\n// lanes for the entire render phase.\n\nvar workInProgressRootIncludedLanes = NoLanes; // The work left over by components that were visited during this render. Only\n// includes unprocessed updates, not work in bailed out children.\n\nvar workInProgressRootSkippedLanes = NoLanes; // Lanes that were updated (in an interleaved event) during this render.\n\nvar workInProgressRootInterleavedUpdatedLanes = NoLanes; // Lanes that were updated during the render phase (*not* an interleaved event).\n\nvar workInProgressRootPingedLanes = NoLanes; // Errors that are thrown during the render phase.\n\nvar workInProgressRootConcurrentErrors = null; // These are errors that we recovered from without surfacing them to the UI.\n// We will log them once the tree commits.\n\nvar workInProgressRootRecoverableErrors = null; // The most recent time we committed a fallback. This lets us ensure a train\n// model where we don't commit new loading states in too quick succession.\n\nvar globalMostRecentFallbackTime = 0;\nvar FALLBACK_THROTTLE_MS = 500; // The absolute time for when we should start giving up on rendering\n// more and prefer CPU suspense heuristics instead.\n\nvar workInProgressRootRenderTargetTime = Infinity; // How long a render is supposed to take before we start following CPU\n// suspense heuristics and opt out of rendering more content.\n\nvar RENDER_TIMEOUT_MS = 500;\n\nfunction resetRenderTimer() {\n  workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;\n}\n\nfunction getRenderTargetTime() {\n  return workInProgressRootRenderTargetTime;\n}\nvar hasUncaughtError = false;\nvar firstUncaughtError = null;\nvar legacyErrorBoundariesThatAlreadyFailed = null; // Only used when enableProfilerNestedUpdateScheduledHook is true;\nvar rootDoesHavePassiveEffects = false;\nvar rootWithPendingPassiveEffects = null;\nvar pendingPassiveEffectsLanes = NoLanes;\nvar pendingPassiveProfilerEffects = [];\n\nvar NESTED_UPDATE_LIMIT = 50;\nvar nestedUpdateCount = 0;\nvar rootWithNestedUpdates = null;\nvar NESTED_PASSIVE_UPDATE_LIMIT = 50;\nvar nestedPassiveUpdateCount = 0; // If two updates are scheduled within the same event, we should treat their\n// event times as simultaneous, even if the actual clock time has advanced\n// between the first and second call.\n\nvar currentEventTime = NoTimestamp;\nvar currentEventTransitionLane = NoLanes;\nfunction getWorkInProgressRoot() {\n  return workInProgressRoot;\n}\nfunction requestEventTime() {\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    // We're inside React, so it's fine to read the actual time.\n    return now();\n  } // We're not inside React, so we may be in the middle of a browser event.\n\n\n  if (currentEventTime !== NoTimestamp) {\n    // Use the same start time for all updates until we enter React again.\n    return currentEventTime;\n  } // This is the first update since React yielded. Compute a new start time.\n\n\n  currentEventTime = now();\n  return currentEventTime;\n}\nfunction requestUpdateLane(fiber) {\n  // Special cases\n  var mode = fiber.mode;\n\n  if ((mode & ConcurrentMode) === NoMode) {\n    return SyncLane;\n  } else if ( (executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {\n    // This is a render phase update. These are not officially supported. The\n    // old behavior is to give this the same \"thread\" (lanes) as\n    // whatever is currently rendering. So if you call `setState` on a component\n    // that happens later in the same render, it will flush. Ideally, we want to\n    // remove the special case and treat them as if they came from an\n    // interleaved event. Regardless, this pattern is not officially supported.\n    // This behavior is only a fallback. The flag only exists until we can roll\n    // out the setState warning, since existing code might accidentally rely on\n    // the current behavior.\n    return pickArbitraryLane(workInProgressRootRenderLanes);\n  }\n\n  var isTransition = requestCurrentTransition() !== NoTransition;\n\n  if (isTransition) {\n    if ( ReactCurrentBatchConfig$2.transition !== null) {\n      var transition = ReactCurrentBatchConfig$2.transition;\n\n      if (!transition._updatedFibers) {\n        transition._updatedFibers = new Set();\n      }\n\n      transition._updatedFibers.add(fiber);\n    } // The algorithm for assigning an update to a lane should be stable for all\n    // updates at the same priority within the same event. To do this, the\n    // inputs to the algorithm must be the same.\n    //\n    // The trick we use is to cache the first of each of these inputs within an\n    // event. Then reset the cached values once we can be sure the event is\n    // over. Our heuristic for that is whenever we enter a concurrent work loop.\n\n\n    if (currentEventTransitionLane === NoLane) {\n      // All transitions within the same event are assigned the same lane.\n      currentEventTransitionLane = claimNextTransitionLane();\n    }\n\n    return currentEventTransitionLane;\n  } // Updates originating inside certain React methods, like flushSync, have\n  // their priority set by tracking it with a context variable.\n  //\n  // The opaque type returned by the host config is internally a lane, so we can\n  // use that directly.\n  // TODO: Move this type conversion to the event priority module.\n\n\n  var updateLane = getCurrentUpdatePriority();\n\n  if (updateLane !== NoLane) {\n    return updateLane;\n  } // This update originated outside React. Ask the host environment for an\n  // appropriate priority, based on the type of event.\n  //\n  // The opaque type returned by the host config is internally a lane, so we can\n  // use that directly.\n  // TODO: Move this type conversion to the event priority module.\n\n\n  var eventLane = getCurrentEventPriority();\n  return eventLane;\n}\n\nfunction requestRetryLane(fiber) {\n  // This is a fork of `requestUpdateLane` designed specifically for Suspense\n  // \"retries\" — a special update that attempts to flip a Suspense boundary\n  // from its placeholder state to its primary/resolved state.\n  // Special cases\n  var mode = fiber.mode;\n\n  if ((mode & ConcurrentMode) === NoMode) {\n    return SyncLane;\n  }\n\n  return claimNextRetryLane();\n}\n\nfunction scheduleUpdateOnFiber(fiber, lane, eventTime) {\n  checkForNestedUpdates();\n  var root = markUpdateLaneFromFiberToRoot(fiber, lane);\n\n  if (root === null) {\n    return null;\n  } // Mark that the root has a pending update.\n\n\n  markRootUpdated(root, lane, eventTime);\n\n  if ((executionContext & RenderContext) !== NoLanes && root === workInProgressRoot) {\n    // This update was dispatched during the render phase. This is a mistake\n    // if the update originates from user space (with the exception of local\n    // hook updates, which are handled differently and don't reach this\n    // function), but there are some internal React features that use this as\n    // an implementation detail, like selective hydration.\n    warnAboutRenderPhaseUpdatesInDEV(fiber); // Track lanes that were updated during the render phase\n  } else {\n\n    warnIfUpdatesNotWrappedWithActDEV(fiber);\n\n    if (root === workInProgressRoot) {\n      // TODO: Consolidate with `isInterleavedUpdate` check\n      // Received an update to a tree that's in the middle of rendering. Mark\n      // that there was an interleaved update work on this root. Unless the\n      // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render\n      // phase update. In that case, we don't treat render phase updates as if\n      // they were interleaved, for backwards compat reasons.\n      if ( (executionContext & RenderContext) === NoContext) {\n        workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);\n      }\n\n      if (workInProgressRootExitStatus === RootSuspendedWithDelay) {\n        // The root already suspended with a delay, which means this render\n        // definitely won't finish. Since we have a new update, let's mark it as\n        // suspended now, right before marking the incoming update. This has the\n        // effect of interrupting the current render and switching to the update.\n        // TODO: Make sure this doesn't override pings that happen while we've\n        // already started rendering.\n        markRootSuspended$1(root, workInProgressRootRenderLanes);\n      }\n    }\n\n    ensureRootIsScheduled(root, eventTime);\n\n    if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.\n    !( ReactCurrentActQueue$1.isBatchingLegacy)) {\n      // Flush the synchronous work now, unless we're already working or inside\n      // a batch. This is intentionally inside scheduleUpdateOnFiber instead of\n      // scheduleCallbackForFiber to preserve the ability to schedule a callback\n      // without immediately flushing it. We only do this for user-initiated\n      // updates, to preserve historical behavior of legacy mode.\n      resetRenderTimer();\n      flushSyncCallbacksOnlyInLegacyMode();\n    }\n  }\n\n  return root;\n}\n// work without treating it as a typical update that originates from an event;\n// e.g. retrying a Suspense boundary isn't an update, but it does schedule work\n// on a fiber.\n\nfunction markUpdateLaneFromFiberToRoot(sourceFiber, lane) {\n  // Update the source fiber's lanes\n  sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);\n  var alternate = sourceFiber.alternate;\n\n  if (alternate !== null) {\n    alternate.lanes = mergeLanes(alternate.lanes, lane);\n  }\n\n  {\n    if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {\n      warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n    }\n  } // Walk the parent path to the root and update the child lanes.\n\n\n  var node = sourceFiber;\n  var parent = sourceFiber.return;\n\n  while (parent !== null) {\n    parent.childLanes = mergeLanes(parent.childLanes, lane);\n    alternate = parent.alternate;\n\n    if (alternate !== null) {\n      alternate.childLanes = mergeLanes(alternate.childLanes, lane);\n    } else {\n      {\n        if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {\n          warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n        }\n      }\n    }\n\n    node = parent;\n    parent = parent.return;\n  }\n\n  if (node.tag === HostRoot) {\n    var root = node.stateNode;\n    return root;\n  } else {\n    return null;\n  }\n}\n\nfunction isInterleavedUpdate(fiber, lane) {\n  return (// TODO: Optimize slightly by comparing to root that fiber belongs to.\n    // Requires some refactoring. Not a big deal though since it's rare for\n    // concurrent apps to have more than a single root.\n    workInProgressRoot !== null && (fiber.mode & ConcurrentMode) !== NoMode && ( // If this is a render phase update (i.e. UNSAFE_componentWillReceiveProps),\n    // then don't treat this as an interleaved update. This pattern is\n    // accompanied by a warning but we haven't fully deprecated it yet. We can\n    // remove once the deferRenderPhaseUpdateToNextBatch flag is enabled.\n     (executionContext & RenderContext) === NoContext)\n  );\n} // Use this function to schedule a task for a root. There's only one task per\n// root; if a task was already scheduled, we'll check to make sure the priority\n// of the existing task is the same as the priority of the next level that the\n// root has work on. This function is called on every update, and right before\n// exiting a task.\n\nfunction ensureRootIsScheduled(root, currentTime) {\n  var existingCallbackNode = root.callbackNode; // Check if any lanes are being starved by other work. If so, mark them as\n  // expired so we know to work on those next.\n\n  markStarvedLanesAsExpired(root, currentTime); // Determine the next lanes to work on, and their priority.\n\n  var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);\n\n  if (nextLanes === NoLanes) {\n    // Special case: There's nothing to work on.\n    if (existingCallbackNode !== null) {\n      cancelCallback$1(existingCallbackNode);\n    }\n\n    root.callbackNode = null;\n    root.callbackPriority = NoLane;\n    return;\n  } // We use the highest priority lane to represent the priority of the callback.\n\n\n  var newCallbackPriority = getHighestPriorityLane(nextLanes); // Check if there's an existing task. We may be able to reuse it.\n\n  var existingCallbackPriority = root.callbackPriority;\n\n  if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a\n  // Scheduler task, rather than an `act` task, cancel it and re-scheduled\n  // on the `act` queue.\n  !( ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {\n    {\n      // If we're going to re-use an existing task, it needs to exist.\n      // Assume that discrete update microtasks are non-cancellable and null.\n      // TODO: Temporary until we confirm this warning is not fired.\n      if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {\n        error('Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.');\n      }\n    } // The priority hasn't changed. We can reuse the existing task. Exit.\n\n\n    return;\n  }\n\n  if (existingCallbackNode != null) {\n    // Cancel the existing callback. We'll schedule a new one below.\n    cancelCallback$1(existingCallbackNode);\n  } // Schedule a new callback.\n\n\n  var newCallbackNode;\n\n  if (newCallbackPriority === SyncLane) {\n    // Special case: Sync React callbacks are scheduled on a special\n    // internal queue\n    if (root.tag === LegacyRoot) {\n      if ( ReactCurrentActQueue$1.isBatchingLegacy !== null) {\n        ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;\n      }\n\n      scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root));\n    } else {\n      scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));\n    }\n\n    {\n      // Flush the queue in an Immediate task.\n      scheduleCallback$1(ImmediatePriority, flushSyncCallbacks);\n    }\n\n    newCallbackNode = null;\n  } else {\n    var schedulerPriorityLevel;\n\n    switch (lanesToEventPriority(nextLanes)) {\n      case DiscreteEventPriority:\n        schedulerPriorityLevel = ImmediatePriority;\n        break;\n\n      case ContinuousEventPriority:\n        schedulerPriorityLevel = UserBlockingPriority;\n        break;\n\n      case DefaultEventPriority:\n        schedulerPriorityLevel = NormalPriority;\n        break;\n\n      case IdleEventPriority:\n        schedulerPriorityLevel = IdlePriority;\n        break;\n\n      default:\n        schedulerPriorityLevel = NormalPriority;\n        break;\n    }\n\n    newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root));\n  }\n\n  root.callbackPriority = newCallbackPriority;\n  root.callbackNode = newCallbackNode;\n} // This is the entry point for every concurrent task, i.e. anything that\n// goes through Scheduler.\n\n\nfunction performConcurrentWorkOnRoot(root, didTimeout) {\n  {\n    resetNestedUpdateFlag();\n  } // Since we know we're in a React event, we can clear the current\n  // event time. The next update will compute a new event time.\n\n\n  currentEventTime = NoTimestamp;\n  currentEventTransitionLane = NoLanes;\n\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    throw new Error('Should not already be working.');\n  } // Flush any pending passive effects before deciding which lanes to work on,\n  // in case they schedule additional work.\n\n\n  var originalCallbackNode = root.callbackNode;\n  var didFlushPassiveEffects = flushPassiveEffects();\n\n  if (didFlushPassiveEffects) {\n    // Something in the passive effect phase may have canceled the current task.\n    // Check if the task node for this root was changed.\n    if (root.callbackNode !== originalCallbackNode) {\n      // The current task was canceled. Exit. We don't need to call\n      // `ensureRootIsScheduled` because the check above implies either that\n      // there's a new task, or that there's no remaining work on this root.\n      return null;\n    }\n  } // Determine the next lanes to work on, using the fields stored\n  // on the root.\n\n\n  var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);\n\n  if (lanes === NoLanes) {\n    // Defensive coding. This is never expected to happen.\n    return null;\n  } // We disable time-slicing in some cases: if the work has been CPU-bound\n  // for too long (\"expired\" work, to prevent starvation), or we're in\n  // sync-updates-by-default mode.\n  // TODO: We only check `didTimeout` defensively, to account for a Scheduler\n  // bug we're still investigating. Once the bug in Scheduler is fixed,\n  // we can remove this, since we track expiration ourselves.\n\n\n  var shouldTimeSlice = !includesBlockingLane(root, lanes) && !includesExpiredLane(root, lanes) && ( !didTimeout);\n  var exitStatus = shouldTimeSlice ? renderRootConcurrent(root, lanes) : renderRootSync(root, lanes);\n\n  if (exitStatus !== RootInProgress) {\n    if (exitStatus === RootErrored) {\n      // If something threw an error, try rendering one more time. We'll\n      // render synchronously to block concurrent data mutations, and we'll\n      // includes all pending updates are included. If it still fails after\n      // the second attempt, we'll give up and commit the resulting tree.\n      var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n\n      if (errorRetryLanes !== NoLanes) {\n        lanes = errorRetryLanes;\n        exitStatus = recoverFromConcurrentError(root, errorRetryLanes);\n      }\n    }\n\n    if (exitStatus === RootFatalErrored) {\n      var fatalError = workInProgressRootFatalError;\n      prepareFreshStack(root, NoLanes);\n      markRootSuspended$1(root, lanes);\n      ensureRootIsScheduled(root, now());\n      throw fatalError;\n    }\n\n    if (exitStatus === RootDidNotComplete) {\n      // The render unwound without completing the tree. This happens in special\n      // cases where need to exit the current render without producing a\n      // consistent tree or committing.\n      //\n      // This should only happen during a concurrent render, not a discrete or\n      // synchronous update. We should have already checked for this when we\n      // unwound the stack.\n      markRootSuspended$1(root, lanes);\n    } else {\n      // The render completed.\n      // Check if this render may have yielded to a concurrent event, and if so,\n      // confirm that any newly rendered stores are consistent.\n      // TODO: It's possible that even a concurrent render may never have yielded\n      // to the main thread, if it was fast enough, or if it expired. We could\n      // skip the consistency check in that case, too.\n      var renderWasConcurrent = !includesBlockingLane(root, lanes);\n      var finishedWork = root.current.alternate;\n\n      if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {\n        // A store was mutated in an interleaved event. Render again,\n        // synchronously, to block further mutations.\n        exitStatus = renderRootSync(root, lanes); // We need to check again if something threw\n\n        if (exitStatus === RootErrored) {\n          var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n\n          if (_errorRetryLanes !== NoLanes) {\n            lanes = _errorRetryLanes;\n            exitStatus = recoverFromConcurrentError(root, _errorRetryLanes); // We assume the tree is now consistent because we didn't yield to any\n            // concurrent events.\n          }\n        }\n\n        if (exitStatus === RootFatalErrored) {\n          var _fatalError = workInProgressRootFatalError;\n          prepareFreshStack(root, NoLanes);\n          markRootSuspended$1(root, lanes);\n          ensureRootIsScheduled(root, now());\n          throw _fatalError;\n        }\n      } // We now have a consistent tree. The next step is either to commit it,\n      // or, if something suspended, wait to commit it after a timeout.\n\n\n      root.finishedWork = finishedWork;\n      root.finishedLanes = lanes;\n      finishConcurrentRender(root, exitStatus, lanes);\n    }\n  }\n\n  ensureRootIsScheduled(root, now());\n\n  if (root.callbackNode === originalCallbackNode) {\n    // The task node scheduled for this root is the same one that's\n    // currently executed. Need to return a continuation.\n    return performConcurrentWorkOnRoot.bind(null, root);\n  }\n\n  return null;\n}\n\nfunction recoverFromConcurrentError(root, errorRetryLanes) {\n  // If an error occurred during hydration, discard server response and fall\n  // back to client side render.\n  // Before rendering again, save the errors from the previous attempt.\n  var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;\n\n  if (isRootDehydrated(root)) {\n    // The shell failed to hydrate. Set a flag to force a client rendering\n    // during the next attempt. To do this, we call prepareFreshStack now\n    // to create the root work-in-progress fiber. This is a bit weird in terms\n    // of factoring, because it relies on renderRootSync not calling\n    // prepareFreshStack again in the call below, which happens because the\n    // root and lanes haven't changed.\n    //\n    // TODO: I think what we should do is set ForceClientRender inside\n    // throwException, like we do for nested Suspense boundaries. The reason\n    // it's here instead is so we can switch to the synchronous work loop, too.\n    // Something to consider for a future refactor.\n    var rootWorkInProgress = prepareFreshStack(root, errorRetryLanes);\n    rootWorkInProgress.flags |= ForceClientRender;\n\n    {\n      errorHydratingContainer(root.containerInfo);\n    }\n  }\n\n  var exitStatus = renderRootSync(root, errorRetryLanes);\n\n  if (exitStatus !== RootErrored) {\n    // Successfully finished rendering on retry\n    // The errors from the failed first attempt have been recovered. Add\n    // them to the collection of recoverable errors. We'll log them in the\n    // commit phase.\n    var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;\n    workInProgressRootRecoverableErrors = errorsFromFirstAttempt; // The errors from the second attempt should be queued after the errors\n    // from the first attempt, to preserve the causal sequence.\n\n    if (errorsFromSecondAttempt !== null) {\n      queueRecoverableErrors(errorsFromSecondAttempt);\n    }\n  }\n\n  return exitStatus;\n}\n\nfunction queueRecoverableErrors(errors) {\n  if (workInProgressRootRecoverableErrors === null) {\n    workInProgressRootRecoverableErrors = errors;\n  } else {\n    workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);\n  }\n}\n\nfunction finishConcurrentRender(root, exitStatus, lanes) {\n  switch (exitStatus) {\n    case RootInProgress:\n    case RootFatalErrored:\n      {\n        throw new Error('Root did not complete. This is a bug in React.');\n      }\n    // Flow knows about invariant, so it complains if I add a break\n    // statement, but eslint doesn't know about invariant, so it complains\n    // if I do. eslint-disable-next-line no-fallthrough\n\n    case RootErrored:\n      {\n        // We should have already attempted to retry this tree. If we reached\n        // this point, it errored again. Commit it.\n        commitRoot(root, workInProgressRootRecoverableErrors);\n        break;\n      }\n\n    case RootSuspended:\n      {\n        markRootSuspended$1(root, lanes); // We have an acceptable loading state. We need to figure out if we\n        // should immediately commit it or wait a bit.\n\n        if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope\n        !shouldForceFlushFallbacksInDEV()) {\n          // This render only included retries, no updates. Throttle committing\n          // retries so that we don't show too many loading states too quickly.\n          var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.\n\n          if (msUntilTimeout > 10) {\n            var nextLanes = getNextLanes(root, NoLanes);\n\n            if (nextLanes !== NoLanes) {\n              // There's additional work on this root.\n              break;\n            }\n\n            var suspendedLanes = root.suspendedLanes;\n\n            if (!isSubsetOfLanes(suspendedLanes, lanes)) {\n              // We should prefer to render the fallback of at the last\n              // suspended level. Ping the last suspended level to try\n              // rendering it again.\n              // FIXME: What if the suspended lanes are Idle? Should not restart.\n              var eventTime = requestEventTime();\n              markRootPinged(root, suspendedLanes);\n              break;\n            } // The render is suspended, it hasn't timed out, and there's no\n            // lower priority work to do. Instead of committing the fallback\n            // immediately, wait for more data to arrive.\n\n\n            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors), msUntilTimeout);\n            break;\n          }\n        } // The work expired. Commit immediately.\n\n\n        commitRoot(root, workInProgressRootRecoverableErrors);\n        break;\n      }\n\n    case RootSuspendedWithDelay:\n      {\n        markRootSuspended$1(root, lanes);\n\n        if (includesOnlyTransitions(lanes)) {\n          // This is a transition, so we should exit without committing a\n          // placeholder and without scheduling a timeout. Delay indefinitely\n          // until we receive more data.\n          break;\n        }\n\n        if (!shouldForceFlushFallbacksInDEV()) {\n          // This is not a transition, but we did trigger an avoided state.\n          // Schedule a placeholder to display after a short delay, using the Just\n          // Noticeable Difference.\n          // TODO: Is the JND optimization worth the added complexity? If this is\n          // the only reason we track the event time, then probably not.\n          // Consider removing.\n          var mostRecentEventTime = getMostRecentEventTime(root, lanes);\n          var eventTimeMs = mostRecentEventTime;\n          var timeElapsedMs = now() - eventTimeMs;\n\n          var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs; // Don't bother with a very short suspense time.\n\n\n          if (_msUntilTimeout > 10) {\n            // Instead of committing the fallback immediately, wait for more data\n            // to arrive.\n            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors), _msUntilTimeout);\n            break;\n          }\n        } // Commit the placeholder.\n\n\n        commitRoot(root, workInProgressRootRecoverableErrors);\n        break;\n      }\n\n    case RootCompleted:\n      {\n        // The work completed. Ready to commit.\n        commitRoot(root, workInProgressRootRecoverableErrors);\n        break;\n      }\n\n    default:\n      {\n        throw new Error('Unknown root exit status.');\n      }\n  }\n}\n\nfunction isRenderConsistentWithExternalStores(finishedWork) {\n  // Search the rendered tree for external store reads, and check whether the\n  // stores were mutated in a concurrent event. Intentionally using an iterative\n  // loop instead of recursion so we can exit early.\n  var node = finishedWork;\n\n  while (true) {\n    if (node.flags & StoreConsistency) {\n      var updateQueue = node.updateQueue;\n\n      if (updateQueue !== null) {\n        var checks = updateQueue.stores;\n\n        if (checks !== null) {\n          for (var i = 0; i < checks.length; i++) {\n            var check = checks[i];\n            var getSnapshot = check.getSnapshot;\n            var renderedValue = check.value;\n\n            try {\n              if (!objectIs(getSnapshot(), renderedValue)) {\n                // Found an inconsistent store.\n                return false;\n              }\n            } catch (error) {\n              // If `getSnapshot` throws, return `false`. This will schedule\n              // a re-render, and the error will be rethrown during render.\n              return false;\n            }\n          }\n        }\n      }\n    }\n\n    var child = node.child;\n\n    if (node.subtreeFlags & StoreConsistency && child !== null) {\n      child.return = node;\n      node = child;\n      continue;\n    }\n\n    if (node === finishedWork) {\n      return true;\n    }\n\n    while (node.sibling === null) {\n      if (node.return === null || node.return === finishedWork) {\n        return true;\n      }\n\n      node = node.return;\n    }\n\n    node.sibling.return = node.return;\n    node = node.sibling;\n  } // Flow doesn't know this is unreachable, but eslint does\n  // eslint-disable-next-line no-unreachable\n\n\n  return true;\n}\n\nfunction markRootSuspended$1(root, suspendedLanes) {\n  // When suspending, we should always exclude lanes that were pinged or (more\n  // rarely, since we try to avoid it) updated during the render phase.\n  // TODO: Lol maybe there's a better way to factor this besides this\n  // obnoxiously named function :)\n  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);\n  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);\n  markRootSuspended(root, suspendedLanes);\n} // This is the entry point for synchronous tasks that don't go\n// through Scheduler\n\n\nfunction performSyncWorkOnRoot(root) {\n  {\n    syncNestedUpdateFlag();\n  }\n\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    throw new Error('Should not already be working.');\n  }\n\n  flushPassiveEffects();\n  var lanes = getNextLanes(root, NoLanes);\n\n  if (!includesSomeLane(lanes, SyncLane)) {\n    // There's no remaining sync work left.\n    ensureRootIsScheduled(root, now());\n    return null;\n  }\n\n  var exitStatus = renderRootSync(root, lanes);\n\n  if (root.tag !== LegacyRoot && exitStatus === RootErrored) {\n    // If something threw an error, try rendering one more time. We'll render\n    // synchronously to block concurrent data mutations, and we'll includes\n    // all pending updates are included. If it still fails after the second\n    // attempt, we'll give up and commit the resulting tree.\n    var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n\n    if (errorRetryLanes !== NoLanes) {\n      lanes = errorRetryLanes;\n      exitStatus = recoverFromConcurrentError(root, errorRetryLanes);\n    }\n  }\n\n  if (exitStatus === RootFatalErrored) {\n    var fatalError = workInProgressRootFatalError;\n    prepareFreshStack(root, NoLanes);\n    markRootSuspended$1(root, lanes);\n    ensureRootIsScheduled(root, now());\n    throw fatalError;\n  }\n\n  if (exitStatus === RootDidNotComplete) {\n    throw new Error('Root did not complete. This is a bug in React.');\n  } // We now have a consistent tree. Because this is a sync render, we\n  // will commit it even if something suspended.\n\n\n  var finishedWork = root.current.alternate;\n  root.finishedWork = finishedWork;\n  root.finishedLanes = lanes;\n  commitRoot(root, workInProgressRootRecoverableErrors); // Before exiting, make sure there's a callback scheduled for the next\n  // pending level.\n\n  ensureRootIsScheduled(root, now());\n  return null;\n}\nfunction batchedUpdates(fn, a) {\n  var prevExecutionContext = executionContext;\n  executionContext |= BatchedContext;\n\n  try {\n    return fn(a);\n  } finally {\n    executionContext = prevExecutionContext; // If there were legacy sync updates, flush them at the end of the outer\n    // most batchedUpdates-like method.\n\n    if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.\n    !( ReactCurrentActQueue$1.isBatchingLegacy)) {\n      resetRenderTimer();\n      flushSyncCallbacksOnlyInLegacyMode();\n    }\n  }\n}\n// Warning, this opts-out of checking the function body.\n\n// eslint-disable-next-line no-redeclare\nfunction flushSync(fn) {\n  // In legacy mode, we flush pending passive effects at the beginning of the\n  // next event, not at the end of the previous one.\n  if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {\n    flushPassiveEffects();\n  }\n\n  var prevExecutionContext = executionContext;\n  executionContext |= BatchedContext;\n  var prevTransition = ReactCurrentBatchConfig$2.transition;\n  var previousPriority = getCurrentUpdatePriority();\n\n  try {\n    ReactCurrentBatchConfig$2.transition = null;\n    setCurrentUpdatePriority(DiscreteEventPriority);\n\n    if (fn) {\n      return fn();\n    } else {\n      return undefined;\n    }\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig$2.transition = prevTransition;\n    executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.\n    // Note that this will happen even if batchedUpdates is higher up\n    // the stack.\n\n    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n      flushSyncCallbacks();\n    }\n  }\n}\nfunction pushRenderLanes(fiber, lanes) {\n  push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);\n  subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);\n  workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);\n}\nfunction popRenderLanes(fiber) {\n  subtreeRenderLanes = subtreeRenderLanesCursor.current;\n  pop(subtreeRenderLanesCursor, fiber);\n}\n\nfunction prepareFreshStack(root, lanes) {\n  root.finishedWork = null;\n  root.finishedLanes = NoLanes;\n  var timeoutHandle = root.timeoutHandle;\n\n  if (timeoutHandle !== noTimeout) {\n    // The root previous suspended and scheduled a timeout to commit a fallback\n    // state. Now that we have additional work, cancel the timeout.\n    root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above\n\n    cancelTimeout(timeoutHandle);\n  }\n\n  if (workInProgress !== null) {\n    var interruptedWork = workInProgress.return;\n\n    while (interruptedWork !== null) {\n      var current = interruptedWork.alternate;\n      unwindInterruptedWork(current, interruptedWork);\n      interruptedWork = interruptedWork.return;\n    }\n  }\n\n  workInProgressRoot = root;\n  var rootWorkInProgress = createWorkInProgress(root.current, null);\n  workInProgress = rootWorkInProgress;\n  workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;\n  workInProgressRootExitStatus = RootInProgress;\n  workInProgressRootFatalError = null;\n  workInProgressRootSkippedLanes = NoLanes;\n  workInProgressRootInterleavedUpdatedLanes = NoLanes;\n  workInProgressRootPingedLanes = NoLanes;\n  workInProgressRootConcurrentErrors = null;\n  workInProgressRootRecoverableErrors = null;\n  enqueueInterleavedUpdates();\n\n  {\n    ReactStrictModeWarnings.discardPendingWarnings();\n  }\n\n  return rootWorkInProgress;\n}\n\nfunction handleError(root, thrownValue) {\n  do {\n    var erroredWork = workInProgress;\n\n    try {\n      // Reset module-level state that was set during the render phase.\n      resetContextDependencies();\n      resetHooksAfterThrow();\n      resetCurrentFiber(); // TODO: I found and added this missing line while investigating a\n      // separate issue. Write a regression test using string refs.\n\n      ReactCurrentOwner$2.current = null;\n\n      if (erroredWork === null || erroredWork.return === null) {\n        // Expected to be working on a non-root fiber. This is a fatal error\n        // because there's no ancestor that can handle it; the root is\n        // supposed to capture all errors that weren't caught by an error\n        // boundary.\n        workInProgressRootExitStatus = RootFatalErrored;\n        workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next\n        // sibling, or the parent if there are no siblings. But since the root\n        // has no siblings nor a parent, we set it to null. Usually this is\n        // handled by `completeUnitOfWork` or `unwindWork`, but since we're\n        // intentionally not calling those, we need set it here.\n        // TODO: Consider calling `unwindWork` to pop the contexts.\n\n        workInProgress = null;\n        return;\n      }\n\n      if (enableProfilerTimer && erroredWork.mode & ProfileMode) {\n        // Record the time spent rendering before an error was thrown. This\n        // avoids inaccurate Profiler durations in the case of a\n        // suspended render.\n        stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);\n      }\n\n      if (enableSchedulingProfiler) {\n        markComponentRenderStopped();\n\n        if (thrownValue !== null && typeof thrownValue === 'object' && typeof thrownValue.then === 'function') {\n          var wakeable = thrownValue;\n          markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);\n        } else {\n          markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);\n        }\n      }\n\n      throwException(root, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);\n      completeUnitOfWork(erroredWork);\n    } catch (yetAnotherThrownValue) {\n      // Something in the return path also threw.\n      thrownValue = yetAnotherThrownValue;\n\n      if (workInProgress === erroredWork && erroredWork !== null) {\n        // If this boundary has already errored, then we had trouble processing\n        // the error. Bubble it to the next boundary.\n        erroredWork = erroredWork.return;\n        workInProgress = erroredWork;\n      } else {\n        erroredWork = workInProgress;\n      }\n\n      continue;\n    } // Return to the normal work loop.\n\n\n    return;\n  } while (true);\n}\n\nfunction pushDispatcher() {\n  var prevDispatcher = ReactCurrentDispatcher$2.current;\n  ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;\n\n  if (prevDispatcher === null) {\n    // The React isomorphic package does not include a default dispatcher.\n    // Instead the first renderer will lazily attach one, in order to give\n    // nicer error messages.\n    return ContextOnlyDispatcher;\n  } else {\n    return prevDispatcher;\n  }\n}\n\nfunction popDispatcher(prevDispatcher) {\n  ReactCurrentDispatcher$2.current = prevDispatcher;\n}\n\nfunction markCommitTimeOfFallback() {\n  globalMostRecentFallbackTime = now();\n}\nfunction markSkippedUpdateLanes(lane) {\n  workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);\n}\nfunction renderDidSuspend() {\n  if (workInProgressRootExitStatus === RootInProgress) {\n    workInProgressRootExitStatus = RootSuspended;\n  }\n}\nfunction renderDidSuspendDelayIfPossible() {\n  if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {\n    workInProgressRootExitStatus = RootSuspendedWithDelay;\n  } // Check if there are updates that we skipped tree that might have unblocked\n  // this render.\n\n\n  if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {\n    // Mark the current render as suspended so that we switch to working on\n    // the updates that were skipped. Usually we only suspend at the end of\n    // the render phase.\n    // TODO: We should probably always mark the root as suspended immediately\n    // (inside this function), since by suspending at the end of the render\n    // phase introduces a potential mistake where we suspend lanes that were\n    // pinged or updated while we were rendering.\n    markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);\n  }\n}\nfunction renderDidError(error) {\n  if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {\n    workInProgressRootExitStatus = RootErrored;\n  }\n\n  if (workInProgressRootConcurrentErrors === null) {\n    workInProgressRootConcurrentErrors = [error];\n  } else {\n    workInProgressRootConcurrentErrors.push(error);\n  }\n} // Called during render to determine if anything has suspended.\n// Returns false if we're not sure.\n\nfunction renderHasNotSuspendedYet() {\n  // If something errored or completed, we can't really be sure,\n  // so those are false.\n  return workInProgressRootExitStatus === RootInProgress;\n}\n\nfunction renderRootSync(root, lanes) {\n  var prevExecutionContext = executionContext;\n  executionContext |= RenderContext;\n  var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack\n  // and prepare a fresh one. Otherwise we'll continue where we left off.\n\n  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n    prepareFreshStack(root, lanes);\n  }\n\n  do {\n    try {\n      workLoopSync();\n      break;\n    } catch (thrownValue) {\n      handleError(root, thrownValue);\n    }\n  } while (true);\n\n  resetContextDependencies();\n  executionContext = prevExecutionContext;\n  popDispatcher(prevDispatcher);\n\n  if (workInProgress !== null) {\n    // This is a sync render, so we should have finished the whole tree.\n    throw new Error('Cannot commit an incomplete root. This error is likely caused by a ' + 'bug in React. Please file an issue.');\n  }\n\n\n  workInProgressRoot = null;\n  workInProgressRootRenderLanes = NoLanes;\n  return workInProgressRootExitStatus;\n} // The work loop is an extremely hot path. Tell Closure not to inline it.\n\n/** @noinline */\n\n\nfunction workLoopSync() {\n  // Already timed out, so perform work without checking if we need to yield.\n  while (workInProgress !== null) {\n    performUnitOfWork(workInProgress);\n  }\n}\n\nfunction renderRootConcurrent(root, lanes) {\n  var prevExecutionContext = executionContext;\n  executionContext |= RenderContext;\n  var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack\n  // and prepare a fresh one. Otherwise we'll continue where we left off.\n\n  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n    resetRenderTimer();\n    prepareFreshStack(root, lanes);\n  }\n\n  do {\n    try {\n      workLoopConcurrent();\n      break;\n    } catch (thrownValue) {\n      handleError(root, thrownValue);\n    }\n  } while (true);\n\n  resetContextDependencies();\n  popDispatcher(prevDispatcher);\n  executionContext = prevExecutionContext;\n\n\n  if (workInProgress !== null) {\n\n    return RootInProgress;\n  } else {\n\n\n    workInProgressRoot = null;\n    workInProgressRootRenderLanes = NoLanes; // Return the final exit status.\n\n    return workInProgressRootExitStatus;\n  }\n}\n/** @noinline */\n\n\nfunction workLoopConcurrent() {\n  // Perform work until Scheduler asks us to yield\n  while (workInProgress !== null && !shouldYield()) {\n    performUnitOfWork(workInProgress);\n  }\n}\n\nfunction performUnitOfWork(unitOfWork) {\n  // The current, flushed, state of this fiber is the alternate. Ideally\n  // nothing should rely on this, but relying on it here means that we don't\n  // need an additional field on the work in progress.\n  var current = unitOfWork.alternate;\n  setCurrentFiber(unitOfWork);\n  var next;\n\n  if ( (unitOfWork.mode & ProfileMode) !== NoMode) {\n    startProfilerTimer(unitOfWork);\n    next = beginWork$1(current, unitOfWork, subtreeRenderLanes);\n    stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);\n  } else {\n    next = beginWork$1(current, unitOfWork, subtreeRenderLanes);\n  }\n\n  resetCurrentFiber();\n  unitOfWork.memoizedProps = unitOfWork.pendingProps;\n\n  if (next === null) {\n    // If this doesn't spawn new work, complete the current work.\n    completeUnitOfWork(unitOfWork);\n  } else {\n    workInProgress = next;\n  }\n\n  ReactCurrentOwner$2.current = null;\n}\n\nfunction completeUnitOfWork(unitOfWork) {\n  // Attempt to complete the current unit of work, then move to the next\n  // sibling. If there are no more siblings, return to the parent fiber.\n  var completedWork = unitOfWork;\n\n  do {\n    // The current, flushed, state of this fiber is the alternate. Ideally\n    // nothing should rely on this, but relying on it here means that we don't\n    // need an additional field on the work in progress.\n    var current = completedWork.alternate;\n    var returnFiber = completedWork.return; // Check if the work completed or if something threw.\n\n    if ((completedWork.flags & Incomplete) === NoFlags) {\n      setCurrentFiber(completedWork);\n      var next = void 0;\n\n      if ( (completedWork.mode & ProfileMode) === NoMode) {\n        next = completeWork(current, completedWork, subtreeRenderLanes);\n      } else {\n        startProfilerTimer(completedWork);\n        next = completeWork(current, completedWork, subtreeRenderLanes); // Update render duration assuming we didn't error.\n\n        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);\n      }\n\n      resetCurrentFiber();\n\n      if (next !== null) {\n        // Completing this fiber spawned new work. Work on that next.\n        workInProgress = next;\n        return;\n      }\n    } else {\n      // This fiber did not complete because something threw. Pop values off\n      // the stack without entering the complete phase. If this is a boundary,\n      // capture values if possible.\n      var _next = unwindWork(current, completedWork); // Because this fiber did not complete, don't reset its lanes.\n\n\n      if (_next !== null) {\n        // If completing this work spawned new work, do that next. We'll come\n        // back here again.\n        // Since we're restarting, remove anything that is not a host effect\n        // from the effect tag.\n        _next.flags &= HostEffectMask;\n        workInProgress = _next;\n        return;\n      }\n\n      if ( (completedWork.mode & ProfileMode) !== NoMode) {\n        // Record the render duration for the fiber that errored.\n        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false); // Include the time spent working on failed children before continuing.\n\n        var actualDuration = completedWork.actualDuration;\n        var child = completedWork.child;\n\n        while (child !== null) {\n          actualDuration += child.actualDuration;\n          child = child.sibling;\n        }\n\n        completedWork.actualDuration = actualDuration;\n      }\n\n      if (returnFiber !== null) {\n        // Mark the parent fiber as incomplete and clear its subtree flags.\n        returnFiber.flags |= Incomplete;\n        returnFiber.subtreeFlags = NoFlags;\n        returnFiber.deletions = null;\n      } else {\n        // We've unwound all the way to the root.\n        workInProgressRootExitStatus = RootDidNotComplete;\n        workInProgress = null;\n        return;\n      }\n    }\n\n    var siblingFiber = completedWork.sibling;\n\n    if (siblingFiber !== null) {\n      // If there is more work to do in this returnFiber, do that next.\n      workInProgress = siblingFiber;\n      return;\n    } // Otherwise, return to the parent\n\n\n    completedWork = returnFiber; // Update the next thing we're working on in case something throws.\n\n    workInProgress = completedWork;\n  } while (completedWork !== null); // We've reached the root.\n\n\n  if (workInProgressRootExitStatus === RootInProgress) {\n    workInProgressRootExitStatus = RootCompleted;\n  }\n}\n\nfunction commitRoot(root, recoverableErrors) {\n  // TODO: This no longer makes any sense. We already wrap the mutation and\n  // layout phases. Should be able to remove.\n  var previousUpdateLanePriority = getCurrentUpdatePriority();\n  var prevTransition = ReactCurrentBatchConfig$2.transition;\n\n  try {\n    ReactCurrentBatchConfig$2.transition = null;\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    commitRootImpl(root, recoverableErrors, previousUpdateLanePriority);\n  } finally {\n    ReactCurrentBatchConfig$2.transition = prevTransition;\n    setCurrentUpdatePriority(previousUpdateLanePriority);\n  }\n\n  return null;\n}\n\nfunction commitRootImpl(root, recoverableErrors, renderPriorityLevel) {\n  do {\n    // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which\n    // means `flushPassiveEffects` will sometimes result in additional\n    // passive effects. So we need to keep flushing in a loop until there are\n    // no more pending effects.\n    // TODO: Might be better if `flushPassiveEffects` did not automatically\n    // flush synchronous work at the end, to avoid factoring hazards like this.\n    flushPassiveEffects();\n  } while (rootWithPendingPassiveEffects !== null);\n\n  flushRenderPhaseStrictModeWarningsInDEV();\n\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    throw new Error('Should not already be working.');\n  }\n\n  var finishedWork = root.finishedWork;\n  var lanes = root.finishedLanes;\n\n  if (finishedWork === null) {\n\n    return null;\n  } else {\n    {\n      if (lanes === NoLanes) {\n        error('root.finishedLanes should not be empty during a commit. This is a ' + 'bug in React.');\n      }\n    }\n  }\n\n  root.finishedWork = null;\n  root.finishedLanes = NoLanes;\n\n  if (finishedWork === root.current) {\n    throw new Error('Cannot commit the same tree as before. This error is likely caused by ' + 'a bug in React. Please file an issue.');\n  } // commitRoot never returns a continuation; it always finishes synchronously.\n  // So we can clear these now to allow a new callback to be scheduled.\n\n\n  root.callbackNode = null;\n  root.callbackPriority = NoLane; // Update the first and last pending times on this root. The new first\n  // pending time is whatever is left on the root fiber.\n\n  var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);\n  markRootFinished(root, remainingLanes);\n\n  if (root === workInProgressRoot) {\n    // We can reset these now that they are finished.\n    workInProgressRoot = null;\n    workInProgress = null;\n    workInProgressRootRenderLanes = NoLanes;\n  } // If there are pending passive effects, schedule a callback to process them.\n  // Do this as early as possible, so it is queued before anything else that\n  // might get scheduled in the commit phase. (See #16714.)\n  // TODO: Delete all other places that schedule the passive effect callback\n  // They're redundant.\n\n\n  if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {\n    if (!rootDoesHavePassiveEffects) {\n      rootDoesHavePassiveEffects = true;\n      scheduleCallback$1(NormalPriority, function () {\n        flushPassiveEffects(); // This render triggered passive effects: release the root cache pool\n        // *after* passive effects fire to avoid freeing a cache pool that may\n        // be referenced by a node in the tree (HostRoot, Cache boundary etc)\n\n        return null;\n      });\n    }\n  } // Check if there are any effects in the whole tree.\n  // TODO: This is left over from the effect list implementation, where we had\n  // to check for the existence of `firstEffect` to satisfy Flow. I think the\n  // only other reason this optimization exists is because it affects profiling.\n  // Reconsider whether this is necessary.\n\n\n  var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;\n  var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;\n\n  if (subtreeHasEffects || rootHasEffect) {\n    var prevTransition = ReactCurrentBatchConfig$2.transition;\n    ReactCurrentBatchConfig$2.transition = null;\n    var previousPriority = getCurrentUpdatePriority();\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    var prevExecutionContext = executionContext;\n    executionContext |= CommitContext; // Reset this to null before calling lifecycles\n\n    ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass\n    // of the effect list for each phase: all mutation effects come before all\n    // layout effects, and so on.\n    // The first phase a \"before mutation\" phase. We use this phase to read the\n    // state of the host tree right before we mutate it. This is where\n    // getSnapshotBeforeUpdate is called.\n\n    var shouldFireAfterActiveInstanceBlur = commitBeforeMutationEffects(root, finishedWork);\n\n    {\n      // Mark the current commit time to be shared by all Profilers in this\n      // batch. This enables them to be grouped later.\n      recordCommitTime();\n    }\n\n\n    commitMutationEffects(root, finishedWork, lanes);\n\n    resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after\n    // the mutation phase, so that the previous tree is still current during\n    // componentWillUnmount, but before the layout phase, so that the finished\n    // work is current during componentDidMount/Update.\n\n    root.current = finishedWork; // The next phase is the layout phase, where we call effects that read\n\n    commitLayoutEffects(finishedWork, root, lanes);\n    // opportunity to paint.\n\n\n    requestPaint();\n    executionContext = prevExecutionContext; // Reset the priority to the previous non-sync value.\n\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig$2.transition = prevTransition;\n  } else {\n    // No effects.\n    root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were\n    // no effects.\n    // TODO: Maybe there's a better way to report this.\n\n    {\n      recordCommitTime();\n    }\n  }\n\n  if (rootDoesHavePassiveEffects) {\n    // This commit has passive effects. Stash a reference to them. But don't\n    // schedule a callback until after flushing layout work.\n    rootDoesHavePassiveEffects = false;\n    rootWithPendingPassiveEffects = root;\n    pendingPassiveEffectsLanes = lanes;\n  } // Read this again, since an effect might have updated it\n\n\n  remainingLanes = root.pendingLanes; // Check if there's remaining work on this root\n  // TODO: This is part of the `componentDidCatch` implementation. Its purpose\n  // is to detect whether something might have called setState inside\n  // `componentDidCatch`. The mechanism is known to be flawed because `setState`\n  // inside `componentDidCatch` is itself flawed — that's why we recommend\n  // `getDerivedStateFromError` instead. However, it could be improved by\n  // checking if remainingLanes includes Sync work, instead of whether there's\n  // any work remaining at all (which would also include stuff like Suspense\n  // retries or transitions). It's been like this for a while, though, so fixing\n  // it probably isn't that urgent.\n\n  if (remainingLanes === NoLanes) {\n    // If there's no remaining work, we can clear the set of already failed\n    // error boundaries.\n    legacyErrorBoundariesThatAlreadyFailed = null;\n  }\n\n  onCommitRoot(finishedWork.stateNode, renderPriorityLevel);\n  // additional work on this root is scheduled.\n\n\n  ensureRootIsScheduled(root, now());\n\n  if (recoverableErrors !== null) {\n    // There were errors during this render, but recovered from them without\n    // needing to surface it to the UI. We log them here.\n    var onRecoverableError = root.onRecoverableError;\n\n    for (var i = 0; i < recoverableErrors.length; i++) {\n      var recoverableError = recoverableErrors[i];\n      onRecoverableError(recoverableError);\n    }\n  }\n\n  if (hasUncaughtError) {\n    hasUncaughtError = false;\n    var error$1 = firstUncaughtError;\n    firstUncaughtError = null;\n    throw error$1;\n  } // If the passive effects are the result of a discrete render, flush them\n  // synchronously at the end of the current task so that the result is\n  // immediately observable. Otherwise, we assume that they are not\n  // order-dependent and do not need to be observed by external systems, so we\n  // can wait until after paint.\n  // TODO: We can optimize this by not scheduling the callback earlier. Since we\n  // currently schedule the callback in multiple places, will wait until those\n  // are consolidated.\n\n\n  if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root.tag !== LegacyRoot) {\n    flushPassiveEffects();\n  } // Read this again, since a passive effect might have updated it\n\n\n  remainingLanes = root.pendingLanes;\n\n  if (includesSomeLane(remainingLanes, SyncLane)) {\n    {\n      markNestedUpdateScheduled();\n    } // Count the number of times the root synchronously re-renders without\n    // finishing. If there are too many, it indicates an infinite update loop.\n\n\n    if (root === rootWithNestedUpdates) {\n      nestedUpdateCount++;\n    } else {\n      nestedUpdateCount = 0;\n      rootWithNestedUpdates = root;\n    }\n  } else {\n    nestedUpdateCount = 0;\n  } // If layout work was scheduled, flush it now.\n\n\n  flushSyncCallbacks();\n\n  return null;\n}\n\nfunction flushPassiveEffects() {\n  // Returns whether passive effects were flushed.\n  // TODO: Combine this check with the one in flushPassiveEFfectsImpl. We should\n  // probably just combine the two functions. I believe they were only separate\n  // in the first place because we used to wrap it with\n  // `Scheduler.runWithPriority`, which accepts a function. But now we track the\n  // priority within React itself, so we can mutate the variable directly.\n  if (rootWithPendingPassiveEffects !== null) {\n    var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);\n    var priority = lowerEventPriority(DefaultEventPriority, renderPriority);\n    var prevTransition = ReactCurrentBatchConfig$2.transition;\n    var previousPriority = getCurrentUpdatePriority();\n\n    try {\n      ReactCurrentBatchConfig$2.transition = null;\n      setCurrentUpdatePriority(priority);\n      return flushPassiveEffectsImpl();\n    } finally {\n      setCurrentUpdatePriority(previousPriority);\n      ReactCurrentBatchConfig$2.transition = prevTransition; // Once passive effects have run for the tree - giving components a\n    }\n  }\n\n  return false;\n}\nfunction enqueuePendingPassiveProfilerEffect(fiber) {\n  {\n    pendingPassiveProfilerEffects.push(fiber);\n\n    if (!rootDoesHavePassiveEffects) {\n      rootDoesHavePassiveEffects = true;\n      scheduleCallback$1(NormalPriority, function () {\n        flushPassiveEffects();\n        return null;\n      });\n    }\n  }\n}\n\nfunction flushPassiveEffectsImpl() {\n  if (rootWithPendingPassiveEffects === null) {\n    return false;\n  }\n\n  var root = rootWithPendingPassiveEffects;\n  rootWithPendingPassiveEffects = null; // TODO: This is sometimes out of sync with rootWithPendingPassiveEffects.\n  // Figure out why and fix it. It's not causing any known issues (probably\n  // because it's only used for profiling), but it's a refactor hazard.\n\n  pendingPassiveEffectsLanes = NoLanes;\n\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    throw new Error('Cannot flush passive effects while already rendering.');\n  }\n\n  var prevExecutionContext = executionContext;\n  executionContext |= CommitContext;\n  commitPassiveUnmountEffects(root.current);\n  commitPassiveMountEffects(root, root.current); // TODO: Move to commitPassiveMountEffects\n\n  {\n    var profilerEffects = pendingPassiveProfilerEffects;\n    pendingPassiveProfilerEffects = [];\n\n    for (var i = 0; i < profilerEffects.length; i++) {\n      var _fiber = profilerEffects[i];\n      commitPassiveEffectDurations(root, _fiber);\n    }\n  }\n\n  executionContext = prevExecutionContext;\n  flushSyncCallbacks(); // If additional passive effects were scheduled, increment a counter. If this\n  // exceeds the limit, we'll fire a warning.\n\n  nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1; // TODO: Move to commitPassiveMountEffects\n\n  onPostCommitRoot(root);\n\n  {\n    var stateNode = root.current.stateNode;\n    stateNode.effectDuration = 0;\n    stateNode.passiveEffectDuration = 0;\n  }\n\n  return true;\n}\n\nfunction isAlreadyFailedLegacyErrorBoundary(instance) {\n  return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);\n}\nfunction markLegacyErrorBoundaryAsFailed(instance) {\n  if (legacyErrorBoundariesThatAlreadyFailed === null) {\n    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);\n  } else {\n    legacyErrorBoundariesThatAlreadyFailed.add(instance);\n  }\n}\n\nfunction prepareToThrowUncaughtError(error) {\n  if (!hasUncaughtError) {\n    hasUncaughtError = true;\n    firstUncaughtError = error;\n  }\n}\n\nvar onUncaughtError = prepareToThrowUncaughtError;\n\nfunction captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {\n  var errorInfo = createCapturedValue(error, sourceFiber);\n  var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);\n  enqueueUpdate(rootFiber, update);\n  var eventTime = requestEventTime();\n  var root = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);\n\n  if (root !== null) {\n    markRootUpdated(root, SyncLane, eventTime);\n    ensureRootIsScheduled(root, eventTime);\n  }\n}\n\nfunction captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {\n  if (sourceFiber.tag === HostRoot) {\n    // Error was thrown at the root. There is no parent, so the root\n    // itself should capture it.\n    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);\n    return;\n  }\n\n  var fiber = null;\n\n  {\n    fiber = sourceFiber.return;\n  }\n\n  while (fiber !== null) {\n    if (fiber.tag === HostRoot) {\n      captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);\n      return;\n    } else if (fiber.tag === ClassComponent) {\n      var ctor = fiber.type;\n      var instance = fiber.stateNode;\n\n      if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {\n        var errorInfo = createCapturedValue(error$1, sourceFiber);\n        var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);\n        enqueueUpdate(fiber, update);\n        var eventTime = requestEventTime();\n        var root = markUpdateLaneFromFiberToRoot(fiber, SyncLane);\n\n        if (root !== null) {\n          markRootUpdated(root, SyncLane, eventTime);\n          ensureRootIsScheduled(root, eventTime);\n        }\n\n        return;\n      }\n    }\n\n    fiber = fiber.return;\n  }\n\n  {\n    // TODO: Until we re-land skipUnmountedBoundaries (see #20147), this warning\n    // will fire for errors that are thrown by destroy functions inside deleted\n    // trees. What it should instead do is propagate the error to the parent of\n    // the deleted tree. In the meantime, do not add this warning to the\n    // allowlist; this is only for our internal use.\n    error('Internal React error: Attempted to capture a commit phase error ' + 'inside a detached tree. This indicates a bug in React. Likely ' + 'causes include deleting the same fiber more than once, committing an ' + 'already-finished tree, or an inconsistent return pointer.\\n\\n' + 'Error message:\\n\\n%s', error$1);\n  }\n}\nfunction pingSuspendedRoot(root, wakeable, pingedLanes) {\n  var pingCache = root.pingCache;\n\n  if (pingCache !== null) {\n    // The wakeable resolved, so we no longer need to memoize, because it will\n    // never be thrown again.\n    pingCache.delete(wakeable);\n  }\n\n  var eventTime = requestEventTime();\n  markRootPinged(root, pingedLanes);\n  warnIfSuspenseResolutionNotWrappedWithActDEV(root);\n\n  if (workInProgressRoot === root && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {\n    // Received a ping at the same priority level at which we're currently\n    // rendering. We might want to restart this render. This should mirror\n    // the logic of whether or not a root suspends once it completes.\n    // TODO: If we're rendering sync either due to Sync, Batched or expired,\n    // we should probably never restart.\n    // If we're suspended with delay, or if it's a retry, we'll always suspend\n    // so we can always restart.\n    if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {\n      // Restart from the root.\n      prepareFreshStack(root, NoLanes);\n    } else {\n      // Even though we can't restart right now, we might get an\n      // opportunity later. So we mark this render as having a ping.\n      workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);\n    }\n  }\n\n  ensureRootIsScheduled(root, eventTime);\n}\n\nfunction retryTimedOutBoundary(boundaryFiber, retryLane) {\n  // The boundary fiber (a Suspense component or SuspenseList component)\n  // previously was rendered in its fallback state. One of the promises that\n  // suspended it has resolved, which means at least part of the tree was\n  // likely unblocked. Try rendering again, at a new lanes.\n  if (retryLane === NoLane) {\n    // TODO: Assign this to `suspenseState.retryLane`? to avoid\n    // unnecessary entanglement?\n    retryLane = requestRetryLane(boundaryFiber);\n  } // TODO: Special case idle priority?\n\n\n  var eventTime = requestEventTime();\n  var root = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);\n\n  if (root !== null) {\n    markRootUpdated(root, retryLane, eventTime);\n    ensureRootIsScheduled(root, eventTime);\n  }\n}\nfunction resolveRetryWakeable(boundaryFiber, wakeable) {\n  var retryLane = NoLane; // Default\n\n  var retryCache;\n\n  {\n    retryCache = boundaryFiber.stateNode;\n  }\n\n  if (retryCache !== null) {\n    // The wakeable resolved, so we no longer need to memoize, because it will\n    // never be thrown again.\n    retryCache.delete(wakeable);\n  }\n\n  retryTimedOutBoundary(boundaryFiber, retryLane);\n} // Computes the next Just Noticeable Difference (JND) boundary.\n// The theory is that a person can't tell the difference between small differences in time.\n// Therefore, if we wait a bit longer than necessary that won't translate to a noticeable\n// difference in the experience. However, waiting for longer might mean that we can avoid\n// showing an intermediate loading state. The longer we have already waited, the harder it\n// is to tell small differences in time. Therefore, the longer we've already waited,\n// the longer we can wait additionally. At some point we have to give up though.\n// We pick a train model where the next boundary commits at a consistent schedule.\n// These particular numbers are vague estimates. We expect to adjust them based on research.\n\nfunction jnd(timeElapsed) {\n  return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;\n}\n\nfunction checkForNestedUpdates() {\n  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {\n    nestedUpdateCount = 0;\n    rootWithNestedUpdates = null;\n    throw new Error('Maximum update depth exceeded. This can happen when a component ' + 'repeatedly calls setState inside componentWillUpdate or ' + 'componentDidUpdate. React limits the number of nested updates to ' + 'prevent infinite loops.');\n  }\n\n  {\n    if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {\n      nestedPassiveUpdateCount = 0;\n\n      error('Maximum update depth exceeded. This can happen when a component ' + \"calls setState inside useEffect, but useEffect either doesn't \" + 'have a dependency array, or one of the dependencies changes on ' + 'every render.');\n    }\n  }\n}\n\nfunction flushRenderPhaseStrictModeWarningsInDEV() {\n  {\n    ReactStrictModeWarnings.flushLegacyContextWarning();\n\n    {\n      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();\n    }\n  }\n}\n\nvar didWarnStateUpdateForNotYetMountedComponent = null;\n\nfunction warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {\n  {\n    if ((executionContext & RenderContext) !== NoContext) {\n      // We let the other warning about render phase updates deal with this one.\n      return;\n    }\n\n    if (!(fiber.mode & ConcurrentMode)) {\n      return;\n    }\n\n    var tag = fiber.tag;\n\n    if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {\n      // Only warn for user-defined components, not internal ones like Suspense.\n      return;\n    } // We show the whole stack but dedupe on the top component's name because\n    // the problematic code almost always lies inside that component.\n\n\n    var componentName = getComponentNameFromFiber(fiber) || 'ReactComponent';\n\n    if (didWarnStateUpdateForNotYetMountedComponent !== null) {\n      if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {\n        return;\n      }\n\n      didWarnStateUpdateForNotYetMountedComponent.add(componentName);\n    } else {\n      didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);\n    }\n\n    var previousFiber = current;\n\n    try {\n      setCurrentFiber(fiber);\n\n      error(\"Can't perform a React state update on a component that hasn't mounted yet. \" + 'This indicates that you have a side-effect in your render function that ' + 'asynchronously later calls tries to update the component. Move this work to ' + 'useEffect instead.');\n    } finally {\n      if (previousFiber) {\n        setCurrentFiber(fiber);\n      } else {\n        resetCurrentFiber();\n      }\n    }\n  }\n}\n\nvar beginWork$1;\n\n{\n  beginWork$1 = beginWork;\n}\n\nvar didWarnAboutUpdateInRender = false;\nvar didWarnAboutUpdateInRenderForAnotherComponent;\n\n{\n  didWarnAboutUpdateInRenderForAnotherComponent = new Set();\n}\n\nfunction warnAboutRenderPhaseUpdatesInDEV(fiber) {\n  {\n    if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {\n      switch (fiber.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent:\n          {\n            var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || 'Unknown'; // Dedupe by the rendering component because it's the one that needs to be fixed.\n\n            var dedupeKey = renderingComponentName;\n\n            if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {\n              didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);\n              var setStateComponentName = getComponentNameFromFiber(fiber) || 'Unknown';\n\n              error('Cannot update a component (`%s`) while rendering a ' + 'different component (`%s`). To locate the bad setState() call inside `%s`, ' + 'follow the stack trace as described in https://reactjs.org/link/setstate-in-render', setStateComponentName, renderingComponentName, renderingComponentName);\n            }\n\n            break;\n          }\n\n        case ClassComponent:\n          {\n            if (!didWarnAboutUpdateInRender) {\n              error('Cannot update during an existing state transition (such as ' + 'within `render`). Render methods should be a pure ' + 'function of props and state.');\n\n              didWarnAboutUpdateInRender = true;\n            }\n\n            break;\n          }\n      }\n    }\n  }\n}\nvar fakeActCallbackNode = {};\n\nfunction scheduleCallback$1(priorityLevel, callback) {\n  {\n    // If we're currently inside an `act` scope, bypass Scheduler and push to\n    // the `act` queue instead.\n    var actQueue = ReactCurrentActQueue$1.current;\n\n    if (actQueue !== null) {\n      actQueue.push(callback);\n      return fakeActCallbackNode;\n    } else {\n      return scheduleCallback(priorityLevel, callback);\n    }\n  }\n}\n\nfunction cancelCallback$1(callbackNode) {\n  if ( callbackNode === fakeActCallbackNode) {\n    return;\n  } // In production, always call Scheduler. This function will be stripped out.\n\n\n  return cancelCallback(callbackNode);\n}\n\nfunction shouldForceFlushFallbacksInDEV() {\n  // Never force flush in production. This function should get stripped out.\n  return  ReactCurrentActQueue$1.current !== null;\n}\n\nfunction warnIfUpdatesNotWrappedWithActDEV(fiber) {\n  {\n    if (fiber.mode & ConcurrentMode) {\n      if (!isConcurrentActEnvironment()) {\n        // Not in an act environment. No need to warn.\n        return;\n      }\n    } else {\n      // Legacy mode has additional cases where we suppress a warning.\n      if (!isLegacyActEnvironment()) {\n        // Not in an act environment. No need to warn.\n        return;\n      }\n\n      if (executionContext !== NoContext) {\n        // Legacy mode doesn't warn if the update is batched, i.e.\n        // batchedUpdates or flushSync.\n        return;\n      }\n\n      if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {\n        // For backwards compatibility with pre-hooks code, legacy mode only\n        // warns for updates that originate from a hook.\n        return;\n      }\n    }\n\n    if (ReactCurrentActQueue$1.current === null) {\n      var previousFiber = current;\n\n      try {\n        setCurrentFiber(fiber);\n\n        error('An update to %s inside a test was not wrapped in act(...).\\n\\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\\n\\n' + 'act(() => {\\n' + '  /* fire events that update state */\\n' + '});\\n' + '/* assert on the output */\\n\\n' + \"This ensures that you're testing the behavior the user would see \" + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act', getComponentNameFromFiber(fiber));\n      } finally {\n        if (previousFiber) {\n          setCurrentFiber(fiber);\n        } else {\n          resetCurrentFiber();\n        }\n      }\n    }\n  }\n}\n\nfunction warnIfSuspenseResolutionNotWrappedWithActDEV(root) {\n  {\n    if (root.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {\n      error('A suspended resource finished loading inside a test, but the event ' + 'was not wrapped in act(...).\\n\\n' + 'When testing, code that resolves suspended data should be wrapped ' + 'into act(...):\\n\\n' + 'act(() => {\\n' + '  /* finish loading suspended data */\\n' + '});\\n' + '/* assert on the output */\\n\\n' + \"This ensures that you're testing the behavior the user would see \" + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act');\n    }\n  }\n}\n\n/* eslint-disable react-internal/prod-error-codes */\nvar resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.\n\nvar failedBoundaries = null;\nvar setRefreshHandler = function (handler) {\n  {\n    resolveFamily = handler;\n  }\n};\nfunction resolveFunctionForHotReloading(type) {\n  {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return type;\n    }\n\n    var family = resolveFamily(type);\n\n    if (family === undefined) {\n      return type;\n    } // Use the latest known implementation.\n\n\n    return family.current;\n  }\n}\nfunction resolveClassForHotReloading(type) {\n  // No implementation differences.\n  return resolveFunctionForHotReloading(type);\n}\nfunction resolveForwardRefForHotReloading(type) {\n  {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return type;\n    }\n\n    var family = resolveFamily(type);\n\n    if (family === undefined) {\n      // Check if we're dealing with a real forwardRef. Don't want to crash early.\n      if (type !== null && type !== undefined && typeof type.render === 'function') {\n        // ForwardRef is special because its resolved .type is an object,\n        // but it's possible that we only have its inner render function in the map.\n        // If that inner render function is different, we'll build a new forwardRef type.\n        var currentRender = resolveFunctionForHotReloading(type.render);\n\n        if (type.render !== currentRender) {\n          var syntheticType = {\n            $$typeof: REACT_FORWARD_REF_TYPE,\n            render: currentRender\n          };\n\n          if (type.displayName !== undefined) {\n            syntheticType.displayName = type.displayName;\n          }\n\n          return syntheticType;\n        }\n      }\n\n      return type;\n    } // Use the latest known implementation.\n\n\n    return family.current;\n  }\n}\nfunction isCompatibleFamilyForHotReloading(fiber, element) {\n  {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return false;\n    }\n\n    var prevType = fiber.elementType;\n    var nextType = element.type; // If we got here, we know types aren't === equal.\n\n    var needsCompareFamilies = false;\n    var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;\n\n    switch (fiber.tag) {\n      case ClassComponent:\n        {\n          if (typeof nextType === 'function') {\n            needsCompareFamilies = true;\n          }\n\n          break;\n        }\n\n      case FunctionComponent:\n        {\n          if (typeof nextType === 'function') {\n            needsCompareFamilies = true;\n          } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n            // We don't know the inner type yet.\n            // We're going to assume that the lazy inner type is stable,\n            // and so it is sufficient to avoid reconciling it away.\n            // We're not going to unwrap or actually use the new lazy type.\n            needsCompareFamilies = true;\n          }\n\n          break;\n        }\n\n      case ForwardRef:\n        {\n          if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {\n            needsCompareFamilies = true;\n          } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n            needsCompareFamilies = true;\n          }\n\n          break;\n        }\n\n      case MemoComponent:\n      case SimpleMemoComponent:\n        {\n          if ($$typeofNextType === REACT_MEMO_TYPE) {\n            // TODO: if it was but can no longer be simple,\n            // we shouldn't set this.\n            needsCompareFamilies = true;\n          } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n            needsCompareFamilies = true;\n          }\n\n          break;\n        }\n\n      default:\n        return false;\n    } // Check if both types have a family and it's the same one.\n\n\n    if (needsCompareFamilies) {\n      // Note: memo() and forwardRef() we'll compare outer rather than inner type.\n      // This means both of them need to be registered to preserve state.\n      // If we unwrapped and compared the inner types for wrappers instead,\n      // then we would risk falsely saying two separate memo(Foo)\n      // calls are equivalent because they wrap the same Foo function.\n      var prevFamily = resolveFamily(prevType);\n\n      if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n}\nfunction markFailedErrorBoundaryForHotReloading(fiber) {\n  {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return;\n    }\n\n    if (typeof WeakSet !== 'function') {\n      return;\n    }\n\n    if (failedBoundaries === null) {\n      failedBoundaries = new WeakSet();\n    }\n\n    failedBoundaries.add(fiber);\n  }\n}\nvar scheduleRefresh = function (root, update) {\n  {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return;\n    }\n\n    var staleFamilies = update.staleFamilies,\n        updatedFamilies = update.updatedFamilies;\n    flushPassiveEffects();\n    flushSync(function () {\n      scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);\n    });\n  }\n};\nvar scheduleRoot = function (root, element) {\n  {\n    if (root.context !== emptyContextObject) {\n      // Super edge case: root has a legacy _renderSubtree context\n      // but we don't know the parentComponent so we can't pass it.\n      // Just ignore. We'll delete this with _renderSubtree code path later.\n      return;\n    }\n\n    flushPassiveEffects();\n    flushSync(function () {\n      updateContainer(element, root, null, null);\n    });\n  }\n};\n\nfunction scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {\n  {\n    var alternate = fiber.alternate,\n        child = fiber.child,\n        sibling = fiber.sibling,\n        tag = fiber.tag,\n        type = fiber.type;\n    var candidateType = null;\n\n    switch (tag) {\n      case FunctionComponent:\n      case SimpleMemoComponent:\n      case ClassComponent:\n        candidateType = type;\n        break;\n\n      case ForwardRef:\n        candidateType = type.render;\n        break;\n    }\n\n    if (resolveFamily === null) {\n      throw new Error('Expected resolveFamily to be set during hot reload.');\n    }\n\n    var needsRender = false;\n    var needsRemount = false;\n\n    if (candidateType !== null) {\n      var family = resolveFamily(candidateType);\n\n      if (family !== undefined) {\n        if (staleFamilies.has(family)) {\n          needsRemount = true;\n        } else if (updatedFamilies.has(family)) {\n          if (tag === ClassComponent) {\n            needsRemount = true;\n          } else {\n            needsRender = true;\n          }\n        }\n      }\n    }\n\n    if (failedBoundaries !== null) {\n      if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {\n        needsRemount = true;\n      }\n    }\n\n    if (needsRemount) {\n      fiber._debugNeedsRemount = true;\n    }\n\n    if (needsRemount || needsRender) {\n      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n    }\n\n    if (child !== null && !needsRemount) {\n      scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);\n    }\n\n    if (sibling !== null) {\n      scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);\n    }\n  }\n}\n\nvar findHostInstancesForRefresh = function (root, families) {\n  {\n    var hostInstances = new Set();\n    var types = new Set(families.map(function (family) {\n      return family.current;\n    }));\n    findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);\n    return hostInstances;\n  }\n};\n\nfunction findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {\n  {\n    var child = fiber.child,\n        sibling = fiber.sibling,\n        tag = fiber.tag,\n        type = fiber.type;\n    var candidateType = null;\n\n    switch (tag) {\n      case FunctionComponent:\n      case SimpleMemoComponent:\n      case ClassComponent:\n        candidateType = type;\n        break;\n\n      case ForwardRef:\n        candidateType = type.render;\n        break;\n    }\n\n    var didMatch = false;\n\n    if (candidateType !== null) {\n      if (types.has(candidateType)) {\n        didMatch = true;\n      }\n    }\n\n    if (didMatch) {\n      // We have a match. This only drills down to the closest host components.\n      // There's no need to search deeper because for the purpose of giving\n      // visual feedback, \"flashing\" outermost parent rectangles is sufficient.\n      findHostInstancesForFiberShallowly(fiber, hostInstances);\n    } else {\n      // If there's no match, maybe there will be one further down in the child tree.\n      if (child !== null) {\n        findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);\n      }\n    }\n\n    if (sibling !== null) {\n      findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);\n    }\n  }\n}\n\nfunction findHostInstancesForFiberShallowly(fiber, hostInstances) {\n  {\n    var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);\n\n    if (foundHostInstances) {\n      return;\n    } // If we didn't find any host children, fallback to closest host parent.\n\n\n    var node = fiber;\n\n    while (true) {\n      switch (node.tag) {\n        case HostComponent:\n          hostInstances.add(node.stateNode);\n          return;\n\n        case HostPortal:\n          hostInstances.add(node.stateNode.containerInfo);\n          return;\n\n        case HostRoot:\n          hostInstances.add(node.stateNode.containerInfo);\n          return;\n      }\n\n      if (node.return === null) {\n        throw new Error('Expected to reach root first.');\n      }\n\n      node = node.return;\n    }\n  }\n}\n\nfunction findChildHostInstancesForFiberShallowly(fiber, hostInstances) {\n  {\n    var node = fiber;\n    var foundHostInstances = false;\n\n    while (true) {\n      if (node.tag === HostComponent) {\n        // We got a match.\n        foundHostInstances = true;\n        hostInstances.add(node.stateNode); // There may still be more, so keep searching.\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n\n      if (node === fiber) {\n        return foundHostInstances;\n      }\n\n      while (node.sibling === null) {\n        if (node.return === null || node.return === fiber) {\n          return foundHostInstances;\n        }\n\n        node = node.return;\n      }\n\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  }\n\n  return false;\n}\n\nvar hasBadMapPolyfill;\n\n{\n  hasBadMapPolyfill = false;\n\n  try {\n    var nonExtensibleObject = Object.preventExtensions({});\n    /* eslint-disable no-new */\n\n    new Map([[nonExtensibleObject, null]]);\n    new Set([nonExtensibleObject]);\n    /* eslint-enable no-new */\n  } catch (e) {\n    // TODO: Consider warning about bad polyfills\n    hasBadMapPolyfill = true;\n  }\n}\n\nfunction FiberNode(tag, pendingProps, key, mode) {\n  // Instance\n  this.tag = tag;\n  this.key = key;\n  this.elementType = null;\n  this.type = null;\n  this.stateNode = null; // Fiber\n\n  this.return = null;\n  this.child = null;\n  this.sibling = null;\n  this.index = 0;\n  this.ref = null;\n  this.pendingProps = pendingProps;\n  this.memoizedProps = null;\n  this.updateQueue = null;\n  this.memoizedState = null;\n  this.dependencies = null;\n  this.mode = mode; // Effects\n\n  this.flags = NoFlags;\n  this.subtreeFlags = NoFlags;\n  this.deletions = null;\n  this.lanes = NoLanes;\n  this.childLanes = NoLanes;\n  this.alternate = null;\n\n  {\n    // Note: The following is done to avoid a v8 performance cliff.\n    //\n    // Initializing the fields below to smis and later updating them with\n    // double values will cause Fibers to end up having separate shapes.\n    // This behavior/bug has something to do with Object.preventExtension().\n    // Fortunately this only impacts DEV builds.\n    // Unfortunately it makes React unusably slow for some applications.\n    // To work around this, initialize the fields below with doubles.\n    //\n    // Learn more about this here:\n    // https://github.com/facebook/react/issues/14365\n    // https://bugs.chromium.org/p/v8/issues/detail?id=8538\n    this.actualDuration = Number.NaN;\n    this.actualStartTime = Number.NaN;\n    this.selfBaseDuration = Number.NaN;\n    this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.\n    // This won't trigger the performance cliff mentioned above,\n    // and it simplifies other profiler code (including DevTools).\n\n    this.actualDuration = 0;\n    this.actualStartTime = -1;\n    this.selfBaseDuration = 0;\n    this.treeBaseDuration = 0;\n  }\n\n  {\n    // This isn't directly used but is handy for debugging internals:\n    this._debugSource = null;\n    this._debugOwner = null;\n    this._debugNeedsRemount = false;\n    this._debugHookTypes = null;\n\n    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {\n      Object.preventExtensions(this);\n    }\n  }\n} // This is a constructor function, rather than a POJO constructor, still\n// please ensure we do the following:\n// 1) Nobody should add any instance methods on this. Instance methods can be\n//    more difficult to predict when they get optimized and they are almost\n//    never inlined properly in static compilers.\n// 2) Nobody should rely on `instanceof Fiber` for type testing. We should\n//    always know when it is a fiber.\n// 3) We might want to experiment with using numeric keys since they are easier\n//    to optimize in a non-JIT environment.\n// 4) We can easily go from a constructor to a createFiber object literal if that\n//    is faster.\n// 5) It should be easy to port this to a C struct and keep a C implementation\n//    compatible.\n\n\nvar createFiber = function (tag, pendingProps, key, mode) {\n  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors\n  return new FiberNode(tag, pendingProps, key, mode);\n};\n\nfunction shouldConstruct$1(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction isSimpleFunctionComponent(type) {\n  return typeof type === 'function' && !shouldConstruct$1(type) && type.defaultProps === undefined;\n}\nfunction resolveLazyComponentTag(Component) {\n  if (typeof Component === 'function') {\n    return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;\n  } else if (Component !== undefined && Component !== null) {\n    var $$typeof = Component.$$typeof;\n\n    if ($$typeof === REACT_FORWARD_REF_TYPE) {\n      return ForwardRef;\n    }\n\n    if ($$typeof === REACT_MEMO_TYPE) {\n      return MemoComponent;\n    }\n  }\n\n  return IndeterminateComponent;\n} // This is used to create an alternate fiber to do work on.\n\nfunction createWorkInProgress(current, pendingProps) {\n  var workInProgress = current.alternate;\n\n  if (workInProgress === null) {\n    // We use a double buffering pooling technique because we know that we'll\n    // only ever need at most two versions of a tree. We pool the \"other\" unused\n    // node that we're free to reuse. This is lazily created to avoid allocating\n    // extra objects for things that are never updated. It also allow us to\n    // reclaim the extra memory if needed.\n    workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);\n    workInProgress.elementType = current.elementType;\n    workInProgress.type = current.type;\n    workInProgress.stateNode = current.stateNode;\n\n    {\n      // DEV-only fields\n      workInProgress._debugSource = current._debugSource;\n      workInProgress._debugOwner = current._debugOwner;\n      workInProgress._debugHookTypes = current._debugHookTypes;\n    }\n\n    workInProgress.alternate = current;\n    current.alternate = workInProgress;\n  } else {\n    workInProgress.pendingProps = pendingProps; // Needed because Blocks store data on type.\n\n    workInProgress.type = current.type; // We already have an alternate.\n    // Reset the effect tag.\n\n    workInProgress.flags = NoFlags; // The effects are no longer valid.\n\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.deletions = null;\n\n    {\n      // We intentionally reset, rather than copy, actualDuration & actualStartTime.\n      // This prevents time from endlessly accumulating in new commits.\n      // This has the downside of resetting values for different priority renders,\n      // But works for yielding (the common case) and should support resuming.\n      workInProgress.actualDuration = 0;\n      workInProgress.actualStartTime = -1;\n    }\n  } // Reset all effects except static ones.\n  // Static effects are not specific to a render.\n\n\n  workInProgress.flags = current.flags & StaticMask;\n  workInProgress.childLanes = current.childLanes;\n  workInProgress.lanes = current.lanes;\n  workInProgress.child = current.child;\n  workInProgress.memoizedProps = current.memoizedProps;\n  workInProgress.memoizedState = current.memoizedState;\n  workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so\n  // it cannot be shared with the current fiber.\n\n  var currentDependencies = current.dependencies;\n  workInProgress.dependencies = currentDependencies === null ? null : {\n    lanes: currentDependencies.lanes,\n    firstContext: currentDependencies.firstContext\n  }; // These will be overridden during the parent's reconciliation\n\n  workInProgress.sibling = current.sibling;\n  workInProgress.index = current.index;\n  workInProgress.ref = current.ref;\n\n  {\n    workInProgress.selfBaseDuration = current.selfBaseDuration;\n    workInProgress.treeBaseDuration = current.treeBaseDuration;\n  }\n\n  {\n    workInProgress._debugNeedsRemount = current._debugNeedsRemount;\n\n    switch (workInProgress.tag) {\n      case IndeterminateComponent:\n      case FunctionComponent:\n      case SimpleMemoComponent:\n        workInProgress.type = resolveFunctionForHotReloading(current.type);\n        break;\n\n      case ClassComponent:\n        workInProgress.type = resolveClassForHotReloading(current.type);\n        break;\n\n      case ForwardRef:\n        workInProgress.type = resolveForwardRefForHotReloading(current.type);\n        break;\n    }\n  }\n\n  return workInProgress;\n} // Used to reuse a Fiber for a second pass.\n\nfunction resetWorkInProgress(workInProgress, renderLanes) {\n  // This resets the Fiber to what createFiber or createWorkInProgress would\n  // have set the values to before during the first pass. Ideally this wouldn't\n  // be necessary but unfortunately many code paths reads from the workInProgress\n  // when they should be reading from current and writing to workInProgress.\n  // We assume pendingProps, index, key, ref, return are still untouched to\n  // avoid doing another reconciliation.\n  // Reset the effect flags but keep any Placement tags, since that's something\n  // that child fiber is setting, not the reconciliation.\n  workInProgress.flags &= StaticMask | Placement; // The effects are no longer valid.\n\n  var current = workInProgress.alternate;\n\n  if (current === null) {\n    // Reset to createFiber's initial values.\n    workInProgress.childLanes = NoLanes;\n    workInProgress.lanes = renderLanes;\n    workInProgress.child = null;\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.memoizedProps = null;\n    workInProgress.memoizedState = null;\n    workInProgress.updateQueue = null;\n    workInProgress.dependencies = null;\n    workInProgress.stateNode = null;\n\n    {\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\n      // actual time across multiple render passes.\n      workInProgress.selfBaseDuration = 0;\n      workInProgress.treeBaseDuration = 0;\n    }\n  } else {\n    // Reset to the cloned values that createWorkInProgress would've.\n    workInProgress.childLanes = current.childLanes;\n    workInProgress.lanes = current.lanes;\n    workInProgress.child = current.child;\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.deletions = null;\n    workInProgress.memoizedProps = current.memoizedProps;\n    workInProgress.memoizedState = current.memoizedState;\n    workInProgress.updateQueue = current.updateQueue; // Needed because Blocks store data on type.\n\n    workInProgress.type = current.type; // Clone the dependencies object. This is mutated during the render phase, so\n    // it cannot be shared with the current fiber.\n\n    var currentDependencies = current.dependencies;\n    workInProgress.dependencies = currentDependencies === null ? null : {\n      lanes: currentDependencies.lanes,\n      firstContext: currentDependencies.firstContext\n    };\n\n    {\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\n      // actual time across multiple render passes.\n      workInProgress.selfBaseDuration = current.selfBaseDuration;\n      workInProgress.treeBaseDuration = current.treeBaseDuration;\n    }\n  }\n\n  return workInProgress;\n}\nfunction createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {\n  var mode;\n\n  if (tag === ConcurrentRoot) {\n    mode = ConcurrentMode;\n\n    if (isStrictMode === true) {\n      mode |= StrictLegacyMode;\n    }\n  } else {\n    mode = NoMode;\n  }\n\n  if ( isDevToolsPresent) {\n    // Always collect profile timings when DevTools are present.\n    // This enables DevTools to start capturing timing at any point–\n    // Without some nodes in the tree having empty base times.\n    mode |= ProfileMode;\n  }\n\n  return createFiber(HostRoot, null, null, mode);\n}\nfunction createFiberFromTypeAndProps(type, // React$ElementType\nkey, pendingProps, owner, mode, lanes) {\n  var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.\n\n  var resolvedType = type;\n\n  if (typeof type === 'function') {\n    if (shouldConstruct$1(type)) {\n      fiberTag = ClassComponent;\n\n      {\n        resolvedType = resolveClassForHotReloading(resolvedType);\n      }\n    } else {\n      {\n        resolvedType = resolveFunctionForHotReloading(resolvedType);\n      }\n    }\n  } else if (typeof type === 'string') {\n    fiberTag = HostComponent;\n  } else {\n    getTag: switch (type) {\n      case REACT_FRAGMENT_TYPE:\n        return createFiberFromFragment(pendingProps.children, mode, lanes, key);\n\n      case REACT_STRICT_MODE_TYPE:\n        fiberTag = Mode;\n        mode |= StrictLegacyMode;\n\n        break;\n\n      case REACT_PROFILER_TYPE:\n        return createFiberFromProfiler(pendingProps, mode, lanes, key);\n\n      case REACT_SUSPENSE_TYPE:\n        return createFiberFromSuspense(pendingProps, mode, lanes, key);\n\n      case REACT_SUSPENSE_LIST_TYPE:\n        return createFiberFromSuspenseList(pendingProps, mode, lanes, key);\n\n      case REACT_OFFSCREEN_TYPE:\n        return createFiberFromOffscreen(pendingProps, mode, lanes, key);\n\n      case REACT_LEGACY_HIDDEN_TYPE:\n\n      // eslint-disable-next-line no-fallthrough\n\n      case REACT_SCOPE_TYPE:\n\n      // eslint-disable-next-line no-fallthrough\n\n      case REACT_CACHE_TYPE:\n\n      // eslint-disable-next-line no-fallthrough\n\n      case REACT_TRACING_MARKER_TYPE:\n\n      // eslint-disable-next-line no-fallthrough\n\n      case REACT_DEBUG_TRACING_MODE_TYPE:\n\n      // eslint-disable-next-line no-fallthrough\n\n      default:\n        {\n          if (typeof type === 'object' && type !== null) {\n            switch (type.$$typeof) {\n              case REACT_PROVIDER_TYPE:\n                fiberTag = ContextProvider;\n                break getTag;\n\n              case REACT_CONTEXT_TYPE:\n                // This is a consumer\n                fiberTag = ContextConsumer;\n                break getTag;\n\n              case REACT_FORWARD_REF_TYPE:\n                fiberTag = ForwardRef;\n\n                {\n                  resolvedType = resolveForwardRefForHotReloading(resolvedType);\n                }\n\n                break getTag;\n\n              case REACT_MEMO_TYPE:\n                fiberTag = MemoComponent;\n                break getTag;\n\n              case REACT_LAZY_TYPE:\n                fiberTag = LazyComponent;\n                resolvedType = null;\n                break getTag;\n            }\n          }\n\n          var info = '';\n\n          {\n            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n              info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and \" + 'named imports.';\n            }\n\n            var ownerName = owner ? getComponentNameFromFiber(owner) : null;\n\n            if (ownerName) {\n              info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n            }\n          }\n\n          throw new Error('Element type is invalid: expected a string (for built-in ' + 'components) or a class/function (for composite components) ' + (\"but got: \" + (type == null ? type : typeof type) + \".\" + info));\n        }\n    }\n  }\n\n  var fiber = createFiber(fiberTag, pendingProps, key, mode);\n  fiber.elementType = type;\n  fiber.type = resolvedType;\n  fiber.lanes = lanes;\n\n  {\n    fiber._debugOwner = owner;\n  }\n\n  return fiber;\n}\nfunction createFiberFromElement(element, mode, lanes) {\n  var owner = null;\n\n  {\n    owner = element._owner;\n  }\n\n  var type = element.type;\n  var key = element.key;\n  var pendingProps = element.props;\n  var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);\n\n  {\n    fiber._debugSource = element._source;\n    fiber._debugOwner = element._owner;\n  }\n\n  return fiber;\n}\nfunction createFiberFromFragment(elements, mode, lanes, key) {\n  var fiber = createFiber(Fragment, elements, key, mode);\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nfunction createFiberFromProfiler(pendingProps, mode, lanes, key) {\n  {\n    if (typeof pendingProps.id !== 'string') {\n      error('Profiler must specify an \"id\" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);\n    }\n  }\n\n  var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);\n  fiber.elementType = REACT_PROFILER_TYPE;\n  fiber.lanes = lanes;\n\n  {\n    fiber.stateNode = {\n      effectDuration: 0,\n      passiveEffectDuration: 0\n    };\n  }\n\n  return fiber;\n}\n\nfunction createFiberFromSuspense(pendingProps, mode, lanes, key) {\n  var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_SUSPENSE_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\nfunction createFiberFromSuspenseList(pendingProps, mode, lanes, key) {\n  var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\nfunction createFiberFromOffscreen(pendingProps, mode, lanes, key) {\n  var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_OFFSCREEN_TYPE;\n  fiber.lanes = lanes;\n  var primaryChildInstance = {};\n  fiber.stateNode = primaryChildInstance;\n  return fiber;\n}\nfunction createFiberFromText(content, mode, lanes) {\n  var fiber = createFiber(HostText, content, null, mode);\n  fiber.lanes = lanes;\n  return fiber;\n}\nfunction createFiberFromPortal(portal, mode, lanes) {\n  var pendingProps = portal.children !== null ? portal.children : [];\n  var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);\n  fiber.lanes = lanes;\n  fiber.stateNode = {\n    containerInfo: portal.containerInfo,\n    pendingChildren: null,\n    // Used by persistent updates\n    implementation: portal.implementation\n  };\n  return fiber;\n} // Used for stashing WIP properties to replay failed work in DEV.\n\nfunction FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError) {\n  this.tag = tag;\n  this.containerInfo = containerInfo;\n  this.pendingChildren = null;\n  this.current = null;\n  this.pingCache = null;\n  this.finishedWork = null;\n  this.timeoutHandle = noTimeout;\n  this.context = null;\n  this.pendingContext = null;\n  this.callbackNode = null;\n  this.callbackPriority = NoLane;\n  this.eventTimes = createLaneMap(NoLanes);\n  this.expirationTimes = createLaneMap(NoTimestamp);\n  this.pendingLanes = NoLanes;\n  this.suspendedLanes = NoLanes;\n  this.pingedLanes = NoLanes;\n  this.expiredLanes = NoLanes;\n  this.mutableReadLanes = NoLanes;\n  this.finishedLanes = NoLanes;\n  this.entangledLanes = NoLanes;\n  this.entanglements = createLaneMap(NoLanes);\n  this.identifierPrefix = identifierPrefix;\n  this.onRecoverableError = onRecoverableError;\n\n  {\n    this.effectDuration = 0;\n    this.passiveEffectDuration = 0;\n  }\n\n  {\n    switch (tag) {\n      case ConcurrentRoot:\n        this._debugRootType = hydrate ? 'hydrateRoot()' : 'createRoot()';\n        break;\n\n      case LegacyRoot:\n        this._debugRootType = hydrate ? 'hydrate()' : 'render()';\n        break;\n    }\n  }\n}\n\nfunction createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, // TODO: We have several of these arguments that are conceptually part of the\n// host config, but because they are passed in at runtime, we have to thread\n// them through the root constructor. Perhaps we should put them all into a\n// single type, like a DynamicHostConfig that is defined by the renderer.\nidentifierPrefix, onRecoverableError, transitionCallbacks) {\n  var root = new FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError);\n  // stateNode is any.\n\n\n  var uninitializedFiber = createHostRootFiber(tag, isStrictMode);\n  root.current = uninitializedFiber;\n  uninitializedFiber.stateNode = root;\n\n  {\n    var _initialState = {\n      element: initialChildren,\n      isDehydrated: hydrate,\n      cache: null,\n      // not enabled yet\n      transitions: null\n    };\n    uninitializedFiber.memoizedState = _initialState;\n  }\n\n  initializeUpdateQueue(uninitializedFiber);\n  return root;\n}\n\nvar ReactVersion = '18.0.0-fc46dba67-20220329';\n\nvar didWarnAboutNestedUpdates;\n\n{\n  didWarnAboutNestedUpdates = false;\n}\n\nfunction getContextForSubtree(parentComponent) {\n  if (!parentComponent) {\n    return emptyContextObject;\n  }\n\n  var fiber = get(parentComponent);\n  var parentContext = findCurrentUnmaskedContext(fiber);\n\n  if (fiber.tag === ClassComponent) {\n    var Component = fiber.type;\n\n    if (isContextProvider(Component)) {\n      return processChildContext(fiber, Component, parentContext);\n    }\n  }\n\n  return parentContext;\n}\n\nfunction createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {\n  var hydrate = false;\n  var initialChildren = null;\n  return createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);\n}\nfunction updateContainer(element, container, parentComponent, callback) {\n  {\n    onScheduleRoot(container, element);\n  }\n\n  var current$1 = container.current;\n  var eventTime = requestEventTime();\n  var lane = requestUpdateLane(current$1);\n\n  var context = getContextForSubtree(parentComponent);\n\n  if (container.context === null) {\n    container.context = context;\n  } else {\n    container.pendingContext = context;\n  }\n\n  {\n    if (isRendering && current !== null && !didWarnAboutNestedUpdates) {\n      didWarnAboutNestedUpdates = true;\n\n      error('Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\\n\\n' + 'Check the render method of %s.', getComponentNameFromFiber(current) || 'Unknown');\n    }\n  }\n\n  var update = createUpdate(eventTime, lane); // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n\n  update.payload = {\n    element: element\n  };\n  callback = callback === undefined ? null : callback;\n\n  if (callback !== null) {\n    {\n      if (typeof callback !== 'function') {\n        error('render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);\n      }\n    }\n\n    update.callback = callback;\n  }\n\n  enqueueUpdate(current$1, update);\n  var root = scheduleUpdateOnFiber(current$1, lane, eventTime);\n\n  if (root !== null) {\n    entangleTransitions(root, current$1, lane);\n  }\n\n  return lane;\n}\nfunction getPublicRootInstance(container) {\n  var containerFiber = container.current;\n\n  if (!containerFiber.child) {\n    return null;\n  }\n\n  switch (containerFiber.child.tag) {\n    case HostComponent:\n      return getPublicInstance(containerFiber.child.stateNode);\n\n    default:\n      return containerFiber.child.stateNode;\n  }\n}\n\nvar shouldErrorImpl = function (fiber) {\n  return null;\n};\n\nfunction shouldError(fiber) {\n  return shouldErrorImpl(fiber);\n}\n\nvar shouldSuspendImpl = function (fiber) {\n  return false;\n};\n\nfunction shouldSuspend(fiber) {\n  return shouldSuspendImpl(fiber);\n}\nvar overrideHookState = null;\nvar overrideHookStateDeletePath = null;\nvar overrideHookStateRenamePath = null;\nvar overrideProps = null;\nvar overridePropsDeletePath = null;\nvar overridePropsRenamePath = null;\nvar scheduleUpdate = null;\nvar setErrorHandler = null;\nvar setSuspenseHandler = null;\n\n{\n  var copyWithDeleteImpl = function (obj, path, index) {\n    var key = path[index];\n    var updated = isArray(obj) ? obj.slice() : assign({}, obj);\n\n    if (index + 1 === path.length) {\n      if (isArray(updated)) {\n        updated.splice(key, 1);\n      } else {\n        delete updated[key];\n      }\n\n      return updated;\n    } // $FlowFixMe number or string is fine here\n\n\n    updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);\n    return updated;\n  };\n\n  var copyWithDelete = function (obj, path) {\n    return copyWithDeleteImpl(obj, path, 0);\n  };\n\n  var copyWithRenameImpl = function (obj, oldPath, newPath, index) {\n    var oldKey = oldPath[index];\n    var updated = isArray(obj) ? obj.slice() : assign({}, obj);\n\n    if (index + 1 === oldPath.length) {\n      var newKey = newPath[index]; // $FlowFixMe number or string is fine here\n\n      updated[newKey] = updated[oldKey];\n\n      if (isArray(updated)) {\n        updated.splice(oldKey, 1);\n      } else {\n        delete updated[oldKey];\n      }\n    } else {\n      // $FlowFixMe number or string is fine here\n      updated[oldKey] = copyWithRenameImpl( // $FlowFixMe number or string is fine here\n      obj[oldKey], oldPath, newPath, index + 1);\n    }\n\n    return updated;\n  };\n\n  var copyWithRename = function (obj, oldPath, newPath) {\n    if (oldPath.length !== newPath.length) {\n      warn('copyWithRename() expects paths of the same length');\n\n      return;\n    } else {\n      for (var i = 0; i < newPath.length - 1; i++) {\n        if (oldPath[i] !== newPath[i]) {\n          warn('copyWithRename() expects paths to be the same except for the deepest key');\n\n          return;\n        }\n      }\n    }\n\n    return copyWithRenameImpl(obj, oldPath, newPath, 0);\n  };\n\n  var copyWithSetImpl = function (obj, path, index, value) {\n    if (index >= path.length) {\n      return value;\n    }\n\n    var key = path[index];\n    var updated = isArray(obj) ? obj.slice() : assign({}, obj); // $FlowFixMe number or string is fine here\n\n    updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);\n    return updated;\n  };\n\n  var copyWithSet = function (obj, path, value) {\n    return copyWithSetImpl(obj, path, 0, value);\n  };\n\n  var findHook = function (fiber, id) {\n    // For now, the \"id\" of stateful hooks is just the stateful hook index.\n    // This may change in the future with e.g. nested hooks.\n    var currentHook = fiber.memoizedState;\n\n    while (currentHook !== null && id > 0) {\n      currentHook = currentHook.next;\n      id--;\n    }\n\n    return currentHook;\n  }; // Support DevTools editable values for useState and useReducer.\n\n\n  overrideHookState = function (fiber, id, path, value) {\n    var hook = findHook(fiber, id);\n\n    if (hook !== null) {\n      var newState = copyWithSet(hook.memoizedState, path, value);\n      hook.memoizedState = newState;\n      hook.baseState = newState; // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n\n      fiber.memoizedProps = assign({}, fiber.memoizedProps);\n      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n    }\n  };\n\n  overrideHookStateDeletePath = function (fiber, id, path) {\n    var hook = findHook(fiber, id);\n\n    if (hook !== null) {\n      var newState = copyWithDelete(hook.memoizedState, path);\n      hook.memoizedState = newState;\n      hook.baseState = newState; // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n\n      fiber.memoizedProps = assign({}, fiber.memoizedProps);\n      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n    }\n  };\n\n  overrideHookStateRenamePath = function (fiber, id, oldPath, newPath) {\n    var hook = findHook(fiber, id);\n\n    if (hook !== null) {\n      var newState = copyWithRename(hook.memoizedState, oldPath, newPath);\n      hook.memoizedState = newState;\n      hook.baseState = newState; // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n\n      fiber.memoizedProps = assign({}, fiber.memoizedProps);\n      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n    }\n  }; // Support DevTools props for function components, forwardRef, memo, host components, etc.\n\n\n  overrideProps = function (fiber, path, value) {\n    fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);\n\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n\n    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n  };\n\n  overridePropsDeletePath = function (fiber, path) {\n    fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);\n\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n\n    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n  };\n\n  overridePropsRenamePath = function (fiber, oldPath, newPath) {\n    fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);\n\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n\n    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n  };\n\n  scheduleUpdate = function (fiber) {\n    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n  };\n\n  setErrorHandler = function (newShouldErrorImpl) {\n    shouldErrorImpl = newShouldErrorImpl;\n  };\n\n  setSuspenseHandler = function (newShouldSuspendImpl) {\n    shouldSuspendImpl = newShouldSuspendImpl;\n  };\n}\n\nfunction findHostInstanceByFiber(fiber) {\n  var hostFiber = findCurrentHostFiber(fiber);\n\n  if (hostFiber === null) {\n    return null;\n  }\n\n  return hostFiber.stateNode;\n}\n\nfunction emptyFindFiberByHostInstance(instance) {\n  return null;\n}\n\nfunction getCurrentFiberForDevTools() {\n  return current;\n}\n\nfunction injectIntoDevTools(devToolsConfig) {\n  var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;\n  var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n  return injectInternals({\n    bundleType: devToolsConfig.bundleType,\n    version: devToolsConfig.version,\n    rendererPackageName: devToolsConfig.rendererPackageName,\n    rendererConfig: devToolsConfig.rendererConfig,\n    overrideHookState: overrideHookState,\n    overrideHookStateDeletePath: overrideHookStateDeletePath,\n    overrideHookStateRenamePath: overrideHookStateRenamePath,\n    overrideProps: overrideProps,\n    overridePropsDeletePath: overridePropsDeletePath,\n    overridePropsRenamePath: overridePropsRenamePath,\n    setErrorHandler: setErrorHandler,\n    setSuspenseHandler: setSuspenseHandler,\n    scheduleUpdate: scheduleUpdate,\n    currentDispatcherRef: ReactCurrentDispatcher,\n    findHostInstanceByFiber: findHostInstanceByFiber,\n    findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,\n    // React Refresh\n    findHostInstancesForRefresh:  findHostInstancesForRefresh ,\n    scheduleRefresh:  scheduleRefresh ,\n    scheduleRoot:  scheduleRoot ,\n    setRefreshHandler:  setRefreshHandler ,\n    // Enables DevTools to append owner stacks to error messages in DEV mode.\n    getCurrentFiber:  getCurrentFiberForDevTools ,\n    // Enables DevTools to detect reconciler version rather than renderer version\n    // which may not match for third party renderers.\n    reconcilerVersion: ReactVersion\n  });\n}\n\nvar act = React.unstable_act; // TODO: Remove from public bundle\n\nvar defaultTestOptions = {\n  createNodeMock: function () {\n    return null;\n  }\n};\n\nfunction toJSON(inst) {\n  if (inst.isHidden) {\n    // Omit timed out children from output entirely. This seems like the least\n    // surprising behavior. We could perhaps add a separate API that includes\n    // them, if it turns out people need it.\n    return null;\n  }\n\n  switch (inst.tag) {\n    case 'TEXT':\n      return inst.text;\n\n    case 'INSTANCE':\n      {\n        /* eslint-disable no-unused-vars */\n        // We don't include the `children` prop in JSON.\n        // Instead, we will include the actual rendered children.\n        var _inst$props = inst.props,\n            children = _inst$props.children,\n            props = _objectWithoutPropertiesLoose(_inst$props, [\"children\"]);\n        /* eslint-enable */\n\n\n        var renderedChildren = null;\n\n        if (inst.children && inst.children.length) {\n          for (var i = 0; i < inst.children.length; i++) {\n            var renderedChild = toJSON(inst.children[i]);\n\n            if (renderedChild !== null) {\n              if (renderedChildren === null) {\n                renderedChildren = [renderedChild];\n              } else {\n                renderedChildren.push(renderedChild);\n              }\n            }\n          }\n        }\n\n        var json = {\n          type: inst.type,\n          props: props,\n          children: renderedChildren\n        };\n        Object.defineProperty(json, '$$typeof', {\n          value: Symbol.for('react.test.json')\n        });\n        return json;\n      }\n\n    default:\n      throw new Error(\"Unexpected node type in toJSON: \" + inst.tag);\n  }\n}\n\nfunction childrenToTree(node) {\n  if (!node) {\n    return null;\n  }\n\n  var children = nodeAndSiblingsArray(node);\n\n  if (children.length === 0) {\n    return null;\n  } else if (children.length === 1) {\n    return toTree(children[0]);\n  }\n\n  return flatten(children.map(toTree));\n}\n\nfunction nodeAndSiblingsArray(nodeWithSibling) {\n  var array = [];\n  var node = nodeWithSibling;\n\n  while (node != null) {\n    array.push(node);\n    node = node.sibling;\n  }\n\n  return array;\n}\n\nfunction flatten(arr) {\n  var result = [];\n  var stack = [{\n    i: 0,\n    array: arr\n  }];\n\n  while (stack.length) {\n    var n = stack.pop();\n\n    while (n.i < n.array.length) {\n      var el = n.array[n.i];\n      n.i += 1;\n\n      if (isArray(el)) {\n        stack.push(n);\n        stack.push({\n          i: 0,\n          array: el\n        });\n        break;\n      }\n\n      result.push(el);\n    }\n  }\n\n  return result;\n}\n\nfunction toTree(node) {\n  if (node == null) {\n    return null;\n  }\n\n  switch (node.tag) {\n    case HostRoot:\n      return childrenToTree(node.child);\n\n    case HostPortal:\n      return childrenToTree(node.child);\n\n    case ClassComponent:\n      return {\n        nodeType: 'component',\n        type: node.type,\n        props: assign({}, node.memoizedProps),\n        instance: node.stateNode,\n        rendered: childrenToTree(node.child)\n      };\n\n    case FunctionComponent:\n    case SimpleMemoComponent:\n      return {\n        nodeType: 'component',\n        type: node.type,\n        props: assign({}, node.memoizedProps),\n        instance: null,\n        rendered: childrenToTree(node.child)\n      };\n\n    case HostComponent:\n      {\n        return {\n          nodeType: 'host',\n          type: node.type,\n          props: assign({}, node.memoizedProps),\n          instance: null,\n          // TODO: use createNodeMock here somehow?\n          rendered: flatten(nodeAndSiblingsArray(node.child).map(toTree))\n        };\n      }\n\n    case HostText:\n      return node.stateNode.text;\n\n    case Fragment:\n    case ContextProvider:\n    case ContextConsumer:\n    case Mode:\n    case Profiler:\n    case ForwardRef:\n    case MemoComponent:\n    case IncompleteClassComponent:\n    case ScopeComponent:\n      return childrenToTree(node.child);\n\n    default:\n      throw new Error(\"toTree() does not yet know how to handle nodes with tag=\" + node.tag);\n  }\n}\n\nvar validWrapperTypes = new Set([FunctionComponent, ClassComponent, HostComponent, ForwardRef, MemoComponent, SimpleMemoComponent, // Normally skipped, but used when there's more than one root child.\nHostRoot]);\n\nfunction getChildren(parent) {\n  var children = [];\n  var startingNode = parent;\n  var node = startingNode;\n\n  if (node.child === null) {\n    return children;\n  }\n\n  node.child.return = node;\n  node = node.child;\n\n  outer: while (true) {\n    var descend = false;\n\n    if (validWrapperTypes.has(node.tag)) {\n      children.push(wrapFiber(node));\n    } else if (node.tag === HostText) {\n      {\n        checkPropStringCoercion(node.memoizedProps, 'memoizedProps');\n      }\n\n      children.push('' + node.memoizedProps);\n    } else {\n      descend = true;\n    }\n\n    if (descend && node.child !== null) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n\n    while (node.sibling === null) {\n      if (node.return === startingNode) {\n        break outer;\n      }\n\n      node = node.return;\n    }\n\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n\n  return children;\n}\n\nvar ReactTestInstance = /*#__PURE__*/function () {\n  var _proto = ReactTestInstance.prototype;\n\n  _proto._currentFiber = function _currentFiber() {\n    // Throws if this component has been unmounted.\n    var fiber = findCurrentFiberUsingSlowPath(this._fiber);\n\n    if (fiber === null) {\n      throw new Error(\"Can't read from currently-mounting component. This error is likely \" + 'caused by a bug in React. Please file an issue.');\n    }\n\n    return fiber;\n  };\n\n  function ReactTestInstance(fiber) {\n    if (!validWrapperTypes.has(fiber.tag)) {\n      throw new Error(\"Unexpected object passed to ReactTestInstance constructor (tag: \" + fiber.tag + \"). \" + 'This is probably a bug in React.');\n    }\n\n    this._fiber = fiber;\n  }\n\n  // Custom search functions\n  _proto.find = function find(predicate) {\n    return expectOne(this.findAll(predicate, {\n      deep: false\n    }), \"matching custom predicate: \" + predicate.toString());\n  };\n\n  _proto.findByType = function findByType(type) {\n    return expectOne(this.findAllByType(type, {\n      deep: false\n    }), \"with node type: \\\"\" + (getComponentNameFromType(type) || 'Unknown') + \"\\\"\");\n  };\n\n  _proto.findByProps = function findByProps(props) {\n    return expectOne(this.findAllByProps(props, {\n      deep: false\n    }), \"with props: \" + JSON.stringify(props));\n  };\n\n  _proto.findAll = function findAll(predicate) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return _findAll(this, predicate, options);\n  };\n\n  _proto.findAllByType = function findAllByType(type) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return _findAll(this, function (node) {\n      return node.type === type;\n    }, options);\n  };\n\n  _proto.findAllByProps = function findAllByProps(props) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return _findAll(this, function (node) {\n      return node.props && propsMatch(node.props, props);\n    }, options);\n  };\n\n  _createClass(ReactTestInstance, [{\n    key: \"instance\",\n    get: function () {\n      if (this._fiber.tag === HostComponent) {\n        return getPublicInstance(this._fiber.stateNode);\n      } else {\n        return this._fiber.stateNode;\n      }\n    }\n  }, {\n    key: \"type\",\n    get: function () {\n      return this._fiber.type;\n    }\n  }, {\n    key: \"props\",\n    get: function () {\n      return this._currentFiber().memoizedProps;\n    }\n  }, {\n    key: \"parent\",\n    get: function () {\n      var parent = this._fiber.return;\n\n      while (parent !== null) {\n        if (validWrapperTypes.has(parent.tag)) {\n          if (parent.tag === HostRoot) {\n            // Special case: we only \"materialize\" instances for roots\n            // if they have more than a single child. So we'll check that now.\n            if (getChildren(parent).length < 2) {\n              return null;\n            }\n          }\n\n          return wrapFiber(parent);\n        }\n\n        parent = parent.return;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"children\",\n    get: function () {\n      return getChildren(this._currentFiber());\n    }\n  }]);\n\n  return ReactTestInstance;\n}();\n\nfunction _findAll(root, predicate, options) {\n  var deep = options ? options.deep : true;\n  var results = [];\n\n  if (predicate(root)) {\n    results.push(root);\n\n    if (!deep) {\n      return results;\n    }\n  }\n\n  root.children.forEach(function (child) {\n    if (typeof child === 'string') {\n      return;\n    }\n\n    results.push.apply(results, _findAll(child, predicate, options));\n  });\n  return results;\n}\n\nfunction expectOne(all, message) {\n  if (all.length === 1) {\n    return all[0];\n  }\n\n  var prefix = all.length === 0 ? 'No instances found ' : \"Expected 1 but found \" + all.length + \" instances \";\n  throw new Error(prefix + message);\n}\n\nfunction propsMatch(props, filter) {\n  for (var key in filter) {\n    if (props[key] !== filter[key]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction onRecoverableError(error$1) {\n  // TODO: Expose onRecoverableError option to userspace\n  // eslint-disable-next-line react-internal/no-production-logging, react-internal/warning-args\n  error(error$1);\n}\n\nfunction create(element, options) {\n  var createNodeMock = defaultTestOptions.createNodeMock;\n  var isConcurrent = false;\n  var isStrictMode = false;\n  var concurrentUpdatesByDefault = null;\n\n  if (typeof options === 'object' && options !== null) {\n    if (typeof options.createNodeMock === 'function') {\n      createNodeMock = options.createNodeMock;\n    }\n\n    if (options.unstable_isConcurrent === true) {\n      isConcurrent = true;\n    }\n\n    if (options.unstable_strictMode === true) {\n      isStrictMode = true;\n    }\n  }\n\n  var container = {\n    children: [],\n    createNodeMock: createNodeMock,\n    tag: 'CONTAINER'\n  };\n  var root = createContainer(container, isConcurrent ? ConcurrentRoot : LegacyRoot, null, isStrictMode, concurrentUpdatesByDefault, '', onRecoverableError);\n\n  if (root == null) {\n    throw new Error('something went wrong');\n  }\n\n  updateContainer(element, root, null, null);\n  var entry = {\n    _Scheduler: Scheduler,\n    root: undefined,\n    // makes flow happy\n    // we define a 'getter' for 'root' below using 'Object.defineProperty'\n    toJSON: function () {\n      if (root == null || root.current == null || container == null) {\n        return null;\n      }\n\n      if (container.children.length === 0) {\n        return null;\n      }\n\n      if (container.children.length === 1) {\n        return toJSON(container.children[0]);\n      }\n\n      if (container.children.length === 2 && container.children[0].isHidden === true && container.children[1].isHidden === false) {\n        // Omit timed out children from output entirely, including the fact that we\n        // temporarily wrap fallback and timed out children in an array.\n        return toJSON(container.children[1]);\n      }\n\n      var renderedChildren = null;\n\n      if (container.children && container.children.length) {\n        for (var i = 0; i < container.children.length; i++) {\n          var renderedChild = toJSON(container.children[i]);\n\n          if (renderedChild !== null) {\n            if (renderedChildren === null) {\n              renderedChildren = [renderedChild];\n            } else {\n              renderedChildren.push(renderedChild);\n            }\n          }\n        }\n      }\n\n      return renderedChildren;\n    },\n    toTree: function () {\n      if (root == null || root.current == null) {\n        return null;\n      }\n\n      return toTree(root.current);\n    },\n    update: function (newElement) {\n      if (root == null || root.current == null) {\n        return;\n      }\n\n      updateContainer(newElement, root, null, null);\n    },\n    unmount: function () {\n      if (root == null || root.current == null) {\n        return;\n      }\n\n      updateContainer(null, root, null, null);\n      container = null;\n      root = null;\n    },\n    getInstance: function () {\n      if (root == null || root.current == null) {\n        return null;\n      }\n\n      return getPublicRootInstance(root);\n    },\n    unstable_flushSync: flushSync\n  };\n  Object.defineProperty(entry, 'root', {\n    configurable: true,\n    enumerable: true,\n    get: function () {\n      if (root === null) {\n        throw new Error(\"Can't access .root on unmounted test renderer\");\n      }\n\n      var children = getChildren(root.current);\n\n      if (children.length === 0) {\n        throw new Error(\"Can't access .root on unmounted test renderer\");\n      } else if (children.length === 1) {\n        // Normally, we skip the root and just give you the child.\n        return children[0];\n      } else {\n        // However, we give you the root if there's more than one root child.\n        // We could make this the behavior for all cases but it would be a breaking change.\n        return wrapFiber(root.current);\n      }\n    }\n  });\n  return entry;\n}\n\nvar fiberToWrapper = new WeakMap();\n\nfunction wrapFiber(fiber) {\n  var wrapper = fiberToWrapper.get(fiber);\n\n  if (wrapper === undefined && fiber.alternate !== null) {\n    wrapper = fiberToWrapper.get(fiber.alternate);\n  }\n\n  if (wrapper === undefined) {\n    wrapper = new ReactTestInstance(fiber);\n    fiberToWrapper.set(fiber, wrapper);\n  }\n\n  return wrapper;\n} // Enable ReactTestRenderer to be used to test DevTools integration.\n\n\ninjectIntoDevTools({\n  findFiberByHostInstance: function () {\n    throw new Error('TestRenderer does not support findFiberByHostInstance()');\n  },\n  bundleType:  1 ,\n  version: ReactVersion,\n  rendererPackageName: 'react-test-renderer'\n});\n\nexports._Scheduler = Scheduler;\nexports.act = act;\nexports.create = create;\nexports.unstable_batchedUpdates = batchedUpdates;\n  })();\n}\n"]},"metadata":{},"sourceType":"script"}